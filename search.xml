<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[GENERIC]知识总结</title>
    <url>/2022/01/01/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%5BGENERIC%5D%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1>知识总结</h1>
<h2 id="1-AI">1. AI</h2>
<h3 id="寻路">寻路</h3>
<p><a href="https://zhuanlan.zhihu.com/p/54510444">路径规划之 A* 算法</a></p>
<p><a href="https://blog.csdn.net/tkokof1/article/details/111297299">[译]寻路优化</a></p>
<p><a href="https://www.cnblogs.com/KillerAery/p/12242445.html">JPS/JPS+ 寻路算法</a></p>
<p><a href="http://www.aisharing.com/archives/80">在AI寻路决策中运用势力图（Influence Map）</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/362500376">LPA* 与 D* Lite</a></p>
<p><a href="https://wo1fsea.github.io/2016/08/21/A_Quick_Introduction_to_NavMesh/">NavMesh 生成算法</a></p>
<blockquote>
<p>A* 的估价：设起点为 S、终点为 T，可以选择 D0 * ManhattanDist(S, T) + D1 * abs( Cross(Se, Te) )</p>
<p>其中 D0 = 2，D1 = 0.001</p>
</blockquote>
<h2 id="2-动画">2. 动画</h2>
<h3 id="骨骼动画">骨骼动画</h3>
<p><a href="https://www.bearchild.top/2021/11/27/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%8A%A8%E7%94%BB/%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB%E5%8E%9F%E7%90%86/">骨骼动画原理</a></p>
<h2 id="3-Gameplay">3. Gameplay</h2>
<h3 id="基础">基础</h3>
<p><a href="https://harttle.land/effective-cpp.html">Effective C++</a></p>
<h3 id="架构">架构</h3>
<p><a href="https://blog.codingnow.com/2017/06/overwatch_ecs.html">浅谈《守望先锋》中的 ECS 构架</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/270927422">漫谈Entity Component System (ECS)</a></p>
<h2 id="4-工具流">4. 工具流</h2>
<h3 id="引入第三方库">引入第三方库</h3>
<p><a href="https://wofead.top/2019/10/31/c++%E5%A4%B4%E6%96%87%E4%BB%B6%E5%BA%93%E6%96%87%E4%BB%B6%E5%92%8C%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E6%96%87%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB%E5%92%8C%E4%BD%9C%E7%94%A8/">c++库文件的理解</a></p>
<h2 id="5-UI">5. UI</h2>
<h2 id="6-网络">6. 网络</h2>
<p><a href="https://zhuanlan.zhihu.com/p/445398809">预测、和解、插值</a></p>
<p><a href="https://www.lfzxb.top/nkgmoba-skillandnetwork/">技能系统与网络同步</a></p>
<p><a href="https://github.com/skywind3000/kcp">KCP</a></p>
<h2 id="7-物理">7. 物理</h2>
<h3 id="碰撞">碰撞</h3>
<p><a href="https://zhuanlan.zhihu.com/p/86981378?utm_source=qq&amp;utm_medium=social&amp;utm_oi=792136550879227904">多边形碰撞检测</a></p>
<p><a href="https://dyn4j.org/2010/01/sat/">SAT</a>：每个方向的投影都有重叠部分则图形碰撞。实际上不需要检测所有方向，二维使用 <strong>每条边</strong> 的法向量检测；三维使用 <strong>每个面</strong> 的法向量、<strong>两个图形的边两两组成的面</strong> 的法向量进行检测即可。</p>
<p><a href="https://dyn4j.org/2010/04/gjk-gilbert-johnson-keerthi/">GJK</a>、<a href="https://www.qiujiawei.com/collision-detection-2/">GJK</a></p>
<p>两个图形的闵可夫斯基差包含原点则图形碰撞。实际上不需要求出具体的闵可夫斯基图形，只要维护一个逼近原点的单纯形即可，该单纯形至多有三个顶点。三维时需要维护一个四面体。</p>
<p><a href="https://dyn4j.org/2010/05/epa-expanding-polytope-algorithm/">EPA</a></p>
<p>基于 GJK 算法进行扩展，确定物体的碰撞点和碰撞深度。需要注意的是，维护的单纯形可能顶点数会多于三个。</p>
<h2 id="8-渲染">8. 渲染</h2>
<h3 id="图形学">图形学</h3>
<p><a href="https://zhuanlan.zhihu.com/p/27471300">四元数——基本概念</a></p>
<p><a href="https://www.zhihu.com/question/23005815/answer/33971127">如何形象地理解四元数？</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/97186723">四元数(Quaternions)</a></p>
<p><a href="https://zhiruili.github.io/posts/transformations/">图形学入门</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/370059588">图形渲染基础：光栅化算法</a></p>
<p><a href="https://www.bearchild.top/2021/09/22/%E5%9B%BE%E5%BD%A2%E5%AD%A6/%5B%E5%9B%BE%E5%BD%A2%E5%AD%A6%5D%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/">[图形学] 基础知识 - 渲染管线</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/261667233">法线变换、切线空间、法线贴图</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/102134614">延迟渲染</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/434874992">上万字手把手教学，从零开始写软渲染器（光栅化版本）</a></p>
<h3 id="PBR">PBR</h3>
<p><a href="https://zhuanlan.zhihu.com/p/416112744">重新认识PBR</a></p>
<h3 id="卡通渲染">卡通渲染</h3>
<p><a href="https://zhuanlan.zhihu.com/p/163791090">卡通渲染学习总结</a></p>
<h3 id="大世界">大世界</h3>
<p><a href="https://zhuanlan.zhihu.com/p/258985044">大世界技术浅析——超远视距处理</a></p>
<h2 id="9-性能优化">9. 性能优化</h2>
<p><a href="https://zhuanlan.zhihu.com/p/259760974">IMR, TBR, TBDR 还有GPU架构方面的一些理解</a></p>
<p><a href="https://www.cnblogs.com/timlly/p/11471507.html">深入GPU硬件架构及运行机制</a></p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>知识总结</category>
      </categories>
      <tags>
        <tag>知识总结</tag>
      </tags>
  </entry>
  <entry>
    <title>[UE]知识总结</title>
    <url>/2022/01/01/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%5BUE%5D%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1>知识总结</h1>
<h2 id="1-3C">1. 3C</h2>
<h3 id="CharacterMovement">CharacterMovement</h3>
<p><a href="https://zhuanlan.zhihu.com/p/34257208">《Exploring in UE4》移动组件详解[原理分析]</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/114341957">UE4移动的网络同步</a></p>
<h2 id="2-AI">2. AI</h2>
<h3 id="寻路">寻路</h3>
<p><a href="https://zhuanlan.zhihu.com/p/74537236">UE4 Navmesh寻路</a></p>
<p><a href="https://github.com/recastnavigation/recastnavigation">UE4 的 RecastDetour 组件</a></p>
<p>UE4 主要使用 RecastDetour 组件主要支持 3D 场景的导航网格导出和寻路，也就是 NavMesh</p>
<h3 id="行为树">行为树</h3>
<p><a href="https://zhuanlan.zhihu.com/p/143298443">UE4行为树详解</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/139514376">[UE4][AI] 浅析UE4-BehaviorTree的特性</a></p>
<h2 id="3-动画">3. 动画</h2>
<p><a href="https://www.zhihu.com/column/c_1354205128203993089">虚幻引擎里的运动学研究</a></p>
<h2 id="4-Gameplay">4. Gameplay</h2>
<h3 id="GAS">GAS</h3>
<p><a href="https://zhuanlan.zhihu.com/p/440168260">UE的GAS原理深入探究</a></p>
<p><a href="https://github.com/tranek/GASDocumentation#concepts-asc-rm">GAS Documentation</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/464329488">GAS架构分析</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/458192589">GAS探究</a></p>
<p><a href="https://www.youtube.com/watch?v=_713CSOWkTU">SplashDamage的技术负责人的GAS介绍</a></p>
<p><a href="https://docs.unrealengine.com/5.0/en-US/lyra-sample-game-in-unreal-engine/">UE5：Lyra示例项目</a></p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202308110009187" alt="img"></p>
<h2 id="5-工具流">5. 工具流</h2>
<h3 id="插件基础">插件基础</h3>
<p><a href="https://zhuanlan.zhihu.com/p/121152396">插件与模块</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1699614">UE4编辑器如何生成和共享插件</a></p>
<p><a href="%E4%B8%BA%E5%A4%9A%E4%B8%AA%E6%9C%89%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB%E7%9A%84plugin%E7%94%9F%E6%88%90%E9%A2%84%E7%BC%96%E8%AF%91%E7%9A%84%E9%93%BE%E6%8E%A5%E5%BA%93%EF%BC%9Ahttps://zhuanlan.zhihu.com/p/115292711">[UE4]无插件源码编译和打包工程</a></p>
<p><a href="https://lxjk.github.io/2019/10/01/How-to-Make-Tools-in-U-E.html">How to Make Tools in UE4</a></p>
<blockquote>
<p>注意事项</p>
<p>在同一个插件模块里面定义的全局静态变量共享。（在 <code>A.cpp</code> 中定义 <code>static int a</code>，在 <code>B.cpp</code> 可以调用。若在 <code>B.cpp</code> 中也定义 <code>static int a</code> 则会报重定义的错误）</p>
</blockquote>
<h3 id="序列化">序列化</h3>
<h4 id="JSON">JSON</h4>
<p><a href="https://www.bilibili.com/read/cv10071665">[UE4 C++入门到进阶]10.Json数据读写</a>、<a href="https://sanctorum003.github.io/2019/08/07/CG/UE4/JSON/">虚幻4之JSON学习</a>、<a href="https://zhuanlan.zhihu.com/p/74720067">反序列化方法</a>、<a href="https://www.dazhuanlan.com/2020/02/24/5e536ade3f9b8/">[UE4]写入Json文件</a></p>
<p>参考源码：<code>PaperSpriteSheetImportFactory</code>、<code>PaperTiledImporterFactory</code>、<code>PaperJsonSpriteSheetImporter</code></p>
<h3 id="Config-系统">Config 系统</h3>
<p><a href="https://blog.ch-wind.com/ue4-config-usage/">UE4 中 Config 的使用</a></p>
<p><a href="https://blog.ch-wind.com/ue4-config-setting/">UE4 的配置界面写入</a></p>
<p><a href="http://supervj.top/2020/08/31/%E6%89%A9%E5%B1%95%E6%B8%B8%E6%88%8F%E8%AE%BE%E7%BD%AE/">UE4 添加自定义项目设置</a></p>
<p>参考源码：<code>Paper2DEditorModule</code></p>
<h3 id="拓展编辑器">拓展编辑器</h3>
<p>显示 UI 的可拓展点：Edit -&gt; Editor Preferences -&gt; General -&gt; Miscellaneous -&gt; Developer Tools -&gt; Display UIExtension Points，勾选后即可显示</p>
<p><a href="https://www.lfzxb.top/ue4-plugins-development/">UE4插件开发总结</a></p>
<p><a href="https://blog.csdn.net/qq_29523119/article/details/100088321">UE4给编辑器添加菜单栏(Menu)，工具栏(TooBar)，Tab窗口</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/302632931">【UE4编辑器】ContentBrowser 扩展之资源菜单</a></p>
<p><a href="https://nerivec.github.io/old-ue4-wiki/pages/custom-context-menu-for-actors-in-editor.html">Custom Context Menu for Actors in Editor</a></p>
<blockquote>
<p>本质就是 通过 FModuleManager 获得对应模块，在其扩展数组（MenuExtenderArray）里添加新的委托，委托里的内容就是用来添加真正的菜单项。可添加的内容根据 Extender 来确定。</p>
</blockquote>
<p>参考源码：<code>AssetManagerEditorModule</code>、<code>ContentBrowserExtensions：InstallHooks</code>、<code>SpriteAssetTypeActions：GetActions</code></p>
<h4 id="Slate">Slate</h4>
<p><a href="https://zhuanlan.zhihu.com/p/115267691">UE4 Slate 基本框架</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/77681049">虚幻4渲染编程（工具篇）【第九卷：SlateUI布局】</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/56127773">Slate VS UMG（Slate 控件基本框架）</a></p>
<p><a href="https://gameinstitute.qq.com/community/detail/121778">Slate控件中的代理事件如何绑定 UObject 方法</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/28355166">【UE4 Renderer】&lt;02&gt; Slate系统</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/346275251">【UEInside】 Slate合批机制剖析</a></p>
<p>参考源码：<code>SlateTypes</code></p>
<h3 id="引入第三方库">引入第三方库</h3>
<p><a href="https://zhuanlan.zhihu.com/p/395423662">UE4引入第三方库</a></p>
<h3 id="创建-Asset">创建 Asset</h3>
<p><a href="https://blog.csdn.net/weixin_39743369/article/details/112160932">ue4 通过指定路径加载资源_UE4 C++基础教程 - 资源常见名词解释</a></p>
<p><a href="https://answers.unrealengine.com/questions/500286/view.html">Create a package in a special path</a></p>
<p><a href="https://gmpreussner.com/reference/adding-new-asset-types-to-ue4">Adding New Asset Types to UE4</a></p>
<p><a href="https://blog.csdn.net/u010385624/article/details/99729152">ue4 创建自定义资源，导入与重新导入自定义资源</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/374152267">UE4的DragonBones插件的开发</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/55132638">虚幻4渲染编程（工具篇）【第八卷：Asset creation】</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/338729328">虚幻4渲染编程（工具篇V2）【第一卷：UE4 Assets tool DV basic Intro】</a></p>
<p>参考源码：<code>EditorFactories</code>、<code>SoundFactory</code>、<code>PaperTiledImporterFactory</code></p>
<h2 id="6-关卡">6. 关卡</h2>
<h2 id="7-UI">7. UI</h2>
<h3 id="UI基础知识">UI基础知识</h3>
<p><a href="https://zhuanlan.zhihu.com/p/117582084">UE4入门之路（UI篇）：UMG系统介绍</a></p>
<p><a href="https://gameinstitute.qq.com/community/detail/121327">UE4的UI制作流程</a></p>
<p><a href="https://gamedevworks.com/blog/ue4-how-to-get-umg-widget-position-in-screen-space/">How to get UMG widget absolute position in UE4</a></p>
<p><a href="https://dawnarc.com/2018/12/ue4slate-and-native-umgc-notes/">[UE4]Slate 和 Native UMG(C++) 笔记</a></p>
<h3 id="程序化生成">程序化生成</h3>
<p><a href="https://answers.unrealengine.com/questions/561607/view.html">How to construct UMG widget in C++?</a></p>
<p><a href="https://gist.github.com/SalahAdDin/b3814f109d340f1e0f5dcac6e623b8ce">代码生成 Widget 与 WidgetBlueprint</a></p>
<p>参考源码：<code>WidgetBlueprintFactory</code></p>
<h2 id="8-网络">8. 网络</h2>
<p><a href="https://zhuanlan.zhihu.com/p/678112760">UE4 浅谈网络同步中的RPC</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/533738684">UE4网络同步-RPC流程详解</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/682972215">UE4 属性同步-同步前的准备</a></p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202305282307110.png" alt="image-20230528230743329"></p>
<p><a href="https://zhuanlan.zhihu.com/p/567579687">虚幻笔记：RPC中Actor的所有权</a></p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202305282307655.png" alt="image-20230528230724616"></p>
<p><a href="https://zhuanlan.zhihu.com/p/34723199">《Exploring in UE4》网络同步原理深入（上）[原理分析]</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/105040792">使用虚幻引擎4年，我想再谈谈他的网络架构【经验总结】</a></p>
<p><a href="https://wizardcell.com/unreal/multiplayer-tips-and-tricks/">Multiplayer Tips&amp;Tricks</a></p>
<p>参考源码：<code>NetDriver</code>、<code>ActorChannel</code>、<code>FObjectReplicator::SendCustomDeltaPropert</code></p>
<h2 id="9-物理">9. 物理</h2>
<h2 id="10-渲染">10. 渲染</h2>
<h3 id="Niagara">Niagara</h3>
<p><a href="https://www.cyanhall.com/cn/tutorial/">Niagara 教程</a></p>
<h3 id="材质">材质</h3>
<p><a href="https://zhuanlan.zhihu.com/p/73754807">[UE4]动态液体材质浅谈</a></p>
<h2 id="10-性能优化">10. 性能优化</h2>
<h3 id="内存管理">内存管理</h3>
<p><a href="https://zhuanlan.zhihu.com/p/61366273">UE4内存Profiler</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/219588301">UE4 垃圾收集大杂烩</a></p>
<h3 id="性能分析">性能分析</h3>
<p><a href="https://www.cnblogs.com/ghl_carmack/p/5481763.html">UE4 性能优化方法(工具篇)</a></p>
<p><a href="https://www.cnblogs.com/kekec/p/14960139.html">UE4 stats性能埋点</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/267335603?utm_source=qq">[UE4] 项目帧率低排查瓶颈文件步骤记录</a></p>
<p><a href="https://www.puredevsoftware.com/framepro/index.htm">FramePro</a></p>
<h2 id="11-引擎">11. 引擎</h2>
<h3 id="基础">基础</h3>
<p><a href="https://zhuanlan.zhihu.com/p/362218832">Unity3D 经验者转到 UE4 的经验</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/369974105">UE4的智能指针 TSharedPtr</a></p>
<p><a href="https://dawnarc.com/2016/05/ue4console%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4command/">[UE4]console命令行常用命令(command)</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/49046671">[UE4] 对象内存管理几种模式</a></p>
<h3 id="蓝图">蓝图</h3>
<p><a href="https://zhuanlan.zhihu.com/p/92268112">理解蓝图技术架构</a></p>
<h3 id="反射">反射</h3>
<p><a href="https://www.xianlongok.site/post/6605f9f/">反射系统</a></p>
<h3 id="架构">架构</h3>
<p><a href="https://zhuanlan.zhihu.com/p/22833151">《InsideUE4》GamePlay架构（一）Actor和Component</a></p>
<h3 id="Demo">Demo</h3>
<p><a href="https://github.com/tomlooman/EpicSurvivalGameSeries">EpicSurvivalGameSeries</a></p>
<p><a href="https://docs.unrealengine.com/4.27/en-US/Resources/SampleGames/ShooterGame/">Shooter Game</a></p>
<p><a href="https://www.unrealengine.com/marketplace/zh-CN/product/action-rpg">ActionRPG</a></p>
<h3 id="资源管理">资源管理</h3>
<p><a href="https://zhuanlan.zhihu.com/p/69078536">UE4中的烘焙</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/256342436">大世界技术浅析，WOW的梦幻影歌——客户端资源加载</a></p>
<h3 id="生命周期">生命周期</h3>
<p><a href="https://zhuanlan.zhihu.com/p/577433224?utm_medium=social&amp;utm_oi=854673897260457984&amp;utm_psn=1572287088678162432&amp;utm_source=wechat_session">UE5 – 引擎运行流程（从main到BeginPlay）</a></p>
<p><a href="https://blog.csdn.net/u014391423/article/details/107104283/">Ue4 客户端登录流程解析</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/417502244">Gameplay启动流程</a></p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202211242037757.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>知识总结</category>
      </categories>
      <tags>
        <tag>知识总结</tag>
        <tag>UE</tag>
      </tags>
  </entry>
  <entry>
    <title>[UNITY]知识总结</title>
    <url>/2022/01/01/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/%5BUNITY%5D%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1>知识总结</h1>
<h2 id="1-AI">1. AI</h2>
<h2 id="2-动画">2. 动画</h2>
<h3 id="动画基础">动画基础</h3>
<p><a href="https://zhuanlan.zhihu.com/p/105029905">学习笔记 — Unity动画系统</a></p>
<h3 id="Procedural-Animation">Procedural Animation</h3>
<p><a href="https://zhuanlan.zhihu.com/p/135877690">Unity里的Procedural Animation</a></p>
<h3 id="解决方案">解决方案</h3>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MjQ1NTEwOA==&amp;mid=2247493316&amp;idx=1&amp;sn=7e4fef834a8066faca3d2f1f1a090bb4&amp;chksm=fe1dd26fc96a5b79856840f556cf65026facb83520ac1891605e42d5e777d30a0d5219060e21&amp;mpshare=1&amp;scene=1&amp;srcid=0606YJLYnfprk9UjpPQCnre1#rd">Playable API：定制你的动画系统</a></p>
<p><a href="https://kybernetik.com.au/animancer/">Animancer</a></p>
<h2 id="3-Gameplay">3. Gameplay</h2>
<h3 id="架构">架构</h3>
<p><a href="https://www.drflower.top/posts/4981aa9/">GameFramework 解析</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/186970833">Unity DOTS：目录</a></p>
<h3 id="协程">协程</h3>
<p><a href="https://www.bearchild.top/2021/09/24/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/%5BUnity%5DUnity%E4%B8%AD%E7%9A%84%E5%8D%8F%E7%A8%8B/">Unity 中的协程</a></p>
<h3 id="地形">地形</h3>
<p><a href="https://zhuanlan.zhihu.com/p/388844386">大世界GPU Driven地形入门</a></p>
<h2 id="4-工具流">4. 工具流</h2>
<h3 id="反编译">反编译</h3>
<p><a href="https://github.com/dnSpy/">dnSpy</a></p>
<h3 id="编辑器">编辑器</h3>
<p><a href="https://www.lfzxb.top/odin-usualuse/">Odin常用功能整理</a></p>
<h3 id="技能编辑器">技能编辑器</h3>
<p><a href="https://zhuanlan.zhihu.com/p/158430393">技能编辑器的设计实现</a></p>
<h2 id="5-UI">5. UI</h2>
<h2 id="6-网络">6. 网络</h2>
<p><a href="https://zhuanlan.zhihu.com/p/83010584?utm_source=qq&amp;utm_medium=social&amp;utm_oi=792136550879227904">多人网络游戏同步探究</a></p>
<h2 id="7-物理">7. 物理</h2>
<h2 id="8-渲染">8. 渲染</h2>
<h3 id="渲染基础">渲染基础</h3>
<p><a href="https://www.zhihu.com/pub/book/119585555">Unity Shader 入门精要</a></p>
<h3 id="卡通渲染">卡通渲染</h3>
<p><a href="https://zhuanlan.zhihu.com/p/109101851">从零开始的卡通渲染</a></p>
<h2 id="9-性能优化">9. 性能优化</h2>
<h3 id="内存">内存</h3>
<p><a href="https://zhuanlan.zhihu.com/p/381859536">【笔记】Unity内存分配和回收的底层原理</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/370467923">Unity游戏内存分布概览</a></p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>知识总结</category>
      </categories>
      <tags>
        <tag>知识总结</tag>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>ACT浅思</title>
    <url>/2024/04/24/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/3C/ACT%E6%B5%85%E6%80%9D/</url>
    <content><![CDATA[<h1>ACT浅思</h1>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202404262219322.png" alt="image-20240426221904635"></p>
<h2 id="ACT-表现">ACT 表现</h2>
<h3 id="动作">动作</h3>
<ol>
<li>动作节奏：</li>
</ol>
<pre class="mermaid">flowchart LR
前摇--->攻击判定--->后摇-->后摇-可打断</pre>
<p>需要控制好每个阶段的时间分配，表现不同的节奏；</p>
<blockquote>
<p>较长的后摇可以方便玩家明确下一步操作（不攻击、打断后摇继续攻击），判定更明确；</p>
<p>较短的后摇可以增加动作连续性连续，提升手感；</p>
</blockquote>
<ol start="2">
<li>动画配合：</li>
</ol>
<p>动画曲线配合：从动画中提取曲线，配合曲线调整位移；比如移动，需要在脚落下的那一刻位移速度最大，其余阶段几乎不位移；</p>
<p>攻击方、受击方动画、位移需要匹配；</p>
<ol start="3">
<li>受击表现：</li>
</ol>
<p>受击动作，可以有夸张的表现，具体在 硬直、击退、击飞 等；同时可以添加骨骼抖动强化受击反馈；</p>
<ol start="4">
<li>爽感优化</li>
</ol>
<p>顿帧：伤害越大顿帧越久，一般发生在 攻击方接触受击方、技能或连招开始与结束时；</p>
<p>连招：较长的连招（意味着更大的风险）过后，可以添加夸张的收尾表演，释放压力；</p>
<p>终结技：目标强僵直、残血时可以添加慢镜头终结技；</p>
<h3 id="镜头">镜头</h3>
<ol>
<li>运镜逻辑：</li>
</ol>
<p>镜头内容：需要保证全程看清目标，更多以目标为核心；需要保证目标完整在镜头内（尤其是使用大位移技能时）；尽量避免主角与目标重叠；</p>
<p>镜头构图：可以稍微错位，可以看清目标动作；</p>
<ol start="2">
<li>镜头效果：</li>
</ol>
<p>屏幕震动：普攻可以增加左右偏移、重击增加上下纵深偏移；</p>
<p>子弹时间：在合适的时候增加子弹时间，可以表现出力量感；</p>
<p>镜头模糊：径向模糊、动态模糊、空气扭曲等效果；可以表现出速度感；</p>
<h3 id="UI">UI</h3>
<ol>
<li><code>HUD</code> 的缩放、偏移、光效；</li>
<li>屏幕闪屏：在使用技能或击杀目标时，可以增加闪屏或者黑屏淡入淡出等效果；</li>
<li>准心变化：颜色、大小、特殊形态（骷髅表示击杀、打叉表示命中或爆头）；</li>
<li>跳字：分为普攻、暴击、恢复；主要调整：轨迹（抛物线、弹出、上浮）、缩放、透明度、重力、字体、颜色；比如暴击一般离散范围小、上浮位移大、爆发力可以更强；</li>
<li>连击提示：与击打节奏契合；</li>
<li>受击指向：被攻击的方向；</li>
</ol>
<h3 id="特殊效果">特殊效果</h3>
<ol>
<li>特效：</li>
</ol>
<blockquote>
<ol>
<li>普通特效：技能本身效果（武器发光等），保证和场景颜色差异大；</li>
<li>粒子特效：与目标解除时出现 命中/防御/暴击 等粒子表现；场景破碎效果等；</li>
<li>环境特效：对环境的氛围影响，场景灯光、场景变色；</li>
<li>角色特效：角色自身的发光等表现；</li>
</ol>
</blockquote>
<ol start="2">
<li>音效：在进行指定行为时，需要有特定音效反馈，比如冲击、发射、受击等；</li>
<li>背景音乐：战斗和漫游需要有不同的音乐变化；</li>
<li>物理震动：手柄、手机的震动反馈；</li>
</ol>
<h2 id="ACT-数值">ACT 数值</h2>
<h3 id="攻击方">攻击方</h3>
<ol>
<li>
<p>基本属性：攻击力、暴击率、属性加成；</p>
</li>
<li>
<p>攻击范围：</p>
<blockquote>
<ol>
<li>自身：关注攻击碰撞盒，方向、距离、范围等；</li>
<li>抛射物：关注触发方式（时间、瞄准方式）、轨迹等；</li>
</ol>
</blockquote>
</li>
<li>
<p>攻击强度：</p>
<blockquote>
<ol>
<li>进攻强度：与对方防御强度对比，决定对对方造成的伤害与效果；</li>
<li>维持强度：保证攻击完整的能力，与敌方进攻强度对比，决定攻击是否会被对方攻击打断；</li>
<li>命中效果：硬直时间（防御、命中），特殊表现（击飞、倒地）</li>
</ol>
</blockquote>
</li>
<li>
<p>攻击节奏：前摇、生效（判定时间、持续时间）、后摇</p>
</li>
<li>
<p>攻击位移：水平位移、空中位移</p>
</li>
</ol>
<h3 id="防守方">防守方</h3>
<ol>
<li>
<p>基本属性：防御值、护甲、抗性、伤害减免；</p>
</li>
<li>
<p>防守范围：</p>
<blockquote>
<ol>
<li>受击判定：是否进行判定（硬直）、无敌帧</li>
<li>受击范围：受击碰撞盒、防守碰撞盒</li>
</ol>
</blockquote>
</li>
<li>
<p>防守强度：</p>
<blockquote>
<ol>
<li>格挡：格挡强度、格挡范围、移动距离</li>
<li>闪避：移动距离、无敌时间、后摇硬直时间</li>
<li>反击：允许反击的时间与状态、无敌时间、硬直时间</li>
</ol>
</blockquote>
</li>
<li>
<p>防守体力：</p>
<blockquote>
<ol>
<li>体力上限：最大体力值，受到攻击、进行防守等行为会降低体力，体力为 0 会进入硬直</li>
<li>体力恢复：脱战恢复体力</li>
</ol>
</blockquote>
</li>
</ol>
<h2 id="参考">参考</h2>
<p><a href="https://zhuanlan.zhihu.com/p/360843202">拳打冥王脚踢地府——《黑帝斯》战斗设计分析</a></p>
<p><a href="https://game.academy.163.com/course/careerArticle?course=324">最畅爽的打击感从何而来？</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/342697831">《战双帕弥什》的动作打击感是怎么做出来的</a></p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>3C</category>
      </categories>
      <tags>
        <tag>3C</tag>
      </tags>
  </entry>
  <entry>
    <title>[UE]ReplicationGraph源码浅析</title>
    <url>/2024/04/21/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/%5BUE%5DReplicationGraph%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h1>ReplicationGraph源码浅析</h1>
<h2 id="简介">简介</h2>
<p><code>UnrealEngine</code> 基本的网络同步在进行同步时需要对每个连接判断每个 <code>Actor</code> 是否需要同步，开销较大；</p>
<p>可以通过实现 <code>Replication</code> ，实现一个不同的 <code>ReplicationDriver</code> 来优化性能；</p>
<p><code>Replication</code> 将 <code>World</code> 分为多个区域 <code>Grid</code>，把 <code>Actor</code> 根据所在 <code>Grid</code> 进行分类编组，可以快速找出需要同步的 <code>Actor</code>，同时确定哪些区域需要进行同步复制。</p>
<h2 id="数据结构">数据结构</h2>
<pre class="mermaid">classDiagram
    class UReplicationGraph</pre>
<ol>
<li><code>FGlobalActorReplicationInfo </code>：同步的 <code>Actor</code> 信息，包括</li>
</ol>
<blockquote>
<p><code>Settings</code>：<code>FClassReplicationInfo</code>，每个 <code>Actor Class</code> 对应的同步配置，包括 <code>CullDistance</code>、<code>ReplicationPeriodFrame</code>、<code>PriorityScale</code> 等；</p>
<p><code>Events</code>：<code>FGlobalActorReplicationEvents Events</code>，记录休眠状态的改变时，从休眠列表中添加或者移除；</p>
<p><code>FConnectionReplicationActorInfo</code>：对于 <code>Connection</code> 同步的 <code>Actor</code> 信息；</p>
</blockquote>
<ol start="3">
<li>
<p><code>ReplicationGraphNode</code>：<code>GraphNode</code> 基类</p>
</li>
<li>
<p><code>ReplicationGraphNode_ActorList</code>：记录同步的 <code>Actors</code>；在 <code>StreamingLevelCollection</code> （以 <code>SubLevelName</code> 为 <code>Key</code> 的 <code>List</code>）中记录 <code>SubLevel</code> 的 <code>Actor</code>，否则在 <code>ReplicationActorList</code> 中记录。</p>
</li>
<li>
<p><code>GlobalGraphNodes</code>：维护 <code>GridSpatialization2D</code></p>
</li>
</ol>
<h2 id="GraphNode">GraphNode</h2>
<pre class="mermaid">classDiagram
    class UReplicationGraphNode {
        TArray~UReplicationGraphNode*~ AllChildNodes
        GatherActorListsForConnection()
        RouteAddNetworkActorToNodes()
        RouteRemoveNetworkActorToNodes()
    }	

    UReplicationGraphNode <|-- UReplicationGraphNode_ActorList 
    class UReplicationGraphNode_ActorList {
    	FActorRepListRefView ReplicationActorList
    }
        
    UReplicationGraphNode <|-- UReplicationGraphNode_GridSpatialization2D
    class UReplicationGraphNode_GridSpatialization2D {
        TArray~TArray[UReplicationGraphNode_GridCell*]~ Grid;
    }
    
    UReplicationGraphNode <|-- UReplicationGraphNode_AlwaysRelevant
    class UReplicationGraphNode_AlwaysRelevant{
        TArray~UClass*~AlwaysRelevantClasses;
    }
    
    UReplicationGraphNode <|-- UReplicationGraphNode_ActorListFrequencyBuckets 
    
    UReplicationGraphNode_ActorList <|-- UReplicationGraphNode_GridCell 
    class UReplicationGraphNode_GridCell{
    }
    
    UReplicationGraphNode_ActorList <|-- UReplicationGraphNode_AlwaysRelevant_ForConnection 
    class UReplicationGraphNode_AlwaysRelevant_ForConnection{
    }</pre>
<ol>
<li><code>GridSpatalization2D</code>：将世界划分为 <code>2D</code> 网格，按位置把 <code>Actor</code> 分到不同的 <code>GridCell</code> 中，按空间管理<code>Actor</code> 是否进行同步，每帧更新 <code>GridCell</code> 内的 <code>Actor</code>；</li>
<li><code>GridCell</code>：<code>ReplicationActorList</code> 缓存着在该 <code>GridCell</code> 中的所有静态 <code>Actor</code>，<code>DynamicNodes</code> 里记录动态的 <code>Actor</code>，<code>DormancyNode</code> 里记录休眠的<code>Actor</code>；</li>
<li><code>AlwaysRelevant </code>：处理总是发送 <code>Net Updates</code> 给 所有 <code>Connections</code> 的 <code>Actors</code>；</li>
<li><code>AlwaysRelevant_ForConnection</code>：处理总是发送 <code>Net Updates</code> 给 特定 <code>Connection</code> 的 <code>Actors</code> ，一般是同步给 <code>PlayerController</code> 和 <code>ViewTarget</code>；</li>
<li><code>ActorListFrequencyBuckets </code>：记录地图格子上的 动态 <code>Actor</code> ;</li>
</ol>
<h2 id="生命周期">生命周期</h2>
<h3 id="Init">Init</h3>
<pre class="mermaid">graph TD

Start(UNetDriver::InitBase) --> A("UNetDriver::SetReplicationDriver")
A --> B("UReplicationGraph::InitializeActorsInWorld")
B --> | 将World中的同步对象添加到对应GraphNode | C("UReplicationGraph::InitializeForWorld")
C --> D("UReplicationGraph::AddNetworkActor(AActor* Actor)") 

A --> E(InitForNetDriver)
E --> F(InitGlobalActorClassSettings)
E --> G(InitGlobalGraphNodes)</pre>
<p><code>InitGlobalActorClassSettings</code>：设置 <code>CulltDistance</code>、<code>ReplicationPeriodFrame</code>；注册 <code>Actor</code> 对应的 <code>ClassReplicationInfo</code> 到 <code>GlobalActorReplicationInfoMap</code>；</p>
<p><code>InitGlobalGraphNodes</code>：创建 <code>GridSpatialization2D</code>、<code>AlwaysRelevant</code> 的 <code>GraphNode</code>；</p>
<p><code>InitConnectionGraphNodes</code>：创建 <code>AlwaysRelevantForConnection</code> 的 <code>GraphNode</code>；</p>
<p><code>RouteAddNetworkActorToNodes </code>：生成 <code>Actor</code> 时，添加 <code>NetworkActor</code>，分发 <code>Actor</code> 到 <code>GraphNode</code>；</p>
<p><code>RouteRemoveNetworkActorToNodes </code>：销毁 <code>Actor</code> 时，删除 <code>NetworkActor</code>，通知<code>GraphNode</code> 移除 <code>Actor</code>；</p>
<h3 id="Repliate">Repliate</h3>
<pre class="mermaid">graph TB
Start(ServerReplicateActors) --> A(PrepareForReplication)
A --> B(GatherActorListsForConnection)
B --> C(ReplicateActorListsForConnections_Default)
C --> D[ReplicateSingleActor]</pre>
<ol>
<li>
<p><code>PrepareForReplication</code> ： 调用 <code>GraphNode</code> 的 <code>PrepareForReplication</code>：</p>
<p>对于 <code>GridSpatialization2D</code>，会遍历 <code>Actor</code>，更新其所在的 <code>Grid</code>；</p>
<p>对于 <code>AlwaysRelevant</code>，记录需要同步给所有连接的 <code>Actor</code>；</p>
</li>
<li>
<p><code>GatherActorListsForConnection</code> ： 遍历 <code>Connections</code> 收集 <code>ReplicationActorList</code></p>
<p>针对每个 <code>Connection</code> 遍历 <code>GlobalGraphNodes</code> 和 <code>Connection</code> 的<code>ConnectionGraphNodes</code>，调用其 <code>GatherActorListsForConnection</code>，收集需要同步给这个<code>Connection</code> 的 <code>Actor</code>；</p>
<p>对于 <code>GridSpatialization2D</code>，通过其 <code>GridCellNode</code> 根据 <code>Actor</code> 的<code>ViewLocation</code> 收集；</p>
<p>收集的 <code>Actor</code> 默认加到 <code>GatheredReplicationListsForConnection</code> 里的 <code>EActorRepListTypeFlags.Default List</code>。</p>
</li>
<li>
<p><code>ReplicateActorListsForConnections_Default</code>：进行 <code>Replicate</code> 的同步检测与排序</p>
<p>对 <code>GatheredReplicationListsForConnection</code> 里的 <code>Actor</code>，进行检测；</p>
<p>首先排除 <code>Dormancy</code>、不满足<code>ReplicateFrame</code> 的 <code>Actor</code>，然后根据优先级排序（<code>Distance</code>、<code>Starvation</code>、<code>逻辑判定</code>、<code>Owner &amp; ViewTarget</code>)，将结果缓存在 <code>PrioritizedReplicationList</code> 中；</p>
</li>
<li>
<p><code>ReplicateSingleActor</code>：对排好序的 <code>PrioritizedReplicationList</code> 调用 <code>ReplicateSingleActor</code> 进行同步。</p>
</li>
</ol>
<h2 id="参考">参考</h2>
<p><a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/replication-graph-in-unreal-engine">UE ReplicationGraph Document</a></p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>[UE]Networking源码浅析</title>
    <url>/2024/04/20/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/%5BUE%5DNetworking%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h1>Networking源码浅析</h1>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202404262212892.png" alt="image-20240426221216657"></p>
<h2 id="定义">定义</h2>
<p><code>Bunch</code>：表示一组相关的网络数据，包含 <code>RPC / 属性同步</code> 等信息，<code>UE</code> 中 <code>DS/Client</code> 通信的基本单位。</p>
<p><code>Packet</code>：<code>UDP</code> 的基本传输单位，可以打包一个或多个 <code>Bunch</code>，在接受端进行解析。</p>
<p><code>NetDriver</code>：管理网络通信，比如管理连接、处理数据包的发送和接收、处理网络事件。</p>
<p><code>NetConnection</code>：表示一个网络连接，与一个 <code>NetDriver</code> 关联，并通过 <code>NetDriver</code> 进行实际的网络通信。</p>
<p><code>Channel</code>：管理网络传输，进行数据分类，提供  <code>SendBunch</code>、<code>ReceivedRawBunch</code> 方法，由 <code>NetConnection</code> 管理，一个 <code>NetConnection</code> 可以包含多种 <code>Channel</code>。</p>
<p><code>FObjectReplicator</code>：处理对象的网络同步，保存属性快照，进行状态改变发送、更新同步状态、接受与发送消息。</p>
<p><code>ActorChannel</code>：关联特定的 <code>Actor</code> 负责其同步，包含多个 <code>FObjectReplicator</code> 用于复制其 <code>Actor</code>、<code>ActorComponent</code> 。</p>
<p><code>FRepLayout</code>：管理复制的属性，定义底层数据内存布局，数据比较、序列化与反序列化等。</p>
<h2 id="RPC">RPC</h2>
<p><strong>Server RPC</strong></p>
<table>
<thead>
<tr>
<th>Calling Machine</th>
<th>Owning Connection</th>
<th>Executing Machine</th>
</tr>
</thead>
<tbody>
<tr>
<td>Server</td>
<td>Client</td>
<td>Server</td>
</tr>
<tr>
<td>Server</td>
<td>Server</td>
<td>Server</td>
</tr>
<tr>
<td>Server</td>
<td>None</td>
<td>Server</td>
</tr>
<tr>
<td>Client</td>
<td>Invoking Client</td>
<td>Server</td>
</tr>
<tr>
<td>Client</td>
<td>Different Client</td>
<td>Dropped</td>
</tr>
<tr>
<td>Client</td>
<td>Server</td>
<td>Dropped</td>
</tr>
<tr>
<td>Client</td>
<td>None</td>
<td>Dropped</td>
</tr>
</tbody>
</table>
<p><strong>Client RPC</strong></p>
<table>
<thead>
<tr>
<th>Calling Machine</th>
<th>Owning Connection</th>
<th>Executing Machine</th>
</tr>
</thead>
<tbody>
<tr>
<td>Server</td>
<td>Owning Client</td>
<td>Owning Client</td>
</tr>
<tr>
<td>Server</td>
<td>Server</td>
<td>Server</td>
</tr>
<tr>
<td>Server</td>
<td>None</td>
<td>Server</td>
</tr>
<tr>
<td>Client</td>
<td>Invoking Client</td>
<td>Invoking Client</td>
</tr>
<tr>
<td>Client</td>
<td>Different Client</td>
<td>Invoking Client</td>
</tr>
<tr>
<td>Client</td>
<td>Server</td>
<td>Invoking Client</td>
</tr>
<tr>
<td>Client</td>
<td>None</td>
<td>Invoking Client</td>
</tr>
</tbody>
</table>
<p><strong>NetMulticast RPC</strong></p>
<table>
<thead>
<tr>
<th>Calling Machine</th>
<th>Owning Connection</th>
<th>Executing Machine</th>
</tr>
</thead>
<tbody>
<tr>
<td>Server</td>
<td>Client</td>
<td>Server and all Clients the invoking actor is relevant for</td>
</tr>
<tr>
<td>Server</td>
<td>Server</td>
<td>Server and all Clients the invoking actor is relevant for</td>
</tr>
<tr>
<td>Server</td>
<td>None</td>
<td>Server and all Clients the invoking actor is relevant for</td>
</tr>
<tr>
<td>Client</td>
<td>Invoking Client</td>
<td>Invoking Client</td>
</tr>
<tr>
<td>Client</td>
<td>Different Client</td>
<td>Invoking Client</td>
</tr>
<tr>
<td>Client</td>
<td>Server</td>
<td>Invoking Client</td>
</tr>
<tr>
<td>Client</td>
<td>None</td>
<td>Invoking Client</td>
</tr>
</tbody>
</table>
<p><strong>Send RPC</strong></p>
<pre class="mermaid">flowchart TB

UObject::ProcessEvent
-- FunctionCallspace::Remote --> AActor::CallRemoteFunction
--> UNetDriver::ProcessRemoteFunction

ServerMulticast(bIsServerMulticast)

UNetDriver::ProcessRemoteFunction
--> ServerMulticast

ServerMulticast
--TRUE-->UNetDriver::GetFunctionRepLayout
--Actor IsNetRelevant || FUNC_NetReliable --> FRepLayout::BuildSharedSerializationForRPC
--> UNetDriver::InternalProcessRemoteFunctionPrivate
--> UNetDriver::ProcessRemoteFunctionForChannelPrivate

ServerMulticast
--FALSE--> UReplicationGraph::ProcessRemoteFunction
--> UNetDriver::ProcessRemoteFunctionForChannel
--> UNetDriver::ProcessRemoteFunctionForChannelPrivate
-- FRepLayout::SendPropertiesForRPC --> QueueBunch

QueueBunch(!bReliable & NetMulticast)

QueueBunch--TRUE-->UChannel::SendBunch
QueueBunch--FALSE-->UActorChannel::QueueRemoteFunctionBunch</pre>
<p><strong>Receive RPC</strong></p>
<pre class="mermaid">flowchart TB

UIpNetDriver::TickDispatch
--> UNetConnection::ReceivedRawPacket
--> UNetConnection::ReceivedPacket
--> UNetConnection::DispatchPacket
--> UChannel::ReceivedRawBunch
--> UChannel::ReceivedNextBunch
--> UChannel::ReceivedSequencedBunch
--> UActorChannel::ReceivedBunch
--> UActorChannel::ProcessBunch
--> FObjectReplicator::ReceivedBunch
-- FObjectReplicator::ReceivedRPC
--> UObject::ProcessEvent</pre>
<h2 id="属性同步">属性同步</h2>
<p><strong>Replicate Diff</strong></p>
<pre class="mermaid">flowchart TB

UNetDriver::TickFlush
--> UNetDriver::ServerReplicateActors
--> UActorChannel::ReplicateActor
--> FObjectReplicator::ReplicateProperties
--> FNetSerializeCB::UpdateChangelistMgr
--> FRepLayout::UpdateChangelistMgr
--> FRepLayout::CompareProperties</pre>
<p><strong>Replicate Send</strong></p>
<pre class="mermaid">flowchart TB

UNetDriver::TickFlush
--> UNetDriver::ServerReplicateActors
--> UActorChannel::ReplicateActor
--> FObjectReplicator::ReplicateProperties
--> FRepLayout::ReplicateProiperties
--> FRepLayout::SendProperties
--> FProperty::NetSerializeItem
--> UChannel::SendBunch</pre>
<p><strong>Replicate Receive</strong></p>
<pre class="mermaid">flowchart TB

UIpNetDriver::TickDispatch
--> UNetConnection::ReceivedRawPacket
--> UNetConnection::ReceivedPacket
--> UNetConnection::DispatchPacket
--> UChannel::ReceivedRawBunch
--> UChannel::ReceivedNextBunch
--> UChannel::ReceivedSequencedBunch
--> UActorChannel::ReceivedBunch
--> UActorChannel::ProcessBunch
--> FObjectReplicator::ReceivedBunch
--> FRepLayout::ReceiveProperties
--> FRepLayout::ReceivePropertyHelper
--> FProperty::NetSerializeItem
--> FObjectReplicator::PostReceivedBunch
--> FObjectReplicator::CallRepNotifies</pre>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>[UE]弱网工具Clumsy的使用</title>
    <url>/2024/04/14/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/%5BUE%5D%E5%BC%B1%E7%BD%91%E5%B7%A5%E5%85%B7Clumsy%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1>弱网工具Clumsy的使用</h1>
<p><strong>Clumsy</strong> 用于弱网测试时，进行本地弱网环境的模拟，基于 <a href="https://github.com/basil00/Divert">WinDivert</a> 实现，可以出模拟延迟、丢包等网络状态。</p>
<h2 id="Downloads">Downloads</h2>
<p>下载地址：<a href="https://github.com/jagt/clumsy">Clumsy</a>；官方文档：<a href="https://jagt.github.io/clumsy/cn/index.html">Clumsy Manual</a></p>
<p>下载后的几个重点文件：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202404141744461.png" alt="%~UYF6SWT2EC28Q%6Z4N_EM"></p>
<p>打开 <strong>Clumsy.exe</strong> 可以看到以下内容：</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202404141744627.png" alt="image-20240414172540109" style="zoom:50%;" />
<p>可以看出这里有几个重点的 <code>Function</code>，一般重点使用 <strong>Lag 延迟</strong>、<strong>Drop 丢包</strong>。</p>
<p>在 <code>Filtering</code> 填入对应的 <code>Command</code> 后，设置 <code>Functions</code>，点击 <code>Start</code> 即可开始模拟。</p>
<p>同时可以在 <code>Config.txt</code> 中，预设一些 <code>Presets</code> 方便下次使用。</p>
<h2 id="UE-DS-中的使用">UE DS 中的使用</h2>
<p>对于 <code>UE</code>的 <code>DS</code> 环境，首先为了具体到某一个 <code>Client</code> / <code>DS</code>，采用 <code>Filter Port</code> 的机制，对某个具体的端口号进行操作。</p>
<p>用 <code>netstat -aon\Findstr 进程ID</code>，查询 <code>DS</code>/<code>Client</code> 进程，通过 <code>UDP</code> 进行链接。</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202404141745888.png" alt="image-20240414173745071" style="zoom:67%;" />
<p><code>DS</code> 的 <code>port</code> 一般可以在启动命令中找到 <code>-port=17777</code>；</p>
<p><code>Client</code> 的 <code>port</code> 可以在 <code>DS</code> 的 <code>Log</code> 中，快速查询到对应与指定 <code>Client</code> 连接的对应端口号：</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202404141745297.png" alt="image-20240414173856028" style="zoom: 50%;" />
<blockquote>
<p>// DS.log</p>
<p>LogNet: NotifyAcceptedConnection: Name: TestMap, TimeStamp: 04/14/24 00:00:00, [UNetConnection] <strong>RemoteAddr</strong>: 127.0.0.1:<strong>58459</strong>, Name: IpConnection_0, Driver: GameNetDriver NetDriver_1, IsServer: YES, PC: NULL, Owner: NULL, UniqueId: INVALID</p>
<p>LogNet: AddClientConnection: Added client connection: [UNetConnection] RemoteAddr: 127.0.0.1:58459, Name: IpConnection_0, Driver: GameNetDriver NetDriver_1, IsServer: YES, PC: NULL, Owner: NULL, UniqueId: INVALID</p>
</blockquote>
<pre><code>


这里的 **58459** 也就是该 `Client` 的 `Connetcion` 对应的端口号。

在 `Filtering` 中填入对应的设置即可：

1. 关闭上行包：`udp and udp.SrcPort == 58459` ，设置 `Drop = 100%`
2. 关闭下行包：`udp and udp.DstPort == 58459`，设置 `Drop = 100%`
</code></pre>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>[UE]夺旗模式框架</title>
    <url>/2024/03/20/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/%5BUE%5D%E5%A4%BA%E6%97%97%E6%A8%A1%E5%BC%8F%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1>夺旗模式框架</h1>
<h2 id="描述">描述</h2>
<p><strong>夺旗模式：</strong></p>
<p>场景里会按照一定的规则刷新出不同类型的旗帜（不同类型的旗帜有不同的得分、血量、表现等）；</p>
<p>玩家会被分成若干个队伍，抢夺刷新出来的旗帜，将旗帜带到自己队伍目标点进行销毁，则可以获得分数；</p>
<p>玩家持有旗帜时，旗帜可能会掉落或被抢夺：被其它玩家撞击到则旗帜被抢夺到其它玩家身上；旗帜的血量归零则会掉落回场景；</p>
<p>有正式赛与加时赛两种类型的比赛，首先会开启正式赛；对于正式赛，率先达到目标分的队伍获胜；如果平局则开启加时赛，否则进行结算；对于加时赛，率先得分的队伍获胜，如果平局则以两队平局进行结算；</p>
<p><strong>要点总结：</strong></p>
<blockquote>
<ol>
<li>旗帜实体：旗帜本身有自己的类型、得分、血量；</li>
<li>旗帜刷新：场景内根据一定规则（倒计时刷新、旗子上缴）会刷出不同类型旗帜；</li>
<li>旗帜传递：玩家可以拾取场景里的旗帜、相互抢夺旗帜、掉落旗帜（持有旗帜血量归零）、将旗帜送给终点得分等；玩家可以组队，共享队伍得分；同队伍之间的玩家可以传递旗帜；</li>
<li>单局流程：所有玩家就绪分队后，传送到起始点准备开赛；如果一局比赛平分，一定条件下可以触发下一场比赛继续；</li>
</ol>
</blockquote>
<h2 id="模式基础">模式基础</h2>
<h3 id="单局流程">单局流程</h3>
<p>首先，一个完整的夺旗赛，由若干个子比赛构成，子比赛逐渐推进；</p>
<pre class="mermaid">flowchart LR

M[MainProcess]
R0[RaceProcess_0]
R1[RaceProcess_1]
R2[RaceProcess_2]

M-->R0
M-->R1
M-->R2
R0-.->R1
R1-.->R2</pre>
<p>比赛胜负规则：</p>
<blockquote>
<p>单场比赛结束时，判定是否有一方队伍得分更高：</p>
<p>如果有，则全局结束；</p>
<p>如果没有，尝试进入下一场比赛（如果有配置的话），若没有下一场则全局结束；</p>
<ol>
<li>正式赛：比赛结束条件：有一队达到目标分 / 倒计时结束</li>
<li>加时赛：比赛结束条件：有一队得到分数 / 倒计时结束</li>
<li>其它类型比赛……</li>
</ol>
</blockquote>
<h3 id="局内玩法">局内玩法</h3>
<p>从业务出发，先明确有哪些相关逻辑：</p>
<p>最基本的交互显然是：</p>
<pre class="mermaid">flowchart LR
F0[场景旗帜_0]
F1[场景旗帜_1]
G0([目标点_0])
G1([目标点_1])
P0[[Player_0]]
P1[[Player_1]]

F0--PickUp--->P0--Drop-->F0
P0--Reach--->G0
P0<--Strike--->P1</pre>
<blockquote>
<p><code>PickUp</code>：<code>Player</code> 触碰到 <code>场景旗帜</code> ，就可以拾取该旗帜到自己身上；</p>
<p><code>Drop</code> ：<code>Player</code> 持有的旗帜存在血量，其血量归零（可能是被其它 <code>Player</code> 攻击导致扣血），就会触发旗帜的掉落，在对应位置生成场景旗帜；</p>
<p><code>Reach</code>：<code>Player</code> 将持有的旗帜护送到 <code>目标点</code>，获得分数，同时该旗帜会被销毁；</p>
<p><code>Strike</code>：<code>Player</code> 撞击另一个 <code>Player</code>，可以抢夺对方的旗帜；</p>
</blockquote>
<h3 id="业务拆分">业务拆分</h3>
<p>首先，先给出基本的一些元素定义；</p>
<blockquote>
<p>游戏玩法的本质是由刷新点刷新出旗帜，旗帜在各个部分之间交互传递，旗帜本身定义为 <code>FlagItem</code>。</p>
<p>旗帜在场景（不在 <code>Player</code> 身上）里的表现为，存在对应的 <code>FlagSceneItem</code>。</p>
<p>场景里存在若干个终点，定义该终点为 <code>GoalPointSceneItem</code></p>
</blockquote>
<p>这里说的 <strong>交互</strong> 的本质实际上是一个 <code>Flag</code> 的 <code>Instance</code> 在 <em><strong>各个部分</strong></em> 之间的 <strong>传递</strong> 。想一下所谓的 <em>各个部分</em>，到底是什么？</p>
<p>本质可以抽象为一个个持有 <code>Flag</code> 的容器，将其定义为 <code>FlagContainer</code>。</p>
<p>这里显然有三种 <code>Container</code>：</p>
<blockquote>
<p><code>Container_WorldFlag</code>：定义 <code>WorldFlag</code> 为 <strong>没有被 <code>Player</code> 持有的旗帜</strong></p>
<p><code>Container_GoalPoint</code>：定义 <code>GoalPoint</code> 为目标点</p>
<p><code>Container_Player</code>：每个 <code>Player</code> 持有一个 <code>Container</code>；</p>
</blockquote>
<p>细想一下， <code>WorldFlag</code> 、<code>GoalPoint</code> 的具体业务逻辑和具体的某个 <code>Instance</code> 没有太大关系，只需要通过 <code>ID</code> 串联即可，所以对于 <code>WorldFlag</code>、<code>GoalPoint</code>，不需要真的在每一个 <code>Instance</code> 都创建对应 <code>Container</code>，只需要一个单局管理的唯一 <code>Manager</code> 用来代替管理即可。但显然对于每个 <code>Player</code> 都需要有自己的 <code>Container</code>。</p>
<p>可以在单局内创建全局唯一的  <code>Container_WorldFlag</code> 、<code>Container_GoalPoint</code> 实例。</p>
<pre class="mermaid">flowchart TD


F0[FlagSceneItem_0]
F1[FlagSceneItem_1]
F2[FlagSceneItem_2]
subgraph WorldFlag[Container_WorldFlag]
    direction LR
    F0-.-F1-.-F2
end


G0([GoalPoint_0])
G1([GoalPoint_1])
G2([GoalPoint_2])
subgraph GoalPoint[Container_GoalPoint]
    direction LR
    G0-.-G1-.-G2
end


P0[[Container_Player_0]]
P1[[Container_Player_1]]

WorldFlag--PickUp--->P0--Drop--->WorldFlag
P0--Reach--->GoalPoint
P0<--Strike--->P1</pre>
<p>这样就可以将 <strong>交互</strong> 的逻辑拆得非常简单了：</p>
<blockquote>
<p><code>PickUp</code> ：由 <code>FlagSceneItem</code> 和 <code>Player</code> 的 <code>Overlap</code> 触发，将 <code>Container_WorldFlag</code> 持有的对应该 <code>FlagSceneItem</code> 的 <code>FlagItem</code> ，传递给这个 <code>Player</code> 的 <code>Conatiner_Player</code></p>
<p><code>Drop</code> ： 由 <code>Player</code> 的血量变化归零触发，将 <code>Container_Player</code> 上的所有 <code>FlagItem</code> 转移给 <code>Cotainer_WorldFlag</code></p>
<p><code>Reach</code>：由 <code>Player</code> 和 <code>GoalPointSceneItem</code> 的 <code>Overlap</code> 触发，将 <code>Container_Player</code> 上的所有 <code>FlagItem</code> 转移给 <code>Cotainer_GoalPonit</code></p>
<p><code>Strike</code>：由 <code>Player0</code> 和 <code>Player1</code> 的撞击触发，将 <code>Container_Player</code> 上的所有 <code>FlagItem</code> 转移给 <code>Cotainer_Player1</code></p>
</blockquote>
<p>这里的 <code>PickUp</code>、<code>Drop</code>、<code>Reach</code>、<code>Strike</code> 是这张图的 <strong>边</strong>，将其定义为 <code>TransferPolicy</code>。</p>
<p>对于 <code>Container</code>，有各自的 <code>Add(FlagItem)</code>、<code>Remove(FlagItem)</code>，一些基本逻辑：</p>
<blockquote>
<p><code>Container_WorldFlag</code>：</p>
<ol>
<li>
<p><code>AddItem</code> ：从 <code>FlagItem</code> 上取出位置，将 <code>Item</code> 血量设置为满血，通过调用 <code>FlagSceneItemManager</code> 创建出 <code>FlagItem</code> 对应的 <code>FlagSceneItem</code>；</p>
</li>
<li>
<p><code>RemoveItem</code>：调用 <code>FlagSceneItemManager</code> 删除对应的  <code>FlagItem</code>  对应的 <code>FlagSceneItem</code>；</p>
</li>
</ol>
</blockquote>
<blockquote>
<p><code>Container_GoalPoint</code>：</p>
<ol>
<li>
<p><code>AddItem</code>：判断是从哪个 <code>Container</code> 来的，给对应 <code>Player</code> 加分，并且 <code>RemoveItem</code>；</p>
</li>
<li>
<p><code>RemoveItem</code> ：销毁对应的 <code>FlagItem</code>；</p>
</li>
</ol>
</blockquote>
<blockquote>
<p><code>Container_Player</code>：</p>
<ol>
<li>
<p><code>AddItem</code>：从 <code>FlagItem</code> 获得 <code>FlagSyncData</code> 同步给自己，并设置 <code>Player</code> 血量为 <code>Item</code> 的血量等逻辑；</p>
</li>
<li>
<p><code>RemoveItem</code>：将 <code>Player</code> 血量设置给 <code>Item</code> 血量，清空同步信息等逻辑；</p>
</li>
</ol>
</blockquote>
<p>完整的业务拆分完毕，这下需要哪些系统显而易见：</p>
<blockquote>
<p><code>ProcessSystem</code>：负责管理单局流程，创建比赛与推动玩法进程；</p>
<p><code>TeamSystem</code> ：负责 <code>Player</code> 的组队，管理 <code>Memebr</code>、<code>Score</code> 等；</p>
<p><code>FlagItemSystem</code>：负责管理所有 <code>FlagItem</code> 实例，提供 <code>Create</code>、<code>Destroy</code> 等方法，维护 <code>Item</code> 基本的生命周期；</p>
<p><code>ContainerSystem</code>：负责提供基本的 <code>CreateContainer</code>、<code>DestoryContainer</code> 方法，对于具体的 <code>Container</code>，需要支持 <code>AddItem</code> 、<code>RemoveItem</code>、<code>GetItem</code> 等；</p>
<p><code>TransferSystem</code>：负责管理所有的 <code>TransferPolicy</code> ，提供 <code>TransferItem</code> 方法；</p>
<p><code>FlagSpawnerSystem</code>：旗帜的刷新点，负责 <code>WorldFlag</code> 的生成，生成 <code>FlagItem</code> 并 <code>Add</code> 到 <code>Container_WorldFlag</code>；</p>
<p><code>SceneItemSystem</code> ：维护场景里 <code>SceneItem</code> 的生成，提供 <code>Create</code>、<code>Destroy</code> 对应的 <code>SceneItem</code> 的方法；对于某个具体的 <code>SceneItem</code>，需要实现基础的 <code>Overlap</code>、<code>Sync</code>；</p>
</blockquote>
<h2 id="具体实现">具体实现</h2>
<h3 id="ProcesSystem"><code>ProcesSystem</code></h3>
<p>首先需要一个挂在 <code>GameState</code> 上的  <code>MainProcess</code> 负责管理全局的流程，串联多个 <code>RaceProcess</code> 推进玩法；</p>
<p>显然，一个最简单的流程可以这样：</p>
<pre class="mermaid">flowchart LR
M[MainProcess]
R0[RaceProcess_0]
R1[RaceProcess_1]
F[Finish]

M---->|1. 开赛|R0
R0-.->|2. Result_0|M
M-->|3. Check_Result_0|R1
R1-.->|4. Result_1|M
M-->|5. Check_Result_1|F
R0-.->R1
R1-.->F</pre>
<p>但是这样循环流程需要在 <code>Main</code> 里面关注 <code>RaceProcess</code> 给出的 <code>Result</code> 事件，显然有点不够优雅。</p>
<p>发现这里的主要由两部分组成：</p>
<blockquote>
<ol>
<li><code>RaceProcess</code> 管理子比赛流程，给出 <code>Result</code></li>
<li><code>MainProcess</code> 接受子比赛 <code>Result</code>，校验并判断开启下一场 <code>Race</code> 或者结束比赛</li>
</ol>
</blockquote>
<p>所以可以将其拆成两个 <code>Controller</code>：</p>
<p><code>MainProcess</code> 负责提供 <code>Dispatch</code> 的功能，</p>
<blockquote>
<ol>
<li><code>FinishRace_Controller</code>：监听 <code>Dispatcher</code> 的 <code>开赛</code> 事件，并向 <code>Dispatcher</code> 分发 <code>单局结束</code>事件；</li>
<li><code>CreateRace_Controller</code>：监听 <code>单局结束</code> 事件，进行处理并向 <code>Dispatcher</code> 分发<code>开赛</code> 事件；</li>
</ol>
</blockquote>
<pre class="mermaid">flowchart TB

M[MainProcess]
D[Dispatcher]
F[FinishRace_Controller]
C[CreateRace_Controller]

M-->D

F-->|Send_Finsih|D
D-.->|Register_Create|F

C-->|Send_Create|D
D-.->|Register_Finish|C</pre>
<h3 id="TeamSystem"><code>TeamSystem</code></h3>
<p>参考 <a href="https://www.bearchild.top/2024/03/14/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/%5BUE%5DTeamSystem%E6%A1%86%E6%9E%B6/">[UE] TeamSystem 框架</a></p>
<p>支持玩家的 <code>加入</code>、<code>退出</code> 队伍，以及维护队伍的各种数据（比如 <code>Members</code>、<code>Score</code>），并维护数据，进行同步。</p>
<h3 id="SceneItemSystem"><code>SceneItemSystem</code></h3>
<pre class="mermaid">classDiagram

    UCFSceneItemUtils..>UCFSceneItemManager
    
    UCFSceneItemManager..>UCFScecneItemBase
    class UCFSceneItemManager {
    	frien UCFSceneItemUtils
    	- CreateItem(Type, UID, Params)
    	- DestroyItem(UID)
    }
    
    UCFScecneItemBase..>UCFScecneItemSyncComponent
    UCFScecneItemBase..>UCFScecneItemDisplayComponent
    class UCFScecneItemBase {
    	SyncComponent : UCFScecneItemSyncComponent
    	OverlapDelegate
    	# OnInit()
    	# OnUninit()
    	# BeginDetect()
    	# EndDetect()
    	+ CollectSyncData()
    }
    
    UCFScecneItem_WorldFlag--|>UCFScecneItemBase
    UCFScecneItem_GoalPoint--|>UCFScecneItemBase</pre>
<pre class="mermaid">classDiagram

    UCFSceneItemUtils..>UCFSceneItemManager
    class UCFSceneItemUtils {
    
    }
    
    UCFSceneItemManager..>UCFScecneItemBase
    class UCFSceneItemManager {
    }
    
    UCFScecneItemBase..>UCFScecneItemSyncComponent
    class UCFScecneItemSyncComponent {
    
    }
    
    UCFScecneItemBase..>UCFScecneItemDisplayComponent
    class UCFScecneItemDisplayComponent {
    
    }
    
    class UCFScecneItemBase {
    	OverlapDelegate
    	# OnInit()
    	# OnUninit()
    	# BeginDetect()
    	# EndDetect()
    	+ CollectSyncData()
    }
    
    UCFScecneItem_WorldFlag--|>UCFScecneItemBase
    UCFScecneItem_GoalPoint--|>UCFScecneItemBase</pre>
<pre class="mermaid">classDiagram

    A..>B
    class A {
    
    }
    B..*C
    class B {
    
    }
    
    class C {
    
    }
    
    C..>D
    class D {
    
    }</pre>
<pre class="mermaid">classDiagram

    A..>B
    class A {
    
    }
    B..*C
    class B {
    
    }
    class C {
    
    }</pre>
<pre class="mermaid">classDiagram

    A..>B
    class A {
    	a
    }
    B..*C
    class B {
    	Value
    }
    class C {
    	c
    }</pre>
<p>首先，需要 <code>UCFSceneItemManager</code> 负责管理所有的 <code>SceneItem</code>，同时通过 <code>UCFSceneItemUtils</code> 提供方法给外部调用。</p>
<p>对于一个具体的 <code>SceneItem</code>，额外对其提供两个 <code>Component</code>，</p>
<blockquote>
<ol>
<li><code>SyncComponent</code>：在 <code>DS/Client</code> 生成，维护 <code>SceneItem</code> 的同步数据，这一部分数据不会被 <code>AOI</code> 裁剪，保证远距离的数据同步；</li>
<li><code>DisplayComponent</code>：仅在 <code>Client</code> 生成，随着 <code>SceneItem</code> 被 <code>AOI</code>，用于实现客户端表现。</li>
</ol>
</blockquote>
<h3 id="FlagItemSystem、ContainerSystem"><code>FlagItemSystem</code>、<code>ContainerSystem</code></h3>
<pre class="mermaid">classDiagram
	direction LR

	UCaptureFlagItemSystem..>FCaptureFlagItem
    class UCaptureFlagItemSystem {
    	ItemInstances : TMap~uint64|TSharedPtr~FCaptureFlagItem~~
    	+ CreateItem(ItemID)
    	+ DestroyItem(ItemUID)
    	+ GetItem(ItemUID)
    	- GenerateUID()
    	- RegisterClearTimer()
    	- UnregisterClearTimer()
    	- ClearAllItems(bCheckUnused)
    }
    
    %% ----- FlagItem -----
    
    namespace FlagItem {
        class FCaptureFlagItem
        class FCaptureFlagItemSyncData
    }
    
    FCaptureFlagItem..FCaptureFlagItemSyncData
    FCaptureFlagItem..UCaptureFlagContainerBase
    class FCaptureFlagItem {
    	+ InitItem(InUID, ItemID)
    	+ GetSyncData() : FCaptureFlagItemSyncData
    	+ UID / ItemID / Type / Health / MaxHealth...
    	+ Container : TWeakObjectPtr~UCaptureFlagContainerBase~
    	+ TransferReason : ECFTransferReason
    }
    
    class FCaptureFlagItemSyncData {
    	+ UID / ItemID / Type / Health / MaxHealth / TransferReason
    }
    
    %% ----- FlagContainer -----
    
    namespace FlagContainer {
    	class UCaptureFlagContainerBase
    	class UCaptureFlagContainer_WorldFlag
    	class UCaptureFlagContainer_GoalPoint
    	class UCaptureFlagContainer_Player
    }
    
    class UCaptureFlagContainerBase {
    	Items : TMap ~uint64|TWeakPtr~FCaptureFlagItem~~
    	Owner : TWeakObjectPtr~UObject~
    	+ Init(InOwner)
    	+ Uninit()
    	+ AddItem(TWeakPtr~FCaptureFlagItem~Item, Params)
    	+ RemoveItem(TWeakPtr~FCaptureFlagItem~ Item)
    	+ VerifyCanAddItem()
    	+ GetType() : ECFContainerType
    	# OnInit()
    	# OnUninit()
    	# OnAddItem(TWeakPtr~FCaptureFlagItem~Item, Params)
    	# OnRemoveItem(TWeakPtr~FCaptureFlagItem~ Item)
    }
    
    UCaptureFlagContainer_WorldFlag--|>UCaptureFlagContainerBase
    UCaptureFlagContainer_GoalPoint--|>UCaptureFlagContainerBase
    
    UCaptureFlagContainer_Player--|>UCaptureFlagContainerBase
    class UCaptureFlagContainer_Player{
    	# GetType() : ECFContainerType
    	
    }
    
    %% ----- ContainerOwner -----
    
    namespace ContainerOwner {
    	class UCaptureFlagManager
    	class UCaptureFlagComponent
    	class ICaptureFlagContainerOwnerInterface
    }
    
    
    UCaptureFlagManager..>UCaptureFlagContainer_GoalPoint
    UCaptureFlagManager..>UCaptureFlagContainer_WorldFlag
    UCaptureFlagManager..|>ICaptureFlagContainerOwnerInterface
    class UCaptureFlagManager{
    	- WorldFlagContainer
    	- GoalPointContainer
    	+ GetWorldFlagContainer()
    	+ GetGoalPointContainer()
    }
    
    UCaptureFlagComponent..|>ICaptureFlagContainerOwnerInterface
    UCaptureFlagComponent..>UCaptureFlagContainer_Player
    UCaptureFlagComponent..>FCaptureFlagItemSyncData
    class UCaptureFlagComponent{
    	- FlagContainer_Player
    	- FlagItemSyncData : FCaptureFlagItemSyncData
    	+ GetCaptureFlagContainer()
    	+ UpdateFlagItemSyncData(SyncData)
    }
    
    ICaptureFlagContainerOwnerInterface..>UCaptureFlagContainerBase
    class ICaptureFlagContainerOwnerInterface{
    	CreateFlagContainer(InOwner)
    	DestroyFlagContainer(Container)
    }</pre>
<p>首先，需要一个 <code>FlagItemSystem</code> 负责管理所有的 <code>FlagItem</code> 实例。提供基本的创建、销毁、查询功能的同时，这个 <code>FlagItemSystem</code>需要 <code>RegisterClearTimer</code>，每隔一段时间，<code>Clear</code> 不被任何一个 <code>Container</code> 持有的 <code>Item</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UCaptureFlagItemManager</span></span><br><span class="line"></span><br><span class="line"><span class="function">TWeakPtr&lt;FCaptureFlagItem&gt; <span class="title">UCaptureFlagItemManager::CreateItem</span><span class="params">(<span class="keyword">int</span> ItemID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> NewItem = MakeShared&lt;FCaptureFlagItem&gt;();</span><br><span class="line">	NewItem-&gt;<span class="built_in">Init</span>( <span class="built_in">GenerateUID</span>(),  ItemID );</span><br><span class="line">	ItemInstances.<span class="built_in">Add</span>( NewItem-&gt;<span class="built_in">GetUID</span>(), NewItem );</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">NotifyItemCreated</span>(NewItem);</span><br><span class="line">	<span class="keyword">return</span> NewItem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UCaptureFlagItemManager::DestoryItem</span><span class="params">(uint64 ItemUID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!ItemInstances.<span class="built_in">Contains</span>(ItemUID)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> Item = ItemInstances.<span class="built_in">FindRef</span>(ItemUID);</span><br><span class="line">	<span class="keyword">if</span> (Item.<span class="built_in">IsValid</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (Item-&gt;<span class="built_in">GetContainer</span>().<span class="built_in">IsValid</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 先从 Container 上移除</span></span><br><span class="line">			Item-&gt;<span class="built_in">GetContainer</span>()-&gt;<span class="built_in">RemoveItem</span>(Item);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	ItemInstances.<span class="built_in">Remove</span>(ItemUID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UCaptureFlagItemManager::ClearAllItems</span><span class="params">(<span class="keyword">bool</span> bUnused)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	TArray &lt;uint64&gt; ItemUIDs;</span><br><span class="line">	ItemInstances.<span class="built_in">GetKeys</span>(ItemUIDs);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> ItemUID : ItemUIDs)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> Item = ItemInstances.<span class="built_in">FindRef</span>(ItemUID);</span><br><span class="line">		<span class="keyword">if</span> (!Item.<span class="built_in">IsValid</span>()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> ( bUnused == <span class="literal">false</span></span><br><span class="line">			|| <span class="comment">/*未被任何 Container 持有*/</span> Item-&gt;<span class="built_in">GetContainer</span>().<span class="built_in">IsValid</span>() == <span class="literal">false</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">DestoryItem</span>(ItemUID);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于 <code>FlagItem</code>，保存 <code>Flag</code> 最基本的信息，同时提供一个 <code>CollectSyncData</code>，用于生成对应的 <code>FlagSyncData</code>，表示需要同步的数据，在 <code>ContainerOwner</code> 需要的时候进行数据同步。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FlagItem.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GENERATE_CAPTUREFLAG_ITEM_PROPERTY(Visibility, Type, Name) \</span></span><br><span class="line"><span class="meta">	public: Type Get##Name() const &#123; return Name; &#125; \</span></span><br><span class="line"><span class="meta">	public: void Set##Name(const Type&amp; Value) &#123; Name = Value; &#125; \</span></span><br><span class="line"><span class="meta">	Visibility: Type Name</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要在 FCaptureFlagItem::GetSyncData 中打包数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">USTRUCT</span>()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FCaptureFlagItemSyncData</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line">	<span class="built_in">FCaptureFlagItemSyncData</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">FString <span class="title">ToString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> FCaptureFlagItemSyncData&amp; Other) <span class="keyword">const</span>;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> FCaptureFlagItemSyncData&amp; Other) <span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> !(*<span class="keyword">this</span> == Other);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">UPROPERTY</span>()</span><br><span class="line">	uint64 UID = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">UPROPERTY</span>()</span><br><span class="line">	<span class="keyword">int</span> ItemID = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">UPROPERTY</span>()</span><br><span class="line">	<span class="keyword">int</span> Type = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">UPROPERTY</span>()</span><br><span class="line">	<span class="keyword">float</span> Health = <span class="number">0.0f</span>;</span><br><span class="line">	<span class="built_in">UPROPERTY</span>()</span><br><span class="line">	<span class="keyword">float</span> MaxHealth = <span class="number">0.0f</span>;</span><br><span class="line">	<span class="built_in">UPROPERTY</span>()</span><br><span class="line">	ECFTransferReason TransferReason;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FCaptureFlagItem</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">virtual</span> ~<span class="built_in">FCaptureFlagItem</span>() = <span class="keyword">default</span>;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(uint64 InUID, <span class="keyword">int</span> ItemID)</span></span>;</span><br><span class="line">	<span class="function">FCaptureFlagItemSyncData <span class="title">GetSyncData</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">FString <span class="title">ToString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">GENERATE_CAPTUREFLAG_ITEM_PROPERTY</span>(<span class="keyword">private</span>, uint64, UID);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">GENERATE_CAPTUREFLAG_ITEM_PROPERTY</span>(<span class="keyword">private</span>, <span class="keyword">int</span>, ItemID);</span><br><span class="line">	<span class="built_in">GENERATE_CAPTUREFLAG_ITEM_PROPERTY</span>(<span class="keyword">private</span>, <span class="keyword">int</span>, Type);</span><br><span class="line">	<span class="built_in">GENERATE_CAPTUREFLAG_ITEM_PROPERTY</span>(<span class="keyword">private</span>, <span class="keyword">float</span>, Health);</span><br><span class="line">	<span class="built_in">GENERATE_CAPTUREFLAG_ITEM_PROPERTY</span>(<span class="keyword">private</span>, <span class="keyword">float</span>, MaxHealth);</span><br><span class="line">	<span class="built_in">GENERATE_CAPTUREFLAG_ITEM_PROPERTY</span>(<span class="keyword">private</span>, <span class="keyword">int</span>, Score);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">GENERATE_CAPTUREFLAG_ITEM_PROPERTY</span>(<span class="keyword">private</span>, ECFTransferReason, TransferReason);</span><br><span class="line">	<span class="built_in">GENERATE_CAPTUREFLAG_ITEM_PROPERTY</span>(<span class="keyword">private</span>, TWeakObjectPtr&lt;class UCaptureFlagContainerBase&gt;, Container);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>需要 <code>Container</code> 来持有 <code>FlagItem</code>，在 <code>AddItem</code> 和 <code>RemoveItem</code> 内写具体的逻辑。</p>
<p>每种 <code>Container</code> 通过重载 <code>UCaptureFlagContainerBase</code> 的 <code>PURE_VIRTUAL</code> 方法  <code>GetType</code>  来定义其类型。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ContainerBase.h</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>(Abstract)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UCaptureFlagContainerBase</span> :</span> <span class="keyword">public</span> UObject</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">UCaptureFlagItemUtils</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> ECFContainerType <span class="title">GetType</span><span class="params">()</span> <span class="title">PURE_VIRTUAL</span><span class="params">( UCaptureFlagContainerBase::GetType, <span class="keyword">return</span> ECFContainerType::None; )</span> <span class="comment">// 设置 ContainerType</span></span></span><br><span class="line"><span class="function">	<span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">VerifyCanAddItem</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">CollectParams</span><span class="params">(FCaptureFlagParams&amp; Params)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">CheckCapcityValid</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(UObject* InOwner)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Uninit</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">AddItem</span><span class="params">(TWeakPtr&lt;FCaptureFlagItem&gt; Item, <span class="keyword">const</span> FCaptureFlagParams&amp; Params = &#123;&#125;)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">RemoveItem</span><span class="params">(TWeakPtr&lt;FCaptureFlagItem&gt; Item)</span></span>;</span><br><span class="line">	TArray &lt;TWeakPtr&lt;FCaptureFlagItem&gt;&gt; <span class="built_in">GetAllItems</span>();</span><br><span class="line">	<span class="function">TWeakPtr&lt;FCaptureFlagItem&gt; <span class="title">GetItem</span><span class="params">(uint64 ItemUID)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ClearItems</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="comment">// 各个 Container 自定义逻辑</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnInit</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnUninit</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnAddItem</span><span class="params">(TWeakPtr&lt;FCaptureFlagItem&gt; Item, <span class="keyword">const</span> FCaptureFlagParams&amp; Params)</span> </span>&#123;&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnRemoveItem</span><span class="params">(TWeakPtr&lt;FCaptureFlagItem&gt; Item)</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	TMap &lt;uint64, TWeakPtr&lt;FCaptureFlagItem&gt;&gt; Items &#123;&#125;;</span><br><span class="line">	TWeakObjectPtr &lt;UObject&gt; Owner = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ContainerBase.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">UCaptureFlagContainerBase::AddItem</span><span class="params">(TWeakPtr&lt;FCaptureFlagItem&gt; Item, <span class="keyword">const</span> FCaptureFlagParams&amp; Params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!Owner.<span class="built_in">IsValid</span>() || !Item.<span class="built_in">IsValid</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	uint64 ItemUID = Item.<span class="built_in">Pin</span>()-&gt;<span class="built_in">GetUID</span>();</span><br><span class="line">	<span class="keyword">if</span> (Item.<span class="built_in">Pin</span>()-&gt;<span class="built_in">GetContainer</span>().<span class="built_in">IsValid</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// Item 只能被放在一个 Container 内</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 检查是否可以获得</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">VerifyCanAddItem</span>() == <span class="literal">false</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Item.<span class="built_in">Pin</span>()-&gt;<span class="built_in">SetContainer</span>( <span class="keyword">this</span> );</span><br><span class="line">	Items.<span class="built_in">Add</span>( ItemUID, Item );</span><br><span class="line"></span><br><span class="line">	<span class="built_in">OnAddItem</span>(Item, Params);</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">UCaptureFlagContainerBase::RemoveItem</span><span class="params">(TWeakPtr&lt;FCaptureFlagItem&gt; Item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!Owner.<span class="built_in">IsValid</span>() || !Item.<span class="built_in">IsValid</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	uint64 ItemUID = Item.<span class="built_in">Pin</span>()-&gt;<span class="built_in">GetUID</span>();</span><br><span class="line">	<span class="keyword">if</span> (!Items.<span class="built_in">Contains</span>(ItemUID))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Item.<span class="built_in">Pin</span>()-&gt;<span class="built_in">SetContainer</span>(<span class="literal">nullptr</span>);</span><br><span class="line">	Items.<span class="built_in">Remove</span>(ItemUID);</span><br><span class="line">	<span class="built_in">OnRemoveItem</span>(Item);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每个 <code>Container</code> 需要一个 <code>ContainerOwner</code> 来持有，这里有三种 <code>Container</code>。</p>
<blockquote>
<ol>
<li><code>Container_WorldFlag</code>： 由 <code>CaptureFlagManager(GS)</code> 持有，一场子比赛持有一个；</li>
<li><code>Container_GoalPoint</code>：由 <code>CaptureFlagManager(GS)</code> 持有，一场子比赛持有一个；</li>
<li><code>Container_Player</code>：由 <code>CaptureFlagComponent(PS)</code> 持有，每个 <code>Player</code> 持有一个；</li>
</ol>
</blockquote>
<p>提供一个 <code>ICaptureFlagContainerOwnerInterface</code> 用于支持 <code>Create</code>、<code>Destroy</code> 对应的 <code>Container</code> 方法；</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ContainerOwner.h</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UINTERFACE</span>(BlueprintType, Blueprintable)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UCaptureFlagContainerOwnerInterface</span> :</span> <span class="keyword">public</span> UInterface</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">GENERATED_BODY</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ICaptureFlagContainerOwnerInterface</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;TIsDerivedFrom&lt;T, UCaptureFlagContainerBase&gt;::Value, T*&gt;::<span class="function">Type</span></span><br><span class="line"><span class="function">	<span class="title">CreateFlagContainer</span><span class="params">(UObject* InOwner)</span> <span class="comment">// 传入 this</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">IsValid</span>(InOwner)) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">		T* Container = NewObject&lt;T&gt;(InOwner);</span><br><span class="line">		Container-&gt;<span class="built_in">Init</span>(InOwner);</span><br><span class="line">		<span class="keyword">return</span> Container;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">DestroyFlagContainer</span><span class="params">(UCaptureFlagContainerBase* Container)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!<span class="built_in">IsValid</span>(Container)) <span class="keyword">return</span>;</span><br><span class="line">		Container-&gt;<span class="built_in">Uninit</span>();</span><br><span class="line">		Container = <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="TransferSystem"><code>TransferSystem</code></h3>
<pre class="mermaid">classDiagram
    direction LR
    
    UCFTransferSystem..>UCFTransferPolicyBase
    UCFTransferSystem..UCaptureFlagContainerBase
    class UCFTransferSystem {
        Policies : FGameSubSystemCollection~UCFTransferPolicyBase~
        friend UCFTransferPolicyBase
        - TransferItem(Item, TargetContainer, TransferReason)
    }
    
    
    UCFTransferPolicyBase..UCaptureFlagContainerBase
    class UCFTransferPolicyBase{
    	# OnInit()
    	# OnUninit()
    	# TransferItem(Item, TargetContainer)
    	# GetTransferReason() : ECFTransferReason
    }
    
    UCFTansferPolicy_PickUp--|>UCFTransferPolicyBase
    UCFTansferPolicy_Drop--|>UCFTransferPolicyBase
    UCFTansferPolicy_Reach--|>UCFTransferPolicyBase
    UCFTansferPolicy_Strike--|>UCFTransferPolicyBase</pre>
<p>首先需要一个 <code>UCFTransferSystem</code> 持有 <code>Polices</code>，管理并维护所有 <code>TransferPolicy</code> 的生命周期，具体可以参考 <a href="https://www.bearchild.top/2024/03/14/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/%5BUE%5DGameSubSystem%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/">[UE] GameSubSystem 简单实现</a>。</p>
<p>对于一个具体的 <code>TransferPolicy</code>，通过重载 <code>TransferPolicyBase</code> 的 <code>PURE_VIRTUAL</code> 方法  <code>GetTransferReason</code> ，明确其对应的 <code>TransferReason</code>，在其 <code>OnInit</code>、<code>OnUninit</code>，监听该类型需要的事件，通过对应的 <code>Callback</code> 调用到 <code>Base</code> 提供的 <code>TransferItem</code> 方法，执行 <code>Item</code> 的转移。</p>
<p>对于一次成功的 <code>Transfer</code>，显然会调用到 <code>SourceContainer</code> 的 <code>Remove</code> ，以及 <code>TargetContainer</code> 的 <code>Add</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TransferManager</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">UCaptureFlagTransferManager::TransferItem</span><span class="params">(TWeakPtr&lt;FCaptureFlagItem&gt; Item, UCaptureFlagContainerBase* TargetContainer, ECFTransferReason TransferReason)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!Item.<span class="built_in">IsValid</span>() || !<span class="built_in">IsValid</span>(TargetContainer)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> SharedItem = Item.<span class="built_in">Pin</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 检查是否可以获得</span></span><br><span class="line">	<span class="keyword">if</span> (TargetContainer-&gt;<span class="built_in">VerifyCanAddItem</span>() == <span class="literal">false</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="comment">// Source 可以为空</span></span><br><span class="line">	<span class="keyword">auto</span> SourceContainer = SharedItem-&gt;<span class="built_in">GetContainer</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (SourceContainer == TargetContainer) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	ECFTransferReason LastTransferReason = Item.<span class="built_in">Pin</span>()-&gt;<span class="built_in">GetTransferReason</span>();</span><br><span class="line">	Item.<span class="built_in">Pin</span>()-&gt;<span class="built_in">SetTransferReason</span>(TransferReason);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 若有 Source，则尝试移除</span></span><br><span class="line">	<span class="keyword">if</span> (SourceContainer.<span class="built_in">IsValid</span>() &amp;&amp; SourceContainer-&gt;<span class="built_in">RemoveItem</span>(Item) == <span class="literal">false</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Item.<span class="built_in">Pin</span>()-&gt;<span class="built_in">SetTransferReason</span>(LastTransferReason);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	FCaptureFlagParams Params&#123;&#125;;</span><br><span class="line">	<span class="keyword">if</span> (SourceContainer.<span class="built_in">IsValid</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		SourceContainer-&gt;<span class="built_in">CollectParams</span>(Params);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 尝试添加</span></span><br><span class="line">	<span class="keyword">if</span> (TargetContainer-&gt;<span class="built_in">AddItem</span>(Item, Params) == <span class="literal">false</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Item.<span class="built_in">Pin</span>()-&gt;<span class="built_in">SetTransferReason</span>(LastTransferReason);</span><br><span class="line">		<span class="comment">// 失败则还给 Source</span></span><br><span class="line">		<span class="keyword">if</span> (SourceContainer.<span class="built_in">IsValid</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			SourceContainer-&gt;<span class="built_in">AddItem</span>(Item);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TransferPolicyBase.h</span></span><br><span class="line"><span class="built_in">UCLASS</span>(Abstract)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UCFTransferPolicyBase</span> :</span> <span class="keyword">public</span> UGameModeSubSystemBase</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> ECFTransferReason <span class="title">GetTransferReason</span><span class="params">()</span> <span class="keyword">const</span> <span class="title">PURE_VIRTUAL</span><span class="params">(UCFTransferPolicyBase::GetTransferReason, <span class="keyword">return</span> ECFTransferReason::None;)</span></span>;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnInit</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnUninit</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">TransferItem</span><span class="params">(TWeakPtr&lt;FCaptureFlagItem&gt; Item, UCaptureFlagContainerBase* TargetContainer)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	TWeakObjectPtr &lt;<span class="class"><span class="keyword">class</span> <span class="title">UCaptureFlagTransferManager</span>&gt;</span> System = <span class="literal">nullptr</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TransferPolicy.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UCFTransferPolicyBase::OnInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	System = Cast&lt;UCaptureFlagTransferManager&gt;(<span class="built_in">GetOuter</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">UCFTransferPolicyBase::TransferItem</span><span class="params">(TWeakPtr&lt;FCaptureFlagItem&gt; Item, UCaptureFlagContainerBase* TargetContainer)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!System.<span class="built_in">IsValid</span>() || !Item.<span class="built_in">IsValid</span>() || !<span class="built_in">IsValid</span>(TargetContainer)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> bSucceed = <span class="literal">false</span>;</span><br><span class="line">	bSucceed = System-&gt;<span class="built_in">TransferItem</span>( Item, TargetContainer, <span class="built_in">GetTransferReason</span>() );</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> bSucceed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>Gameplay</category>
      </categories>
      <tags>
        <tag>Gameplay</tag>
        <tag>UE</tag>
      </tags>
  </entry>
  <entry>
    <title>[UE]CommonParams解决方案</title>
    <url>/2024/03/14/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/%5BUE%5DCommonParams%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1>CommonParams解决方案</h1>
<p>在实现业务框架的时候，经常需要支持传参的功能（比如 <code>Buff</code> 系统中，<code>AddBuff</code> 的时候，通常需要支持外部传入一个 <code>BuffParams</code> ，在内部解析出各种 <code>Param</code> 使用。）</p>
<p>这个参数需要支持基本的数据保存、同步等。</p>
<h2 id="初始的想法">初始的想法</h2>
<p>一个最简单的想法，是打包一个结构体，支持各种类型的传入，比如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">USTRUCT</span>()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Params</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">UPROPERTY</span>()</span><br><span class="line">    uint64 uVar0;</span><br><span class="line">    <span class="built_in">UPROPERTY</span>()</span><br><span class="line">    <span class="keyword">int</span> iVar0;</span><br><span class="line">    <span class="built_in">UPROPERTY</span>()</span><br><span class="line">    <span class="keyword">float</span> fVar0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样虽然很简单，同时可以通过反射来同步。</p>
<p>但是有一个巨大的问题，那就是在解析参数的时候，只知道 <code>Var0</code> 这种没有名字的抽象的概念，使用者需要记住 <code>Var0</code> 对应的是什么数据，很不直观。</p>
<h2 id="CommonVariantParams">CommonVariantParams</h2>
<p>维护一个 <code>CommonVariantParams</code>，通过 <code>TMap &lt;FString, FVariant&gt; ValueMap</code> 来保存数据，同时自定义 <code>NetSerialize</code> 来支持网络同步。</p>
<p>为了方便使用，还可以自定义一些构造函数，比如 <code>std::initializer_list&lt;TPairInitializer&lt;const FString&amp;, FVariant&gt;&gt; ValuePairs</code> ，这样就可以支持 <code>&#123; &#123;Key0, Val0&#125;, &#123;Key1, Val1&#125; &#125;</code> 形式的构造。</p>
<p>由于 <code>TMap</code> 以及 <code>FVariant</code> 实际上在引擎内部都已经有了合适的重载 <code>operator &lt;&lt; Archive</code>，所以自定义 <code>NetSerialize</code> 也很简单。</p>
<h3 id="使用方法">使用方法</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建Params：</span></span><br><span class="line">FCommonVariantParams Params = &#123; &#123;<span class="string">&quot;ParamA&quot;</span>, (<span class="keyword">float</span>)A&#125;, &#123;<span class="string">&quot;ParamsB&quot;</span>, (<span class="keyword">int</span>)B &#125;, &#123;<span class="string">&quot;ParamsC&quot;</span>, (FString)C &#125; <span class="comment">/* ... */</span> &#125;);</span><br><span class="line"><span class="comment">// 解析Params:</span></span><br><span class="line"><span class="keyword">float</span> A = BuffParams.GetValue&lt;<span class="keyword">float</span>&gt;(<span class="string">&quot;ParamA&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> B = BuffParams.GetValue&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;ParamB&quot;</span>);</span><br><span class="line">FString C = BuffParams.GetValue&lt;FString&gt;(<span class="string">&quot;ParamC&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="具体实现">具体实现</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CommonVariantParams.h</span></span><br><span class="line"><span class="built_in">USTRUCT</span>(BlueprintType)</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FCommonVariantParams</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line">	<span class="built_in">FCommonVariantParams</span>() = <span class="keyword">default</span>;</span><br><span class="line">	<span class="built_in">FCommonVariantParams</span>(<span class="keyword">const</span> FString&amp; Key, FVariant Value);</span><br><span class="line">	<span class="built_in">FCommonVariantParams</span>(std::initializer_list&lt;TPairInitializer&lt;<span class="keyword">const</span> FString&amp;, FVariant&gt;&gt; ValuePairs);</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SetValue</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName, FVariant Value)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Contains</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ValueType = <span class="keyword">float</span>&gt; ValueType <span class="built_in">GetValue</span>(<span class="keyword">const</span> FString&amp; FieldName, ValueType Default = &#123;&#125;) <span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!ValueMap.<span class="built_in">Contains</span>(FieldName)) <span class="keyword">return</span> Default;</span><br><span class="line">		<span class="keyword">if</span> (TVariantTraits&lt;ValueType&gt;::<span class="built_in">GetType</span>() != ValueMap[FieldName].<span class="built_in">GetType</span>()) <span class="keyword">return</span> Default;</span><br><span class="line">		<span class="keyword">return</span> ValueMap[FieldName].GetValue&lt;ValueType&gt;();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function">FString <span class="title">ToString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">const</span> TMap&lt;FString, FVariant&gt;&amp; <span class="title">GetValueMap</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">NetSerialize</span><span class="params">(FArchive&amp; Ar, class UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span>;</span><br><span class="line"></span><br><span class="line">	FCommonVariantParams <span class="keyword">operator</span>+(<span class="keyword">const</span> FCommonVariantParams&amp; OtherParams);</span><br><span class="line">	FCommonVariantParams&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> FCommonVariantParams&amp; OtherParams)</span><br><span class="line">	&#123;</span><br><span class="line">		ValueMap = OtherParams.<span class="built_in">GetValueMap</span>();</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">const</span> FCommonVariantParams&amp; OtherParams)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ValueMap.<span class="built_in">begin</span>(); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ValueMap.<span class="built_in">begin</span>(); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ValueMap.<span class="built_in">end</span>(); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ValueMap.<span class="built_in">end</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	TMap&lt;FString, FVariant&gt; ValueMap;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SGGAMEMODE_API</span> <span class="title">TStructOpsTypeTraits</span>&lt;</span>FCommonVariantParams&gt; : TStructOpsTypeTraitsBase2&lt;FCommonVariantParams&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">	&#123;</span></span><br><span class="line">		WithNetSerializer = <span class="literal">true</span>,</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CommonVariantParams.cpp</span></span><br><span class="line">FCommonVariantParams::<span class="built_in">FCommonVariantParams</span>(<span class="keyword">const</span> FString&amp; Key, FVariant Value)</span><br><span class="line">&#123;</span><br><span class="line">	ValueMap.<span class="built_in">Add</span>(Key, Value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FCommonVariantParams::<span class="built_in">FCommonVariantParams</span>(std::initializer_list&lt;TPairInitializer&lt;<span class="keyword">const</span> FString&amp;, FVariant&gt;&gt; ValuePairs)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; Pair : ValuePairs)</span><br><span class="line">	&#123;</span><br><span class="line">		ValueMap.<span class="built_in">Add</span>(Pair.Key, Pair.Value);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FCommonVariantParams::SetValue</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName, FVariant Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ValueMap.<span class="built_in">Add</span>(FieldName, <span class="built_in">FVariant</span>(Value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FCommonVariantParams::Contains</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> ValueMap.<span class="built_in">Contains</span>(FieldName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FCommonVariantParams::IsEmpty</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> ValueMap.<span class="built_in">IsEmpty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FString <span class="title">FCommonVariantParams::ToString</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FString DebugString = FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Params:&quot;</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; [Key, Value] : ValueMap)</span><br><span class="line">	&#123;</span><br><span class="line">		DebugString += FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;[%s=%s]&quot;</span>), *Key, *USGStringUtils::<span class="built_in">ToString</span>(Value));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> DebugString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> TMap&lt;FString, FVariant&gt;&amp; <span class="title">FCommonVariantParams::GetValueMap</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> ValueMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FCommonVariantParams::NetSerialize</span><span class="params">(FArchive&amp; Ar, class UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	bOutSuccess = <span class="literal">true</span>;</span><br><span class="line">	Ar &lt;&lt; ValueMap;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FCommonVariantParams FCommonVariantParams::<span class="keyword">operator</span>+(<span class="keyword">const</span> FCommonVariantParams&amp; OtherParams)</span><br><span class="line">&#123;</span><br><span class="line">	FCommonVariantParams CombinedParams = *<span class="keyword">this</span>;</span><br><span class="line">	CombinedParams.<span class="built_in">Merge</span>(OtherParams);</span><br><span class="line">	<span class="keyword">return</span> CombinedParams;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FCommonVariantParams::Merge</span><span class="params">(<span class="keyword">const</span> FCommonVariantParams&amp; OtherParams)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; [Key, Value] : OtherParams.<span class="built_in">GetValueMap</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 覆盖</span></span><br><span class="line">		<span class="built_in">SetValue</span>(Key, Value);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FCommonVariantParams::Clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ValueMap.<span class="built_in">Empty</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Lua">Lua</h3>
<p>对于这个 <code>CommonVariantParams</code>，还可以扩展一些方法，让这些参数可以通过 <code>Unlua</code> 在 <code>Lua</code> 脚本中设置与访问。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FCommonVariantParams::SetValue</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName, FVariant Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ValueMap.<span class="built_in">Add</span>(FieldName, <span class="built_in">FVariant</span>(Value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FCommonVariantParams::SetIntValue</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName, int32 Value)</span> </span>&#123; <span class="built_in">SetValue</span>(FieldName, Value); &#125;</span><br><span class="line"><span class="function">int32 <span class="title">FCommonVariantParams::GetIntValue</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName, int32 Default <span class="comment">/*= &#123;&#125;*/</span>)</span> </span>&#123; <span class="keyword">return</span> GetValue&lt;int32&gt;(FieldName, Default); &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出：</span></span><br><span class="line"><span class="comment">// define 在 UnluaEx.h 中</span></span><br><span class="line"><span class="built_in">BEGIN_EXPORT_REFLECTED_CLASS</span>(FCommonVariantParams)</span><br><span class="line">    <span class="built_in">ADD_FUNCTION</span>(SetIntValue)</span><br><span class="line">	<span class="built_in">ADD_FUNCTION</span>(GetIntValue)</span><br><span class="line"><span class="built_in">END_EXPORT_CLASS</span>()</span><br><span class="line"><span class="built_in">IMPLEMENT_EXPORTED_CLASS</span>(FCommonVariantParams)</span><br></pre></td></tr></table></figure>
<h3 id="具体业务">具体业务</h3>
<p>特别地，具体业务使用的时候，可以继承一个自己的 <code>Params</code> 来使用，以 <code>FGameplayBuffParams</code> 为例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">USTRUCT</span>()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FGameplayBuffParams</span> :</span> <span class="keyword">public</span> FCommonVariantParams</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">GENERATED_BODY</span>()</span><br><span class="line">	<span class="keyword">using</span> FCommonVariantParams::FCommonVariantParams;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>Gameplay</category>
      </categories>
      <tags>
        <tag>Gameplay</tag>
        <tag>UE</tag>
      </tags>
  </entry>
  <entry>
    <title>[UE]GameSubSystem简单实现</title>
    <url>/2024/03/14/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/%5BUE%5DGameSubSystem%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1>GameSubSystem简单实现</h1>
<p>一种简单的维护 <code>SubSystem</code> 的解决方案，参考 <code>UE</code> 自带的 <code>FSubsystemCollection</code> 实现。</p>
<p>在维护各个业务时，经常需要将一个上层的 <code>Manager</code>，下面再拆出若干个子系统，需要一种快捷的方法快速扩展出一套 <code>SUbSystem</code> 系统。</p>
<h2 id="基本结构">基本结构</h2>
<pre class="mermaid">classDiagram
	Manager-->FGameSubSystemCollection
	class Manager {
	SubSystemCollections : FGameSubSystemCollection~USubSystemBase~
	}
	
	class FGameSubSystemCollection {
	FGameSubSystemCollection()
	
	}
	
	FGameSubSystemCollectionBase<|--FGameSubSystemCollection
	class FGameSubSystemCollectionBase {
        Outer : TWeakObjectPtr~UObject~
        SubSystemMap : TMap[UClass*,TStrongObjectPtr~UGameSubSystemBase~]
        BaseType : UClass*
        
        Init()
        Uninit()
        Tick()
        
        FGameSubSystemCollectionBase(UClass* InBaseType)
        AddSubSystemByClass(UClass* SubSystemClass)
        RemoveSubSystemByClass(UClass* SubSystemClass)
    }
   
    
    FGameSubSystemCollectionBase..>UGameSubSystemBase
    class UGameSubSystemBase {
    	LastTickTime : float
    	
    	+ Init()
    	+ Uninit()
    	+ Tick()
    	# OnInit()
    	# OnUnInit()
    	# OnTick(float DeltaTime)
    	
    	# GetTickInternal()
    	# GetTimeNow()
    	
    }
    
    UGameSubSystemBase<|--UGameSubSystem
    class UGameSubSystem {
    	# OnInit()
    	# OnUnInit()
    	# OnTick(float DeltaTime)
    	
    	# GetTickInternal()
    }</pre>
<h2 id="使用方法">使用方法</h2>
<p>由 <code>Manager</code> 持有对应类型的 <code>SubSystemCollection</code>，主动调用 <code>Init</code>、<code>Uninit</code>、<code>Tick</code> 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Manager.h</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line">	<span class="keyword">typename</span> TEnableIf&lt;TIsDerivedFrom&lt;T, UGameSubSystem&gt;::Value, T*&gt;::<span class="function">Type</span></span><br><span class="line"><span class="function">	<span class="title">GetSubSystem</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> SubSystemCollections.GetSubSystem&lt;T&gt;();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	FGameSubSystemCollection &lt;UGameSubSystem&gt; SubSystemCollections;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Manager.cpp</span></span><br><span class="line"><span class="comment">// 在合适的时机：</span></span><br><span class="line">SubSystemCollections.<span class="built_in">Init</span>()</span><br><span class="line">SubSystemCollections.<span class="built_in">Uninit</span>()</span><br><span class="line">SubSystemCollections.<span class="built_in">Tick</span>()</span><br></pre></td></tr></table></figure>
<h2 id="SubSystemCollection">SubSystemCollection</h2>
<p><code>SubSystemCollection</code> 负责收集与管理所有的 <code>SubSystem</code>。</p>
<p>在 <code>SubSystemCollectionBase</code> 中，提供一个 <code>BaseClass</code>，这个 <code>BaseClass</code> 由对应的 <code>SubSystemCollection</code> 在初始化的时候传入：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TBaseType&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FGameSubSystemCollection</span> :</span> FGameSubSystemCollectionBase</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in"><span class="keyword">static_assert</span></span>(TIsDerivedFrom&lt;TBaseType, UGameSubSystemBase&gt;::Value, <span class="string">&quot;TBaseType must inherit from UGameSubSystemBase&quot;</span>);</span><br><span class="line">	</span><br><span class="line">    <span class="built_in">FGameSubSystemCollection</span>() : <span class="built_in">FGameSubSystemCollectionBase</span>(TBaseType::<span class="built_in">StaticClass</span>())</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FGameSubSystemCollectionBase::<span class="built_in">FGameSubSystemCollectionBase</span>(UClass* InBaseType)</span><br><span class="line">	: <span class="built_in">BaseType</span>(InBaseType)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">check</span>(BaseType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 <code>Init</code> 的时候，根据 <code>BaseClass</code>，找到所有继承于该类的 <code>Class</code> （<code>GetDerivedClasses(BaseType, SubSystemClasses, true)</code>），然后进行 <code>AddSubSystemByClass</code>。</p>
<p>用一个 <code>TMap &lt; UClass*, TStrongObjectPtr&lt;UGameSubSystemBase&gt; &gt; SubSystemMap</code> 将所有的 <code>SubSystem</code> 实例保存下来，这里由于我们期望 <code>FGameSubSystemCollection</code> 可以在编译期决定类型，所以使用了 <code>template&lt;typename TBaseType&gt;</code> ，导致无法走 <code>UHT</code> 的反射，挂上<code>UPROPERTY()</code> 来保证生命周期。所以这里需要用 <code>TStrongObjectPtr</code> 来保证这个 <code>Collection</code> 内部的 <code>SubSystem</code> 不会被 <code>GC</code> 掉，同时保证被 <code>Manager</code> 持有时生命周期正确。</p>
<p>同时我们需要</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SubSystemCollectionBase.h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FGameSubSystemCollectionBase</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">// 外部调用</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(UObject* InOuter)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Uninit</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Tick</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="built_in">FGameSubSystemCollectionBase</span>(UClass* InBaseType);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">TSubSystemClass</span>&gt;</span></span><br><span class="line">	<span class="keyword">typename</span> TEnableIf&lt;TIsDerivedFrom&lt;TSubSystemClass, UGameSubSystemBase&gt;::Value, UGameSubSystemBase*&gt;::<span class="function">Type</span></span><br><span class="line"><span class="function">	<span class="title">GetSubSystemInternal</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">auto</span> SubSystem = SubSystemMap.<span class="built_in">FindRef</span>( TSubSystemClass::<span class="built_in">StaticClass</span>() ); SubSystem.<span class="built_in">IsValid</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> SubSystem.<span class="built_in">Get</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">TSubSystemClass</span>&gt;</span></span><br><span class="line">	<span class="keyword">typename</span> TEnableIf&lt;TIsDerivedFrom&lt;TSubSystemClass, UGameSubSystemBase&gt;::Value, TArray&lt;UGameSubSystemBase*&gt;&gt;::<span class="function">Type</span></span><br><span class="line"><span class="function">	<span class="title">GetSubSystemsInternal</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		TArray &lt;TSubSystemClass*&gt; OutArray;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span>&amp; Pair : SubSystemMap)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!Pair.Value.<span class="built_in">IsValid</span>()) <span class="keyword">continue</span>;</span><br><span class="line">			&#123;</span><br><span class="line">				OutArray.<span class="built_in">Add</span>( Pair.Value.<span class="built_in">Get</span>() );</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> OutArray;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="function">UGameSubSystemBase* <span class="title">AddSubSystemByClass</span><span class="params">(UClass* SubSystemClass)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">RemoveSubSystemByClass</span><span class="params">(UClass* SubSystemClass)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	TWeakObjectPtr &lt;UObject&gt; Outer = <span class="literal">nullptr</span>;</span><br><span class="line">	TMap &lt; UClass*, TStrongObjectPtr&lt;UGameSubSystemBase&gt; &gt; SubSystemMap;</span><br><span class="line">	UClass* BaseType = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SubSystemCollectionBase.cpp</span></span><br><span class="line">FGameSubSystemCollectionBase::<span class="built_in">FGameSubSystemCollectionBase</span>(UClass* InBaseType)</span><br><span class="line">	: <span class="built_in">BaseType</span>(InBaseType)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">check</span>(BaseType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FGameSubSystemCollectionBase::Init</span><span class="params">(UObject* InOuter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Outer.<span class="built_in">IsValid</span>()) <span class="keyword">return</span>; <span class="comment">// already initialized</span></span><br><span class="line">	<span class="keyword">if</span> (InOuter == <span class="literal">nullptr</span>) <span class="keyword">return</span>; <span class="comment">// invalid Outer</span></span><br><span class="line"></span><br><span class="line">	Outer = InOuter;</span><br><span class="line">	</span><br><span class="line">	TArray&lt;UClass*&gt; SubSystemClasses;</span><br><span class="line">	<span class="built_in">GetDerivedClasses</span>(BaseType, SubSystemClasses, <span class="literal">true</span>);</span><br><span class="line">	<span class="keyword">for</span> (UClass* SubSystemClass : SubSystemClasses)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">AddSubSystemByClass</span>(SubSystemClass);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FGameSubSystemCollectionBase::Tick</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span>&amp; Pair : SubSystemMap)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> SubSystem = Pair.Value;</span><br><span class="line">		<span class="keyword">if</span> (SubSystem.<span class="built_in">IsValid</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			SubSystem-&gt;<span class="built_in">Tick</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FGameSubSystemCollectionBase::Uninit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	TArray &lt;UClass*&gt; SubSystemClasses;</span><br><span class="line">	SubSystemMap.<span class="built_in">GetKeys</span>(SubSystemClasses);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> SubSystemClass : SubSystemClasses)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">RemoveSubSystemByClass</span>(SubSystemClass);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">UGameSubSystemBase* <span class="title">FGameSubSystemCollectionBase::AddSubSystemByClass</span><span class="params">(UClass* SubSystemClass)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (SubSystemClass == <span class="literal">nullptr</span> || !Outer.<span class="built_in">IsValid</span>()) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="keyword">if</span> (SubSystemClass-&gt;<span class="built_in">HasAnyClassFlags</span>(CLASS_Abstract)) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (SubSystemMap.<span class="built_in">Contains</span>( SubSystemClass ))</span><br><span class="line">		<span class="keyword">return</span> SubSystemMap.<span class="built_in">FindRef</span>(SubSystemClass).<span class="built_in">Get</span>();</span><br><span class="line"></span><br><span class="line">	UGameSubSystemBase* SubSystem = NewObject&lt;UGameSubSystemBase&gt;(Outer.<span class="built_in">Get</span>(), SubSystemClass);</span><br><span class="line">	SubSystemMap.<span class="built_in">Add</span>( SubSystemClass, <span class="built_in">TStrongObjectPtr</span>(SubSystem)  );</span><br><span class="line">	SubSystem-&gt;<span class="built_in">Init</span>();</span><br><span class="line">	<span class="keyword">return</span> SubSystem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FGameSubSystemCollectionBase::RemoveSubSystemByClass</span><span class="params">(UClass* SubSystemClass)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (SubSystemClass == <span class="literal">nullptr</span> || !Outer.<span class="built_in">IsValid</span>()) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (!SubSystemMap.<span class="built_in">Contains</span>( SubSystemClass )) <span class="keyword">return</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">auto</span> SubSystem = SubSystemMap.<span class="built_in">FindAndRemoveChecked</span>(SubSystemClass);</span><br><span class="line">	<span class="keyword">if</span> (!SubSystem.<span class="built_in">IsValid</span>()) <span class="keyword">return</span>;</span><br><span class="line">	SubSystem-&gt;<span class="built_in">Uninit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SubSystemCollection.h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TBaseType&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FGameSubSystemCollection</span> :</span> FGameSubSystemCollectionBase</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in"><span class="keyword">static_assert</span></span>(TIsDerivedFrom&lt;TBaseType, UGameSubSystemBase&gt;::Value, <span class="string">&quot;TBaseType must inherit from UGameSubSystemBase&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">FGameSubSystemCollection</span>() : <span class="built_in">FGameSubSystemCollectionBase</span>(TBaseType::<span class="built_in">StaticClass</span>())</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">TSubSystemClass</span>&gt;</span></span><br><span class="line">	<span class="keyword">typename</span> TEnableIf&lt;TIsDerivedFrom&lt;TSubSystemClass, TBaseType&gt;::Value, TSubSystemClass*&gt;::<span class="function">Type</span></span><br><span class="line"><span class="function">	<span class="title">GetSubSystem</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;TSubSystemClass*&gt;(GetSubSystemInternal&lt;TSubSystemClass&gt;());</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">TSubSystemClass</span>&gt;</span></span><br><span class="line">	<span class="keyword">typename</span> TEnableIf&lt;TIsDerivedFrom&lt;TSubSystemClass, TBaseType&gt;::Value, TArray&lt;TSubSystemClass*&gt;&gt;::<span class="function">Type</span></span><br><span class="line"><span class="function">	<span class="title">GetSubSystems</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">const</span> TArray&lt;UGameSubSystemBase*&gt;&amp; Array = GetSubSystemsInternal&lt;TSubSystemClass&gt;();</span><br><span class="line">		<span class="keyword">const</span> TArray&lt;TSubSystemClass*&gt;* SpecificArray = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> TArray&lt;TSubSystemClass*&gt;*&gt;(&amp;Array);</span><br><span class="line">		<span class="keyword">return</span> *SpecificArray;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>特别地，注意这里的 <code>FGameSubSystemCollection::GetSubSystems</code>，由于 <code>GetSubSystemsInternal</code> 返回的都是 <code>UGameSubSystemBase</code> 指针，内存大小和 <code>TSubSystemClass</code> 指针一样，所以可以使用 <code>reinterpret_cast</code> 直接将整个数组的类型转化，节省一步 <code>O(n)</code> 来 <code>cast</code> 的开销。</p>
<h2 id="SubSystemBase">SubSystemBase</h2>
<p>我们需要一个 <code>SubSystemBase</code>，负责管理给 <code>SubSystemCollection</code> 持有，同时给各自定义的 <code>SubSystem</code> 继承。</p>
<p>提供一些基础的方法，<code>Init</code>、<code>Uninit</code>、<code>Tick</code> 给 <code>SubSystemCollection</code> 调用。</p>
<p>同时子类只需要关心：<code>OnInit</code>、<code>OnUninit</code>、<code>OnTick</code>。</p>
<p>对于各自的业务，大家各自继承自定义的 <code>SubSystemBase</code> ，然后再自定义各自的 <code>SubSytem</code> 继承于这个业务扩展出来的 <code>SubSystemBase</code> 即可。</p>
<p><code>SubSystemBase-&gt;GetOuter()</code> 就可以拿到对应的 <code>Manager</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UCLASS</span>(Abstract)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UGameSubSystemBase</span> :</span> <span class="keyword">public</span> UObject</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">GENERATED_BODY</span>()</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Tick</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Uninit</span><span class="params">()</span></span>;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnInit</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnUninit</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnTick</span><span class="params">(<span class="keyword">float</span> DeltaTime)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">float</span> <span class="title">GetTickInternal</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">-1.0f</span>; &#125;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">float</span> <span class="title">GetTimeNow</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="keyword">float</span> LastTickTime;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>对于 <code>Tick</code> ，维护一个 <code>LastTickTime</code>，用于计算 <code>DeltaTime</code> 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameSubSystemBase::Tick</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">float</span> TickInternal = <span class="built_in">GetTickInternal</span>();</span><br><span class="line">	<span class="keyword">if</span> (TickInternal &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> CurrentTickTime = <span class="built_in">GetTimeNow</span>();</span><br><span class="line">	<span class="keyword">if</span> (CurrentTickTime - LastTickTime &gt; TickInternal)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">OnTick</span>(CurrentTickTime - LastTickTime);</span><br><span class="line">		LastTickTime = CurrentTickTime;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>Gameplay</category>
      </categories>
      <tags>
        <tag>Gameplay</tag>
        <tag>UE</tag>
      </tags>
  </entry>
  <entry>
    <title>[UE]TeamSystem框架</title>
    <url>/2024/03/14/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/%5BUE%5DTeamSystem%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1>TeamSystem框架</h1>
<p>一个简单的组队系统：支持玩家的 <code>加入</code>、<code>退出</code> 队伍，以及维护队伍的各种数据（比如 <code>Members</code>、<code>Score</code>）。</p>
<p>首先需要一个全局的 <code>TeamManager</code> ，以及一个在 <code>Player</code> 身上的 <code>TeamComponent</code> 负责维护 <code>Player</code> 相关的组队信息；</p>
<p>同时，将业务拆分为多个 <code>TeamSubSystems</code>。</p>
<p>以及最重点的 <strong>数据同步</strong>，根据不同的数据类型，进行不同方式的数据同步。</p>
<h2 id="TeamSubSystemBase">TeamSubSystemBase</h2>
<p>首先，需要将业务拆分为多个 <code>SubSystem</code> ，通过 <code>TeamManager</code> 持有  <code>SubSystemCollection</code> 来实现这个功能。</p>
<p>需要一个 <code>TeamSubSystemBase</code> ，在这里传入 <code>System = TeamManager</code> 以及为后续同步数据的分发做准备。</p>
<p>参考：<a href="https://www.bearchild.top/2024/03/14/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/%5BUE%5DGameSubSystem%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/">[UE]GameSubSystem简单实现</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UCLASS</span>(Abstract)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UTeamSubSystemBase</span> :</span> <span class="keyword">public</span> UGameSubSystemBase</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">GENERATED_BODY</span>()</span><br><span class="line">	</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnInit</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnUninit</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	TWeakObjectPtr &lt;<span class="class"><span class="keyword">class</span> <span class="title">UTeamManager</span>&gt;</span> System = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamSubSystemBase::OnInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Super::<span class="built_in">OnInit</span>();</span><br><span class="line">	System = Cast&lt;UTeamManager&gt;(<span class="built_in">GetOuter</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="TeamMemberSystem">TeamMemberSystem</h2>
<p>一个组队系统，最基本的功能就是玩家的 <code>JoinTeam</code>、<code>LeaveTeam</code>，对应的，需要 <code>TeamSystem</code> 支持队伍的 <code>Create</code>、<code>Destroy</code> 。</p>
<pre class="mermaid">classDiagram
    UTeamManager..>UTeam
    UTeamManager..>UTeamSubSystemBase
    class UTeamManager {
        SubSystemCollections : FGameSubSystemCollection~UTeamSubSystemBase~
        Teams : TMap~uint64|UTeam*~ 
        CreateTeam()
        DestoryTeam()
        GetTeam(uint64 TeamID)
    }
    
	class UTeamComponent {
        TeamID : uint64
        UpdateTeamID()
    }
    
    class UTeamSubSystemBase {
    	System : TWeakObjectPtr~class UTeamManager~
    	# OnInit()
    	# OnUninit()
    }
    
    
    UTeamMemberSystem..>UTeam
    UTeamSubSystemBase<|--UTeamMemberSystem
    class UTeamMemberSystem {
    	+JoinTeam(TeamID, PlayerUID)
    	+LeaveTeam(PlayerUID)
    	- GetOrCreateTeam(TeamID)
    }
    
    UTeam..>UTeamComponent
    class UTeam {
    	TeamID : uint64
    	Members : TArray~ TWeakObjectPtr[UTeamComponent] ~
    }</pre>
<p><em>伪代码示例：</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamMemberSystem::JoinTeam</span><span class="params">(uint64 TeamID, uint64 PlayerUID, <span class="keyword">bool</span> bProcessID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">IsStandaloneOrDS</span>(<span class="keyword">this</span>)) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">auto</span> Team = <span class="built_in">GetOrCreateTeam</span>(TeamID);</span><br><span class="line">	TeamComponent-&gt;<span class="built_in">UpdateTeamID</span>(Team-&gt;<span class="built_in">GetTeamID</span>());</span><br><span class="line">	Team-&gt;<span class="built_in">AddMember</span>(TeamComponent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamMemberSystem::LeaveTeam</span><span class="params">(uint64 PlayerUID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">IsStandaloneOrDS</span>(<span class="keyword">this</span>)) <span class="keyword">return</span>;</span><br><span class="line">	Team-&gt;<span class="built_in">RemoveMember</span>(TeamComponent);</span><br><span class="line">	TeamComponent-&gt;<span class="built_in">UpdateTeamID</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (Team-&gt;<span class="built_in">GetMembers</span>().<span class="built_in">Num</span>() == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		System-&gt;<span class="built_in">DestoryTeam</span>( TeamID );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">UTeam* <span class="title">UTeamMemberSystem::GetOrCreateTeam</span><span class="params">(uint64 TeamID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">auto</span> Team = System-&gt;<span class="built_in">GetTeam</span>(TeamID); !<span class="built_in">IsValid</span>(Team))</span><br><span class="line">	&#123;</span><br><span class="line">		System-&gt;<span class="built_in">CreateTeam</span>(TeamID);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> System-&gt;<span class="built_in">GetTeam</span>(TeamID);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">UTeam* <span class="title">UTeamManager::CreateTeam</span><span class="params">(uint64 TeamID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">GetTeam</span>(TeamID) != <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	UTeam* NewTeam = NewObject&lt;UTeam&gt;(<span class="keyword">this</span>);</span><br><span class="line">	NewTeam-&gt;<span class="built_in">Init</span>(TeamID);</span><br><span class="line">	Teams.<span class="built_in">Add</span>( TeamID, NewTeam );</span><br><span class="line">	<span class="keyword">return</span> NewTeam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamManager::DestoryTeam</span><span class="params">(uint64 TeamID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> Team = <span class="built_in">GetTeam</span>(TeamID);</span><br><span class="line">	<span class="keyword">if</span> (!<span class="built_in">IsValid</span>(Team)) <span class="keyword">return</span>;</span><br><span class="line">	Team-&gt;<span class="built_in">Uninit</span>();</span><br><span class="line">	Teams.<span class="built_in">Remove</span>(TeamID);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeam::Init</span><span class="params">(uint64 InTeamID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	TeamID = InTeamID;</span><br><span class="line">	Members.<span class="built_in">Empty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeam::AddMember</span><span class="params">(TWeakObjectPtr&lt;UTeamComponent&gt; InMember)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Members.<span class="built_in">Add</span>(InMember);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeam::RemoveMember</span><span class="params">(TWeakObjectPtr&lt;UTeamComponent&gt; InMember)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Members.<span class="built_in">Remove</span>(InMember);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="TeamScoreSystem">TeamScoreSystem</h2>
<p>组队需要得分，每个队伍维护一个 <code>Score</code>。</p>
<pre class="mermaid">classDiagram
    
    class UTeamSubSystemBase {
    }
    
    UTeamScoreSystem--|>UTeamSubSystemBase
    class UTeamScoreSystem {
    	+ AddScore(TeamID, InScore)
    	+ ClearScore(TeamID)
    }
   
    UTeamScoreSystem..>UTeam
    class UTeam {
    	Score : float
    	SetScore()
    	GetScore()
    }</pre>
<p><em>伪代码示例：</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamScoreSystem::AddScore</span><span class="params">(uint64 TeamID, <span class="keyword">int</span> InAddScore)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">IsStandaloneOrDS</span>(<span class="keyword">this</span>)) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">int</span> LastScore = <span class="built_in">GetScore</span>(TeamID);</span><br><span class="line">	<span class="keyword">int</span> NewScore = LastScore + InAddScore;</span><br><span class="line">	<span class="built_in">SetScore</span>( TeamID, NewScore);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamScoreSystem::ClearScore</span><span class="params">(uint64 TeamID)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="params">(!IsStandaloneOrDS(<span class="keyword">this</span>))</span> <span class="keyword">return</span></span>;</span><br><span class="line">	<span class="built_in">SetScore</span>( TeamID, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="TeamSyncSystem"><em><strong>TeamSyncSystem</strong></em></h2>
<p>数据的同步，是该组队系统的 <strong>重点</strong> ，考虑一下对于各种各样的数据，有哪些本质的类型。</p>
<p>比如上述有 <code>队伍成员 Members</code>、<code>队伍分数 Score</code> 这两种数据，这两个数据的差别在于：</p>
<blockquote>
<p>① Members：对于玩家客户端，自己只关心自己队伍的 Members，不关心其它队伍的 Members</p>
<p>② Score：对于玩家客户端，不仅关心自己队伍的 Score，也关心其它队伍的 Score</p>
</blockquote>
<p>于是将数据拆为这两种类型，进行不同的同步方式，同时需要将同步数据的 <code>转发</code>、<code>通知</code> 分发到各个 <code>SubSystem</code> 里执行。</p>
<p>将这数据定义为这两种类型：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UENUM</span>()</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">ETeamSyncDataType</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	None           = <span class="number">0</span>,</span><br><span class="line">	OwnerOnly      = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">	Common         = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">ENUM_CLASS_FLAGS</span>(ETeamSyncDataType);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>FTeamSyncData_OwnerOnly</code>：<code>Client-OwnerOnly Data</code>, 通过 <code>TeamComponent(PlayerState)-OwnerOnly</code> 同步（若某个字段，<code>Client</code> 只关心自己队伍上的，则放在这）</p>
<p><code>FTeamSyncData_Common</code>： <code>All Data</code>, 通过 <code>TeamManager(GameState)</code> 同步（若某个数据，<code>1P</code> 关心其它队伍上的数据，则放在这）</p>
</blockquote>
<p>特别注意的是，有时候某些数据同时存在于两种类型中，比如 <code>TeamID</code>。</p>
<h3 id="数据类型：OwnerOnlyData">数据类型：OwnerOnlyData</h3>
<p><code>OwnerOnlyData</code> 比较简单，直接将数据打包好，然后设置给 <code>TeamComponent(PS)</code> 来同步即可，将同步数据 <code>Condition</code> 设置为 <code>COND_OwnerOnly</code> 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">USTRUCT</span>()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FTeamSyncData_OwnerOnly</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line">	<span class="built_in">FTeamSyncData_OwnerOnly</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">UPROPERTY</span>()</span><br><span class="line">	uint64 TeamID;</span><br><span class="line">	<span class="built_in">UPROPERTY</span>()</span><br><span class="line">	TArray &lt;uint64&gt; MemberUIDs;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> FTeamSyncData_OwnerOnly&amp; Other) <span class="keyword">const</span>;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> FTeamSyncData_OwnerOnly&amp; Other) <span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> !(*<span class="keyword">this</span> == Other);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">FString <span class="title">ToString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="数据类型：CommonData">数据类型：CommonData</h3>
<p><code>CommonData</code> 的原始数据比较简单：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">USTRUCT</span>()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FTeamSyncData_Common</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line">	<span class="built_in">FTeamSyncData_Common</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">UPROPERTY</span>()</span><br><span class="line">	uint64 TeamID = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">UPROPERTY</span>()</span><br><span class="line">	<span class="keyword">int</span> Score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="keyword">friend</span> FArchive&amp; <span class="keyword">operator</span>&lt;&lt;(FArchive&amp; Ar, FTeamSyncData_Common&amp; Data);</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> FTeamSyncData_Common&amp; Other) <span class="keyword">const</span>;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> FTeamSyncData_Common&amp; Other) <span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> !(*<span class="keyword">this</span> == Other);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">FString <span class="title">ToString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">FArchive&amp; <span class="keyword">operator</span>&lt;&lt;(FArchive&amp; Ar, FTeamSyncData_Common&amp; Data)</span><br><span class="line">&#123;</span><br><span class="line">	Ar &lt;&lt; Data.TeamID;</span><br><span class="line">	Ar &lt;&lt; Data.Score;</span><br><span class="line">	<span class="keyword">return</span> Ar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是由于这个数据通过 <code>TeamManager</code> 来同步，需要维护 <code>TeamID-&gt;CommonData</code> 这个映射。</p>
<p>但是由于 <code>TMap</code> 不能直接挂 <code>UPROPERTY()</code> 进行同步，所以需要自定义一下 <code>NetSerialize</code> 来进行同步。</p>
<p>在 <code>TeamManager</code> 中设置：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Manager</span></span><br><span class="line">&#123; </span><br><span class="line">	<span class="built_in">UPROPERTY</span>(Replicated, PushModelProperty, ReplicatedUsing = OnRep_SyncDatas)</span><br><span class="line">	FTeamSyncCommonDatas SyncDatas;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过一个 <code>SyncDatas</code> 来同步数据，这个 <code>SyncDatas</code> 里保存了 <code>TMap &lt;uint64, FTeamSyncData_Common&gt; Datas</code>，以及一个用于触发同步的 <code>SyncCount</code>。</p>
<p>每次数据 <code>Update</code> 或者 <code>Remove</code> 的时候，<code>MARK_SYNC_DIRTY</code> 来将 <code>SyncCount++</code>，并且 <code>MarkDirty</code> 一下，触发数据同步。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">USTRUCT</span>()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FTeamSyncCommonDatas</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line">	<span class="built_in">FTeamSyncCommonDatas</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">FTeamSyncData_Common <span class="title">GetData</span><span class="params">(uint64 TeamID)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">const</span> TMap&lt;uint64, FTeamSyncData_Common&gt;&amp; <span class="title">GetDatas</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">UpdateData</span><span class="params">(uint64 TeamID, <span class="keyword">const</span> FTeamSyncData_Common&amp; InData)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">RemoveData</span><span class="params">(uint64 TeamID)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	TMap &lt;uint64, FTeamSyncData_Common&gt; Datas;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">NetSerialize</span><span class="params">(FArchive&amp; Ar, class UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">MARK_SYNC_DIRTY</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="built_in">UPROPERTY</span>()</span><br><span class="line">	uint32 SYNC_COUNT = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TStructOpsTypeTraits</span>&lt;</span>FTeamSyncCommonDatas&gt; : TStructOpsTypeTraitsBase2&lt;FTeamSyncCommonDatas&gt;</span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">	&#123;</span></span><br><span class="line">		WithNetSerializer = <span class="literal">true</span>,</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">FTeamSyncData_Common <span class="title">FTeamSyncCommonDatas::GetData</span><span class="params">(uint64 TeamID)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!Datas.<span class="built_in">Contains</span>(TeamID)) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">	<span class="keyword">return</span> Datas[TeamID];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> TMap&lt;uint64, FTeamSyncData_Common&gt;&amp; <span class="title">FTeamSyncCommonDatas::GetDatas</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> Datas;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FTeamSyncCommonDatas::UpdateData</span><span class="params">(uint64 TeamID, <span class="keyword">const</span> FTeamSyncData_Common&amp; InData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Datas.<span class="built_in">Add</span>( TeamID, InData );</span><br><span class="line">	<span class="built_in">MARK_SYNC_DIRTY</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FTeamSyncCommonDatas::RemoveData</span><span class="params">(uint64 TeamID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Datas.<span class="built_in">Remove</span>(TeamID);</span><br><span class="line">	<span class="built_in">MARK_SYNC_DIRTY</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FTeamSyncCommonDatas::MARK_SYNC_DIRTY</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SYNC_COUNT++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FTeamSyncCommonDatas::NetSerialize</span><span class="params">(FArchive&amp; Ar, UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Ar &lt;&lt; SYNC_COUNT;</span><br><span class="line">	Ar &lt;&lt; Datas;</span><br><span class="line">	bOutSuccess = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="数据同步">数据同步</h3>
<pre class="mermaid">classDiagram
	class UTeam {
    	+ CollectSyncData_OwnerOnly(FTeamSyncData_OwnerOnly& SyncData)
    	+ CollectSyncData_Common(FTeamSyncData_Common& SyncData)
    	- NotifySyncDataChanged(ETeamSyncDataType DataType)
    }
    
    UTeam..>Delegate
    Delegate..>UTeamSubSystemBase
    
    class UTeamSubSystemBase {
    	- RegisterSyncData()
    	- UnregisterSyncData()
    	# OnSyncTeamDataOwnerOnlyChanged(TeamID, NewData, LastData)
    	# OnSyncTeamDataCommonChanged(TeamID, NewData, LastData)
    }</pre>
<p>由于原始数据存在 <code>DS</code> 的 <code>UTeam</code> 上，实现一个 <code>Notify</code> 方法，在数据变化的时候，通过 <code>Delegate</code> 调用到 <code>TeamSyncSystem</code>，进行数据的分发。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeam::NotifySyncDataChanged</span><span class="params">(ETeamSyncDataType DataType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">EnumHasAllFlags</span>(DataType, ETeamSyncDataType::OwnerOnly))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">auto</span> Delegate = UTeamCommonDelegate::<span class="built_in">GetDelegate</span>()-&gt;OnSyncTeamData_OwnerOnly; Delegate.<span class="built_in">IsBound</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			Delegate.<span class="built_in">Execute</span>(TeamID);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">EnumHasAllFlags</span>(DataType, ETeamSyncDataType::Common))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">auto</span> Delegate = UTeamCommonDelegate::<span class="built_in">GetDelegate</span>()-&gt;OnSyncTeamData_Common; Delegate.<span class="built_in">IsBound</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			Delegate.<span class="built_in">Execute</span>(TeamID);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddMember、RemoveMember 时 Members 发生变化后：</span></span><br><span class="line"><span class="built_in">NotifySyncDataChanged</span>(ETeamSyncDataType::OwnerOnly);</span><br><span class="line"><span class="comment">// SetScore 时 Score发生变化</span></span><br><span class="line"><span class="built_in">NotifySyncDataChanged</span>(ETeamSyncDataType::Common);</span><br></pre></td></tr></table></figure>
<p>在 <code>TeamSyncData : TeamSubSystemBase</code> 里绑定两种数据变化的 <code>Delegate</code>，对数据进行操作：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamSyncSystem::SyncTeamData_OwnerOnlyCallback</span><span class="params">(uint64 TeamID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FTeamSyncData_OwnerOnly SyncData;</span><br><span class="line">	Team-&gt;<span class="built_in">CollectSyncData_OwnerOnly</span>(SyncData);</span><br><span class="line">    <span class="comment">// 对队伍里的所有成员修改 SyncData</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> Member : Team-&gt;<span class="built_in">GetMembers</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		Member-&gt;<span class="built_in">UpdateTeamSyncData</span>( SyncData ); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamSyncSystem::OnSyncTeamData_CommonCallback</span><span class="params">(uint64 TeamID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FTeamSyncData_Common SyncData;</span><br><span class="line">	Team-&gt;<span class="built_in">CollectSyncData_Common</span>(SyncData);</span><br><span class="line">    <span class="comment">// 将数据设置到 Manager 里</span></span><br><span class="line">	System-&gt;<span class="built_in">UpdateTeamSyncData</span>( TeamID, SyncData );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>特别地，在 <code>DestroyTeam</code> 时，进行 <code>RemoveSyncData</code>；在玩家 <code>LeaveTeam</code> 时，<code>UpdateTeamSyncData( &#123;&#125; ) </code>清空数据。</p>
<h3 id="数据分发">数据分发</h3>
<p>显然需要在 <code>DS/Clinet</code> 进行数据的分发，将数据变化重新分发回各个业务。</p>
<p>于是在对应数据的 <code>OnRep</code> 里将数据传给 <code>TeamSubSystemBase</code>，并且分发数据给各个子系统。</p>
<pre class="mermaid">flowchart TD
Team--Notify-->TeamSyncSystem

TeamSyncSystem--SetData-->TeamComponent
TeamSyncSystem--SetData-->TeamManager

TeamComponent--OnRep_SyncData : OwnerOnly-->TeamSubSystemBase
TeamManager--OnRep_SyncDatas : Common-->TeamSubSystemBase

TeamSubSystemBase--OnSync : OwnerOnlyData-->TeamMemberSystem
TeamSubSystemBase--OnSync : CommonData-->TeamScoreSystem
TeamSubSystemBase--OnSync-->OtherSystem...</pre>
<h4 id="RepData">RepData</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamManager::UpdateTeamSyncData</span><span class="params">(uint64 TeamID, <span class="keyword">const</span> FTeamSyncData_Common&amp; InData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">GetSyncDatas_Mutable</span>().<span class="built_in">UpdateData</span>( TeamID, InData );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamManager::RemoveTeamSyncData</span><span class="params">(uint64 TeamID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">GetSyncDatas_Mutable</span>().<span class="built_in">RemoveData</span>(TeamID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamManager::OnRep_SyncDatas</span><span class="params">(<span class="keyword">const</span> FTeamSyncCommonDatas&amp; LastSyncDatas)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; [TeamID, NewData] : SyncDatas.<span class="built_in">GetDatas</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (TeamID == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">auto</span> LastData = LastSyncDatas.<span class="built_in">GetData</span>(TeamID); LastData != NewData)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">auto</span> Delegate = UTeamCommonDelegate::<span class="built_in">GetDelegate</span>()-&gt;OnSyncTeamDataCommonChanged; Delegate.<span class="built_in">IsBound</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				Delegate.<span class="built_in">Execute</span>(TeamID, NewData, LastData);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamManager::OnRep_SyncDatas</span><span class="params">(<span class="keyword">const</span> FTeamSyncCommonDatas&amp; LastSyncDatas)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; [TeamID, NewData] : SyncDatas.<span class="built_in">GetDatas</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (TeamID == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">auto</span> LastData = LastSyncDatas.<span class="built_in">GetData</span>(TeamID); LastData != NewData)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">auto</span> Delegate = UTeamCommonDelegate::<span class="built_in">GetDelegate</span>()-&gt;OnSyncTeamDataCommonChanged; Delegate.<span class="built_in">IsBound</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				Delegate.<span class="built_in">Execute</span>(TeamID, NewData, LastData);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Data-Register-Changed">Data Register&amp;Changed</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UCLASS</span>(Abstract)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UTeamSubSystemBase</span> :</span> <span class="keyword">public</span> UGameSubSystemBase</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">GENERATED_BODY</span>()</span><br><span class="line">        </span><br><span class="line">	<span class="comment">// ----- 客户端收到数据后的事件分发 ------</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> ETeamSyncDataType <span class="title">GetRegisterSyncDataType</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ETeamSyncDataType::None; &#125;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">RegisterSyncData</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">UnregisterSyncData</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamSubSystemBase::RegisterSyncData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="built_in">IsClient</span>(<span class="keyword">this</span>)) <span class="keyword">return</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">auto</span> Type = <span class="built_in">GetRegisterSyncDataType</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">EnumHasAllFlags</span>(Type, ETeamSyncDataType::OwnerOnly))</span><br><span class="line">	&#123;</span><br><span class="line">		UTeamCommonDelegate::<span class="built_in">GetDelegate</span>()-&gt;OnSyncTeamDataOwnerOnlyChanged.<span class="built_in">BindDynamic</span>(<span class="keyword">this</span>, &amp;ThisClass::OnSyncTeamDataOwnerOnlyChanged );</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">EnumHasAllFlags</span>(Type, ETeamSyncDataType::Common))</span><br><span class="line">	&#123;</span><br><span class="line">		UTeamCommonDelegate::<span class="built_in">GetDelegate</span>()-&gt;OnSyncTeamDataCommonChanged.<span class="built_in">BindDynamic</span>(<span class="keyword">this</span>, &amp;ThisClass::OnSyncTeamDataCommonChanged );</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamSubSystemBase::UnregisterSyncData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!<span class="built_in">IsClient</span>(<span class="keyword">this</span>)) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">auto</span> Type = <span class="built_in">GetRegisterSyncDataType</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">EnumHasAllFlags</span>(Type, ETeamSyncDataType::OwnerOnly))</span><br><span class="line">	&#123;</span><br><span class="line">		UTeamCommonDelegate::<span class="built_in">GetDelegate</span>()-&gt;OnSyncTeamDataOwnerOnlyChanged.<span class="built_in">Unbind</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">EnumHasAllFlags</span>(Type, ETeamSyncDataType::Common))</span><br><span class="line">	&#123;</span><br><span class="line">		UTeamCommonDelegate::<span class="built_in">GetDelegate</span>()-&gt;OnSyncTeamDataCommonChanged.<span class="built_in">Unbind</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 供 SubSytem 重载</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamSubSystemBase::OnSyncTeamDataOwnerOnlyChanged</span><span class="params">(uint64 TeamID, <span class="keyword">const</span> FTeamSyncData_OwnerOnly&amp; NewData, <span class="keyword">const</span> FTeamSyncData_OwnerOnly&amp; LastData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamSubSystemBase::OnSyncTeamDataCommonChanged</span><span class="params">(uint64 TeamID, <span class="keyword">const</span> FTeamSyncData_Common&amp; NewData, <span class="keyword">const</span> FTeamSyncData_Common&amp; LastData)</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在每个不同的 <code>SubSystem</code> 里，通过 <code>override GetRegisterSyncDataType </code> 来决定自己需要监听哪种类型的数据（也可以都监听）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TeamMemberSystem</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> ETeamSyncDataType <span class="title">GetRegisterSyncDataType</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> ETeamSyncDataType::OwnerOnly; &#125;</span><br><span class="line"><span class="comment">// TeamScoreSystem:</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> ETeamSyncDataType <span class="title">GetRegisterSyncDataType</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> ETeamSyncDataType::Common; &#125;</span><br><span class="line"><span class="comment">// OtherSystem:</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> ETeamSyncDataType <span class="title">GetRegisterSyncDataType</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> ETeamSyncDataType::OwnerOnly | ETeamSyncDataType::Common; &#125;</span><br></pre></td></tr></table></figure>
<p>各个 <code>SubSystem</code> 自己重载需要的 <code>OnSyncTeamDataOwnerOnlyChanged</code> 或 <code>OnSyncTeamDataCommonChanged</code>，可以根据 <code>Data</code>、<code>LastData</code> 进行数据的 <code>Diff</code> 并进行事件通知，比如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamMemberSystem::OnSyncTeamDataOwnerOnlyChanged</span><span class="params">(uint64 TeamID, <span class="keyword">const</span> FTeamSyncData_OwnerOnly&amp; NewData, <span class="keyword">const</span> FTeamSyncData_OwnerOnly&amp; LastData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Super::<span class="built_in">OnSyncTeamDataOwnerOnlyChanged</span>(TeamID, NewData, LastData);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> MemberUID : NewData.MemberUIDs)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!LastData.MemberUIDs.<span class="built_in">Contains</span>(MemberUID))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// ADD</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">auto</span> Component = UTeamUtils::<span class="built_in">GetComponentByUID</span>(<span class="built_in">GetWorld</span>(), MemberUID); <span class="built_in">IsValid</span>(Component)) <span class="comment">// 客户端设置 TeamID, 防止同步延迟问题</span></span><br><span class="line">			&#123;</span><br><span class="line">				Component-&gt;<span class="built_in">UpdateTeamID</span>(TeamID);</span><br><span class="line">			&#125;</span><br><span class="line">			UTeamUtils::<span class="built_in">NotifyTeamMemberChanged</span>(TeamID, MemberUID, <span class="literal">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> MemberUID : LastData.MemberUIDs)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!NewData.MemberUIDs.<span class="built_in">Contains</span>(MemberUID))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//Remove</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">auto</span> Component = UTeamUtils::<span class="built_in">GetComponentByUID</span>(<span class="built_in">GetWorld</span>(), MemberUID); <span class="built_in">IsValid</span>(Component)) <span class="comment">// 客户端设置 TeamID, 防止同步延迟问题</span></span><br><span class="line">			&#123;</span><br><span class="line">				Component-&gt;<span class="built_in">UpdateTeamID</span>(<span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			UTeamUtils::<span class="built_in">NotifyTeamMemberChanged</span>(TeamID, MemberUID, <span class="literal">false</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>Gameplay</category>
      </categories>
      <tags>
        <tag>Gameplay</tag>
        <tag>UE</tag>
      </tags>
  </entry>
  <entry>
    <title>[UE]GameplayBuffSystem框架</title>
    <url>/2024/02/23/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/%5BUE%5DGameplayBuffSystem%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1>GameplayBuffSystem框架</h1>
<h2 id="设计">设计</h2>
<p>首先我们需要一个 <code>BuffManager</code> ，管理所有的 <code>BuffComponent</code>。<br>
（实现的时候，可以让 <code>BuffManager</code> 作为一个 <code>GameStateComponent</code>；<code>BuffComponent</code> 作为一个 <code>PlayerStateComponent</code> ）</p>
<p>对于每个 <code>Player</code>，需要一个 <code>BuffComponent</code> 管理该 <code>Player</code> 身上持有的 <code>Buff</code>；</p>
<p>对于 <code>Buff</code>，需要一个 <code>BuffBase</code> 作为 <code>Buff</code> 的基类；</p>
<pre class="mermaid">classDiagram

	UGameplayBuffManager..>FGameplayBuffSetting
	UGameplayBuffManager..>UGameplayBuffComponent
	UGameplayBuffManager..>FGameplayBuffParams
    class UGameplayBuffManager {
        BuffSettings : TMap~int|FGameplayBuffSetting~
        +CommitBuff(Target, BuffID, Params)
        +QueryBuff(Target, BuffID)
        +CombineBuffParams(Target, BuffID, Params)
        +RemoveBuff(Target, BuffID, bRemoveImmediately)
        +RemoveBuff(Target, BuffHandle, bRemoveImmediately)
        +ClearBuff(Target)
        -Tick()
        -CreateBuff(Target, BuffID, Params)
    }
    
    UGameplayBuffComponent..>UGameplayBuffBase
    class UGameplayBuffComponent {
    	BuffGroup : TArray~UGameplayBuffBase*~
        BuffIDArray : int (For Sync)
        AddBuff(InBuff)
        RemoveBuff(InBuff, bRemoveImmediately)
    }
	
	class FGameplayBuffSetting {
        BuffName : FString
        bNeedToMerge : bool
        BuffAsset : TSubclassOf~UGameplayBuffBase~
    }
    
	class FGameplayBuffParams {
        # ValueMap : TMap~FString, FVariant~ ValueMap
        FGameplayBuffParams(std::initializer_list ~TPairInitializer[const FString&, FVariant]~ ValuePairs)
        SetValue(const FString& FieldName, FVariant Value)
        Contains(const FString& FieldName)
        IsEmpty()
        Merge(const FGameplayBuffParams& OtherParams)
        GetValueMap() const
        operator+(const FGameplayBuffParams& OtherParams)
    }
    
    class FGameplayCountDownData {
    	StartTime
    	TotalTime
    	LeftTime
    	IsPause
    	SpeedFactor
    }
	
	UGameplayBuffBase..>FGameplayBuffParams
	class UGameplayBuffBase {
		Owner : TWeakObjectPtr~UGameBuffComponent~
		BuffID : int
		BuffName : FString
		BuffParams : FGameplayBuffParams
		+Create(Owner, BuffID, Params)
		+Remove()
		+Merge(BuffHandle, Params)
		+CombineParams(Params)
		+Tick(DeltaTime)
		+CheckNeetToStop()
		+SetNeedToRemove(bEnable)
		#OnCreate()
		#OnRemove()
		#OnMerge()
		#OnTick()
	}
		
	UGameplayBuffBase<|--UGameplayBuff_TimeDuration
	UGameplayBuff_TimeDuration..>FGameplayCountDownData
	class UGameplayBuff_TimeDuration {
		# TimeDuration : float
		# PassDuration : float
		# TickInternal : float
		# LastTickTime : float
		- SpeedFactor : float
		- bInPause : false
		- PauseReasons : TArray~FString~
		# Tick(DeltaTime)
		+ Refresh(InPassDuration, InTimeDuration)
		+ BeginPauseTime(Reason)
		+ StopPauseTime(Reason)
		+ UpdateSpeedFactor(InFactor)
		+ GetTimeDuration()
		+ GetLeftTime()
		+ GetCountDownData()
		# OnBeginPauseTime()
		# OnStopPauseTime()
		# OnUpdateSpeedFactor()
		# OnRefresh()
		# OnTimeStateChanged()
	}
		
	UGameplayBuffUtils..>UGameplayBuffManager</pre>
<h2 id="BuffManager">BuffManager</h2>
<ol>
<li>
<p><code>Commit</code>：判断 <code>BuffSettings</code> 里是否有对应 <code>BuffID</code> 的 <code>Buff</code>，若存在则创建该实例；</p>
<p>判断一下 <code>BuffComponent</code> 里是否原本已经有相同 <code>BuffID</code> 的 <code>Buff</code>，若存在，并且该 <code>Buff</code> 需要 <code>Merge</code> 的话，执行 <code>OldBuff</code> 的  <code>Merge</code> ，并将新创建的 <code>Buff</code> 给 <code>Remove</code> ；</p>
<p>否则直接执行 <code>BuffComponent</code> 的 <code>AddBuff</code>。</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">UGameplayBuffBase* <span class="title">UGameplayBuffManager::CommitBuff</span><span class="params">(UGameplayBuffComponent* Target, <span class="keyword">int</span> BuffID, <span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Target == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::CommitBuff, Target is nullptr! BuffID=%d&quot;</span>), BuffID);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// MergedParams 的作用：将代码中传入的参数与额外配置表中的参数 Merge，实现 BuffParams 的配置化</span></span><br><span class="line">	FGameplayBuffParams MergedParams = <span class="built_in">GetMergedParams</span>( BuffID, Params );</span><br><span class="line"></span><br><span class="line">	UGameplayBuffBase* Buff = <span class="built_in">CreateBuff</span>(Target, BuffID, MergedParams);</span><br><span class="line">	<span class="keyword">if</span> (Buff == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::CommitBuff, Buff is nullptr! UID=%llu, BuffID=%d&quot;</span>), Target-&gt;<span class="built_in">GetUID</span>(), BuffID);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> SpecBuffGroup = Target-&gt;<span class="built_in">GetBuffGroupByBuffID</span>(BuffID);</span><br><span class="line">	<span class="keyword">if</span> (SpecBuffGroup.<span class="built_in">Num</span>() &amp;&amp; BuffSettings[BuffID].bNeedToMerge == <span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		UGameplayBuffBase* OldBuff = SpecBuffGroup[<span class="number">0</span>];</span><br><span class="line">		OldBuff-&gt;<span class="built_in">Merge</span>(Buff, MergedParams);</span><br><span class="line">		Buff-&gt;<span class="built_in">Remove</span>();</span><br><span class="line">		<span class="keyword">return</span> OldBuff;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		Target-&gt;<span class="built_in">AddBuff</span>(Buff);</span><br><span class="line">		<span class="keyword">return</span> Buff;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">UGameplayBuffBase* <span class="title">UGameplayBuffManager::CreateBuff</span><span class="params">(UGameplayBuffComponent* Target, <span class="keyword">int</span> BuffID, <span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!BuffSettings.<span class="built_in">Contains</span>(BuffID) || !<span class="built_in">IsValid</span>(BuffSettings[BuffID].BuffAsset))</span><br><span class="line">	&#123; </span><br><span class="line">		<span class="built_in">LogW</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::CreateBuff,  Miss BuffSetting! UID=%llu, BuffID=%d&quot;</span>), Target-&gt;<span class="built_in">GetUID</span>(), BuffID);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	UGameplayBuffBase* BuffInst = NewObject&lt;UGameplayBuffBase&gt;( Target, BuffSettings[BuffID].BuffAsset );</span><br><span class="line">	<span class="keyword">if</span> (BuffInst == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">LogW</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::CreateBuff,  BuffInst is nullptr! UID=%llu, BuffID=%d&quot;</span>), Target-&gt;<span class="built_in">GetUID</span>(), BuffID);</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	BuffInst-&gt;<span class="built_in">Create</span>(Target, BuffID, Params);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> BuffInst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><code>Query</code>：判断<code>BuffComponent</code>上是否有对应ID的<code>Buff</code>，返回对应 <code>Handle</code>：</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">TArray&lt;UGameplayBuffBase*&gt; <span class="title">UGameplayBuffManager::QueryBuff</span><span class="params">(UGameplayBuffComponent* Target, <span class="keyword">int</span> BuffID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Target == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::QueryBuff, Target is nullptr! BuffID=%d&quot;</span>), BuffID);</span><br><span class="line">		<span class="keyword">return</span> TArray&lt;UGameplayBuffBase*&gt;();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> SpecBuffGroup = Target-&gt;<span class="built_in">GetBuffGroupByBuffID</span>(BuffID);</span><br><span class="line">	<span class="keyword">return</span> SpecBuffGroup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><code>Remove</code>：通过 <code>BuffID</code> 或者 <code>Handle</code> 把 <code>BuffComponent</code> 上存在的对应 <code>Buff</code> 给 <code>Remove</code>。<br>
特别的，为了解决 <code>Buff</code> 之间的依赖问题（比如 <code>Buff(A-&gt;B)</code>，在  <code>A、B</code> 的 <code>Remove</code> 都调用到了另一个 <code>Buff</code> 的 <code>Remove</code>，会导致循环 <code>Remove</code>问题），维护一个 <code>bRemoveImmediately</code> （默认为<code>false</code>），每次调用 <code>Remove</code> 时只是 <code>MarkDirty</code>（把移除标记设为 <code>true</code>），在下一次 <code>Tick</code> 才会实际移除。<br>
这样就可以一次 <code>Tick</code> 移除一个 <code>Buff</code>，通过时间来解开了这个循环依赖的链条。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffManager::RemoveBuff</span><span class="params">(UGameplayBuffComponent* Target, <span class="keyword">int</span> BuffID, <span class="keyword">bool</span> bRemoveImmediately)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Target == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::RemoveBuff, Target is nullptr! BuffID=%d&quot;</span>), BuffID);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> SpecBuffGroup = Target-&gt;<span class="built_in">GetBuffGroupByBuffID</span>(BuffID);</span><br><span class="line">	<span class="keyword">if</span> (!SpecBuffGroup.<span class="built_in">Num</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::RemoveBuff, Buff is not exist! UID=%llu, BuffID=%d&quot;</span>), Target-&gt;<span class="built_in">GetUID</span>(), BuffID);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> Index = SpecBuffGroup.<span class="built_in">Num</span>() - <span class="number">1</span>; Index &gt;= <span class="number">0</span>; Index--)</span><br><span class="line">	&#123;</span><br><span class="line">		Target-&gt;<span class="built_in">RemoveBuff</span>(SpecBuffGroup[Index], bRemoveImmediately);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffManager::RemoveBuff</span><span class="params">(UGameplayBuffComponent* Target, UGameplayBuffBase* Buff, <span class="keyword">bool</span> bRemoveImmediately)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Target == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::RemoveBuff, Target is nullptr!&quot;</span>));</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	Target-&gt;<span class="built_in">RemoveBuff</span>(Buff, bRemoveImmediately);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffManager::ClearBuff</span><span class="params">(UGameplayBuffComponent* Target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Target == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::RemoveBuff, Target is nullptr!&quot;</span>));</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> BuffGroup = Target-&gt;<span class="built_in">GetBuffGroup</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> Index = BuffGroup.<span class="built_in">Num</span>() - <span class="number">1</span>; Index &gt;= <span class="number">0</span>; Index--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (Index &gt;= BuffGroup.<span class="built_in">Num</span>()) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">auto</span> Buff = BuffGroup[Index];</span><br><span class="line">		<span class="keyword">if</span> (Buff == <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line">		Target-&gt;<span class="built_in">RemoveBuff</span>(Buff);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li><code>Combine</code>：<code>Buff</code> 显然需要支持传入参数，在 <code>Create</code> 的时候传参，或者通过 <code>CombineParams</code> 将参数传入 <code>Buff</code> 中：</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffManager::CombineBuffParams</span><span class="params">(UGameplayBuffComponent* Target, <span class="keyword">int</span> BuffID, <span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Target == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::CombineBuffParams, Target is nullptr! BuffID=%d&quot;</span>), BuffID);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">auto</span> SpecBuffGroup = Target-&gt;<span class="built_in">GetBuffGroupByBuffID</span>(BuffID);</span><br><span class="line">	<span class="keyword">if</span> (!SpecBuffGroup.<span class="built_in">Num</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::CombineBuffParams, Buff is not exist! UID=%llu, BuffID=%d&quot;</span>), Target-&gt;<span class="built_in">GetUID</span>(), BuffID);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> Buff : SpecBuffGroup)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">IsValid</span>(Buff))</span><br><span class="line">		&#123;</span><br><span class="line">			Buff-&gt;<span class="built_in">CombineParams</span>(Params);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffManager::CombineBuffParams</span><span class="params">(UGameplayBuffBase* Buff, <span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Buff == <span class="literal">nullptr</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::CombineBuffParams, Buff is nullptr!&quot;</span>));</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Buff-&gt;<span class="built_in">CombineParams</span>(Params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li><code>Tick</code>：遍历<code>BuffComponent</code>，遍历其中的 <code>BuffGroup</code>；对每一个<code>Buff</code> 执行 <code>Tick</code>，并且检查是否需要 <code>Stop</code> ：</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffManager::TickComponent</span><span class="params">(<span class="keyword">float</span> DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">IsClient</span>(<span class="keyword">this</span>)) <span class="keyword">return</span>;</span><br><span class="line">	Super::<span class="built_in">TickComponent</span>(DeltaTime, TickType, ThisTickFunction);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> GS = GetOwner&lt;AGameStateBase&gt;();</span><br><span class="line">	<span class="keyword">auto</span> PlayerArray = GS-&gt;<span class="built_in">GetAllPlayerState</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> Player : PlayerArray)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">auto</span> Target = UFunctionLibrary::GetPlayerStateComponent&lt;UGameplayBuffComponent&gt;(Player);</span><br><span class="line">		<span class="keyword">if</span> (Target == <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">auto</span> BuffGroup = Target-&gt;<span class="built_in">GetBuffGroup</span>();</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Tick</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> Buff : BuffGroup)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (Buff == <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span> (!Buff-&gt;<span class="built_in">CheckNeedToStop</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				Buff-&gt;<span class="built_in">Tick</span>(DeltaTime);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Remove</span></span><br><span class="line">		<span class="keyword">int</span> TotalCount = BuffGroup.<span class="built_in">Num</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> Index = TotalCount - <span class="number">1</span>; Index &gt;= <span class="number">0</span>; Index--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">auto</span>&amp; Buff = BuffGroup[Index];</span><br><span class="line">			<span class="keyword">if</span> (Buff-&gt;<span class="built_in">CheckNeedToStop</span>() || Buff-&gt;<span class="built_in">CheckNeedToRemove</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::TickComponent, Remove Buff (UID=%llu, BuffID=%d)&quot;</span>), Player-&gt;<span class="built_in">GetActorStateUID</span>(), Buff-&gt;<span class="built_in">GetBuffID</span>());</span><br><span class="line">				Target-&gt;<span class="built_in">RemoveBuff</span>(Buff, <span class="literal">true</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="BuffComponent">BuffComponent</h2>
<ol>
<li><code>AddBuff</code>：将 <code>Buff</code> 添加到 <code>BuffGroup</code> / <code>BuffIDArray</code>，通过 <code>BuffIDArray</code> 做客户端的同步（仅同步 <code>BuffID</code> 到客户端）</li>
<li><code>RemoveBuff</code>：移除 <code>Buff</code>，并执行该 <code>Buff</code> 的 <code>Remove</code> 方法，同步对应信息；</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffComponent::AddBuff</span><span class="params">(UGameplayBuffBase* InBuff)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	BuffGroup.<span class="built_in">Add</span>( InBuff );</span><br><span class="line">	<span class="built_in">GetBuffIDArray_Mutable</span>().<span class="built_in">Add</span>( InBuff-&gt;<span class="built_in">GetBuffID</span>() );</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">IsStandaloneOrDS</span>(<span class="keyword">this</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">OnRep_BuffIDArray</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffComponent::RemoveBuff</span><span class="params">(UGameplayBuffBase* InBuff, <span class="keyword">bool</span> bRemoveImmediately)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (InBuff == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> TotalCount = BuffGroup.<span class="built_in">Num</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> Index = TotalCount - <span class="number">1</span>; Index &gt;= <span class="number">0</span>; Index--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (BuffGroup[Index] == InBuff)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (bRemoveImmediately == <span class="literal">true</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				BuffGroup.<span class="built_in">RemoveAt</span>( Index );</span><br><span class="line">				<span class="built_in">GetBuffIDArray_Mutable</span>().<span class="built_in">RemoveAt</span>( Index );</span><br><span class="line">				InBuff-&gt;<span class="built_in">SetNeedToRemove</span>(<span class="literal">true</span>);</span><br><span class="line">				InBuff-&gt;<span class="built_in">Remove</span>();</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">IsStandaloneOrDS</span>(<span class="keyword">this</span>))</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">OnRep_BuffIDArray</span>();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				InBuff-&gt;<span class="built_in">SetNeedToRemove</span>(<span class="literal">true</span>);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffComponent::OnUninit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Super::<span class="built_in">OnUninit</span>();</span><br><span class="line">	<span class="keyword">if</span> (!<span class="built_in">IsStandaloneOrDS</span>(<span class="keyword">this</span>)) <span class="keyword">return</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> Index = BuffGroup.<span class="built_in">Num</span>() - <span class="number">1</span>; Index &gt;= <span class="number">0</span>; Index--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (Index &gt;= BuffGroup.<span class="built_in">Num</span>()) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">auto</span> Buff = BuffGroup[Index];</span><br><span class="line">		<span class="keyword">if</span> (Buff == <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line">		BuffGroup.<span class="built_in">RemoveAt</span>( Index );</span><br><span class="line">		Buff-&gt;<span class="built_in">Remove</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffComponent::OnRep_BuffIDArray</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Buff">Buff</h2>
<h3 id="BuffBase">BuffBase</h3>
<p>每个 <code>Buff</code> 的实际持有者为 <code>BuffComponent</code> 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffBase::Create</span><span class="params">(UGameplayBuffComponent* InOwner, <span class="keyword">int</span> InBuffID, <span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (InOwner == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">	</span><br><span class="line">	Owner = InOwner;</span><br><span class="line">	BuffID = InBuffID;</span><br><span class="line">	BuffName = UGameplayBuffUtils::<span class="built_in">GetBuffName</span>(BuffID);</span><br><span class="line">	BuffParams = Params;</span><br><span class="line">	<span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffBase::Create,  UID=%llu, BuffID=%d, BuffName=%s, Params=%s&quot;</span>), Owner-&gt;<span class="built_in">GetUID</span>(), BuffID, *BuffName, *BuffParams.<span class="built_in">ToString</span>());</span><br><span class="line">	<span class="built_in">OnCreate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffBase::Remove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Owner == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffBase::Remove,  UID=%llu, BuffID=%d, BuffName=%s&quot;</span>), Owner-&gt;<span class="built_in">GetUID</span>(), BuffID, *BuffName);</span><br><span class="line">	<span class="built_in">OnRemove</span>();</span><br><span class="line">	</span><br><span class="line">	Owner = <span class="literal">nullptr</span>;</span><br><span class="line">	BuffID = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffBase::Merge</span><span class="params">(UGameplayBuffBase* InBuff, <span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Owner == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffBase::Merge,  UID=%llu, BuffID=%d, BuffName=%s&quot;</span>), Owner-&gt;<span class="built_in">GetUID</span>(), BuffID, *BuffName);</span><br><span class="line">	<span class="built_in">OnMerge</span>(InBuff, Params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffBase::Tick</span><span class="params">(<span class="keyword">float</span> DeltaTime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">OnTick</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffBase::CombineParams</span><span class="params">(<span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	BuffParams = BuffParams + Params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="TimeDurationBuff">TimeDurationBuff</h3>
<p>Time时间流逝的 <code>Buff</code>，需要支持 <code>Refresh</code>、 <code>Pause</code>、<code>UpdateSpeedFactor</code> 等操作；</p>
<ol>
<li>基础的 <code>TimeDurationBuff</code> 的实现：</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuff_TimeDuration::OnCreate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Super::<span class="built_in">OnCreate</span>();</span><br><span class="line">	</span><br><span class="line">	TimeDuration = BaseTimeDuration;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> InDuration = BuffParams.<span class="built_in">GetValue</span>(<span class="string">&quot;Duration&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (InDuration != <span class="number">0</span>) TimeDuration = InDuration;</span><br><span class="line">	</span><br><span class="line">	PassDuration = <span class="number">0.0f</span>;</span><br><span class="line">	LastTickTime = <span class="built_in">GetWorldTimeNow</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuff_TimeDuration::Tick</span><span class="params">(<span class="keyword">float</span> DeltaTime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">GetWorld</span>() == <span class="literal">nullptr</span> || <span class="built_in">GetWorld</span>()-&gt;<span class="built_in">GetGameState</span>() == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> CurrentTickTime = <span class="built_in">GetWorldTimeNow</span>();</span><br><span class="line">	TickInternal = CurrentTickTime - LastTickTime;</span><br><span class="line">	LastTickTime = CurrentTickTime;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">CheckInPause</span>() == <span class="literal">false</span> &amp;&amp; <span class="built_in">CheckNeedToStop</span>() == <span class="literal">false</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		PassDuration += TickInternal * SpeedFactor;</span><br><span class="line">		<span class="built_in">OnTick</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><code>Refresh</code>：刷新倒计时时间：</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuff_TimeDuration::Refresh</span><span class="params">(<span class="keyword">float</span> InPassDuration, <span class="keyword">float</span> InTimeDuration)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (InPassDuration &gt;= <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		PassDuration = InPassDuration;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (InTimeDuration &gt;= <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		TimeDuration = InTimeDuration;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">OnRefresh</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li><code>Pause</code>：根据不同的 <code>Reason</code> 暂停/重启 时间：</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuff_TimeDuration::BeginPauseTime</span><span class="params">(FString Reason)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Owner == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuff_TimeDuration::BeginPauseTime,  UID=%llu, BuffID=%d, TimeDuration=%.2f, bInPause=%d, Reason=%s&quot;</span>),</span><br><span class="line">		Owner-&gt;<span class="built_in">GetUID</span>(), BuffID, TimeDuration, bInPause, *Reason);</span><br><span class="line">	</span><br><span class="line">	PauseReasons.<span class="built_in">AddUnique</span>(Reason);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (bInPause == <span class="literal">true</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (PauseReasons.<span class="built_in">Num</span>() &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">	bInPause = <span class="literal">true</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">OnBeginPauseTime</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuff_TimeDuration::StopPauseTime</span><span class="params">(FString Reason)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Owner == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuff_TimeDuration::StopPauseTime,  UID=%llu, BuffID=%d, TimeDuration=%.2f, bInPause=%d, Reason=%s&quot;</span>),</span><br><span class="line">		Owner-&gt;<span class="built_in">GetUID</span>(), BuffID, TimeDuration, bInPause, *Reason);</span><br><span class="line">	PauseReasons.<span class="built_in">Remove</span>(Reason);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (bInPause == <span class="literal">false</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (PauseReasons.<span class="built_in">Num</span>() &gt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">	bInPause = <span class="literal">false</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">OnStopPauseTime</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li><code>UpdateSpeedFactor</code> ： 更新 <code>Buff</code> 的速度</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuff_TimeDuration::UpdateSpeedFactor</span><span class="params">(<span class="keyword">float</span> InFactor)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Owner == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (SpeedFactor == InFactor) <span class="keyword">return</span>;</span><br><span class="line">	SpeedFactor = InFactor;</span><br><span class="line">	<span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuff_TimeDuration::UpdateSpeedFactor,  UID=%llu, BuffID=%d, TimeDuration=%.2f, SpeedFactor=%.2f&quot;</span>),</span><br><span class="line">		Owner-&gt;<span class="built_in">GetUID</span>(), BuffID, TimeDuration, SpeedFactor);</span><br><span class="line">	<span class="built_in">OnUpdateSpeedFactor</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="BuffUtils">BuffUtils</h2>
<p>暴露给外部系统使用的 <code>Utils</code>，期望外部的调用都从这里走，实际上是一些胶水代码。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetBuffID</span><span class="params">( FString BuffName )</span></span>;</span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">GetBuffName</span><span class="params">( <span class="keyword">int</span> BuffID )</span></span>;</span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">float</span> <span class="title">GetBuffParam</span><span class="params">(FString BuffName, FString ParamName)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">float</span> <span class="title">GetBuffParam</span><span class="params">(<span class="keyword">int</span> BuffID, FString ParamName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="keyword">static</span> TArray&lt;UGameplayBuffBase*&gt; <span class="title">GetGameplayBuff</span><span class="params">(APlayerStateBase* PS, FString BuffName)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> TArray&lt;UGameplayBuffBase*&gt; <span class="title">GetGameplayBuff</span><span class="params">(APlayerStateBase* PS, <span class="keyword">int</span> ID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable)</span><br><span class="line"><span class="function"><span class="keyword">static</span> UGameplayBuffBase* <span class="title">AddGameplayBuff</span><span class="params">(APlayerStateBase* PS, FString BuffName)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> UGameplayBuffBase* <span class="title">AddGameplayBuff</span><span class="params">(APlayerStateBase* PS, <span class="keyword">int</span> BuffID)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> UGameplayBuffBase* <span class="title">AddGameplayBuff</span><span class="params">(APlayerStateBase* PS, FString BuffName, <span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> UGameplayBuffBase* <span class="title">AddGameplayBuff</span><span class="params">(APlayerStateBase* PS, <span class="keyword">int</span> BuffID, <span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bRemoveImmediately = true 可能会导致依赖问题，非必要时序依赖，建议使用 false</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable)</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RemoveGameplayBuff</span><span class="params">(APlayerStateBase* PS, FString BuffName, <span class="keyword">bool</span> bRemoveImediately = <span class="literal">false</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RemoveGameplayBuff</span><span class="params">(APlayerStateBase* PS, FString BuffName, <span class="keyword">bool</span> bRemoveImediately, <span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RemoveGameplayBuff</span><span class="params">(APlayerStateBase* PS, <span class="keyword">int</span> ID, <span class="keyword">bool</span> bRemoveImediately = <span class="literal">false</span>, <span class="keyword">const</span> FGameplayBuffParams&amp; Params = &#123;&#125;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RemoveGameplayBuff</span><span class="params">(APlayerStateBase* PS, UGameplayBuffBase* Buff, <span class="keyword">bool</span> bRemoveImediately = <span class="literal">false</span>, <span class="keyword">const</span> FGameplayBuffParams&amp; Params = &#123;&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CombineGameplayBuffParams</span><span class="params">(APlayerStateBase* PS, FString BuffName, <span class="keyword">const</span> FGameplayBuffParams&amp; Params = &#123;&#125;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CombineGameplayBuffParams</span><span class="params">(APlayerStateBase* PS, <span class="keyword">int</span> ID, <span class="keyword">const</span> FGameplayBuffParams&amp; Params = &#123;&#125;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CombineGameplayBuffParams</span><span class="params">(UGameplayBuffBase* Buff, <span class="keyword">const</span> FGameplayBuffParams&amp; Params = &#123;&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ClearGameplayBuff</span><span class="params">(APlayerStateBase* PS)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">CheckGameplayBuffExist</span><span class="params">(APlayerStateBase* PS, FString BuffName)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">CheckGameplayBuffExist</span><span class="params">(APlayerStateBase* PS, <span class="keyword">int</span> BuffID)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">CheckGameplayBuffHandleExist</span><span class="params">(APlayerStateBase* PS, UGameplayBuffBase* Buff)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="其它信息">其它信息</h2>
<h3 id="FGameplayBuffParams">FGameplayBuffParams</h3>
<p><code>Buff</code> 的 <code>Params</code> 部分，实现一个 <code>ValueMap</code> 记录各种类型的参数；</p>
<p>这样使用的时候就可以这样使用 <code>Params</code>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 外部调用创建Buff时：</span></span><br><span class="line">UGameplayBuffUtils::<span class="built_in">AddGameplayBuff</span>(Target, BuffID, &#123; &#123;<span class="string">&quot;ParamA&quot;</span>, (<span class="keyword">float</span>)A&#125;, &#123;<span class="string">&quot;ParamsB&quot;</span>, (<span class="keyword">int</span>)B &#125; &#125;);</span><br><span class="line"><span class="comment">// Buff内部 (BuffParams 已经传入 Buff 中)</span></span><br><span class="line"><span class="keyword">float</span> A = BuffParams.GetValue&lt;<span class="keyword">float</span>&gt;(<span class="string">&quot;ParamA&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> B = BuffParams.GetValue&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;ParamB&quot;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">USTRUCT</span>(BlueprintType)</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FGameplayBuffParams</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line">	<span class="built_in">FGameplayBuffParams</span>() = <span class="keyword">default</span>;</span><br><span class="line">	<span class="built_in">FGameplayBuffParams</span>(<span class="keyword">const</span> FString&amp; Key, FVariant Value);</span><br><span class="line">	<span class="built_in">FGameplayBuffParams</span>(std::initializer_list&lt;TPairInitializer&lt;<span class="keyword">const</span> FString&amp;, FVariant&gt;&gt; ValuePairs);</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SetValue</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName, FVariant Value)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Contains</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName)</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ValueType = <span class="keyword">float</span>&gt; ValueType <span class="built_in">GetValue</span>(<span class="keyword">const</span> FString&amp; FieldName, ValueType Default = &#123;&#125;) <span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!ValueMap.<span class="built_in">Contains</span>(FieldName)) <span class="keyword">return</span> Default;</span><br><span class="line">		<span class="keyword">if</span> (TVariantTraits&lt;ValueType&gt;::<span class="built_in">GetType</span>() != ValueMap[FieldName].<span class="built_in">GetType</span>()) <span class="keyword">return</span> Default;</span><br><span class="line">		<span class="keyword">return</span> ValueMap[FieldName].GetValue&lt;ValueType&gt;();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function">FString <span class="title">ToString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">const</span> TMap&lt;FString, FVariant&gt;&amp; <span class="title">GetValueMap</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">NetSerialize</span><span class="params">(FArchive&amp; Ar, class UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span>;</span><br><span class="line">    </span><br><span class="line">	FGameplayBuffParams <span class="keyword">operator</span>+(<span class="keyword">const</span> FGameplayBuffParams&amp; OtherParams);</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">const</span> FGameplayBuffParams&amp; OtherParams)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	TMap&lt;FString, FVariant&gt; ValueMap;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">FGameplayBuffParams::<span class="built_in">FGameplayBuffParams</span>(<span class="keyword">const</span> FString&amp; Key, FVariant Value)</span><br><span class="line">&#123;</span><br><span class="line">	ValueMap.<span class="built_in">Add</span>(Key, Value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FGameplayBuffParams::<span class="built_in">FGameplayBuffParams</span>(std::initializer_list&lt;TPairInitializer&lt;<span class="keyword">const</span> FString&amp;, FVariant&gt;&gt; ValuePairs)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; Pair : ValuePairs)</span><br><span class="line">	&#123;</span><br><span class="line">		ValueMap.<span class="built_in">Add</span>(Pair.Key, Pair.Value);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FGameplayBuffParams::SetValue</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName, FVariant Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ValueMap.<span class="built_in">Add</span>(FieldName, <span class="built_in">FVariant</span>(Value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FGameplayBuffParams::Contains</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> ValueMap.<span class="built_in">Contains</span>(FieldName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FGameplayBuffParams::IsEmpty</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> ValueMap.<span class="built_in">IsEmpty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FString <span class="title">FGameplayBuffParams::ToString</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FString DebugString = FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Params:&quot;</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; [Key, Value] : ValueMap)</span><br><span class="line">	&#123;</span><br><span class="line">		DebugString += FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;[%s=%s]&quot;</span>), *Key, *UStringUtils::<span class="built_in">ToString</span>(Value));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> DebugString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> TMap&lt;FString, FVariant&gt;&amp; <span class="title">FGameplayBuffParams::GetValueMap</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> ValueMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FGameplayBuffParams::NetSerialize</span><span class="params">(FArchive&amp; Ar, class UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	bOutSuccess = <span class="literal">true</span>;</span><br><span class="line">	Ar &lt;&lt; ValueMap;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FGameplayBuffParams FGameplayBuffParams::<span class="keyword">operator</span>+(<span class="keyword">const</span> FGameplayBuffParams&amp; OtherParams)</span><br><span class="line">&#123;</span><br><span class="line">	FGameplayBuffParams CombinedParams = *<span class="keyword">this</span>;</span><br><span class="line">	CombinedParams.<span class="built_in">Merge</span>(OtherParams);</span><br><span class="line">	<span class="keyword">return</span> CombinedParams;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FGameplayBuffParams::Merge</span><span class="params">(<span class="keyword">const</span> FGameplayBuffParams&amp; OtherParams)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; [Key, Value] : OtherParams.<span class="built_in">GetValueMap</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 覆盖</span></span><br><span class="line">		<span class="built_in">SetValue</span>(Key, Value);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="FGameplayCountDownData">FGameplayCountDownData</h3>
<p>提供给 <code>UGameplayBuff_TimeDuration</code> 使用，一份记录倒计时的数据</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">USTRUCT</span>()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FGameplayCountDownData</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="built_in">GENERATED_USTRUCT_BODY</span>()</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">FGameplayCountDownData</span>() = <span class="keyword">default</span>;</span><br><span class="line">	<span class="built_in">FGameplayCountDownData</span>(<span class="keyword">float</span> StartTime, <span class="keyword">float</span> TotalTime = <span class="number">0.0f</span>, <span class="keyword">float</span> LeftTime = <span class="number">0.0f</span>, <span class="keyword">bool</span> IsPause = <span class="literal">false</span>, <span class="keyword">float</span> SpeedFactor = <span class="number">1.0f</span>)</span><br><span class="line">	: <span class="built_in">StartTime</span>(StartTime), <span class="built_in">TotalTime</span>(TotalTime), <span class="built_in">LeftTime</span>(LeftTime), <span class="built_in">IsPause</span>(IsPause), <span class="built_in">SpeedFactor</span>(SpeedFactor)</span><br><span class="line">	&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">NetSerialize</span><span class="params">(FArchive&amp; Ar, class UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Ar &lt;&lt; StartTime;</span><br><span class="line">        Ar &lt;&lt; TotalTime;</span><br><span class="line">        Ar &lt;&lt; LeftTime;</span><br><span class="line">        Ar &lt;&lt; IsPause;</span><br><span class="line">        Ar &lt;&lt; SpeedFactor;</span><br><span class="line"></span><br><span class="line">        bOutSuccess = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> FGameplayCountDownData&amp; Other) <span class="keyword">const</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (StartTime != Other.StartTime) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (TotalTime != Other.TotalTime) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (LeftTime != Other.LeftTime) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (IsPause != Other.IsPause) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (SpeedFactor != Other.SpeedFactor) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> !=(<span class="keyword">const</span> FGameplayCountDownData&amp; Other) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> == Other); &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function">FString <span class="title">ToString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">UPROPERTY</span>()</span><br><span class="line">	<span class="keyword">float</span> StartTime = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">UPROPERTY</span>()</span><br><span class="line">	<span class="keyword">float</span> TotalTime = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">UPROPERTY</span>()</span><br><span class="line">	<span class="keyword">float</span> LeftTime = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">UPROPERTY</span>()</span><br><span class="line">	<span class="keyword">bool</span> IsPause = <span class="literal">false</span>;</span><br><span class="line">	<span class="built_in">UPROPERTY</span>()</span><br><span class="line">	<span class="keyword">float</span> SpeedFactor = <span class="number">1.0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>Gameplay</category>
      </categories>
      <tags>
        <tag>Gameplay</tag>
        <tag>UE</tag>
      </tags>
  </entry>
  <entry>
    <title>[UE]GameFeature浅析</title>
    <url>/2024/02/22/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/%5BUE%5DGameFeature%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h1>GameFeature浅析</h1>
<p>一套支持动态增删游戏玩法的框架，往 <code>CoreGame</code> 里 <code>Add/Remove</code> 其它游戏资源/逻辑；</p>
<p>以 <code>Lyra(UE5.3)</code> 为例，<code>GameFeature</code> 提供了很好的解耦资源/逻辑的方案，可以看出这里的 <code>ShooterCore</code> 被实现为了一个相对比较独立的 <code>Plugin</code>。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202402220044408.png" alt="image-20240220173041938"></p>
<h2 id="初始化">初始化</h2>
<p>首先在游戏内，<code>GameFeaturesSubsystem</code> 管理着所有的 <code>GameFeature</code>，看到对应的初始化 <code>UGameFeaturesSubsystem::Initialize</code>，可以分为几步：</p>
<blockquote>
<ol>
<li>
<p>加载<code>Policy</code>：根据 <code>GameFeaturesSubsystemSettings-&gt;GameFeaturesManagerClassName</code> 加载对应的 <code>GameSpecificPolicies</code></p>
</li>
<li>
<p>注册资源回调：<code>UAssetManager::CallOrRegister_OnAssetManagerCreated</code></p>
</li>
<li>
<p>注册 <code>ConsoleCommand</code> 方便 <code>Debug</code></p>
</li>
</ol>
</blockquote>
<p>在资源加载完的回调后，会走到 <code>UGameFeaturesSubsystem::OnAssetManagerCreated</code>，进行 <code>GameSpecificPolicies-&gt;InitGameFeatureManager</code>，根据 <code>Policies</code> 执行初始化逻辑；</p>
<p>这里的 <code>GameFeaturesProjectPolicies</code> 决定了一些 <code>GameFeaturePlugin</code> 的加载规则，比如需要在什么地方<code>(Server/Client)</code> 加载什么 <code>GameFeature</code>，同时可以在这里的 <code>Init</code> 扩展需要的额外功能，比如注册一些 <code>Observers</code>、<code>Subsystems</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">InitGameFeatureManager</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShutdownGameFeatureManager</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> TArray&lt;FPrimaryAssetId&gt; <span class="title">GetPreloadAssetListForGameFeature</span><span class="params">(<span class="keyword">const</span> UGameFeatureData* GameFeatureToLoad, <span class="keyword">bool</span> bIncludeLoadedAssets = <span class="literal">false</span>)</span> <span class="keyword">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">IsPluginAllowed</span><span class="params">(<span class="keyword">const</span> FString&amp; PluginURL)</span> <span class="keyword">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> TArray&lt;FName&gt; <span class="title">GetPreloadBundleStateForGameFeature</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">GetGameFeatureLoadingMode</span><span class="params">(<span class="keyword">bool</span>&amp; bLoadClientData, <span class="keyword">bool</span>&amp; bLoadServerData)</span> <span class="keyword">const</span> <span class="keyword">override</span></span>;</span><br></pre></td></tr></table></figure>
<p>在 <code>UDefaultGameFeaturesProjectPolicies::InitGameFeatureManager</code>  中会执行 <code>UGameFeaturesSubsystem::Get().LoadBuiltInGameFeaturePlugins(AdditionalFilter)</code>，根据 <code>Filter</code> 来加载 <code>GameFeaturePlugin</code>，可以发现，会进行状态机 <code>GameFeaturePluginStateMachine</code> 的初始状态设置并初始化。</p>
<p>状态机的底层的数据都存在 <code>GameFeatureData</code> 上，可以从这里面开始分析：</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202402220044305.png" alt="image-20240220173210508" style="zoom: 33%;" />
<p>（需要注意的是，<code>GameFeatureData</code> 本身只记录了 <code>Actions</code> 和 <code>PrimaryAssetTypesToScan</code>，这里的 <code>FeatureState</code> 对应的是 <code>GameFeaturePlugin</code> 的对应状态机的信息，由 <code>FGameFeaturesEditorModule::StartModule -&gt; FGameFeatureDataDetailsCustomization::CustomizeDetails</code> 注册进 <code>Details</code> 面板）</p>
<h2 id="状态机">状态机</h2>
<p><code>GameFeature</code> 由一个 <code>UGameFeaturesSubsystem : UEngineSubsystem</code> 管理其生命周期：</p>
<pre class="mermaid">classDiagram
    class UGameFeaturesSubsystem {
        GameFeaturePluginStateMachines : TMap[GameFeature, StateMachine] 
        ListGameFeaturePlugins()
        LoadGameFeaturePlugin()
        DeactivateGameFeaturePlugin()
        UnloadGameFeaturePlugin()
        ReleaseGameFeaturePlugin()
        UninstallGameFeaturePlugin()
        TerminateGameFeaturePlugin()
    }
    
    UGameFeaturesSubsystem..>UGameFeaturePluginStateMachine
class UGameFeaturePluginStateMachine {
        AllStates : TUniquePtr[FGameFeaturePluginState] 
        CurrentStateInfo : FGameFeaturePluginStateInfo
        SetDestination()
    }
    
    UGameFeaturePluginStateMachine..>FGameFeaturePluginState
class FGameFeaturePluginState {
        TickHandle : FTSTicker-FDelegateHandle 
        BeginState()
        UpdateState()
        TryCancelState()
        EndState()
    }
    
    UGameFeaturePluginStateMachine..>FGameFeaturePluginStateInfo
class FGameFeaturePluginStateInfo {
    	State : EGameFeaturePluginState
    }</pre>
<p>最基本的有 <code>Load</code>、<code>Deactivate</code>、<code>Unload</code>、<code>Release</code>、<code>Uninstall</code>、<code>Terminate</code> 几个功能，可以由外部调用。</p>
<p>核心内容围绕着每个 <code>GameFeaturePlugin</code> 对应的 <code>StateMachine</code> 展开；<code>GameFeatureSubSystem</code> 上记录着 <code>TMap&lt;FString, TObjectPtr&lt;UGameFeaturePluginStateMachine&gt;&gt; GameFeaturePluginStateMachines </code> ，也就是  <code>PluginIdentifier-&gt;StateMachine</code> 的多个映射。</p>
<p>最后都会走到 <code>UGameFeaturesSubsystem::ChangeGameFeatureDestination</code> 修改状态机的状态：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeGameFeatureDestination</span><span class="params">(UGameFeaturePluginStateMachine* Machine, <span class="keyword">const</span> FGameFeaturePluginStateRange&amp; StateRange, FGameFeaturePluginChangeStateComplete CompleteDelegate)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露给外部的主要目标状态</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">EGameFeatureTargetState</span> :</span> uint8</span><br><span class="line">&#123;</span><br><span class="line">	Installed,</span><br><span class="line">	Registered,</span><br><span class="line">	Loaded,</span><br><span class="line">	Active,</span><br><span class="line">	<span class="function">Count	<span class="title">UMETA</span><span class="params">(Hidden)</span></span></span><br><span class="line"><span class="function">&#125;</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeGameFeatureTargetState</span><span class="params">(<span class="keyword">const</span> FString&amp; PluginURL, EGameFeatureTargetState TargetState, <span class="keyword">const</span> FGameFeaturePluginChangeStateComplete&amp; CompleteDelegate)</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="GameFeaturePluginStateMachine"><code>GameFeaturePluginStateMachine</code></h3>
<p>主要维护对应 <code>GameFeaturePlugin</code> 的状态。</p>
<p>最重要的设置状态入口是 <code>UGameFeaturePluginStateMachine::SetDestination</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UE5.0: 传入的目标状态为一个 GameFeaturePluginState</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameFeaturePluginStateMachine::SetDestinationState</span><span class="params">(EGameFeaturePluginState InDestinationState, FGameFeatureStateTransitionComplete OnFeatureStateTransitionComplete)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">check</span>(<span class="built_in">IsValidDestinationState</span>(InDestinationState));</span><br><span class="line"></span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> If we aren&#x27;t in a destination state and our new destination is in the opposite direction of </span></span><br><span class="line">	<span class="comment">// our current destination, cancel the current state transition (if possible)</span></span><br><span class="line">	<span class="comment">// The completion delegate may be stomped in these cases.  Should probably callback with a cancelled error</span></span><br><span class="line"></span><br><span class="line">	StateProperties.DestinationState = InDestinationState;</span><br><span class="line">	StateProperties.OnFeatureStateTransitionComplete = OnFeatureStateTransitionComplete;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">UpdateStateMachine</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UE5.1-5.3：将传入的状态改为了一个 FGameFeaturePluginStateRange(MinState, MaxState)</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">UGameFeaturePluginStateMachine::SetDestination</span><span class="params">(FGameFeaturePluginStateRange InDestination, FGameFeatureStateTransitionComplete OnFeatureStateTransitionComplete, FDelegateHandle* OutCallbackHandle <span class="comment">/*= nullptr*/</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>可以发现 <code>StateMachine</code> 维护了一个 <code>FGameFeaturePluginStateMachineProperties&amp; StateProperties</code>，记录了状态机运行中可以切换到的状态的一些属性，其中的 <code>DestinationState</code> 表示在状态变化中期望到达的状态（<code>UE5.3</code> 改为了状态区间，为了适配 <code>Terminal</code> 以及状态转移中不丢失对应的 <code>CompletionHandle</code>）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 当前状态是否不在 Destination 内，不在的话说明需要尝试到一个新的 Destination，标记为 IsRunning */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsRunning</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> !StateProperties.Destination.<span class="built_in">Contains</span>(CurrentStateInfo.State);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 已经在 Destination 内，那么可以尝试到任意的 Destination</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">IsRunning</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (InDestination.<span class="built_in">Contains</span>(CurrentStateInfo.State)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    StateProperties.Destination = InDestination;</span><br><span class="line">    <span class="built_in">UpdateStateMachine</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不在 Destination 内，说明状态还在过渡状态，这时如果收到了新的 Destination，为了保证原有状态可以顺利过渡，与原有的 Destination 求交，继续尝试切换状态</span></span><br><span class="line"><span class="keyword">if</span> (TOptional&lt;FGameFeaturePluginStateRange&gt; NewDestination = StateProperties.Destination.<span class="built_in">Intersect</span>(InDestination))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// The machine is already running so we can only transition to this range if it overlaps with our current range.</span></span><br><span class="line">    <span class="comment">// We can satisfy both ranges in this case.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (CurrentStateInfo.State &lt; StateProperties.Destination)</span><br><span class="line">    &#123;</span><br><span class="line">        StateProperties.Destination = *NewDestination;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (InDestination.<span class="built_in">Contains</span>(CurrentStateInfo.State)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(CurrentStateInfo.State &gt; StateProperties.Destination)</span><br><span class="line">    &#123;</span><br><span class="line">        StateProperties.Destination = *NewDestination;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (InDestination.<span class="built_in">Contains</span>(CurrentStateInfo.State)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="FeaturePluginState"><code>FeaturePluginState</code></h4>
<p>内部维护了很多状态：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202402220044382.png" alt="image-20240221105036685"></p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202402220044864.png" alt="image-20240220225411173" style="zoom:33%;" />
<p>可以被作为<code>DestinationState</code>的状态有：<code>UnknownStatus</code>、<code>Uninstalled</code>、<code>StatusKnown</code>、<code>Installed</code>、<code>Registered</code>、<code>Load</code>、<code>Active</code>、<code>Terminal</code>、其它<code>ErrorStates</code>。</p>
<p>状态间的关系如图所示：</p>
<pre class="mermaid">flowchart LR

Uninitialized-->*UnknownStatus

*UnknownStatus-->CheckingStatus
*UnknownStatus-->*Terminal

CheckingStatus-->*StatusKnown

*StatusKnown-->*Installed
*StatusKnown-->Downloading
*StatusKnown-->Uninstalling
*StatusKnown-->*Terminal

Downloading-->*Installed

Uninstalling-->*Uninstalled

*Uninstalled-->*Terminal
*Uninstalled-->CheckingStatus

Releasing-->*StatusKnown

*Installed-->Mounting
*Installed-->Releasing

Mounting-->WaitingForDependencies

Unmounting-->*Installed

WaitingForDependencies-->Registering

Registering-->*Registered

*Registered-->Unregistering
*Registered-->Loading

Unregistering-->Unmounting

Loading-->*Loaded

*Loaded-->Activating
*Loaded-->Unloading

Unloading-->*Registered

Activating-->*Active

*Active-->Deactivating

Deactivating-->*Loaded</pre>
<p>状态修改完会通过<code>UGameFeaturesSubsystem::Get().OnGameFeature...</code> 进行通知，<code>GameFeatureSubSystem</code> 会调用到 <code>Actions</code> 的回调，同时提供了一个 <code>CallbackObservers</code> 通知已注册的 <code>Observers</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">EObserverCallback</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    CheckingStatus,</span><br><span class="line">    Terminating,</span><br><span class="line">    Registering,</span><br><span class="line">    Unregistering,</span><br><span class="line">    Loading,</span><br><span class="line">    Activating,</span><br><span class="line">    Deactivating,</span><br><span class="line">    PauseChanged,</span><br><span class="line">    Count</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="Actions">Actions</h2>
<p>对于一个 <code>GameFeature</code> ，在 <code>Register</code>、<code>Unregister</code>、<code>Load</code>、<code>Activate</code>、<code>Deactive</code> 等行为时（也可以自己添加）会调用到 <code>GameFeatureData</code> 上配置的 <code>Actions</code> 的对应回调：</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202402220044126.png" alt="image-20240221155727741" style="zoom: 40%;" />
<img src="E:\Pictures\_data\image-20240221155957459.png" alt="image-20240221155957459" style="zoom:50%;" />
<p>可以自定义各种各样的 <code>Actions</code>：</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202402220044309.png" alt="image-20240221155442578" style="zoom: 67%;" />
<p><code>GameFeatureAction</code> 中有一个关键 <code>UGameFeatureAction_AddComponents</code> ，其主要是将 <code>Component</code> 注册进对应的 <code>Actor</code>，应用到了另一个模块 <code>ModularGameplay</code>。</p>
<p><code>AddComponent</code> 通过 <code>ModularGameplay</code> 的 <code>UGameFrameworkComponentManager::AddComponentRequest</code> 实现，简单介绍一下 <code>ModularGameplay</code> ：</p>
<h3 id="ModularGameplay">ModularGameplay</h3>
<p>一套往 <code>Actor</code> 上注册 <code>Component/ExtensionHandler</code> 的解决方案。</p>
<p>这套框架核心由一个 <code>UGameFrameworkComponentManager : USubSystem</code> 在全局管理各个 <code>ActorClass</code> 的 <code>Component/ExtensionHandler</code>，维护 <code>Component</code> 的生命周期，并且提供接口供外部调用（<code>Add/Remove/SendEvent</code> 等）</p>
<h4 id="ActorReceiver"><code>ActorReceiver</code></h4>
<h5 id="注册-Receiver">注册 <code>Receiver</code></h5>
<p>首先将需要使用这套框架维护 <code>Component</code> 的 <code>ActorClass</code> 作为 <code>Receiver</code> ，通过 <code>UGameFrameworkComponentManager::AddGameFrameworkComponentReceiver</code> 注册进 <code>Manager</code>；</p>
<p>同时，在注册的时候，会判断 <code>ActorClass</code> 是否已经提前注册的 <code>ComponentClass</code> 或者 <code>EventDelegate</code> ，如果有 <code>ComponentClass</code> 则会在此时创建对应实例 <code>CreateComponentOnInstance</code>，有 <code>EventDelagte</code> 则会通知一下 <code>NAME_ReceiverAdded</code>。</p>
<p>（一般在 <code>AActor::PreInitializeComponents</code> 调用）</p>
<h5 id="移除-Receiver">移除 <code>Receiver</code></h5>
<p>通过  <code>UGameFrameworkComponentManager::RemoveGameFrameworkComponentReceiver</code> 移除；</p>
<p>调用对应 <code>Component</code> 的销毁，通知一下 <code>NAME_ReceiverRemoved</code>。</p>
<p>（一般在 <code>AActor::EndPlay</code> 调用）</p>
<h4 id="Component"><code>Component</code></h4>
<pre class="mermaid">classDiagram
    class UGameFrameworkComponentManager 
    UGameFrameworkComponentManager  : ReceiverClassToComponentClassMap
    UGameFrameworkComponentManager : AddComponentRequest()
    UGameFrameworkComponentManager : RemoveComponentRequest()</pre>
<p>维护了一个 <code>ActorClass-&gt;ComponentClass</code>  ，也就是 <code>TMap&lt;FComponentRequestReceiverClassPath, TSet&lt;TObjectPtr&lt;UClass&gt;&gt;&gt; ReceiverClassToComponentClassMap</code>，（其中 <code>FComponentRequestReceiverClassPath</code> 是一个结构体，用字符串数组记录 <code>Class-&gt;Root</code> 这条链路，作为 <code>Class</code> 的标识，不直接用 <code>UClass</code> 是因为以 <code>Component</code> 的视角进行操作，不期望在这里直接依赖 <code>Receiver</code> 对应模块的指针）</p>
<h5 id="注册-Component">注册 <code>Component</code></h5>
<p>通过 <code>UGameFrameworkComponentManager::AddComponentRequest</code> 实现；</p>
<p>这里的 <code>CompoentRequest</code> 也就是一个 <code> FComponentRequestHandle(OwningManager, ReceiverClass, ComponentClass)</code>；</p>
<p>内部维护了一个 <code>RequestTrackingMap</code> 用于 <code>CompoentRequest</code> 的计数，如果 <code>==1</code> 则说明需要尝试创建实例；</p>
<p>（有可能不同的模块都依赖对应的 <code>ComponentClass</code> ，所以需要计数一下）</p>
<p>注册的时候判断对应的 <code>Actor</code> 是否已经 <code>Initialize</code> ，如果是，则 <code>CreateComponentOnInstance</code>。</p>
<p><code>CreateComponentOnInstance</code>：创建 <code>ComponentInstance</code> ，维护 <code>TMap&lt;UClass*, TSet&lt;FObjectKey&gt;&gt; ComponentClassToComponentInstanceMap</code> 用于记录这个 <code>ComponentClass</code> 有哪些对应的 <code>Instance</code></p>
<h5 id="移除-Component">移除 <code>Component</code></h5>
<p>通过 <code>UGameFrameworkComponentManager::RemoveComponentRequest</code> 实现；</p>
<p>修改计数，<code>==0</code> 则执行销毁。</p>
<p>销毁的时候通过 <code>ComponentClassToComponentInstanceMap</code> 找到所有的 <code>Component</code>，判断对应的 <code>Actor</code> 是否是期望的，如果是，则销毁；</p>
<h4 id="ExtensionHandler"><code>ExtensionHandler</code></h4>
<p>和 <code>Component</code> 类似，也就是注册 <code>Event</code> 的部分；</p>
<pre class="mermaid">classDiagram
    class UGameFrameworkComponentManager 
	UGameFrameworkComponentManager  : ReceiverClassToEventMap
    UGameFrameworkComponentManager : AddExtensionHandler()
    UGameFrameworkComponentManager : RemoveExtensionHandler()
    UGameFrameworkComponentManager : SendExtensionEvent()</pre>
<h2 id="资源加载">资源加载</h2>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202402220044399.png" alt="image-20240221163647066" style="zoom:40%;" />
<p>在 <code>FGameFeaturePluginState_Registering</code> 状态时，会根据配置的 <code>GameFeatureToAdd-&gt;GetPrimaryAssetTypesToScan()</code>，执行对应的 <code>UGameFeaturesSubsystem::AddGameFeatureToAssetManager</code>，进行资源是否存在等判定之后，尝试加载资源到 <code>AssetManager</code>。</p>
<p>类似的，在 <code>FGameFeaturePluginState_Unregistering</code> 状态时，通过 <code>UGameFeaturesSubsystem::RemoveGameFeatureFromAssetManager</code> 进行资源卸载。</p>
<h2 id="参考">参考</h2>
<p><code>Lyra (UE5.0-5.3) GameFeature 部分源码</code></p>
<p><a href="https://imzlp.com/posts/17658/">UE5：Game Feature 预研</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/467236675">《InsideUE5》GameFeatures架构</a></p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>Gameplay</category>
      </categories>
      <tags>
        <tag>Gameplay</tag>
        <tag>UE</tag>
      </tags>
  </entry>
  <entry>
    <title>2023 年度总结</title>
    <url>/2023/12/31/%E6%97%A5%E5%BF%97/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1>2023 年度总结</h1>
<h2 id="一月">一月</h2>
<p>今年的记忆，从跨年和家人一起在海边放烟花开始，绚烂而又短暂的烟花就好像今年的故事一样，美好也夹杂着一些可惜。</p>
<p>一月底，随着网易和暴雪的合同到期，国内暴雪的时代正式结束了，好像人生一样，总是一次又一次的离别。看到了 link 发的回忆录，上面写着他的游戏策划之路从 War3 的疾风忍法帖地图开始，就好像我当初也玩 OW 玩到入迷。</p>
<p>虽然游戏不在了，但游戏带来的朋友，对人的影响却不会消失。好的游戏真的可以改变一个人一生的轨迹。</p>
<p>同时也更加坚定了自己对游戏行业的看法，游戏行业从业者，不单单只是从业者，更是热爱者、逐梦者，是一个 <strong>浪漫</strong> 的职业。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430755.png" alt="image-20231231042955369"></p>
<h2 id="二月-三月">二月~三月</h2>
<p>在工作中沉沦，写了 Gameplay经分框架、接了卡车玩法，优化了 DisplayInfoSystem。各种业务框架、性能优化、代码重构…… 日子一天天过去。为了出包、Showcase 更是一次又一次的爆肝。</p>
<p>但哪怕如此，最高通缉第一次 CE 测，也还是被喷烂了，玩家表示甚至不知道要进去要干啥，又感觉自己的辛苦毫无意义，这一切会不会是在感动自己呢？</p>
<blockquote>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430257.png" alt="image-20231231032512777" style="zoom: 50%;" />
</blockquote>
<p>那天晚上，一个人坐在人才公园的岸边发呆了两个小时。左边是体育中心演唱会有人正在高歌，右边是高楼的霓虹与起重机正在工作的轰鸣。身前有虫鸣和偶尔鱼儿跳出浅滩的声音，身后是光污染的写字楼高不见顶。</p>
<p>这座城市好吵，我好像与这里格格不入。这 <strong>混沌而复杂</strong> 的城市，<strong>迷幻与孤独</strong> 好像淹没了我。</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430492.png" alt="image-20231231013616851" style="zoom: 50%;" />
<p>不过幸好，这段时间煦哥也来深圳实习了，我们经常一起出去恰大排档吃宵夜，讨论着当下的困境与迷茫、矛盾和艰难，也畅谈人生和理想、目标和未来。</p>
<p>同时，这段时间还认识了一个很活泼的女孩子，给当时的我带来了很多鼓励，她真的好爱说话好有分享的欲望，对生活充满了 <strong>乐观和希望</strong> ，令人不禁感慨，世界上还有这样元气的人。</p>
<p>可惜的是，不知道为什么，我有点不敢直视这种阳光，光明虽然可以带来 <strong>温暖</strong>，但有时也太过刺眼 。</p>
<p>我们曾相约看过一次电影，电影过后，深夜十二点，我一个人撑着伞在深圳的街头漫步和思考，或许这才是我的人生？好像失去了爱人的能力，习惯了孤独，接受并且开始享受孤独，又或许这只是面对孤独时只能无奈接受的借口吧。</p>
<p>电影里那样 <em>“只要有你在的话”</em> 的爱情，可望不可及，令人羡慕的同时，也有点让人心生恐慌。</p>
<h2 id="四月-五月">四月~五月</h2>
<p>哪怕小规模 CE 测试的评价不好，但路还是要走的，大家继续接着努力不断优化。经常晚上聊项目、未来、痛点，又或者是一起写代码调配置。哪怕到深夜两三点下班，也还是会发现有同事还在工位。</p>
<p>大家或许已经不止是同事，更接近一起努力的 <strong>战友</strong> 吧。虽然身体很累，但做游戏还是很快乐的。</p>
<p>在这样的强度下，也逐渐成长了起来。大版本要做组队的时候，一天就拿下了组队系统的基本框架。又写了气势、暴露，负责了各种各样的机制与系统。</p>
<p>虽然现在来看，已经有很多功能废弃了，当初的技术框架也很稚嫩，现在远可以做得更好，但是在当时还是很有成就感的。果然，成长悄无声息，只有回过头来才能发现自己原来还是走了很远。</p>
<p>最高通缉 也为了上线改名为 <strong>热力追踪</strong>，幸运的是，beta1测的数据还不错，这也是在黑暗前行之中一点小小的光芒。</p>
<p>五一也和游戏研发同好会的兄弟们一起在科韵路大聚会了几天，有志同道合的人一起真是一件幸运的事情。离开的那个晚上，和白狼他们一起坐在广州街头的路边，聊了一两个小时，聊着游戏、感情、还有各自的未来，这种慢悠悠的生活真是太好了，至今也难以忘怀。</p>
<p>也玩了几款新游戏，看了看漫展，毕业论文也准备就绪了，一切都在向前。</p>
<h2 id="六月">六月</h2>
<p>又是一年毕业季，返校准备毕业答辩和相关事宜，最后一段在学校的时光了。</p>
<p>短短一周的回归。到学校和朋友们一起爽恰了火锅烧烤，哪怕是在毕业答辩的前一天晚上，深夜也一起聊人生到三点多。大家都在享受最后的 <strong>狂欢</strong>。最后一次吃一食堂的黄焖鸡，最后一次去熙街的山水溶洞，最后一次恰校外的新疆烧烤，最后一次在操场上跑步，最后一次走进一教进行答辩……</p>
<p>在校园的这最后一段时间，也第一次（或许也是最后一次）和认识了两年的一个校园异性朋友出去玩，可惜我们之间的故事还没有开始就结束了，很可惜却也还是很开心，还是很感谢当时在网络上的陪伴和鼓励。</p>
<p>也许还是虚拟的世界更好，一切都可以用机器码精确阐述，如果爱情像写代码那么简单就好了。不过这样的结束也是好事，给这段校园经历画上一个 <strong>完美的句号</strong>。</p>
<p>回过头来才发现，因为早早就出去实习，自己的校园生活太过短暂实在有点可惜，感觉毕业来得太过突然。但哪怕如此，却还是有很多值得记忆一辈子的人和事，<strong>刻骨铭心</strong>。</p>
<p><em>“何当共剪西窗烛，却话巴山夜雨时”。</em></p>
<p>感慨错过的同时，也还是得继续向前，迎接又或是回归新的生活。重庆是原来这么美啊！</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430398.png" alt="image-20231231013358987" style="zoom: 67%;" />
<p>在一周后的某个深夜，伴着星光点点，我又回到了深圳，回到了熟悉的每天开发游戏的日子。每天加班，偶尔加完班大家一起出去恰烧烤。</p>
<p>期间迎来了一次新的 Showcase，被疯狂拷打麻了。不过这次法爷看大家情绪负面。站了出来，让大家不要慌张、不要沮丧。</p>
<blockquote>
<p>后续调整的方向相对明确，所差的是验证成本，结合从整体客户端团队的开发效率和交付质量上看，开发、策划团队的 <strong>战斗力顶级</strong> ，有足够的能力应对可能的变更，所以能打磨好；</p>
<p>相信一点，没有谁能一次性的给出完美的解决方案，我们要作为一个团队群力群策，从策划案的源头（需求沟通）到过程中的考量（开发中的思考）集思广益，奔着阶段性战略，我们的天花板是可触达的；</p>
<p>最高通缉是我们的天花板，QQ飞车是地板，地板的战绩是明确的，天花板能撑到什么样看策划的想象、开发的收敛和一起的打磨；</p>
<p>和这么多优秀的同事合作，多看齐大家的优点补齐自己的短板，<strong>Happy做事快乐生活</strong>，上线后给赛车品类一点小小的<strong>震撼</strong>。</p>
</blockquote>
<p>在这样的鼓励下，或许还是有迷茫和无奈，但大家也重拾信心，继续向前。</p>
<p>某个晚上久违地通宵看完了《跃动青春》，不知道有多久没有看番到天亮了，简单而又纯粹的快乐。</p>
<blockquote>
<p>人生就是一场为了寻找自己喜欢的人和事的旅行。</p>
</blockquote>
<p>有勇气 <strong>追逐梦想</strong> 的人真是耀眼。大家都有各自青春的回忆与故事，或悲伤或美好。各怀心绪，<strong>光彩熠熠</strong>。</p>
<p>最高通缉也是这样一个梦想，我们总是在被质疑、被挑战、被拷打，<strong>但我们始终坚持走在路上</strong>。</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430024.png" alt="image-20231231015112457" style="zoom: 50%;" />
<h2 id="七月-八月">七月~八月</h2>
<p>继续奋战。加班到深夜早就已经是常事，不过搞各种新需求的同时，偶尔还会和 宇健、超哥、法爷 一起出去恰烧烤火锅。辛苦也带着甜蜜。</p>
<p>期间还经历了一次封培开始，结果恰巧项目有重大改动，需要添加关键的搜索态，走不开身，法爷直接亲自帮我写封培延期申请，好家伙。在这样辛苦的日子里，即将迎来 beta2测。出版本前一周，每天晚上都和老铁、球哥他们一起调各种配置到两三点，大家经常点宵夜来工位一起爆肝。</p>
<blockquote>
<p>深圳很大，看不清云雾里的大厦。海岸城总有人纸醉金迷夜夜笙歌。</p>
<p>深圳很小，迷失在城中村的小巷。科技园总有人精疲力竭通宵达旦。</p>
</blockquote>
<p>正式 beta2测，10w+规模测试，可惜这是一次 <strong>至暗时刻</strong> ！首日、充值、匹配、性能、断线重连、语音、组队、网络 各个模块出现了各种各样的问题，实在令人惋惜。</p>
<blockquote>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430676.png" alt="image-20231231032405922" style="zoom:33%;" />
</blockquote>
<p>在各种问题的叠加下，这次测试的数据比上一次全线下降了将近 10%，不过令人感慨的是，热力追踪居然没有什么下滑，在所有的玩法中表现最好，甚至超过了竞速赛，努力是有回报的。</p>
<p>不过项目组是一个整体，除了一部分人的努力以外，整体太让人太失望了。</p>
<p>再一次陷入了迷茫，也意识到了，有的人是满怀热爱来做游戏的，有的人不过是来上班的而已，这就是 <strong>现实</strong>。</p>
<blockquote>
<p>很喜欢马宝的一句话：</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202401202149649.png" alt="image-20240120214922209" style="zoom:50%;" />
</blockquote>
<h2 id="九月">九月</h2>
<p>在台风里开启了九月，这场台风就像项目组此时面临的风暴一样。幸运的是，台风总会过去，团队里也不都是混子，优秀的团队总是不乏能人志士。伴随着美术狠狠冲刺，渲染优化支持，整个游戏的美术质量肉眼可见地在提升。</p>
<p>热力追踪也在不断优化，偶尔也会一边喝酒一边写代码到天亮，大家一起喝酒解压。</p>
<p>在迷茫的日子里，有一天酒后早醒，恰逢天亮，看到了美丽的风景。</p>
<p><em>“曦日分昏晓，凌云任风飘”</em>，或许也预示着之后咱们游戏会迎来那道晨曦曙光。</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430500.png" alt="image-20231231023237399" style="zoom: 25%;" />
<p>在国庆节前夕，策划意识到了撤离玩法需要大改，开了个大会议，一看全是我的功能，doctor 在会议室里狠狠打画饼，<em>“此时就像创业最后一搏，现在不冲更待何时”</em>，确实给我打满了鸡血。</p>
<p>于是国庆节前大家一起狠狠加班了一波。中秋的晚上，在公司干到了晚上十一点，终于把 PeakMomentSystem 写完了。最后一天加班结束前，也和兄弟们一起恰了一波铁板烧，迎接国庆假期。</p>
<p>或许总是一个人在加班写代码，但不只是一个人在做游戏。</p>
<h2 id="十月-十一月">十月~十一月</h2>
<p>在修bug期的空闲时间，补了很多当时没看的好番。</p>
<blockquote>
<p>《路人女主的养成办法》</p>
<p>“时而一起胡闹，时而遇到挫折，时而大声欢笑，时而产生分歧，时而握手言和，时而互相争吵……还发生了其它许许多多的事……这么一个一起实现梦想的故事” 真是令人感慨。</p>
<p>“不是为了多数玩家，而是为了唯一一个人的，我成为只属于你的第一女主角了吗？”</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310439122.png" alt="image-20231231043906999" style="zoom: 33%;" />
</blockquote>
<p>回过头看，满是追寻梦想的路上的热忱和希望。各种各样的经历，每一段故事，波澜又或平淡，悲伤或是欢喜，都是成长路上最好的奖励。</p>
<blockquote>
<p>《中二病也要谈恋爱！》</p>
<p>“人们有时会说胡话，幻想世界会在瞬间变化，想象遥远的未来，在脑中描绘一场轰轰烈烈的恋爱，这些都是人在一生中永远重复着，永无止境地重复，悲伤，害羞，却又可爱，名为 ‘自我意识过剩’ 的疾病，名为 ‘自己’ 的不可绕行之路。没错，人一辈子都活在中二病里。 ”</p>
<p>“爆裂吧，现实！断裂吧，神经！放逐这个世界！“</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430018.png" alt="image-20231231033936329" style="zoom:33%;" />
</blockquote>
<p>愿你走出半生，归来仍是少年。</p>
<blockquote>
<p>《樱花庄的宠物女孩》</p>
<p>“无论自己多么努力也有无法改变的东西。”</p>
<p>“只要是认真思考过自己到底想要怎么做之后得出的结论就行了。”</p>
<p>樱花庄就是因为大家都在才是樱花庄！</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310433857.png" alt="image-20231231043211405" style="zoom: 33%;" />
</blockquote>
<p>人生就是这样分分合合有喜有悲不断成长，想要获得美好的结局，需要有永远在一起的觉悟。</p>
<p>……</p>
<p>每个人物，都在自己的故事里迈出一步又一步，在灿烂宏大而青涩的青春里，释放着自己的光芒。</p>
<p>二次元也给了我莫大的勇气和鼓励，就像路人女主和16bit的感动里那样，又一次爱上了和大家一起做游戏的日子。</p>
<blockquote>
<p>能够找到热爱之事并为之奋斗，<br>
本身就是命中注定极大的幸运。<br>
波澜或是平淡，欢笑又或泪水，<br>
追梦路上总是满怀热忱和希望。<br>
迷失了所寻梦想和热爱的人生，<br>
或许早就已经可以称之为死去。</p>
</blockquote>
<p>不过人生总是有喜有悲，在一个情绪爆发的夜晚，在莫名的思绪下，结合着酒精的作用，有点幼稚地向一个在网上交流了一年多的女孩子表达了心意，其实自己也知道结局早已注定，也算是借此斩断了这段虚空的情缘。虽然在那之后至今没有联系，不过哪怕如此，也还是很感谢那些曾经深夜一起交流游戏分享生活、满怀欣喜聊着未来的时光。</p>
<blockquote>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430686.png" alt="image-20231231040016305" style="zoom: 67%;" />
</blockquote>
<p>在这样平淡也复杂的日子里，迎来了游戏的 beta3 测。</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430767.png" alt="image-20231231031125877" style="zoom: 80%;" />
<h2 id="十二月">十二月</h2>
<p>丰收的一个月。</p>
<p>先令人惊喜的是，这次 beta3测 数据异常的好，远超 beta2测，甚至比已经数据很棒的 beta1测 更好。不过细细想来，这可能也是我们如此付出理应得到的回报，大家也一起久违开心地团建了一次。</p>
<p>一次偶然看到了公众号上的宣传标语，发现宣传语里重点突出的 “公敌对决、撤离玩法、搜索功能”，基本全是我的身影。回过头来看，原来热力追踪的这么多功能都是我在负责了。在持续的高强度作战中，自己正在逐渐变成更厉害的 Gameplay 开发者。</p>
<p>项目组里也加入了更多的新人，偶尔也会讨论技术到凌晨一两点。也新接了龙卷风、雷达卡车，更多新的机制和玩法。自己买了一个多功能锅，偶尔也煎一下小烧烤，恰一顿小火锅，生活自得其乐。</p>
<p>同时，迎来了 A-SOUL 的三周年纪念日。</p>
<p>时间过得真快啊，转眼就已经过去了三年。回想起当初在学校宿舍里看到 A-SOUL 的那一天，真是梦开始的地方。后面一个人出去实习，一个人来深圳，A-SOUL 陪伴我度过了那么多困难的时光，也发现原来我已经走了这么远了。</p>
<p>经历了各种各样的事，认识了各种各样的人，有遗憾也有快乐，有错过也有欣喜，A-SOUL 始终都在那陪伴着我，然然的那一句 <em>“大家要好好吃饭，每天都要开开心心的！”</em>，简短的话语，让人感受到无尽的温暖的力量。</p>
<blockquote>
<p>初见惊羡，再见沉沦。</p>
<p>“抵达” 是一种勇敢，但 “我在” 才是温暖。</p>
<p>“头顶苍穹，总有星辰为我而闪烁，穿过亿万光年，热爱无畏时空。”</p>
<p>“心怀远方，总有理想为我而呐喊，越过流言汹涌，信仰生生不息。”</p>
<p>过往皆为篇章，未来海阔天空，希望这个故事还有很长很长……</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430457.png" alt="image-20231231034527582" style="zoom: 50%;" />
</blockquote>
<p>在年末的最后一天工作日，和朋友们一起出去恰了一顿鸡煲，结束了这相对圆满的一年。</p>
<h2 id="总结">总结</h2>
<p>今年走到了大学毕业的关键节点，也经历了几次项目大规模测试，体验了些许暧昧的感情，人生也在徐徐发展。</p>
<p>认识了很多人，经历了很多事。可能一次偶然的相遇，一个不经意的回眸，两个素未谋面之人就会迸发数不尽的精彩故事。正如这个世界，千变万化，扩展着 <strong>无限的可能性</strong>。</p>
<p>追寻梦想，也享受生活，感受痛苦，亦享受孤独。无数次在脑海中想象着遥远的未来，但也不要忘了这 <strong>旅途本身比终点更为重要</strong>。</p>
<p>一次又一次地站在 <strong>命运的前方，人生的岔路</strong>，或许会有失落迷茫，有所犹豫质疑，或许正身处黑暗，找不到光芒在何方，不知到底可以飞往多高的天空……</p>
<p>但无论发生了什么，都不要忘记了那份 <strong>热爱与梦想，初心与道路</strong>。</p>
<p>雨后总会天晴，人生也没有永夜。</p>
<p>继续坚定向前走去吧！ —— <strong>“只要有心，就能瞬间改变世界！”</strong></p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310439668.png" alt="image-20231231043339798"></p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>2022 年度总结</title>
    <url>/2022/12/31/%E6%97%A5%E5%BF%97/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1>2022 年度总结</h1>
<h2 id="一月-二月">一月~二月</h2>
<p>打工前最后的时光。</p>
<p>印象深刻的是看了乃琳的 50w 粉纪念回，她说：<strong>“喜欢，就是一件细水长流且滔滔不绝的事情呀~”</strong>。</p>
<p>一年结束回望过去，感情是这样，工作是这样，人生也是这样。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310134293.png" alt="image-20221231013237913"></p>
<p>月初，投了下朝夕光年的江南工作室，结果被刷了；还被天美 L1 给捞了，结果也没有面过。</p>
<p>当初还很愤慨，觉得自己这么猛，肯定是面试官没有眼光。现在看来，当初的自己也十分青涩，自以为才高八斗，实际上连半桶水的水平也没有，连UI都不会拼，没有面试通过也很正常。</p>
<p>不过现在感觉也没什么，或许年少就该轻狂点，自负总比自卑更接近自信。</p>
<p>今年行业不景气，寒气传给了每一个人。和几个朋友都聊了聊，聊了下计划，聊了下未来，发现大家也都很焦虑。保研、考研、工作，大学最关键的一年，种种事情纷至沓来，DDL 仿佛近在眼前。</p>
<p>想了一想，果断接着逃学，在家准备面试和溜去实习。</p>
<p>寒气从年初开始找实习时就已经可见一斑，各大厂纷纷开始锁hc，连实习岗位都寥寥无几。幸运的是，或许是因为投简历投得早的原因，在锁 hc 的前一天，终于拿下了天美的实习 offer，十分感激 <strong>天美 F1 工作室</strong> 给了我实习的机会。</p>
<p>或许运气占了很大一部分因素，但是这也坚定了我的人生信条之一：<strong>胆子要大，做事果断</strong>。</p>
<h2 id="三月-四月">三月~四月</h2>
<p>人生总是起起落落，有幸运自然也有不幸。</p>
<p>三月初，因为疫情的缘故，学校全员核酸，逃学终是被发现了；深圳疫情也加重了，封公交封地铁，禁止堂食。</p>
<p>不过凡事都有解决的办法。逃学可以和辅导员补个假条，疫情加重也可以居家办公。也明白了，很多事情没必要去逃避，用自己想当然的方法去解决，比如当初或许压根没必要逃学。<strong>有时候好好沟通沟通，或许会有更好的处理办法。</strong></p>
<p>疫情好转后，再次一个人来到了深圳。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310134737.png" alt="image-20221231000143786"></p>
<p>因为各种调整，来到了 <strong>天美 J1 工作室</strong> 支援快上线的项目（一开始看到是赛车品类的游戏十分失望，但现在看来也是运气极好的一点，因为后面秋招阶段 F1 基本就没有 hc。这不就像人生一样吗，<strong>“祸兮福所倚，福兮祸所伏”</strong>。）</p>
<p>第一次进一个真正的游戏项目组，加入了 <strong>AI组</strong> 。面对庞大的代码无从下手，最后果断直接去要活，帮着改 bug。发现自己原来连 UI 都不会拼，备受折磨，这才是我的真实水平，太弱小了！没有力量！</p>
<p>一个人走在回出租屋的路上，一个人深夜恰着啤酒和烧烤。</p>
<p>不过幸好，认识了浩博，在最艰难的时候给了我许多帮助。至今难以忘记有一次团建后，他还帮我调一个生命周期的问题到了十二点，让我对项目组，乃至游戏这条道路都有了更多的期待。（可惜四月中旬他就离开了项目组去了王者战斗组，说来也巧，当初一月份的时候我还面了王者荣耀的战斗组并且没通过，王者你坏事做尽！）</p>
<p>后面逐渐融入了 AI 组，认识了更多的人，获得了很多很多的帮助。</p>
<p>现在看来这实在太过幸运，一入行就加入的特性小组，组里全是级别很高的猛人。看到了天豪天游他们优美的代码、精妙的框架，愈发令我折服。感受到了自己的渺小，也学到了很多。</p>
<p><strong>只要动手，一切都会好起来的</strong>。</p>
<h2 id="五月">五月</h2>
<p>月初去了广州玩耍，快乐的五一假期。回来后发现珈乐要毕业，退出了 A-SOUL，当初还难受了一段时间。晚上喝了几瓶哭了好久，一个人住的好处就是哭了也没人知道。</p>
<p>不过现在也早已释怀。<strong>人生有梦，各自精彩</strong>。各个选择也不好说是好是坏，自己选择的路跪着也要走完。</p>
<p>或许是之前成功搞定了技能数据蓝图，这次天游拉上我一起在版本末极限开工了“技能漏斗系统”，虽然只是辅助开发，但终于也算是又接了一个稍微狠一点的活。成功拿下，最后效果也还算不错。</p>
<p>原来我也是可以接狠活的人了，不知道什么时候才能独立负责一个完整的系统呢？</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310134950.png" alt="image-20221230210122043"></p>
<h2 id="六月">六月</h2>
<p>最如梦似幻的一个月，在不正确的时间遇上了一起来腾讯实习的妹妹。</p>
<p>人生第一次和女生单独出去玩。我们一起看电影，一起喝酒，一起吹海风，一起聊人生。在欢乐港湾坐在海岸边，看着远方的灯火，青涩幼稚的我以为最恰当的时机、最好的氛围表白了，结果寄了 XD。</p>
<p>镜花水月的美好让我误以为这就是爱情，可其实我们之间的差距大到难以想象。无论是性格还是三观， 无论是过去、现实还是未来；其实我们也不是很了解对方，或许是这个月太过充实，让我以为时间过了太久。</p>
<p>灿烂热烈的日子和平时老鼠窝的生活对比太过强烈，也许我也只是渴望改变下自己？就像鼠鼠也总是喜欢探出下水道寻找光明。</p>
<p>故事的结局并不总是那么美好，也许这就是最好的结局。梦总是会醒的，这也只是生命中的一段小插曲。现在想来，当初有很多幼稚的想法，第一次处理这些事情，矛盾又可笑，可细细一品，却也有点青春的浪漫与纯真。</p>
<p><strong>人生路漫漫，遗憾也是一种浪漫</strong>。尽量做到 <strong>不求无憾，但求无悔</strong> 吧。（呜呜呜又母胎solo了一年）</p>
<p>六月太不真实，如此草草就结束了，秋招也要开始了。</p>
<h2 id="七月-八月">七月~八月</h2>
<p>每年的七月和八月总是充斥着应届生们焦虑的气息。</p>
<p>一边是秋招的压力，一边是工作的无奈。又接了各种经分和UI的杂活，愈发迷茫，这真的是我想做的东西吗？</p>
<p>每天的日记里就写着 “写了一天经分 / 写了一天 UI / 想润了”。写 UI 的过程中，美术策划还一直爱指指点点。果然，<strong>UI程序，无间炼狱</strong>！</p>
<p>最后终于想明白了，这些东西总要有人干的，为什么不是你呢？<strong>游戏客户端就是什么都要做的</strong>。</p>
<p>事实上，当时的情况下来看，组里挑一个最不构成生产力的人来干，那个人也只能是我。</p>
<blockquote>
<p>很喜欢肛少说的一句话：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310134576.png" alt="image-20221231002945979"></p>
</blockquote>
<p>现在还回过头看，这段经历也收获了很多，这些体力活也打下了较为扎实的业务基础，厚积才能薄发。</p>
<blockquote>
<p>做游戏这事，你会拼 UI，不是啥什么本事。但不会拼 UI，却无从谈本事了。</p>
</blockquote>
<p>回到秋招，或许今年的秋招堪称 <strong>地狱难度</strong>，其中艰辛相信经历过的人自然懂。各大厂释放的 hc 寥寥无几，无论是互联网行业还是游戏行业，寒气席卷到了每一个角落。</p>
<p>真正的千军万马过独木桥。游戏行业版号持续缩进，仿佛看不到尽头一样，到处都是劝退的言论。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310141099.png" alt="image-20221231014110154"></p>
<p>我彻底意识到了，<strong>“做游戏，本就九死一生”</strong>。</p>
<blockquote>
<p>很喜欢子明当时和别人的一次对话：</p>
<p>”天人感应：某天某夜一个男子望着大楼发呆，此时已经街道无人，只有灯还亮着“</p>
<p>“东面有什么？” ，“东面是正在修的地铁站不知道什么时候完工。”</p>
<p>“南面有什么？”，“南面是一片技术园区，有的灯还亮着，再往南是一望无际的深蓝。”</p>
<p>“西面有什么？”，“西面是无人无车的公交站以及帝国的另一块版图。”</p>
<p>“北面有什么？”，“北面的居民楼，妇人正在安抚醒来的孩童，今夜无眠。”</p>
<p>“上面有什么？”，“辽阔深邃的星空，高悬的明月，以及攀爬用的楼梯。”</p>
<p>“下面有什么？”，“红色的鲜血，星星落地的骨灰。”</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310134945.png" alt="image-20221231013013538"></p>
</blockquote>
<p>恰好当时从 J5/J6 又转来 J1 很多人，hc 愈发堪忧。</p>
<p>有不幸的事，也有幸运的事。因为早早开始实习，早早进入项目组干活，至少转正答辩的时候有东西可以写，转正的 PPT 上，需求单就贴了三页满。</p>
<p>写转正自评和 PPT 的时候，感谢球哥和文龙也指点我应该怎么写（虽然最后还是就简单写了几十个字，但至少他们的指点让我没那么开摆），同时也感谢 TO/PO/PM 当时力保我（现在看来当时我的确实还很稚嫩）。</p>
<p>八月底最后的转正 GM 面试走了个流程，成功拿下了转正 Offer，收到了意向书。</p>
<h2 id="九月">九月</h2>
<p>月初，又一个版本要结束了，我们的这个玩法 <strong>生死存亡</strong>，体验的结果实在太差，没有人看好，领导玩了不到十分钟就已经放下手机开始开会了。组里所有人都很焦虑，看着球哥他们越来越着急，愈发容易上火，甚至 PM 都已经急哭了几次。</p>
<p>哎…… 真惨，组里的氛围越来越不好。策划开会讨论的时候，都听到 doctor 好像在开玩笑一样地说：“大家都可以准备投简历了”，令人感慨，又有多少真话是以开玩笑的方式说出来的呢？</p>
<p>想着这样的组到底有没有留下去的价值，自己也感觉这个玩法前途一片灰暗。</p>
<p>生死存亡之际，最终策划们一波讨论，决定拉上了几个人 <strong>敏捷开发</strong> 快速验证新玩法。</p>
<p>因为平常 UI 拼的多，杂七杂八的东西负责的也多，混上了敏捷开发四人组中的一个，负责了所有的玩法/AI交互事件还有 UI。后面回头来看，这正是一个转折点，不但是这个玩法的转折点，也是我的转折点，厚积薄发的开始。</p>
<p>狠狠加了一周大班，每天一起床就是全力开发，经常肝到十一点多、十二点，一觉睡醒接着开卷。<strong>充实却又冷漠</strong>。想着看看最后结果如何，还抱着一丝幻想。</p>
<p>月末 Demo 终于开始出包跑起来了，值得庆幸的是，这个 Demo 看起来比之前成功了太多。事实证明，新玩法比之前的有趣了太多。当最初的 demo 跑起来的那一晚，策划直接玩上头。说明这个模式还是很有前途的，至少比之前的好了太多。</p>
<p>虽然加班没什么工资，但还是有种 <strong>值得</strong> 的感觉，看到策划（玩家）的笑脸，如释重负，也切实体会到了 <strong>做游戏的快乐</strong>。</p>
<p>啊，这段黑暗却又光明的日子。<strong>黑暗终将过去，黎明的曙光也终将到来</strong>。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310134174.png" alt="image-20221231002558895"></p>
<p>敏捷开发后，各种机缘巧合，或许是组织调整，或许我每天在工位讲做游戏就该做 gameplay，被 leader 听到了 XD。</p>
<p>总之，正式从 <strong>AI组</strong> 转到了 <strong>玩法组</strong>，项目也开启了 <strong>里程碑快速开发</strong> 阶段。</p>
<p>当初还很焦虑，毕竟要走出舒适圈了，但现在看来，这才是我该来的地方。</p>
<blockquote>
<p>很喜欢 MDD 说的一句话：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310134155.png" alt="image-20221231002233010"></p>
</blockquote>
<h2 id="十月-十二月">十月~十二月</h2>
<p>敏捷线开发后，新玩法正式立足，进入了里程碑快速开发，我也正式转入玩法组进行工作。</p>
<p>里程碑的快速开发，带来的也是快速的成长。</p>
<p>和在 AI组 的 ”基本都在 UI，偶尔一点大活“ 不同，到玩法组后各种狠活，各种各样的功能，各种各样的系统：<code>LifeTimeSystem</code> / <code>DisplayInfoSystem</code> / <code>GameplayBuffSystem</code> / <code>GameplayFeatureSystem</code>……</p>
<p>回过头来，已经独立拿下了好多功能，各种 gameplay，狠狠堆业务。</p>
<blockquote>
<p>很喜欢马宝说的一句话：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310134135.png" alt="image-20221230210148303"></p>
</blockquote>
<p>或许是拿下的狠活多了，或许是手速快、Bug 少。也逐渐愈发核心，各种功能开会也都拉上我了，手里的活越来越核心，不再是过去的 UI 打杂仔了。</p>
<p>恰好这时也谈薪发了正式 Offer，寒气袭人，一开始拿到的还只有 SP（现在想想在 AI 组的表现也确实就值这个价），感觉不太满意，和领导反馈了一下，结果 leader 直接去找 HR 表示 “这个人对项目组很重要，要尽全力挽留”（感动），最后也是成功拿下了个不错的 Offer，ヾ(✿ﾟ▽ﾟ)ノ</p>
<p>兜兜转转，最后还是决定在这个项目组好好干。</p>
<p>日子就这样一天天过去，里程碑阶段疯狂加班，几乎每天都十一点多走，在这种高压下，项目在成长，我也在飞速成长……</p>
<p>年终看完了世界杯，不得不说这是近几年最精彩的一场球赛，两个球队的坚持令人动容，这种意志值得学习，庆祝潘帕斯雄鹰也再次起飞！</p>
<p>终于，里程碑的快速开发终于走到了尾声。最后一个里程碑，基本也只有策划配置的活，恰好疫情也放开了，阳性在家，好好休息了一下。</p>
<p>最后一段居家办公的生活，作为了一年的总结，确实有种今年总算结束了的感觉，令人感慨。</p>
<p>希望明年项目顺利上线吧，希望我们玩法也可以大受好评。</p>
<h2 id="总结">总结</h2>
<p>今年认识了各种各样、各行各业的人，无论是程序、策划、测试，还是美术、运营。每个人都有自己与众不同的经历与故事，都有自己的想法和目标，<strong>平等自然看待所有人</strong> 才是相处的好办法。</p>
<p>无论人生有怎样的困难，总是要积极面对，<strong>凡事都会有解决的办法</strong>，相信自己，坚定信念。</p>
<p>固然运气也是成功的一部分，但 <strong>执行力要强，胆子要大</strong> 也十分重要。如果都不曾动手过，也无从谈运气好之说了。</p>
<p><strong>福祸相依</strong>，人生总不是一帆风顺的，起起落落跌宕起伏的故事才更加扣人心弦。</p>
<blockquote>
<p>或许寒气袭人，或许游戏行业日薄西山，或许九死一生。</p>
<p>但哪怕如此，依然得拼 UI、写 gameplay，因为这就是 “游戏热爱者”。</p>
</blockquote>
<p><strong>『No Game No Life』</strong> 的故事中，里克和休比面对黑暗，也始终心向光明，依然可以说出那句 <em><strong>【ゲームを始めよう】</strong></em>。</p>
<p>人生何尝不是一场盛大的游戏？</p>
<p>一部设计得精妙绝伦的游戏，一段注定与众不同、注定精彩的人生。</p>
<p>那么 —— <strong>来玩游戏吧！</strong></p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310134074.png" alt="image-20221231001141448"></p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>[UE]PushModel属性同步</title>
    <url>/2022/04/10/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/%5BUE%5DPushModel%E5%B1%9E%E6%80%A7%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<h1>PushModel属性同步</h1>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202204101622619.png" alt="image-20220410162250125"></p>
<h2 id="优势">优势</h2>
<p><code>PushModel</code> 是对 <code>Replicate</code> 的一个优化。</p>
<p>对于属性的同步，原有的 <code>Replicated</code> 属性，在 <code>Replicate</code>  之前需要通过<code>反射</code>对一个 <code>Actor</code> 的所有属性进行 <code>diff</code>，对比所有的属性是否发生变化，变化的属性才进行同步。</p>
<p>而用上了 <code>PushModel</code>，我们可以主动 <code>MARK_DIRTY</code>，在 <code>Set</code> 时主动将其设置为脏，相当于给该属性上了一个<code>Flag</code>，底层会自动通过这个<code>Flag</code> 来判断是否需要同步，省去了 <code>diff</code> 这个高消耗的操作。</p>
<p>需要注意的是，对于一个 <code>Actor</code>，如果采用了 <code>PushModel</code>，则需要将所有需要同步的属性都挂上这个 <code>PushModel</code>，否则如果存在非<code>PushModel</code>的需要<code>Repilicated </code>的属性，可能会该功能不生效，退化到原来的情况。</p>
<p>UE5 中还对 <code>PushModel</code> 做了更进一步的优化，添加了一些新的宏以及对更多基础组件的支持。</p>
<h2 id="实践">实践</h2>
<h3 id="设置依赖">设置依赖</h3>
<p>首先，我们需要在 <code>Build.cs</code> 中添加 <code>NetCore</code> 模块的依赖。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">PublicDependcyModuleNames.<span class="built_in">AddRange</span>(<span class="keyword">new</span> string[] &#123;<span class="string">&quot;NetCore&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="设置属性">设置属性</h3>
<p>我们对于一个需要同步的属性，得先加上 <code>Replicated</code> 标签；有必要的话，需要加上<code>RepilicatedUsing </code> 来设置属性为脏时执行的回调函数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ATest</span> :</span> <span class="keyword">public</span> AActor</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UPROPERTY</span>(Replicated, EditAnywhere, ReplicatedUsing = OnRep_Param)</span><br><span class="line">	<span class="keyword">float</span> Param;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UFUNCITON</span>()</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnRep_Param</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ATest::OnRep_Param</span><span class="params">()</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
<h3 id="声明同步">声明同步</h3>
<p>首先我们要先将这个 <code>Actor</code> 标记为需要同步，在构造函数中标记 <code>bReplicates = true</code>。</p>
<p>接着我们需要实现 <code>GetLifetimeReplicatedProps</code>，在这个接口中添加宏标记同步的 Property。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ATest::GetLifetimeReplicatedProps</span><span class="params">(TArray&lt; FLifetimeProperty &gt;&amp; OutLifetimeProps)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Super::<span class="built_in">GetLifetimeReplicatedProps</span>(OutLifetimeProps);</span><br><span class="line">    </span><br><span class="line">	FDoRepLifetimeParams SharedParams;</span><br><span class="line">	SharedParams.bIsPushBased = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">	<span class="built_in">DOREPLIFETIME_WITH_PARAMS_FAST</span>(ATest, Param, SharedParams);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>FDoRepLifetimeParams</code> 中设置了同步的条件，其中<code>bIsPushBased</code> 表明是否使用 <code>PushModel</code>。</p>
<p>其中 <code>DOREPLIFETIME_WITH_PARAMS_FAST</code> 的宏实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">define <span class="title">DOREPLIFETIME_WITH_PARAMS_FAST</span><span class="params">(c,v,params)</span> \</span></span><br><span class="line"><span class="function"></span>&#123; \</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">bool</span> bIsValid_##c_#<span class="meta">#v = ValidateReplicatedClassInheritance(StaticClass(), c::StaticClass(), TEXT(#v)); \</span></span><br><span class="line"><span class="meta">	const TCHAR* DoRepPropertyName_##c_##v(TEXT(#v)); \</span></span><br><span class="line"><span class="meta">	const NetworkingPrivate::FRepPropertyDescriptor PropertyDescriptor_##c_##v(DoRepPropertyName_##c_##v, (int32)c::ENetFields_Private::v, 1); \</span></span><br><span class="line"><span class="meta">	RegisterReplicatedLifetimeProperty(PropertyDescriptor_##c_##v, OutLifetimeProps, params); \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="修改属性">修改属性</h3>
<p>最后，我们在修改属性的时候，可以使用 <code>MARK_PROPERTY_DIRTY_FROM_NAME</code> 来将属性设脏。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ATest::SetParam</span><span class="params">(<span class="keyword">const</span> <span class="keyword">float</span> NewParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">MARK_PROPERTY_DIRTY_FROM_NAME</span>(ATest, Param, <span class="keyword">this</span>);</span><br><span class="line">    Param = NewParam;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在，<code>Server</code> 只需要检测属性是否被 <code>MARK_DIRTY</code> 就可以知道是否需要同步。</p>
<p>当然，除了 <code>MARK_PROPERTY_DIRTY_FROM_NAME</code> 以外，UE 还实现了一些作用类似的其它的宏：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MARK_PROPERTY_DIRTY(Object, Property) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MARK_PROPERTY_DIRTY_STATIC_ARRAY_INDEX(Object, RepIndex, ArrayIndex) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MARK_PROPERTY_DIRTY_STATIC_ARRAY(Object, RepIndex, ArrayIndex) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MARK_PROPERTY_DIRTY_FROM_NAME(ClassName, PropertyName, Object) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MARK_PROPERTY_DIRTY_FROM_NAME_STATIC_ARRAY_INDEX(ClassName, PropertyName, ArrayIndex, Object) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MARK_PROPERTY_DIRTY_FROM_NAME_STATIC_ARRAY(ClassName, PropertyName, ArrayIndex, Object)</span></span><br></pre></td></tr></table></figure>
<h3 id="改进">改进</h3>
<p>当然，我们也可以不这么复杂，我们可以自己设置一个新的标签。</p>
<p>对于打上这个标签的属性，让其在 <code>CodeGenerator</code> 中自动生成 <code>Setter</code> 与 <code>Getter</code>，然后通过 <code>Setter</code> 与 <code>Getter</code> 来进行修改与访问。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _T&gt; \</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetParam</span><span class="params">(_T&amp;&amp; NewParam)</span> \</span></span><br><span class="line"><span class="function"></span>&#123; \</span><br><span class="line">    <span class="built_in">MARK_PROPERTY_DIRTYFROM_NAME</span>(ATest, Param, <span class="keyword">this</span>); \</span><br><span class="line">    Param = Forward&lt;_T&gt;(NewParam); \</span><br><span class="line">&#125; \</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">float</span>&amp; <span class="title">GetParam</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> Param;&#125; \</span><br><span class="line"><span class="function"><span class="keyword">float</span>&amp; <span class="title">GetParam_Mutable</span><span class="params">()</span> \</span></span><br><span class="line"><span class="function"></span>&#123; \</span><br><span class="line">   <span class="built_in">MARK_PROPERTY_DIRTYFROM_NAME</span>(ATest, Param, <span class="keyword">this</span>); \</span><br><span class="line">   <span class="keyword">return</span> Param;</span><br><span class="line">&#125; \</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p>Unreal Engine 4. New network model: PushModel：<a href="https://tech-en.netlify.app/articles/en539604/index.html">https://tech-en.netlify.app/articles/en539604/index.html</a></p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>2021 年度总结</title>
    <url>/2021/12/31/%E6%97%A5%E5%BF%97/2021%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1>2021 年度总结</h1>
<h2 id="一月-三月">一月 ~ 三月</h2>
<p>开年好像并不是十分顺利，先是挂了 雅思听力 这门课（也是唯一一次挂科，幸好补考过了）。</p>
<p>给 ACM 的学弟讲课、准备补考、沉迷小说…… 日子总是在浑浑噩噩中就这样过去了，没什么成长也没什么收获。</p>
<p>就这样平平淡淡结束了这个学期在学校的日子，踏上了返乡的飞机。</p>
<p>回到家，躺了三天，想了很多，各种头脑风暴与纠结。最后终于坚定了自己的选择： <strong>毕业直接打工</strong> ，从事 <strong>游戏客户端开发</strong> 。</p>
<p>既然有了选择，那就动手！怎么在来年的秋招拿到个好 Offer 呢？水了水知乎，看了看那些面试的人，发现最有用的东西：<strong>实习经历</strong>。</p>
<p>发现大家都是大三才去找实习，那时候肯定很卷 QAQ，不行，得想个办法卷过他们！这时候我的内心萌生了一个想法：我要在这个 <strong>大二暑假</strong> 就去游戏大厂实习！</p>
<p>怎么找到实习呢？自然是 <strong>奖牌、项目、八股文</strong> ，但这时我手里除了一块 ACM 银牌一无所有，于是带着找到实习的目标，开始了紧急特训。</p>
<p>寒假期间，每天晚上从七八点卷到凌晨三四点以后，最后终于在开学的前两天整出了一个稍微能看能聊的 <strong>项目</strong> 。开学后，带着焦虑从早到晚背了两三周的 <strong>八股文</strong>（速成还是稍微取巧了，不可取啊不可取！）。但至少这下，终于可以有底气投递简历了。</p>
<p>带着 稚嫩的项目、不成熟的八股文、唯一一块稍微值钱点的 ACM 银牌 ，我开始了投递简历。这时候发现，官网上往往写着暑期实习只招收 22 届的学生（而我是 23 届的），但是事已至此怎能放弃呢！我还是把游戏大厂投了个遍，最后也证明了，这玩意儿也就写写而已，简历还是全都被捞了起来。</p>
<p>写简历，投递简历，等着简历被捞，面试。</p>
<p>……</p>
<p>幸运的是， 付出了的有了收获，甚至收获比你想象的更大 。居然通过了所有的面试，一次都没有挂过。</p>
<p>尘埃落定。在 <strong>3.26</strong> 收到 <strong>腾讯光子</strong> 的 Offer 的时候，过去近四个月的高压终于得到了释放。这时身心俱疲，甚至对面试产生了 PTSD，于是把其它厂的后续面试全拒了。（太感谢腾讯给的机会啦！）</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202201020036629.png" alt="img"></p>
<h2 id="四月-五月">四月~五月</h2>
<p>接下来好好把之前速成的八股学了学，认真学了下计网和操作系统。杂七杂八的东西也学了一堆，搭建起了这个博客。</p>
<p>期间认识了一个很优秀也很可爱的小姐姐，成为了好朋友，后来也给了我很多帮助和鼓励，很难不心动，可惜之后发现小姐姐早就有男朋友了……看来今年也脱单无望了，事实证明也确实如此，的确又母胎 solo 了一年。希望明年可以脱单！（好像已经这么说了好几年了，哈哈哈哈）</p>
<p>五月末，去北京打了人生中最后一场 ACM 比赛，可惜，结局并不是太好。可能是太久没有好好训练，早就进入了退役状态，比赛的结果不怎么样，痛苦打铁，公费旅游变自费…… <strong>一切摸的鱼，迟早要付出代价的！</strong></p>
<p>比赛完和好兄弟们聚了聚。考完和 lpf、pyz 一起聚了聚。这时我突然有了去天安门看升旗的想法，大家一拍即合！（或许好兄弟就是这样能陪你一起进步一起闹一起疯狂的存在吧）于是在凌晨两三点，我们从北四环一起骑共享单车到天安门看升旗。</p>
<p>这也是今年记忆最深刻的一件事情了，不得不承认这样的经历此生难忘。与此同时，这也是我人生中看过的最壮观的一场升旗仪式。</p>
<p>我觉得这甚至比得奖更加有价值，在往后余生，这样的经历都将有它在记忆中的位置。</p>
<p><strong>这些与众不同的故事，才是人生的意义吧</strong> 。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202201020036718.jpeg" alt="img"></p>
<h2 id="六月">六月</h2>
<p>偶然间看到了 <strong>嘉然</strong> 的一场直播，一首小年兽、一句晚安，直接心动！后来慢慢好好了解了下然然，原来世界上还有这么可爱的女孩子！</p>
<p><strong>“大家都要好好吃饭，每天都要开开心心的！”</strong> ，初见时并没有什么波澜，但是在后面我压力大再听到的时候，直接给我整破防了，或许这就是 <strong>偶像的意义</strong> 吧。</p>
<p>虽然我们隔着一个次元，但我还是受到了深深的鼓励，莫大的力量！！</p>
<p>后面实习期间，压力大的时候，在然然的 50 周年纪念回上，听到了那首《不可思议》，一个人在十平米的出租屋里直接听哭了。愈发入脑，或许在其他人看来甚至有点魔怔，但是其中的感动自己知道也就足够了。</p>
<p>然然，嘿嘿，我滴然然！</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202201020036999.jpeg" alt="img"></p>
<h2 id="七月-九月">七月 ~ 九月</h2>
<p>踏上了实习的路。</p>
<p>听到要做的东西的时候一脸懵逼，“这啥玩意儿啊？”，不能说是不会，只能说是完全不会了。</p>
<p>哎，嘈杂焦虑的深圳啊……项目前期每天在压力中度过，科兴好像风水确实不好，感觉整个人都不太对劲儿，幸好后面习惯了，生活和状态也慢慢回到正轨，虽然还是莫名其妙感觉好累。</p>
<p>还是有许多幸运的事。认识了很多志同道合的好朋友，一起在游戏行业成长。压力大的时候有然然的直播和朋友的陪伴，每一次鼓励和侃大山都给了我很大的力量。</p>
<p>现在还能回忆起来，想到的不是因为做不出项目的痛苦。而是 下班后晚上和 奥佬、川宝、柏神 一起喝啤酒吃烧烤的日子、和 枕鹤、恒佬 一起吃的那顿韩料、和桉宝一起约着吃的猪脚饭、还有和 游戏研发男酮会（同好会） 的众人一起面基打桌游时开心的模样……果然，友谊，是人生最珍贵的东西之一了。</p>
<p>最后慢慢啃还是顺利完成了项目，因为种种原因九月底就离职了。</p>
<p>同时也深刻明白了马宝说的一句话：<strong>“你得先做，然后才会；你得会了，所以能做。”</strong></p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202201020036965.jpeg" alt="img"></p>
<h2 id="十月-十二月">十月 ~ 十二月</h2>
<p>升到了 <strong>大三</strong> ，岁月如梭呀。</p>
<p>不过因为这学期课程实在太水，彻底把这些毫无价值的课给摆了，基本就没有上过课。</p>
<p>用实习挣的钱买了台顶配的电脑，无论是学习还是游戏都舒服了起来。</p>
<p>好好打了打游戏，也好好学了点东西（虽然总体来说还是比较摸鱼）把渲染、动画、Gameplay、物理、框架等等都卷了卷…… 正如肛少所说的 <strong>“客户端是什么都要做的”</strong>。</p>
<p>看完了入门精要，发现对渲染还是不感兴趣，能抄抄效果就好。期间看到 MDD 说的话，感觉很有道理：“做游戏，不做 Gameplay，做个屁的游戏。”</p>
<p>期间看了看其他虚拟主播的直播，感觉好像自己也 <strong>更加感性</strong> 了，以前总是理性消费，现在被感动到了总是想消费一波，差点要把实习赚的钱给造完了 QAQ（或许是因为然然在实习期间给了我很大的力量吧）。在这个世界上，大家都各自有自己的故事。在互联网上认识了一些可爱的人，也发现了一些或许不够成熟的人。这就是人生百态吧，同时庆幸自己遇到并结识的都是很优秀的人。</p>
<p>年末发现自己老是宅在电脑面前，以至于体重突破了 70kg，寄！于是立马开始了两天一次的长跑，运动确实可以锻炼意志力，在你不想跑想停下来的时候，克服怠惰的欲望再往前跑，这也是一次成长。</p>
<p>在学校平平淡淡地度过了 2021 年的最后一个季度……</p>
<p>今年的最后几天，发现 ugg 要去杭州字节的江南工作室了（然然也是江南工作室的），这推动了还在纠结的我。</p>
<p>回想起然然带给我的力量，过去的种种感动，果断给 <strong>杭州字节</strong> 投递了简历，这不也是人生中一件很 <strong>浪漫</strong> 的事情吗。</p>
<p>又开始了背八股的日子，就像上个学期一样，仿佛一场轮回一样，又吹响了新一场战斗的号角。</p>
<p>不过与之前不同的是，现在的我比开年的我更加有底气，也更加成熟了。</p>
<h2 id="总结">总结</h2>
<p>人生总是有许多的起起伏伏，有顺风顺水之日，亦有逆水行舟之时。</p>
<p>年初的时候我就在想，“今年过去后，自己会成长成一个什么样的人？”</p>
<p>整理年度总结的时候看了看过去的日记，发现年末的我确实比开年之初成长了许多，那这就足够了。</p>
<p>有什么想到的或者是想法，就立马动手！不要总是考虑那么多，不是所有事情都能准备得十分周全的，时间往往在你准备的时候就已经流逝了。</p>
<p><strong>所以，去做吧！</strong></p>
<p>最后，别忘记了家人，也别忘记了好朋友好兄弟们。</p>
<p><strong>人生路漫漫，这些弥足珍贵的情感，是人生中最宝贵的财富。</strong></p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202201020037007.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Live2D模型的简单制作</title>
    <url>/2021/11/29/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%8A%A8%E7%94%BB/Live2D%E6%A8%A1%E5%9E%8B%E7%9A%84%E7%AE%80%E5%8D%95%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<h1>Live2D模型的简单制作</h1>
<h2 id="准备工作">准备工作</h2>
<ol>
<li>下载 <strong>Photoshop</strong> ；</li>
<li>下载 <strong>Live2D Cubism</strong> ：<a href="https://www.live2d.com/zh-CHS/%E3%80%82">https://www.live2d.com/zh-CHS/。</a></li>
</ol>
<h2 id="PS">PS</h2>
<p>首先我们在 <strong>PS</strong> 中制作好已经分层好的图层，为了方便后续在 <strong>Live2D Editor</strong> 中的使用，每个图层可以单独移动。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202111291804890.png" alt="image-20211129164244952"></p>
<p>保存好 <strong>.psd</strong> 文件，后续使用。</p>
<h2 id="Live2D-Editor">Live2D Editor</h2>
<h3 id="导入文件">导入文件</h3>
<p>打开 <strong>Live2D Cubism Editor</strong>。</p>
<p>将制作好的 <strong>.psd</strong> 文件导入到 <strong>Editor</strong> 中。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202111291804117.png" alt="image-20211129165444470"></p>
<h3 id="应用模板动画">应用模板动画</h3>
<p>点击 <strong>文件 -&gt; 应用模板</strong> 。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202111291804308.png" alt="image-20211129165759765"></p>
<p>在显示的各种模板中选择一个合适的模板。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202111291804316.png" alt="image-20211129165837121"></p>
<h3 id="调整参数">调整参数</h3>
<p>调整模板参数，尽可能地保证五官、身体对应。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202111291804212.png" alt="image-20211129171438834"></p>
<p>由于自动绑定不一定合适，我们在 <strong>应用模板预览</strong> 中手动绑定对应部位</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202111291804475.png" alt="image-20211129170308057"></p>
<p>点击一侧的部位，然后点击另一侧需要绑定的部位后，点击 <strong>对应所选元素</strong> 即可。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202111291804163.png" alt="image-20211129170326365"></p>
<p>绑定后点击 <strong>OK</strong> 确认。</p>
<h3 id="制作纹理">制作纹理</h3>
<p>点击 <strong>可编辑纹理集</strong> 并导出纹理。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202111291804131.png" alt="image-20211129165611423"></p>
<p><img src="E:%5CPictures_data%5Cimage-20211129165649706.png" alt="image-20211129165649706"></p>
<h3 id="导出">导出</h3>
<p>点击 <strong>文件 -&gt; 导出运作档 -&gt; 导出为 moc3 文件</strong> 即可。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202111291804013.png" alt="image-20211129170837179"></p>
<p>这个 <strong>moc3</strong> 文件即可投入使用。</p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>动画</category>
      </categories>
      <tags>
        <tag>动画</tag>
      </tags>
  </entry>
  <entry>
    <title>骨骼动画原理</title>
    <url>/2021/11/27/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%8A%A8%E7%94%BB/%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1>骨骼动画原理</h1>
<h2 id="基础知识">基础知识</h2>
<p><strong>骨骼动画（Skeletal Animation）</strong> 是模型动画中的一种，通过改变骨骼的朝向和位置来为 <strong>模型</strong>  生成动画。</p>
<p><strong>模型（Model</strong>）由一个个三角面组成，这种三角面也被称为 <strong>网格（Mesh）</strong>，网格上有一个个 <strong>顶点（Vertex）</strong> 。</p>
<p>对应在骨骼动画中， <strong>网格（Mesh）</strong> 也被称作 <strong>皮肤（Skin）</strong>；骨骼之间的连接处称作 <strong>关节（Joints）</strong>，骨骼可以绕着 <strong>关节</strong> 旋转。</p>
<p>骨骼动画的制作，我们一般先进行 <strong>蒙皮</strong> ，然后运动时根据提前制作好的 <strong>关键帧</strong> 与在两个关键帧之间的 <strong>插值</strong> 进行 <strong>姿态调整</strong> 生成动画。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202111270535439.png" alt="image-20211127035412971"></p>
<h2 id="蒙皮">蒙皮</h2>
<h3 id="基础知识-2">基础知识</h3>
<p>对于两脚兽，一般使用 <strong>T-Pose</strong> 进行蒙皮，因为大部分姿势不会偏离它太大。</p>
<p><strong>蒙皮</strong> 就是将 <strong>网格（Mesh）</strong> 的 <strong>顶点（Vertex）</strong> 给 <strong>绑定</strong> 在骨骼上，骨骼动画的本质就是用 <strong>骨骼</strong> 来操控 <strong>Mesh</strong> 动起来，<strong>Mesh</strong> 动起来的本质是 <strong>顶点</strong> 位置的改变。</p>
<p>一个 <strong>顶点</strong> 可能被多个 <strong>骨骼</strong> 影响（大部分情况一个顶点只会被一个骨骼影响，但是比如接近关节的顶点，单纯由一个骨骼影响可能会出现缝隙）。</p>
<p>确定被影响的方案就要使用 <strong>线性混合蒙皮（Linear Blend Skinning）</strong> 技术。</p>
<h3 id="线性混合蒙皮">线性混合蒙皮</h3>
<p>每个骨骼上会储存一个 <strong>变换矩阵</strong>（变换矩阵就是从 <strong>关节坐标系</strong> 到 <strong>世界坐标系</strong> 的 <strong>平移、旋转、缩放</strong> 矩阵的乘积，关节坐标系是以某个关节为原点的坐标系）</p>
<p>我们假设对这个顶点有影响的 <code>骨骼 i</code> 的 <strong>权重</strong> 为 <code>w[i]</code> 、变换矩阵为 <code>M[i]</code>、在 <strong>T-Pose</strong> 下的坐标为 <code>V</code>，那最后<strong>混合后的世界坐标</strong> 就为 <code>sum(V * w[i] * M[i])</code>，其中所有对其有影响的骨骼的权重之和为 <code>1</code> 。（其实这个公式就是按各个骨骼的权重比例转换，实际上是对每个骨骼的变换矩阵进行插值）</p>
<p>现在我们有了这个式子，需要的就是知道如何获得 <strong>变换矩阵</strong>，这就需要用到 <strong>正向动力学（Forward Kinematics）</strong> 了。</p>
<h3 id="正向动力学">正向动力学</h3>
<p>控制了关节的坐标，也就控制了骨骼、控制了模型。</p>
<p>关节可以构成一棵树（一般两脚兽以 <strong>盆骨</strong> 为根节点），每个节点存储了 <strong>相对父节点</strong> 的变换矩阵（我们可以叫它 <strong>小变换矩阵</strong>）。</p>
<p>这样，一个父节点移动的时候，可以带动子节点一起移动。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202111270536995.png" alt="image-20211127042112070"></p>
<p>我们有了每个节点 <strong>相对父节点</strong> 的 <strong>小变换矩阵</strong>，从 <strong>关节坐标系</strong> 到 <strong>世界坐标系</strong> 的最终 <strong>变换矩阵</strong> 就由这一个个小变换矩阵累积获得，这个求解最终 <strong>变换矩阵</strong> 过程也就是 <strong>正向动力学</strong> 的本质。</p>
<p>实际上，每个节点的这个最终 <strong>变换矩阵</strong> 也就是从 <strong>根节点</strong> 到 <strong>该节点</strong> 路径上，每个 <strong>小变换矩阵</strong> 的乘积。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202111270536124.png" alt="image-20211127043125618"></p>
<p>设<code>骨骼 i</code> 的 <strong>小变换矩阵</strong> 为 <code>m[i]</code>，特别的，根节点的变换矩阵设为 <code>O</code>，那显然对上图：<code>M[0] = O</code>、<code>M[1] = m[1]* O</code>、<code>M[2] = m[2] * m[1] * O = M[1] * O</code>，显然可以通过在树上进行一次遍历求得。</p>
<p>求解这个问题，这就是 <strong>正向动力学</strong> 了（一看就很 <strong>正向</strong>，从根节点 <strong>正向</strong> 往下走到叶节点）</p>
<h2 id="姿态调整">姿态调整</h2>
<h3 id="基础知识-3">基础知识</h3>
<p>动画师编辑骨骼进行若干姿态的调整，在 <strong>关键帧</strong> 中我们直接手动调整姿态。</p>
<p>在非关键帧（两个关键帧之间的 <strong>插值</strong> 得到的）动画，也会有姿态的变换。</p>
<p>如何进行姿态的调整有两种方案：</p>
<ol>
<li>对 <strong>变换矩阵</strong> 进行插值，需要用到 <strong>正向动力学（Forward Kinematics）</strong>。</li>
<li>对部分 <strong>关节坐标</strong> 进行插值，然后逆推所有坐标，需要用到 <strong>逆向动力学（Inverse Kinematics）</strong></li>
</ol>
<h3 id="逆向动力学">逆向动力学</h3>
<p>对于关节树，给定末端的 <strong>关节坐标</strong> ，怎么获得每个关节的坐标，从下往上 <strong>逆向</strong> 求解，就是 <strong>逆向动力学</strong> 的本质。</p>
<p>逆向动力学的解决方案一般是 <strong>CCD（Cyclic Coordinate Descent）</strong> 或 <strong>CAA（Circular Alignment Algorithm）</strong> 等。</p>
<h4 id="CCD（循环坐标下降算法）">CCD（循环坐标下降算法）</h4>
<p>CCD 在关节链的上执行一系列旋转，从最后一个链节开始，每次尝试将 <strong>末端</strong> 移近 <strong>目标坐标</strong>，采用迭代的方式逐渐处理。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202111270536778.png" alt="image-20211127050602039"></p>
<p>CCD 算法也有不足之处：</p>
<ol>
<li>
<p>一组关节的物理系统一般有 <strong>关节角度约束</strong> 等物理限制，在解决 <strong>逆向动力学</strong> 的时候需要考虑到这些限制。CCD 算法可以生成可能 <strong>违反关节角度约束</strong> 的大角度旋转。</p>
</li>
<li>
<p>在某些情况下，特别是当靠近目标坐标时，CCD 算法会导致一条链形成循环 <strong>与自身相交</strong>。</p>
</li>
</ol>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202111270536234.png" alt="image-20211127051144869"></p>
<ol start="3">
<li>在某些情况下，CCD 可能会进行大量迭代，导致末端缓慢的 <strong>锯齿形运动</strong>。</li>
</ol>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202111270536675.png" alt="image-20211127051220872"></p>
<p><strong>CAA（Circular Alignment Algorithm）</strong> 可以克服这些缺点。</p>
<h4 id="CAA（圆形对齐算法）">CAA（圆形对齐算法）</h4>
<p>CCA 给定的关节链沿 <strong>基点</strong> 和 <strong>可到达的目标位置</strong> 之间的若干圆弧。通过这些圆弧，计算可接受范围内的关节角度，实现 逆向动力学。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202111270536594.png" alt="image-20211127051811031"></p>
<p><strong>CAA</strong> 要求所有圆弧具有相同的长度，以便计算。</p>
<p>CAA 在包含圆弧的 <strong>基点</strong> 和 <strong>目标坐标</strong> 的二维平面上工作。因此，一般的三维问题会被简化为二维问题，所有关节链都被限制为在单个平面上移动。</p>
<h3 id="插值">插值</h3>
<p>让非关键帧动画 <strong>平滑且连续</strong> 需要用到插值；空间变换有三种操作：平移、旋转、缩放。</p>
<p>其中，平移、缩放，显然可以平移矩阵、缩放矩阵直接进行 <strong>线性插值</strong>，但是旋转显然不行，旋转是在一个球面上移动，我们需要用到 <strong>四元数</strong> 进行 <strong>球面线性插值</strong> 。</p>
<h2 id="参考">参考</h2>
<p>GPU Skinning：骨骼动画原理：<a href="https://zhuanlan.zhihu.com/p/126293705">https://zhuanlan.zhihu.com/p/126293705</a></p>
<p>浅谈骨骼动画技术原理：<a href="https://zhuanlan.zhihu.com/p/431446337">https://zhuanlan.zhihu.com/p/431446337</a></p>
<p>Kinematics (Advanced Methods in Computer Graphics) ：<a href="http://what-when-how.com/advanced-methods-in-computer-graphics/kinematics-advanced-methods-in-computer-graphics-part-4/">http://what-when-how.com/advanced-methods-in-computer-graphics/kinematics-advanced-methods-in-computer-graphics-part-4/</a></p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>动画</category>
      </categories>
      <tags>
        <tag>动画</tag>
      </tags>
  </entry>
  <entry>
    <title>[图形学]基础图形绘制-直线裁剪</title>
    <url>/2021/10/19/%E5%9B%BE%E5%BD%A2%E5%AD%A6/%5B%E5%9B%BE%E5%BD%A2%E5%AD%A6%5D%E5%9F%BA%E7%A1%80%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6-%E7%9B%B4%E7%BA%BF%E8%A3%81%E5%89%AA/</url>
    <content><![CDATA[<h1>基础图形绘制-直线裁剪</h1>
<h2 id="Cohen-Sutherland">Cohen-Sutherland</h2>
<p><strong>Cohen-Sutherland 裁剪算法</strong> 是最常用的直线的裁剪算法，用于直线在矩形框的裁剪。</p>
<p>首先，给空间编码：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202110192053631.png" alt="image-20211019203421901"></p>
<p>根据点所在的位置我们可以获得其编码。</p>
<p>接下来考虑几种情况：</p>
<ol>
<li>完全在矩形框内：将端点编码按位或，若为 0，则完全在矩形框内，直接全部保留；</li>
<li>完全在矩形框外：将端点编码按位与，若不为 0，则完全在矩形框外，直接全部舍弃；</li>
<li>其它情况：计算线段与矩形框的交点，获得新的线段，继续判断。</li>
</ol>
<p>对于 <strong>情况3</strong>，我们获得新的线段后接着判断。</p>
<p>这样可以有效减少计算次数，同时，遇到下图这种情况时：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202110192053698.png" alt="image-20211019204228310"></p>
<p>我们会保留得到 <strong>AC</strong> 或 <strong>BD</strong> （取决于计算交点的顺序），然后在下一轮计算中舍弃该线段，不会出现问题。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> IN_SIDE      =  <span class="number">0x0000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LEFT_SIDE    =  <span class="number">0x0001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> RIGHT_SIDE   =  <span class="number">0x0010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BOTTOM_SIDE  =  <span class="number">0x0100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> TOP_SIDE     =  <span class="number">0x1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">EncodePoint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> code = IN_SIDE;</span><br><span class="line">	<span class="keyword">if</span> (x &lt; LEFT)    code |= LEFT_SIDE;</span><br><span class="line">	<span class="keyword">if</span> (RIGHT &lt; x)   code |= RIGHT_SIDE;</span><br><span class="line">	<span class="keyword">if</span> (y &lt; BOTTOM)  code |= BOTTOM_SIDE;</span><br><span class="line">	<span class="keyword">if</span> (TOP &lt; y)     code |= TOP_SIDE;</span><br><span class="line">	<span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CohenSutherland</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> code0 = <span class="built_in">EncodePoint</span>(x0, y0), code1 = <span class="built_in">EncodePoint</span>(x1, y1);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (;;)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ( (code0 | code1) == <span class="number">0</span> ) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span> ( (code0 &amp; code1) != <span class="number">0</span> ) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> outCode = code0 ? code0 : code1;</span><br><span class="line">		<span class="keyword">double</span> x, y, z;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">if</span> (outCode &amp; LEFT_SIDE) &#123; x = LEFT; <span class="keyword">float</span> t = (x - x0) / (x1 - x0); y = (<span class="number">1</span> - t) * y0 + t * y1; &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(outCode &amp; RIGHT_SIDE) &#123; x = RIGHT; <span class="keyword">float</span> t = (x - x0) / (x1 - x0); y = (<span class="number">1</span> - t) * y0 + t * y1; &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(outCode &amp; BOTTOM_SIDE) &#123; y = BOTTOM; <span class="keyword">float</span> t = (y - y0) / (y1 - y0); x = (<span class="number">1</span> - t) * x0 + t * x1; &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(outCode &amp; TOP_SIDE) &#123; y = TOP; <span class="keyword">float</span> t = (y - y0) / (y1 - y0); x = (<span class="number">1</span> - t) * x0 + t * x1; &#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (outCode == code0) x0 = x, y0 = y, code0 = <span class="built_in">EncodePoint</span>(x0, y0);</span><br><span class="line">		<span class="keyword">else</span> x1 = x, y1 = y, code1 = <span class="built_in">EncodePoint</span>(x1, y1);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Bresenham</span>(x0, y0, x1, y1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="OpenGL-完整代码">OpenGL 完整代码</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GLEW_STATIC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glew.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/GL.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region Setting</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> GLFWwindow* window;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_WIDTH = <span class="number">800</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_HEIGHT = <span class="number">600</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> MAX_COUNT = <span class="number">800</span> * <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitializeWindow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">glfwInit</span>();</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class="line"></span><br><span class="line">	window = <span class="built_in">glfwCreateWindow</span>(SCR_WIDTH, SCR_HEIGHT, <span class="string">&quot;Test&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">glfwMakeContextCurrent</span>(window);</span><br><span class="line">	<span class="built_in">glfwSetFramebufferSizeCallback</span>(window, [](GLFWwindow* window, <span class="keyword">int</span> width, <span class="keyword">int</span> height) &#123; <span class="built_in">glViewport</span>(<span class="number">0</span>, <span class="number">0</span>, width, height); &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	glewExperimental = GL_TRUE;</span><br><span class="line">	<span class="built_in">glewInit</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ProcessInput</span><span class="params">(GLFWwindow* window)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">glfwGetKey</span>(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)</span><br><span class="line">		<span class="built_in">glfwSetWindowShouldClose</span>(window, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region InitializeVertex</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> x, y;</span><br><span class="line">	<span class="built_in">point</span>() : <span class="built_in">x</span>(<span class="number">0</span>), <span class="built_in">y</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">	<span class="built_in">point</span>(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y) : <span class="built_in">x</span>(_x), <span class="built_in">y</span>(_y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> vertices[MAX_COUNT * <span class="number">3</span> * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> VAO, VBO;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Normalize</span><span class="params">(<span class="keyword">float</span>&amp; x, <span class="keyword">float</span>&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x = (x - (SCR_WIDTH / <span class="number">2</span>)) / (SCR_WIDTH / <span class="number">2</span>);</span><br><span class="line">	y = (y - (SCR_HEIGHT / <span class="number">2</span>)) / (SCR_HEIGHT / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Swap</span><span class="params">(T&amp; a, T&amp; b)</span> </span>&#123; <span class="function">T <span class="title">temp</span><span class="params">(a)</span></span>; a = b; b = temp; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">/// Boundary</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LEFT = SCR_WIDTH / <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> RIGHT = SCR_WIDTH / <span class="number">4</span> * <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BOTTOM = SCR_HEIGHT / <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> TOP = SCR_HEIGHT / <span class="number">4</span> * <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DrawBoundary</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SCR_HEIGHT; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		vertices[count * <span class="number">3</span>] = LEFT, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = i;</span><br><span class="line">		<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line"></span><br><span class="line">		vertices[count * <span class="number">3</span>] = RIGHT, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = i;</span><br><span class="line">		<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SCR_WIDTH; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		vertices[count * <span class="number">3</span>] = i, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = BOTTOM;</span><br><span class="line">		<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line"></span><br><span class="line">		vertices[count * <span class="number">3</span>] = i, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = TOP;</span><br><span class="line">		<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Bresenham</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> steep = <span class="built_in">abs</span>(y2 - y1) &gt; <span class="built_in">abs</span>(x2 - x1);</span><br><span class="line">	<span class="keyword">if</span> (steep) <span class="built_in">Swap</span>(x1, y1), <span class="built_in">Swap</span>(x2, y2);</span><br><span class="line">	<span class="keyword">if</span> (x1 &gt; x2) <span class="built_in">Swap</span>(x1, x2), <span class="built_in">Swap</span>(y1, y2);</span><br><span class="line">	<span class="keyword">int</span> dx = x2 - x1, dy = y2 - y1;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> d = -dx;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x = x1, y = y1; i &lt;= dx; i++, count++)</span><br><span class="line">	&#123;</span><br><span class="line">		vertices[count * <span class="number">3</span>] = !steep ? x : y;</span><br><span class="line">		vertices[count * <span class="number">3</span> + <span class="number">1</span>] = !steep ? y : x;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">		x++;</span><br><span class="line">		d += <span class="number">2</span> * <span class="built_in">abs</span>(dy);</span><br><span class="line">		<span class="keyword">if</span> (d &gt; <span class="number">0</span>) y += (dy &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>), d -= <span class="number">2</span> * dx;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">/// CohenSutherland</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> IN_SIDE      =  <span class="number">0x0000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LEFT_SIDE    =  <span class="number">0x0001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> RIGHT_SIDE   =  <span class="number">0x0010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BOTTOM_SIDE  =  <span class="number">0x0100</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> TOP_SIDE     =  <span class="number">0x1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">EncodePoint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> code = IN_SIDE;</span><br><span class="line">	<span class="keyword">if</span> (x &lt; LEFT)    code |= LEFT_SIDE;</span><br><span class="line">	<span class="keyword">if</span> (RIGHT &lt; x)   code |= RIGHT_SIDE;</span><br><span class="line">	<span class="keyword">if</span> (y &lt; BOTTOM)  code |= BOTTOM_SIDE;</span><br><span class="line">	<span class="keyword">if</span> (TOP &lt; y)     code |= TOP_SIDE;</span><br><span class="line">	<span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CohenSutherland</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> x1, <span class="keyword">int</span> y1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> code0 = <span class="built_in">EncodePoint</span>(x0, y0), code1 = <span class="built_in">EncodePoint</span>(x1, y1);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (;;)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ( (code0 | code1) == <span class="number">0</span> ) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span> ( (code0 &amp; code1) != <span class="number">0</span> ) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> outCode = code0 ? code0 : code1;</span><br><span class="line">		<span class="keyword">double</span> x, y, z;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">if</span> (outCode &amp; LEFT_SIDE) &#123; x = LEFT; <span class="keyword">float</span> t = (x - x0) / (x1 - x0); y = (<span class="number">1</span> - t) * y0 + t * y1; &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(outCode &amp; RIGHT_SIDE) &#123; x = RIGHT; <span class="keyword">float</span> t = (x - x0) / (x1 - x0); y = (<span class="number">1</span> - t) * y0 + t * y1; &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(outCode &amp; BOTTOM_SIDE) &#123; y = BOTTOM; <span class="keyword">float</span> t = (y - y0) / (y1 - y0); x = (<span class="number">1</span> - t) * x0 + t * x1; &#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(outCode &amp; TOP_SIDE) &#123; y = TOP; <span class="keyword">float</span> t = (y - y0) / (y1 - y0); x = (<span class="number">1</span> - t) * x0 + t * x1; &#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (outCode == code0) x0 = x, y0 = y, code0 = <span class="built_in">EncodePoint</span>(x0, y0);</span><br><span class="line">		<span class="keyword">else</span> x1 = x, y1 = y, code1 = <span class="built_in">EncodePoint</span>(x1, y1);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Bresenham</span>(x0, y0, x1, y1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitializeVertex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// Generate</span></span><br><span class="line">	<span class="built_in">glGenVertexArrays</span>(<span class="number">1</span>, &amp;VAO);</span><br><span class="line">	<span class="built_in">glGenBuffers</span>(<span class="number">1</span>, &amp;VBO);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Bind</span></span><br><span class="line">	<span class="built_in">glBindVertexArray</span>(VAO);</span><br><span class="line">	<span class="built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="built_in"><span class="keyword">sizeof</span></span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glVertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">3</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>), (<span class="keyword">void</span>*)<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">glEnableVertexAttribArray</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Render</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">glClearColor</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glBindVertexArray</span>(VAO);</span><br><span class="line">	<span class="built_in">glDrawArrays</span>(GL_POINTS, <span class="number">0</span>, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> x0, y0, x1, y1;</span><br><span class="line">	std::cin &gt;&gt; x0 &gt;&gt; y0 &gt;&gt; x1 &gt;&gt; y1;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">InitializeWindow</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">DrawBoundary</span>();</span><br><span class="line">	<span class="built_in">CohenSutherland</span>(x0, y0, x1, y1);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">InitializeVertex</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">glfwWindowShouldClose</span>(window))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">ProcessInput</span>(window);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">Render</span>();</span><br><span class="line"></span><br><span class="line">		<span class="built_in">glfwSwapBuffers</span>(window);</span><br><span class="line">		<span class="built_in">glfwPollEvents</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glfwTerminate</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
      <tags>
        <tag>图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>[图形学]基础图形绘制-多边形</title>
    <url>/2021/10/18/%E5%9B%BE%E5%BD%A2%E5%AD%A6/%5B%E5%9B%BE%E5%BD%A2%E5%AD%A6%5D%E5%9F%BA%E7%A1%80%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6-%E5%A4%9A%E8%BE%B9%E5%BD%A2/</url>
    <content><![CDATA[<h1>基础图形绘制-多边形</h1>
<h2 id="种子填充">种子填充</h2>
<p>给定一个多边形的顶点，圈出一个多边形，我们可以先用  <a href="https://www.bearchild.top/2021/09/24/%E5%9B%BE%E5%BD%A2%E5%AD%A6/%5B%E5%9B%BE%E5%BD%A2%E5%AD%A6%5D%E5%9F%BA%E7%A1%80%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6-%E7%9B%B4%E7%BA%BF/">Bresenham 直线算法</a> 画上边界。</p>
<p>此时，若已知多边形内一个像素，我们可以轻易地从该像素出发，利用搜索（BFS、DFS等），将多边形完整填充，这就是 <strong>种子填充</strong> 算法。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> pixelMatrix[SCR_WIDTH][SCR_HEIGHT];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dx[] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dy[] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Bresenham</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> steep = <span class="built_in">abs</span>(y2 - y1) &gt; <span class="built_in">abs</span>(x2 - x1);</span><br><span class="line">	<span class="keyword">if</span> (steep) <span class="built_in">Swap</span>(x1, y1), <span class="built_in">Swap</span>(x2, y2);</span><br><span class="line">	<span class="keyword">if</span> (x1 &gt; x2) <span class="built_in">Swap</span>(x1, x2), <span class="built_in">Swap</span>(y1, y2);</span><br><span class="line">	<span class="keyword">int</span> dx = x2 - x1, dy = y2 - y1;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> d = -dx;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x = x1, y = y1; i &lt;= dx; i++, count++)</span><br><span class="line">	&#123;</span><br><span class="line">		vertices[count * <span class="number">3</span>] = !steep ? x : y;</span><br><span class="line">		vertices[count * <span class="number">3</span> + <span class="number">1</span>] = !steep ? y : x;</span><br><span class="line"></span><br><span class="line">		x++;</span><br><span class="line">		d += <span class="number">2</span> * <span class="built_in">abs</span>(dy);</span><br><span class="line">		<span class="keyword">if</span> (d &gt; <span class="number">0</span>) y += (dy &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>), d -= <span class="number">2</span> * dx;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SeedFilling</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Coordinates of seed:\n&quot;</span>);</span><br><span class="line">	<span class="keyword">static</span> point seed;</span><br><span class="line">	std::cin &gt;&gt; seed.x &gt;&gt; seed.y;</span><br><span class="line">	std::queue &lt;point&gt; q;</span><br><span class="line">	q.<span class="built_in">push</span>(seed);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(pixelMatrix, <span class="literal">false</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(pixelMatrix));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputCount; i++)</span><br><span class="line">		<span class="built_in">Bresenham</span>(inputVertex[i].x, inputVertex[i].y,</span><br><span class="line">			inputVertex[(i + <span class="number">1</span>) % inputCount].x, inputVertex[(i + <span class="number">1</span>) % inputCount].y);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		point u = <span class="built_in">point</span>((<span class="keyword">int</span>)vertices[i * <span class="number">3</span>], (<span class="keyword">int</span>)vertices[i * <span class="number">3</span> + <span class="number">1</span>]);</span><br><span class="line">		pixelMatrix[u.x][u.y] = <span class="literal">true</span>;</span><br><span class="line">		<span class="built_in">Normalize</span>(vertices[i * <span class="number">3</span>], vertices[i * <span class="number">3</span> + <span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		point u = q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">		vertices[count * <span class="number">3</span>] = (<span class="keyword">float</span>)u.x, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = (<span class="keyword">float</span>)u.y;</span><br><span class="line">		<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			point v = <span class="built_in">point</span>(u.x + dx[i], u.y + dy[i]);</span><br><span class="line">			<span class="keyword">if</span> (<span class="number">0</span> &lt;= v.x &amp;&amp; v.x &lt; SCR_WIDTH &amp;&amp; <span class="number">0</span> &lt;= v.y &amp;&amp; v.y &lt; SCR_HEIGHT &amp;&amp; !pixelMatrix[v.x][v.y])</span><br><span class="line">			&#123;</span><br><span class="line">				pixelMatrix[v.x][v.y] = <span class="literal">true</span>;</span><br><span class="line">				q.<span class="built_in">push</span>(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="扫描线">扫描线</h2>
<p>顾名思义，我们用一条条线来扫描，一边扫描一边填充图形。</p>
<p>我们用 <strong>水平于 x 轴</strong> 的直线来扫描，从 <code>y=0</code> 开始，每次绘制在多边形内的线段，然后 <code>y=y+1</code> 。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202110190126074.png" alt="image-20211018205445633"></p>
<p>我们从下往上走，假设当前处理到 <code>y=7</code> 这条边，与这条边相交的有：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub><msub><mi>P</mi><mn>6</mn></msub></mrow><annotation encoding="application/x-tex">P_1P_6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>5</mn></msub><msub><mi>P</mi><mn>6</mn></msub></mrow><annotation encoding="application/x-tex">P_5P_6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>4</mn></msub><msub><mi>P</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">P_4P_5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>3</mn></msub><msub><mi>P</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">P_3P_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 这四条边。</p>
<p>按照交点 <code>A、B、C、D</code> 的 <code>x</code> 排序后，容易发现可以将其两两配对，画出线段 <code>AB、CD</code>。</p>
<p>于是，我们需要知道：1. <code>X</code>（与扫描线的交点的 <code>x</code> 值）；2. 有哪些边于扫描线相交。</p>
<ol>
<li>考虑 <code>X</code> 如何计算：我们每次 <code>y = y + 1</code>，对于一条直线 <code>y = kx + b</code>，若 <code>y += 1</code> 则 <code>x += 1/k </code>。于是我们需要记录 <code>delX = 1/k</code>（斜率的倒数），扫描线移动时 <code>x += delX</code> 即可；</li>
<li>怎么获得与扫描线相交的边：我们每次 <code>y=y+1</code>，显然当 <code>y = 该边最小的 y 值</code> 时加入，<code>y = 该边最大的 y 值</code> 时删除。那么我们可以开一个 <code>SCR_HEIGHT</code> 级别的 <code>vector</code><strong>E[SCR_HEIGHT]</strong> ，然后 <code>E[该边最小的 y 值].push(该边)</code>，每次 <code>y=y+1</code> 时，<code>E[y]</code> 中存储的边，就是需要新加入的边；同时当 <code>maxY = y</code> 时，将这条边删去。（当然，用链表处理也是可以的，任意选择一种可以处理的数据结构即可）</li>
</ol>
<p>我们确定流程：1. 将边加入需要处理的集合；2. 按照 x 排序并两两匹配绘制线段；3. 删去该删的边。</p>
<p>现在我们来处理遇到多边形顶点时的问题。</p>
<ol>
<li>如上图遇到 <code>y=1</code>，加入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub><msub><mi>P</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">P_1P_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>2</mn></msub><msub><mi>P</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">P_2P_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。绘制线段时：有<code>P2、P2</code>，发现并没有问题；</li>
<li>如上图遇到 <code>y=2</code>，加入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub><msub><mi>P</mi><mn>6</mn></msub></mrow><annotation encoding="application/x-tex">P_1P_6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。绘制线段时：有<code>P1、P1、E</code> ，发现无法匹配</li>
<li>如上图遇到 <code>y=3</code>，加入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>3</mn></msub><msub><mi>P</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">P_3P_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。绘制线段时：有<code>(2,3)、P3、P3</code>，发现无法匹配；</li>
<li>如上图遇到 <code>y=5</code>，加入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>5</mn></msub><msub><mi>P</mi><mn>6</mn></msub></mrow><annotation encoding="application/x-tex">P_5P_6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mn>4</mn></msub><msub><mi>P</mi><mn>5</mn></msub></mrow><annotation encoding="application/x-tex">P_4P_5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。绘制线段时：有 <code>(2,5)、P5、P5、(11,5)</code>，发现并没有问题；</li>
<li>如上图遇到 <code>y=7</code>，不加入。绘制线段时：有 <code>P6、P6、F、G</code>，发现并没有问题。</li>
</ol>
<p>于是发现，当我们 <strong>加入奇数条边</strong> 的时候，顶点匹配会出现问题。为了处理这种情况，我们将所有边的最大的 y 值 - 1，提早删除这条边。</p>
<p>虽然这样处理图形最上面的一条线会失去一行像素，但是看起来问题不是很大，我们可以单独判断一下。</p>
<p>最后，对于 <strong>水平于 x 轴</strong> 的边，我们直接绘制，然后跳过处理。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">float</span> x, delX;</span><br><span class="line">	<span class="keyword">int</span> maxY;</span><br><span class="line">	<span class="built_in">edge</span>(<span class="keyword">float</span> _x, <span class="keyword">float</span> _delX, <span class="keyword">int</span> _maxY) : <span class="built_in">x</span>(_x), <span class="built_in">delX</span>(_delX), <span class="built_in">maxY</span>(_maxY) &#123;&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> edge&amp; other) &#123; <span class="keyword">return</span> x &lt; other.x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::vector &lt;edge&gt; E[SCR_HEIGHT];</span><br><span class="line">std::vector &lt;edge&gt; Set;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DrawLine</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> x1, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = x0; i &lt;= x1; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		vertices[count * <span class="number">3</span>] = i, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = y;</span><br><span class="line">		<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sweep</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> MinY = SCR_HEIGHT, MaxY = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputCount; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		point u = <span class="built_in">point</span>(inputVertex[i].x, inputVertex[i].y);</span><br><span class="line">		point v = <span class="built_in">point</span>(inputVertex[(i + <span class="number">1</span>) % inputCount].x, inputVertex[(i + <span class="number">1</span>) % inputCount].y);</span><br><span class="line">		<span class="keyword">if</span> (u.x &gt; v.x) <span class="built_in">Swap</span>(u, v);</span><br><span class="line">		<span class="keyword">if</span> (u.y &gt; v.y) <span class="built_in">Swap</span>(u, v);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (u.y == v.y)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">DrawLine</span>(u.x, v.x, u.y);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		E[u.y].<span class="built_in">push_back</span>( <span class="built_in">edge</span>(u.x, (<span class="keyword">float</span>)(v.x - u.x) / (v.y - u.y), v.y - <span class="number">1</span>) );</span><br><span class="line">		MinY = u.y &lt; MinY ? u.y : MinY;</span><br><span class="line">		MaxY = v.y &gt; MaxY ? v.y : MaxY;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> y = MinY; y &lt;= MaxY; y++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> edge : E[y]) Set.<span class="built_in">push_back</span>(edge);</span><br><span class="line">		E[y].<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">		std::<span class="built_in">sort</span>(Set.<span class="built_in">begin</span>(), Set.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = Set.<span class="built_in">size</span>(); i &lt; size; i += <span class="number">2</span>)</span><br><span class="line">			<span class="keyword">if</span> (i + <span class="number">1</span> &lt; size)</span><br><span class="line">				<span class="built_in">DrawLine</span>(Set[i].x, Set[i + <span class="number">1</span>].x, y);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = Set.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">			<span class="keyword">if</span> (Set[i].maxY == y)</span><br><span class="line">				Set.<span class="built_in">erase</span>(Set.<span class="built_in">begin</span>() + i);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = Set.<span class="built_in">size</span>(); i &lt; size; i++)</span><br><span class="line">			Set[i].x += Set[i].delX;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="OpenGL-完整代码">OpenGL 完整代码</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GLEW_STATIC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glew.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/GL.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region Setting</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> GLFWwindow* window;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_WIDTH = <span class="number">800</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_HEIGHT = <span class="number">600</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> MAX_COUNT = <span class="number">800</span> * <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitializeWindow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">glfwInit</span>();</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class="line"></span><br><span class="line">	window = <span class="built_in">glfwCreateWindow</span>(SCR_WIDTH, SCR_HEIGHT, <span class="string">&quot;Test&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">glfwMakeContextCurrent</span>(window);</span><br><span class="line">	<span class="built_in">glfwSetFramebufferSizeCallback</span>(window, [](GLFWwindow* window, <span class="keyword">int</span> width, <span class="keyword">int</span> height) &#123; <span class="built_in">glViewport</span>(<span class="number">0</span>, <span class="number">0</span>, width, height); &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	glewExperimental = GL_TRUE;</span><br><span class="line">	<span class="built_in">glewInit</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ProcessInput</span><span class="params">(GLFWwindow* window)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">glfwGetKey</span>(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)</span><br><span class="line">		<span class="built_in">glfwSetWindowShouldClose</span>(window, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region InitializeVertex</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> x, y;</span><br><span class="line">	<span class="built_in">point</span>() : <span class="built_in">x</span>(<span class="number">0</span>), <span class="built_in">y</span>(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">	<span class="built_in">point</span>(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y) : <span class="built_in">x</span>(_x), <span class="built_in">y</span>(_y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">point inputVertex[MAX_COUNT];</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> inputCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> vertices[MAX_COUNT * <span class="number">3</span> * <span class="number">2</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> VAO, VBO;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Normalize</span><span class="params">(<span class="keyword">float</span>&amp; x, <span class="keyword">float</span>&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x = (x - (SCR_WIDTH / <span class="number">2</span>)) / (SCR_WIDTH / <span class="number">2</span>);</span><br><span class="line">	y = (y - (SCR_HEIGHT / <span class="number">2</span>)) / (SCR_HEIGHT / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Swap</span><span class="params">(T&amp; a, T&amp; b)</span> </span>&#123; <span class="function">T <span class="title">temp</span><span class="params">(a)</span></span>; a = b; b = temp; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InputVertex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Count of vertices: &quot;</span>);</span><br><span class="line">	std::cin &gt;&gt; inputCount;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Coordinates of vertices:\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputCount; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;ID[%d]: &quot;</span>, i);</span><br><span class="line">		std::cin &gt;&gt; inputVertex[i].x &gt;&gt; inputVertex[i].y;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// SeedFilling</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> pixelMatrix[SCR_WIDTH][SCR_HEIGHT];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dx[] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dy[] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Bresenham</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> steep = <span class="built_in">abs</span>(y2 - y1) &gt; <span class="built_in">abs</span>(x2 - x1);</span><br><span class="line">	<span class="keyword">if</span> (steep) <span class="built_in">Swap</span>(x1, y1), <span class="built_in">Swap</span>(x2, y2);</span><br><span class="line">	<span class="keyword">if</span> (x1 &gt; x2) <span class="built_in">Swap</span>(x1, x2), <span class="built_in">Swap</span>(y1, y2);</span><br><span class="line">	<span class="keyword">int</span> dx = x2 - x1, dy = y2 - y1;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> d = -dx;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x = x1, y = y1; i &lt;= dx; i++, count++)</span><br><span class="line">	&#123;</span><br><span class="line">		vertices[count * <span class="number">3</span>] = !steep ? x : y;</span><br><span class="line">		vertices[count * <span class="number">3</span> + <span class="number">1</span>] = !steep ? y : x;</span><br><span class="line"></span><br><span class="line">		x++;</span><br><span class="line">		d += <span class="number">2</span> * <span class="built_in">abs</span>(dy);</span><br><span class="line">		<span class="keyword">if</span> (d &gt; <span class="number">0</span>) y += (dy &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>), d -= <span class="number">2</span> * dx;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SeedFilling</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Coordinates of seed:\n&quot;</span>);</span><br><span class="line">	<span class="keyword">static</span> point seed;</span><br><span class="line">	std::cin &gt;&gt; seed.x &gt;&gt; seed.y;</span><br><span class="line">	std::queue &lt;point&gt; q;</span><br><span class="line">	q.<span class="built_in">push</span>(seed);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(pixelMatrix, <span class="literal">false</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(pixelMatrix));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputCount; i++)</span><br><span class="line">		<span class="built_in">Bresenham</span>(inputVertex[i].x, inputVertex[i].y,</span><br><span class="line">			inputVertex[(i + <span class="number">1</span>) % inputCount].x, inputVertex[(i + <span class="number">1</span>) % inputCount].y);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		point u = <span class="built_in">point</span>((<span class="keyword">int</span>)vertices[i * <span class="number">3</span>], (<span class="keyword">int</span>)vertices[i * <span class="number">3</span> + <span class="number">1</span>]);</span><br><span class="line">		pixelMatrix[u.x][u.y] = <span class="literal">true</span>;</span><br><span class="line">		<span class="built_in">Normalize</span>(vertices[i * <span class="number">3</span>], vertices[i * <span class="number">3</span> + <span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		point u = q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">		vertices[count * <span class="number">3</span>] = (<span class="keyword">float</span>)u.x, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = (<span class="keyword">float</span>)u.y;</span><br><span class="line">		<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			point v = <span class="built_in">point</span>(u.x + dx[i], u.y + dy[i]);</span><br><span class="line">			<span class="keyword">if</span> (<span class="number">0</span> &lt;= v.x &amp;&amp; v.x &lt; SCR_WIDTH &amp;&amp; <span class="number">0</span> &lt;= v.y &amp;&amp; v.y &lt; SCR_HEIGHT &amp;&amp; !pixelMatrix[v.x][v.y])</span><br><span class="line">			&#123;</span><br><span class="line">				pixelMatrix[v.x][v.y] = <span class="literal">true</span>;</span><br><span class="line">				q.<span class="built_in">push</span>(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// Sweep</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">float</span> x, delX;</span><br><span class="line">	<span class="keyword">int</span> maxY;</span><br><span class="line">	<span class="built_in">edge</span>(<span class="keyword">float</span> _x, <span class="keyword">float</span> _delX, <span class="keyword">int</span> _maxY) : <span class="built_in">x</span>(_x), <span class="built_in">delX</span>(_delX), <span class="built_in">maxY</span>(_maxY) &#123;&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> edge&amp; other) &#123; <span class="keyword">return</span> x &lt; other.x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::vector &lt;edge&gt; E[SCR_HEIGHT];</span><br><span class="line">std::vector &lt;edge&gt; Set;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DrawLine</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> x1, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = x0; i &lt;= x1; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		vertices[count * <span class="number">3</span>] = i, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = y;</span><br><span class="line">		<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sweep</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> MinY = SCR_HEIGHT, MaxY = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inputCount; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		point u = <span class="built_in">point</span>(inputVertex[i].x, inputVertex[i].y);</span><br><span class="line">		point v = <span class="built_in">point</span>(inputVertex[(i + <span class="number">1</span>) % inputCount].x, inputVertex[(i + <span class="number">1</span>) % inputCount].y);</span><br><span class="line">		<span class="keyword">if</span> (u.x &gt; v.x) <span class="built_in">Swap</span>(u, v);</span><br><span class="line">		<span class="keyword">if</span> (u.y &gt; v.y) <span class="built_in">Swap</span>(u, v);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (u.y == v.y)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">DrawLine</span>(u.x, v.x, u.y);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		E[u.y].<span class="built_in">push_back</span>( <span class="built_in">edge</span>(u.x, (<span class="keyword">float</span>)(v.x - u.x) / (v.y - u.y), v.y - <span class="number">1</span>) );</span><br><span class="line">		MinY = u.y &lt; MinY ? u.y : MinY;</span><br><span class="line">		MaxY = v.y &gt; MaxY ? v.y : MaxY;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> y = MinY; y &lt;= MaxY; y++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> edge : E[y]) Set.<span class="built_in">push_back</span>(edge);</span><br><span class="line">		E[y].<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">		std::<span class="built_in">sort</span>(Set.<span class="built_in">begin</span>(), Set.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = Set.<span class="built_in">size</span>(); i &lt; size; i += <span class="number">2</span>)</span><br><span class="line">			<span class="keyword">if</span> (i + <span class="number">1</span> &lt; size)</span><br><span class="line">				<span class="built_in">DrawLine</span>(Set[i].x, Set[i + <span class="number">1</span>].x, y);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = Set.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">			<span class="keyword">if</span> (Set[i].maxY == y)</span><br><span class="line">				Set.<span class="built_in">erase</span>(Set.<span class="built_in">begin</span>() + i);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = Set.<span class="built_in">size</span>(); i &lt; size; i++)</span><br><span class="line">			Set[i].x += Set[i].delX;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitializeVertex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// Generate</span></span><br><span class="line">	<span class="built_in">glGenVertexArrays</span>(<span class="number">1</span>, &amp;VAO);</span><br><span class="line">	<span class="built_in">glGenBuffers</span>(<span class="number">1</span>, &amp;VBO);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Bind</span></span><br><span class="line">	<span class="built_in">glBindVertexArray</span>(VAO);</span><br><span class="line">	<span class="built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="built_in"><span class="keyword">sizeof</span></span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glVertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">3</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>), (<span class="keyword">void</span>*)<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">glEnableVertexAttribArray</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Render</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">glClearColor</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glBindVertexArray</span>(VAO);</span><br><span class="line">	<span class="built_in">glDrawArrays</span>(GL_POINTS, <span class="number">0</span>, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">InputVertex</span>();</span><br><span class="line">	<span class="built_in">InitializeWindow</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">//SeedFilling();</span></span><br><span class="line">	<span class="built_in">Sweep</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">InitializeVertex</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">glfwWindowShouldClose</span>(window))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">ProcessInput</span>(window);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">Render</span>();</span><br><span class="line"></span><br><span class="line">		<span class="built_in">glfwSwapBuffers</span>(window);</span><br><span class="line">		<span class="built_in">glfwPollEvents</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glfwTerminate</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
      <tags>
        <tag>图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>[前端开发]简单的WebService调用</title>
    <url>/2021/10/14/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%5B%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%5D%E7%AE%80%E5%8D%95%E7%9A%84WebService%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h1>简单的WebService调用</h1>
<h2 id="效果">效果</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202110141624770.png" alt="image-20211014161311874"></p>
<p>创建一个WebService，实现接收一组数字，将其排序后，返回排序后的数字序列。<br>
在html中输入若干数字，调用服务，展示排序后的结果。</p>
<h2 id="实现">实现</h2>
<ol>
<li>创建新项目</li>
</ol>
<p>在 Visual Studio 中新建项目，命名为 <strong>WebServiceDemo</strong></p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202110141624160.png" alt="image-20211014161736793"></p>
<ol start="2">
<li>添加服务</li>
</ol>
<p>添加 -&gt; 新建项 -&gt; Web 服务 (ASMX)，命名为 <strong>SortService.asmx</strong></p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202110141624838.png" alt="image-20211014161922790"></p>
<ol start="3">
<li>添加 Web 窗体</li>
</ol>
<p>添加 -&gt; 新建项 -&gt; Web 窗体，命名为 <strong>Sort.aspx</strong></p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202110141624730.png" alt="image-20211014162240898"></p>
<ol start="4">
<li>编辑 <strong>SortService.asmx -&gt; SortService.asmx.cs</strong> 与 <strong>Sort.aspx</strong></li>
</ol>
<h2 id="代码">代码</h2>
<p><strong>SortService.asmx -&gt; SortService.asmx.cs</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"><span class="keyword">using</span> System.Web.Services;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WebServiceDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">WebService(Namespace = <span class="meta-string">&quot;http://tempuri.org/&quot;</span>)</span>]</span><br><span class="line">    [<span class="meta">WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)</span>]</span><br><span class="line">    [<span class="meta">System.ComponentModel.ToolboxItem(false)</span>]</span><br><span class="line">    </span><br><span class="line">    [<span class="meta">System.Web.Script.Services.ScriptService</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SortService</span> : <span class="title">System.Web.Services.WebService</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">WebMethod</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Sort</span>(<span class="params"><span class="built_in">string</span> inValue</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> array = inValue.Split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; array.Length; i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="built_in">int</span> j = i; j &lt; array.Length; j++)</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">int</span>.Parse(array[i]) &gt; <span class="built_in">int</span>.Parse(array[j]))</span><br><span class="line">					&#123;</span><br><span class="line">                        <span class="built_in">string</span> temp = array[i];</span><br><span class="line">                        array[i] = array[j];</span><br><span class="line">                        array[j] = temp;</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> outValue = <span class="built_in">string</span>.Empty;</span><br><span class="line">            outValue = <span class="built_in">string</span>.Join(<span class="string">&quot; &quot;</span>, array);</span><br><span class="line">            <span class="keyword">return</span> outValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Sort.aspx</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot; CodeBehind=&quot;Sort.aspx.cs&quot; Inherits=&quot;WebServiceDemo.Sort&quot; %&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">runat</span>=<span class="string">&quot;server&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sort<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#btnClick&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">            </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> inValue = $(<span class="string">&quot;#inValue&quot;</span>).val();</span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">type</span>: <span class="string">&quot;Post&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span>: <span class="string">&quot;/SortService.asmx/Sort&quot;</span>,</span></span><br><span class="line"><span class="javascript">					<span class="attr">data</span>: <span class="string">&quot;&#123;inValue:&#x27;&quot;</span> + inValue + <span class="string">&quot;&#x27;&#125;&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">contentType</span>: <span class="string">&quot;application/json;charset=utf-8&quot;</span>,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">                    </span>&#123;</span></span><br><span class="line"><span class="javascript">						$(<span class="string">&quot;#outValue&quot;</span>).val(result.d);</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">                    </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">window</span>.alert(e.status);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form1&quot;</span> <span class="attr">runat</span>=<span class="string">&quot;server&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        输入若干整型数值（以空格隔开）：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inValue&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btnClick&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点击进行排序&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;outValue&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网站开发</category>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>网站开发</tag>
        <tag>前端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>[图形学]基础图形绘制-椭圆</title>
    <url>/2021/10/13/%E5%9B%BE%E5%BD%A2%E5%AD%A6/%5B%E5%9B%BE%E5%BD%A2%E5%AD%A6%5D%E5%9F%BA%E7%A1%80%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6-%E6%A4%AD%E5%9C%86/</url>
    <content><![CDATA[<h1>基础图形绘制-椭圆</h1>
<h2 id="中点画椭圆">中点画椭圆</h2>
<h3 id="基础">基础</h3>
<p>首先，我们考虑中点在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(0,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 的椭圆。</p>
<p>根据椭圆的对称性，我们只需要画出第一象限的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>4</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 的圆弧，即可通过对称画出整个椭圆。</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202110131643766.png" alt="image-20211013144156162" style="zoom:50%;" />
<p>中点在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(0,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> ，焦点在坐标轴上的椭圆的标准方程为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><msup><mi>x</mi><mn>2</mn></msup><msup><mi>a</mi><mn>2</mn></msup></mfrac><mo>+</mo><mfrac><msup><mi>y</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mfrac><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\frac{x^2}{a^2}+\frac{y^2}{b^2}=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.36292em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.415028em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.070028em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，隐函数为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>y</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">F(x,y)=b^2x^2+a^2y^2-a^2b^2=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，代入各点，有：</p>
<ol>
<li>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>y</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">F(x,y)=b^2x^2+a^2y^2-a^2b^2=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时，点在椭圆上；</li>
<li>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>y</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">F(x,y)=b^2x^2+a^2y^2-a^2b^2 \gt 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.853208em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时，点在椭圆外；</li>
<li>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>y</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">F(x,y)=b^2x^2+a^2y^2-a^2b^2 \lt 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.853208em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时，点在椭圆内。</li>
</ol>
<p>考虑画右上方的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>4</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{4}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 圆弧，根据法向量将椭圆弧分成A、B两部分：</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202110131643691.png" alt="image-20211013151823338" style="zoom:50%;" />
<p>对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>y</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">F(x,y)=b^2x^2+a^2y^2-a^2b^2=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 分别对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 求偏导得 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 处的法向量方向为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>2</mn><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo separator="true">,</mo><mn>2</mn><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(2b^2x,2a^2y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>，有：</p>
<ol>
<li>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo>&lt;</mo><mn>2</mn><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi></mrow><annotation encoding="application/x-tex">2b^2x\lt2a^2y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.853208em;vertical-align:-0.0391em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span> 方向法向量分量较小，水平方向较平缓，列入部分 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span></span></span></span>；</li>
<li>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo>&gt;</mo><mn>2</mn><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi></mrow><annotation encoding="application/x-tex">2b^2x\gt2a^2y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.853208em;vertical-align:-0.0391em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 方向法向量分量较小，垂直方向较平缓，列入部分 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi></mrow><annotation encoding="application/x-tex">B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>。</li>
</ol>
<h3 id="部分-A">部分 A</h3>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202110131643599.png" alt="image-20211013153438423"></p>
<p>假设当前点在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> ，考虑下一个点选择 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 还是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 。</p>
<p>下一个点显然是选择 <strong>离椭圆弧更近的点</strong> ，我们可以通过判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y-0.5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.5</span><span class="mclose">)</span></span></span></span> 在 <strong>椭圆内</strong> 还是 <strong>椭圆外</strong>，来判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 、 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>  哪个离圆弧更近（需要注意的是：如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y-0.5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.5</span><span class="mclose">)</span></span></span></span> <strong>恰好在椭圆上</strong>，算法选择 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 来作为下一个点）。</p>
<p>也就是说，对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> ，我们判断</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.2500em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>d</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mn>0.5</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi><mo>+</mo><mn>0.25</mn><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
d &amp;= F(x+1,y-0.5)\\
  &amp;= b^2(x+1)^2+a^2(y-0.5)^2-a^2b^2\\
  &amp;= b^2x^2+a^2y^2+2b^2x-a^2y+0.25a^2+b^2-a^2b^2
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.548216em;vertical-align:-2.024108em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.524108em;"><span style="top:-4.684108em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.6358920000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.024108em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.524108em;"><span style="top:-4.684108em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose">)</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.6358920000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.25</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.024108em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>的值，来判断下一个点的选择情况。</p>
<ol>
<li>
<p>若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">d \lt 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，选择 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 作为下一个点。<br>
此时，判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 的下一个点的判断值为：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.2500em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msup><mi>d</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>−</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>2</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>2</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mn>0.5</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi><mo>+</mo><mn>0.25</mn><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><msup><mi>b</mi><mn>2</mn></msup><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi><mo>+</mo><mn>0.25</mn><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo>+</mo><mn>3</mn><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>d</mi><mo>+</mo><mn>2</mn><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo>+</mo><mn>3</mn><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
d&#x27; &amp;= F((x+1)+1,(y)-0.5)\\
   &amp;= F(x+2,y-0.5)\\
   &amp;= b^2(x+2)^2+a^2(y-0.5)^2-a^2b^2\\
   &amp;= b^2x^2+a^2y^2+4b^2x-a^2y+0.25a^2+4b^2-a^2b^2\\
   &amp;= (b^2x^2+a^2y^2+2b^2x-a^2y+0.25a^2+b^2-a^2b^2)+2b^2x+3b^2\\
   &amp;= d+2b^2x+3b^2
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9.096432em;vertical-align:-4.298216em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.798216em;"><span style="top:-6.958216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-5.458215999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-3.9341079999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-0.8858919999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:0.6382159999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.298216em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.798216em;"><span style="top:-6.958216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">((</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose">)</span></span></span><span style="top:-5.458215999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose">)</span></span></span><span style="top:-3.9341079999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.25</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-0.8858919999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.25</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:0.6382159999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.298216em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">d \ge 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，选择 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 作为下一个点。<br>
此时，判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 的下一个点的判断值为：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.2500em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msup><mi>d</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>2</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1.5</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>2</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mn>1.5</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo>−</mo><mn>3</mn><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi><mo>+</mo><mn>2.25</mn><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><msup><mi>b</mi><mn>2</mn></msup><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi><mo>+</mo><mn>0.25</mn><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo>−</mo><mn>2</mn><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi><mo>+</mo><mn>2</mn><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>d</mi><mo>+</mo><mn>2</mn><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo>−</mo><mn>2</mn><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi><mo>+</mo><mn>2</mn><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
d&#x27; &amp;= F((x+1)+1,(y-1)-0.5)\\
   &amp;= F(x+2,y-1.5)\\
   &amp;= b^2(x+2)^2+a^2(y-1.5)^2-a^2b^2\\
   &amp;= b^2x^2+a^2y^2+4b^2x-3a^2y+2.25a^2+4b^2-a^2b^2\\
   &amp;= (b^2x^2+a^2y^2+2b^2x-a^2y+0.25a^2+b^2-a^2b^2)+2b^2x-2a^2y+2a^2+3b^2\\
   &amp;= d+2b^2x-2a^2y+2a^2+3b^2
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9.096432em;vertical-align:-4.298216em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.798216em;"><span style="top:-6.958216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-5.458215999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-3.9341079999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-0.8858919999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:0.6382159999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.298216em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.798216em;"><span style="top:-6.958216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">((</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose">)</span></span></span><span style="top:-5.458215999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1.5</span><span class="mclose">)</span></span></span><span style="top:-3.9341079999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1.5</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2.25</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-0.8858919999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.25</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:0.6382159999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.298216em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
</li>
</ol>
<p>这样我们就可以递推 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span> 的值，不断选择点并更新判断值。</p>
<p>同时考虑初始点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(0,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span> ，显然有：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.2500em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>d</mi><mn>0</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mn>0</mn><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>b</mi><mo>−</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>b</mi><mo>−</mo><mn>0.5</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><mo>+</mo><mn>0.25</mn><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><mi>b</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
d_0 &amp;= F(0+1,b-0.5)\\
    &amp;= b^2+a^2(b-0.5)^2-a^2b^2\\
    &amp;= b^2+0.25a^2-a^2b
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.548216em;vertical-align:-2.024108em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.524108em;"><span style="top:-4.684108em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.6358920000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.024108em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.524108em;"><span style="top:-4.684108em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose">)</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.6358920000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.25</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.024108em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>这样，我们就可以画出A部分的椭圆。</p>
<h3 id="部分-B">部分 B</h3>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202110131644022.png" alt="image-20211013154126540"></p>
<p>假设当前点在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> ，考虑下一个点选择 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 还是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 。</p>
<p>下一个点显然是选择 <strong>离椭圆弧更近的点</strong> ，我们可以通过判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>0.5</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+0.5,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0.5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 在 <strong>椭圆外</strong> 还是 <strong>椭圆内</strong>，来判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 、 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>  哪个离圆弧更近（需要注意的是：如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>0.5</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+0.5,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">0.5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> <strong>恰好在椭圆上</strong>，算法选择 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 来作为下一个点）。</p>
<p>也就是说，对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> ，我们判断</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.2500em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>d</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>0.5</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>0.5</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo>−</mo><mn>2</mn><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><mn>0.25</mn><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
d &amp;= F(x+0.5,y-1)\\
  &amp;= b^2(x+0.5)^2+a^2(y-1)^2-a^2b^2\\
  &amp;= b^2x^2+a^2y^2+b^2x-2a^2y+a^2+0.25b^2-a^2b^2
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.548216em;vertical-align:-2.024108em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.524108em;"><span style="top:-4.684108em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.6358920000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.024108em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.524108em;"><span style="top:-4.684108em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.6358920000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.25</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.024108em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>的值，来判断下一个点的选择情况。</p>
<ol>
<li>
<p>若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">d \ge 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，选择 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 作为下一个点。<br>
此时，判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 的下一个点的判断值为：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.2500em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msup><mi>d</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>+</mo><mn>0.5</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>0.5</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>0.5</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mn>2</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo>−</mo><mn>4</mn><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi><mo>+</mo><mn>4</mn><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><mn>0.25</mn><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><msup><mi>b</mi><mn>2</mn></msup><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo>−</mo><mn>2</mn><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><mn>0.25</mn><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>−</mo><mn>2</mn><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi><mo>+</mo><mn>3</mn><msup><mi>a</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>d</mi><mo>−</mo><mn>2</mn><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi><mo>+</mo><mn>3</mn><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
d&#x27; &amp;= F((x)+0.5,(y-1)-1)\\
   &amp;= F(x+0.5,y-2)\\
   &amp;= b^2(x+0.5)^2+a^2(y-2)^2-a^2b^2\\
   &amp;= b^2x^2+a^2y^2+b^2x-4a^2y+4a^2+0.25b^2-a^2b^2\\
   &amp;= (b^2x^2+a^2y^2+b^2x-2a^2y+a^2+0.25b^2-a^2b^2)-2a^2y+3a^2\\
   &amp;= d-2a^2y+3b^2
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9.096432em;vertical-align:-4.298216em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.798216em;"><span style="top:-6.958216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-5.458215999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-3.9341079999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-0.8858919999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:0.6382159999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.298216em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.798216em;"><span style="top:-6.958216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">((</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-5.458215999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span><span style="top:-3.9341079999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.25</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-0.8858919999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.25</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:0.6382159999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.298216em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">d \lt 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，选择 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 作为下一个点。<br>
此时，判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 的下一个点的判断值为：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.2500em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msup><mi>d</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>0.5</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1.5</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1.5</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mn>2</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo>−</mo><mn>4</mn><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi><mo>+</mo><mn>4</mn><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><mn>2.25</mn><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><msup><mi>b</mi><mn>2</mn></msup><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo>−</mo><mn>2</mn><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><mn>0.25</mn><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo>−</mo><mn>2</mn><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi><mo>+</mo><mn>3</mn><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>d</mi><mo>+</mo><mn>2</mn><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo>−</mo><mn>2</mn><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi><mo>+</mo><mn>3</mn><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
d&#x27; &amp;= F((x+1)+0.5,(y-1)-1)\\
   &amp;= F(x+1.5,y-2)\\
   &amp;= b^2(x+1.5)^2+a^2(y-2)^2-a^2b^2\\
   &amp;= b^2x^2+a^2y^2+3b^2x-4a^2y+4a^2+2.25b^2-a^2b^2\\
   &amp;= (b^2x^2+a^2y^2+b^2x-2a^2y+a^2+0.25b^2-a^2b^2)+2b^2x-2a^2y+3a^2+2b^2\\
   &amp;= d+2b^2x-2a^2y+3a^2+2b^2
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9.096432em;vertical-align:-4.298216em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.798216em;"><span style="top:-6.958216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-5.458215999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-3.9341079999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-0.8858919999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:0.6382159999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.298216em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.798216em;"><span style="top:-6.958216em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">((</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-5.458215999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1.5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span><span style="top:-3.9341079999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1.5</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2.25</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-0.8858919999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.25</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:0.6382159999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.298216em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
</li>
</ol>
<p>这样我们就可以递推 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span> 的值，不断选择点并更新判断值。</p>
<p>同时考虑初始点，也就是 <strong>部分A</strong> 的结束点，设为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> ，显然有：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.2500em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>d</mi><mn>0</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mn>0.5</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>b</mi><mn>2</mn></msup><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><msup><mi>b</mi><mn>2</mn></msup><mi>x</mi><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><mi>y</mi><mo>+</mo><mn>0.25</mn><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><msup><mi>b</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
d_0 &amp;= F(x+1,y-0.5)\\
  &amp;= b^2(x+1)^2+a^2(y-0.5)^2-a^2b^2\\
  &amp;= b^2x^2+a^2y^2+2b^2x-a^2y+0.25a^2+b^2-a^2b^2
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.548216em;vertical-align:-2.024108em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.524108em;"><span style="top:-4.684108em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.6358920000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.024108em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.524108em;"><span style="top:-4.684108em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose">)</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.6358920000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.25</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.024108em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>这样，我们就可以画出基础的椭圆。</p>
<h3 id="代码">代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dx[] = &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dy[] = &#123; <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Normalize</span><span class="params">(<span class="keyword">float</span>&amp; x, <span class="keyword">float</span>&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x = (x - (SCR_WIDTH / <span class="number">2</span>)) / (SCR_WIDTH / <span class="number">2</span>);</span><br><span class="line">	y = (y - (SCR_HEIGHT / <span class="number">2</span>)) / (SCR_HEIGHT / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MiddlePoint</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sqrA = a * a, sqrB = b * b;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, y = b;</span><br><span class="line">	<span class="keyword">double</span> d = sqrB + <span class="number">0.25</span> * sqrA - sqrA * b;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">2</span> * sqrB * x &lt; <span class="number">2</span> * sqrA * y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (d &lt; <span class="number">0</span>) d = d + <span class="number">2</span> * sqrB * x + <span class="number">3</span> * sqrB;</span><br><span class="line">		<span class="keyword">else</span> d = d + <span class="number">2</span> * sqrB * x - <span class="number">2</span> * sqrA * y + <span class="number">2</span> * sqrA + <span class="number">3</span> * sqrB, y--;</span><br><span class="line">		x++;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			vertices[count * <span class="number">3</span>] = x * dx[i] + x0, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = y * dy[i] + y0;</span><br><span class="line">			<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	d = sqrB * (x + <span class="number">0.5</span>) * (x + <span class="number">0.5</span>) + sqrA * (y - <span class="number">1</span>) * (y - <span class="number">1</span>) - sqrA * sqrB;</span><br><span class="line">	<span class="keyword">while</span> (y &gt;= <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (d &gt;= <span class="number">0</span>) d = d - <span class="number">2</span> * sqrA * y + <span class="number">3</span> * sqrB;</span><br><span class="line">		<span class="keyword">else</span> d = d + <span class="number">2</span> * sqrB * x - <span class="number">2</span> * sqrA * y + <span class="number">3</span> * sqrA + <span class="number">2</span> * sqrB, x++;</span><br><span class="line"></span><br><span class="line">		y--;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			vertices[count * <span class="number">3</span>] = x * dx[i] + x0, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = y * dy[i] + y0;</span><br><span class="line">			<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Bresenham">Bresenham</h2>
<p><strong>Bresenham</strong> 算法是对 <strong>中点画椭圆</strong> 算法的改进。</p>
<p>我们发现 <strong>中点画椭圆</strong> 算法中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span> 的值涉及到过多的浮点数运算，<strong>Bresenham</strong> 将浮点数运算给取消。</p>
<p>观察 <strong>中点画椭圆</strong> 算法，发现最小的浮点数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.25</mn></mrow><annotation encoding="application/x-tex">0.25</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0.25</span></span></span></span>，于是我们将所有运算扩大四倍，就可以达到消除浮点运算的效果。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dx[] = &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dy[] = &#123; <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Normalize</span><span class="params">(<span class="keyword">float</span>&amp; x, <span class="keyword">float</span>&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x = (x - (SCR_WIDTH / <span class="number">2</span>)) / (SCR_WIDTH / <span class="number">2</span>);</span><br><span class="line">	y = (y - (SCR_HEIGHT / <span class="number">2</span>)) / (SCR_HEIGHT / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Bresenham</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sqrA = a * a, sqrB = b * b;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, y = b, d = <span class="number">4</span> * sqrB + sqrA - <span class="number">4</span> * sqrA * b;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (sqrB * x &lt; sqrA * y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (d &lt; <span class="number">0</span>) d = d + <span class="number">4</span> * (<span class="number">2</span> * sqrB * x + <span class="number">3</span> * sqrB);</span><br><span class="line">		<span class="keyword">else</span> d = d + <span class="number">4</span> * (<span class="number">2</span> * sqrB * x - <span class="number">2</span> * sqrA * y + <span class="number">2</span> * sqrA + <span class="number">3</span> * sqrB), y--;</span><br><span class="line">		x++;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			vertices[count * <span class="number">3</span>] = x * dx[i] + x0, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = y * dy[i] + y0;</span><br><span class="line">			<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	d = <span class="number">4</span> * sqrB * x * x + <span class="number">4</span> * sqrA * y * y + <span class="number">4</span> * <span class="number">2</span> * sqrB * x - sqrA * y + sqrA + <span class="number">4</span> * sqrB - <span class="number">4</span> * sqrA * sqrB;</span><br><span class="line">	<span class="keyword">while</span> (y &gt;= <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (d &gt;= <span class="number">0</span>) d = d - <span class="number">4</span> * (<span class="number">2</span> * sqrA * y + <span class="number">3</span> * sqrB);</span><br><span class="line">		<span class="keyword">else</span> d = d + <span class="number">4</span> * (<span class="number">2</span> * sqrB * x - <span class="number">2</span> * sqrA * y + <span class="number">3</span> * sqrA + <span class="number">2</span> * sqrB), x++;</span><br><span class="line"></span><br><span class="line">		y--;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			vertices[count * <span class="number">3</span>] = x * dx[i] + x0, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = y * dy[i] + y0;</span><br><span class="line">			<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="OpenGL-完整代码">OpenGL 完整代码</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GLEW_STATIC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glew.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/GL.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region Setting</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> GLFWwindow* window;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_WIDTH = <span class="number">800</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_HEIGHT = <span class="number">600</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> MAX_COUNT = <span class="number">800</span> * <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitializeWindow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">glfwInit</span>();</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class="line"></span><br><span class="line">	window = <span class="built_in">glfwCreateWindow</span>(SCR_WIDTH, SCR_HEIGHT, <span class="string">&quot;Test&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">glfwMakeContextCurrent</span>(window);</span><br><span class="line">	<span class="built_in">glfwSetFramebufferSizeCallback</span>(window, [](GLFWwindow* window, <span class="keyword">int</span> width, <span class="keyword">int</span> height) &#123; <span class="built_in">glViewport</span>(<span class="number">0</span>, <span class="number">0</span>, width, height); &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	glewExperimental = GL_TRUE;</span><br><span class="line">	<span class="built_in">glewInit</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ProcessInput</span><span class="params">(GLFWwindow* window)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">glfwGetKey</span>(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)</span><br><span class="line">		<span class="built_in">glfwSetWindowShouldClose</span>(window, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region InitializeVertex</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> vertices[MAX_COUNT * <span class="number">3</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> VAO, VBO;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dx[] = &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dy[] = &#123; <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Normalize</span><span class="params">(<span class="keyword">float</span>&amp; x, <span class="keyword">float</span>&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x = (x - (SCR_WIDTH / <span class="number">2</span>)) / (SCR_WIDTH / <span class="number">2</span>);</span><br><span class="line">	y = (y - (SCR_HEIGHT / <span class="number">2</span>)) / (SCR_HEIGHT / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MiddlePoint</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sqrA = a * a, sqrB = b * b;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, y = b;</span><br><span class="line">	<span class="keyword">double</span> d = sqrB + <span class="number">0.25</span> * sqrA - sqrA * b;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">2</span> * sqrB * x &lt; <span class="number">2</span> * sqrA * y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (d &lt; <span class="number">0</span>) d = d + <span class="number">2</span> * sqrB * x + <span class="number">3</span> * sqrB;</span><br><span class="line">		<span class="keyword">else</span> d = d + <span class="number">2</span> * sqrB * x - <span class="number">2</span> * sqrA * y + <span class="number">2</span> * sqrA + <span class="number">3</span> * sqrB, y--;</span><br><span class="line">		x++;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			vertices[count * <span class="number">3</span>] = x * dx[i] + x0, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = y * dy[i] + y0;</span><br><span class="line">			<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	d = sqrB * x * x + sqrA * y * y + <span class="number">2</span> * sqrB * x - sqrA * y + <span class="number">0.25</span> * sqrA + sqrB - sqrA * sqrB;</span><br><span class="line">	<span class="keyword">while</span> (y &gt;= <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (d &gt;= <span class="number">0</span>) d = d - <span class="number">2</span> * sqrA * y + <span class="number">3</span> * sqrB;</span><br><span class="line">		<span class="keyword">else</span> d = d + <span class="number">2</span> * sqrB * x - <span class="number">2</span> * sqrA * y + <span class="number">3</span> * sqrA + <span class="number">2</span> * sqrB, x++;</span><br><span class="line"></span><br><span class="line">		y--;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			vertices[count * <span class="number">3</span>] = x * dx[i] + x0, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = y * dy[i] + y0;</span><br><span class="line">			<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Bresenham</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sqrA = a * a, sqrB = b * b;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, y = b, d = <span class="number">4</span> * sqrB + sqrA - <span class="number">4</span> * sqrA * b;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (sqrB * x &lt; sqrA * y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (d &lt; <span class="number">0</span>) d = d + <span class="number">4</span> * (<span class="number">2</span> * sqrB * x + <span class="number">3</span> * sqrB);</span><br><span class="line">		<span class="keyword">else</span> d = d + <span class="number">4</span> * (<span class="number">2</span> * sqrB * x - <span class="number">2</span> * sqrA * y + <span class="number">2</span> * sqrA + <span class="number">3</span> * sqrB), y--;</span><br><span class="line">		x++;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			vertices[count * <span class="number">3</span>] = x * dx[i] + x0, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = y * dy[i] + y0;</span><br><span class="line">			<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	d = <span class="number">4</span> * sqrB * x * x + <span class="number">4</span> * sqrA * y * y + <span class="number">4</span> * <span class="number">2</span> * sqrB * x - sqrA * y + sqrA + <span class="number">4</span> * sqrB - <span class="number">4</span> * sqrA * sqrB;</span><br><span class="line">	<span class="keyword">while</span> (y &gt;= <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (d &gt;= <span class="number">0</span>) d = d - <span class="number">4</span> * (<span class="number">2</span> * sqrA * y + <span class="number">3</span> * sqrB);</span><br><span class="line">		<span class="keyword">else</span> d = d + <span class="number">4</span> * (<span class="number">2</span> * sqrB * x - <span class="number">2</span> * sqrA * y + <span class="number">3</span> * sqrA + <span class="number">2</span> * sqrB), x++;</span><br><span class="line"></span><br><span class="line">		y--;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			vertices[count * <span class="number">3</span>] = x * dx[i] + x0, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = y * dy[i] + y0;</span><br><span class="line">			<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitializeVertex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// Generate</span></span><br><span class="line">	<span class="built_in">glGenVertexArrays</span>(<span class="number">1</span>, &amp;VAO);</span><br><span class="line">	<span class="built_in">glGenBuffers</span>(<span class="number">1</span>, &amp;VBO);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Bind</span></span><br><span class="line">	<span class="built_in">glBindVertexArray</span>(VAO);</span><br><span class="line">	<span class="built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="built_in"><span class="keyword">sizeof</span></span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glVertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">3</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>), (<span class="keyword">void</span>*)<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">glEnableVertexAttribArray</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Render</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">glClearColor</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glBindVertexArray</span>(VAO);</span><br><span class="line">	<span class="built_in">glDrawArrays</span>(GL_POINTS, <span class="number">0</span>, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x0, y0, a, b;</span><br><span class="line">	std::cin &gt;&gt; x0 &gt;&gt; y0 &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">InitializeWindow</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">MiddlePoint</span>(x0, y0, a, b);</span><br><span class="line">	<span class="built_in">Bresenham</span>(x0, y0, a, b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">InitializeVertex</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">glfwWindowShouldClose</span>(window))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">ProcessInput</span>(window);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">Render</span>();</span><br><span class="line"></span><br><span class="line">		<span class="built_in">glfwSwapBuffers</span>(window);</span><br><span class="line">		<span class="built_in">glfwPollEvents</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glfwTerminate</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
      <tags>
        <tag>图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>[图形学]基础知识-着色器</title>
    <url>/2021/10/04/%E5%9B%BE%E5%BD%A2%E5%AD%A6/%5B%E5%9B%BE%E5%BD%A2%E5%AD%A6%5D%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E7%9D%80%E8%89%B2%E5%99%A8/</url>
    <content><![CDATA[<h1>基础知识-着色器</h1>
<h2 id="基本概念">基本概念</h2>
<h3 id="Shader">Shader</h3>
<p><strong>Shader</strong> （着色器）：运行在 GPU 的小程序，自定义显卡渲染画面的算法，使画面达到我们想要的效果。本质就是一段代码（主流的有 基于 OpenGL 的 <strong>GLSL</strong>、基于 DirectX 的 <strong>HLSL</strong> 等），这段代码的作用是阐述如何绘制每一个顶点的颜色以及最终每一个像素点的颜色。</p>
<p><strong>顶点着色器 (Vertex Shader)</strong>：</p>
<p>进行顶点相关的一系列操作。通常用来把顶点从模型空间变换到平面空间。</p>
<p>可以用于通过 矩阵变换位置、计算照明公式来 生成逐顶点颜色 以及 生成或变换纹理坐标 等基于顶点的操作。</p>
<p><strong>几何着色器 (Geometry Shader)</strong>：</p>
<p>以完整的图元作为输入数据，可以通过产生新顶点构造出新的（或是其它的）图元来生成其他形状，创建或销毁几何图元。</p>
<p>经过几何着色器处理后，得到的是一系列位于齐次裁剪空间的顶点所组成的图元，这些顶点会在后面的裁剪、透视除法和光栅化阶段得到进一步处理。</p>
<p><strong>片元着色器 (Fragment Shader)</strong>：</p>
<p>对片元进行纹理采样、颜色汇总等处理，计算一个像素的最终颜色。</p>
<h2 id="GLSL">GLSL</h2>
<h3 id="基本要求">基本要求</h3>
<p>Shader 的开头要声明版本，接着是输入和输出变量、<code>uniform</code> 和 <code>main</code> 函数。</p>
<p><code>输入和输出</code>：使用关键字 <code>in</code>、<code>out</code> 进行数据交流传递；顶点着色器应该为输入提供一个 <code>layout</code> 标识；片元着色器需要输出一个 <code>vec4</code> 的颜色。</p>
<p><code>uniform</code> ：一种从 <strong>CPU中的应用</strong> 向 <strong>GPU 中的Shader</strong> 发送数据的方式；它是全局的；会一直保存数据，直到被重置或更新。我们也可以不采用 <code>uniform</code> ，而选择给 <strong>顶点属性设置</strong> 添加数据来设置颜色。</p>
<p><code>main</code> ：Shader 的入口，在这个函数中我们处理所有的输入变量，并将结果输出到输出变量中。</p>
<h3 id="顶点属性设置">顶点属性设置</h3>
<p>将一个顶点属性设置为有：X、Y、Z、R、G、B 等数据；</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> vertices[] = &#123;</span><br><span class="line">    <span class="comment">// 位置              // 颜色</span></span><br><span class="line">     <span class="number">0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>,  <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>,   <span class="comment">// 右下</span></span><br><span class="line">    <span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>,  <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>,   <span class="comment">// 左下</span></span><br><span class="line">     <span class="number">0.0f</span>,  <span class="number">0.5f</span>, <span class="number">0.0f</span>,  <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>    <span class="comment">// 顶部</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>设置一下 顶点着色器 的输入：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">layout</span> (location = <span class="number">0</span>) in vec3 aPos;   <span class="comment">// 位置变量的属性位置值为 0 </span></span><br><span class="line"><span class="built_in">layout</span> (location = <span class="number">1</span>) in vec3 aColor; <span class="comment">// 颜色变量的属性位置值为 1</span></span><br></pre></td></tr></table></figure>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202110041640538.png" alt="image-20211004153906902"></p>
<p>重新配置顶点属性指针，根据上图与设置可以发现：</p>
<ol>
<li>位置属性 <code>location = 0</code>，两个顶点属性间隔为 <code>6 * sizeof(float)</code> ，起始偏移量为 <code>0</code>；</li>
<li>颜色属性 <code>location = 1</code>，两个顶点属性间隔为 <code>6 * sizeof(float)</code> ，起始偏移量为 <code>3 * sizeof(float)</code> ；</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 位置属性</span></span><br><span class="line"><span class="built_in">glVertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">6</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>), (<span class="keyword">void</span>*)<span class="number">0</span>);</span><br><span class="line"><span class="built_in">glEnableVertexAttribArray</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 颜色属性</span></span><br><span class="line"><span class="built_in">glVertexAttribPointer</span>(<span class="number">1</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">6</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>), (<span class="keyword">void</span>*)(<span class="number">3</span>* <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>)));</span><br><span class="line"><span class="built_in">glEnableVertexAttribArray</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<h3 id="完整代码">完整代码</h3>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202110041640333.png" alt="image-20211004164014959"></p>
<p><strong>Shader.h</strong> (封装 Shader 的一些操作)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SHADER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHADER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glew.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/GL.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shader</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> ID;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Shader</span>(<span class="keyword">const</span> <span class="keyword">char</span>* vertexPath, <span class="keyword">const</span> <span class="keyword">char</span>* fragmentPath)</span><br><span class="line">    &#123;</span><br><span class="line">        std::string vertexCode;</span><br><span class="line">        std::string fragmentCode;</span><br><span class="line">        std::ifstream vShaderFile;</span><br><span class="line">        std::ifstream fShaderFile;</span><br><span class="line"></span><br><span class="line">        vShaderFile.<span class="built_in">exceptions</span>(std::ifstream::failbit | std::ifstream::badbit);</span><br><span class="line">        fShaderFile.<span class="built_in">exceptions</span>(std::ifstream::failbit | std::ifstream::badbit);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            vShaderFile.<span class="built_in">open</span>(vertexPath);</span><br><span class="line">            fShaderFile.<span class="built_in">open</span>(fragmentPath);</span><br><span class="line">            std::stringstream vShaderStream, fShaderStream;</span><br><span class="line"></span><br><span class="line">            vShaderStream &lt;&lt; vShaderFile.<span class="built_in">rdbuf</span>();</span><br><span class="line">            fShaderStream &lt;&lt; fShaderFile.<span class="built_in">rdbuf</span>();</span><br><span class="line"></span><br><span class="line">            vShaderFile.<span class="built_in">close</span>();</span><br><span class="line">            fShaderFile.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">            vertexCode = vShaderStream.<span class="built_in">str</span>();</span><br><span class="line">            fragmentCode = fShaderStream.<span class="built_in">str</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in"><span class="keyword">catch</span></span> (std::ifstream::failure&amp; e)</span><br><span class="line">        &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;ERROR::SHADER::FILE_NOT_SUCCESFULLY_READ&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* vShaderCode = vertexCode.<span class="built_in">c_str</span>();</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* fShaderCode = fragmentCode.<span class="built_in">c_str</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> vertex, fragment;</span><br><span class="line"></span><br><span class="line">        vertex = <span class="built_in">glCreateShader</span>(GL_VERTEX_SHADER);</span><br><span class="line">        <span class="built_in">glShaderSource</span>(vertex, <span class="number">1</span>, &amp;vShaderCode, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">glCompileShader</span>(vertex);</span><br><span class="line">        <span class="built_in">checkCompileErrors</span>(vertex, <span class="string">&quot;VERTEX&quot;</span>);</span><br><span class="line"></span><br><span class="line">        fragment = <span class="built_in">glCreateShader</span>(GL_FRAGMENT_SHADER);</span><br><span class="line">        <span class="built_in">glShaderSource</span>(fragment, <span class="number">1</span>, &amp;fShaderCode, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">glCompileShader</span>(fragment);</span><br><span class="line">        <span class="built_in">checkCompileErrors</span>(fragment, <span class="string">&quot;FRAGMENT&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ID = <span class="built_in">glCreateProgram</span>();</span><br><span class="line">        <span class="built_in">glAttachShader</span>(ID, vertex);</span><br><span class="line">        <span class="built_in">glAttachShader</span>(ID, fragment);</span><br><span class="line">        <span class="built_in">glLinkProgram</span>(ID);</span><br><span class="line">        <span class="built_in">checkCompileErrors</span>(ID, <span class="string">&quot;PROGRAM&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">glDeleteShader</span>(vertex);</span><br><span class="line">        <span class="built_in">glDeleteShader</span>(fragment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">use</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">glUseProgram</span>(ID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setBool</span><span class="params">(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">bool</span> value)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">glUniform1i</span>(<span class="built_in">glGetUniformLocation</span>(ID, name.<span class="built_in">c_str</span>()), (<span class="keyword">int</span>)value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setInt</span><span class="params">(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">int</span> value)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">glUniform1i</span>(<span class="built_in">glGetUniformLocation</span>(ID, name.<span class="built_in">c_str</span>()), value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFloat</span><span class="params">(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">float</span> value)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">glUniform1f</span>(<span class="built_in">glGetUniformLocation</span>(ID, name.<span class="built_in">c_str</span>()), value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setVec2</span><span class="params">(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">float</span> x, <span class="keyword">float</span> y)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">glUniform2f</span>(<span class="built_in">glGetUniformLocation</span>(ID, name.<span class="built_in">c_str</span>()), x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setVec3</span><span class="params">(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">float</span> z)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">glUniform3f</span>(<span class="built_in">glGetUniformLocation</span>(ID, name.<span class="built_in">c_str</span>()), x, y, z);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setVec4</span><span class="params">(<span class="keyword">const</span> std::string&amp; name, <span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">float</span> z, <span class="keyword">float</span> w)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">glUniform4f</span>(<span class="built_in">glGetUniformLocation</span>(ID, name.<span class="built_in">c_str</span>()), x, y, z, w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">checkCompileErrors</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> shader, std::string type)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> success;</span><br><span class="line">        <span class="keyword">char</span> infoLog[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">if</span> (type != <span class="string">&quot;PROGRAM&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">glGetShaderiv</span>(shader, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line">            <span class="keyword">if</span> (!success)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">glGetShaderInfoLog</span>(shader, <span class="number">1024</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">                std::cout &lt;&lt; <span class="string">&quot;ERROR::SHADER_COMPILATION_ERROR of type: &quot;</span> &lt;&lt; type &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; infoLog &lt;&lt; <span class="string">&quot;\n -- --------------------------------------------------- -- &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">glGetProgramiv</span>(shader, GL_LINK_STATUS, &amp;success);</span><br><span class="line">            <span class="keyword">if</span> (!success)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">glGetProgramInfoLog</span>(shader, <span class="number">1024</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">                std::cout &lt;&lt; <span class="string">&quot;ERROR::PROGRAM_LINKING_ERROR of type: &quot;</span> &lt;&lt; type &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; infoLog &lt;&lt; <span class="string">&quot;\n -- --------------------------------------------------- -- &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p><strong>Shader01.vs</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#version 330 core</span></span><br><span class="line"><span class="built_in">layout</span> (location = <span class="number">0</span>) in vec3 aPos;</span><br><span class="line"><span class="built_in">layout</span> (location = <span class="number">1</span>) in vec3 aColor;</span><br><span class="line"></span><br><span class="line">out vec3 vertexColor;</span><br><span class="line"></span><br><span class="line">uniform vec3 posOffset;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    gl_Position = <span class="built_in">vec4</span>(aPos + posOffset, <span class="number">1.0</span>);</span><br><span class="line">    vertexColor = aColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Shader01.fs</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#version 330 core</span></span><br><span class="line">in vec3 vertexColor;</span><br><span class="line"></span><br><span class="line">out vec4 FragColor;</span><br><span class="line"></span><br><span class="line">uniform vec4 colorOffset;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FragColor = <span class="built_in">vec4</span>(vertexColor, <span class="number">1.0f</span>) + colorOffset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>main.cpp</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GLEW_STATIC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glew.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/GL.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Shader.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region BaseSetting</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> GLFWwindow* window;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_WIDTH = <span class="number">800</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_HEIGHT = <span class="number">600</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> MAX_COUNT = <span class="number">800</span> * <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitializeWindow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">glfwInit</span>();</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class="line"></span><br><span class="line">	window = <span class="built_in">glfwCreateWindow</span>(SCR_WIDTH, SCR_HEIGHT, <span class="string">&quot;Test&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">glfwMakeContextCurrent</span>(window);</span><br><span class="line">	<span class="built_in">glfwSetFramebufferSizeCallback</span>(window, [](GLFWwindow* window, <span class="keyword">int</span> width, <span class="keyword">int</span> height)&#123; <span class="built_in">glViewport</span>(<span class="number">0</span>, <span class="number">0</span>, width, height); &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	glewExperimental = GL_TRUE;</span><br><span class="line">	<span class="built_in">glewInit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ProcessInput</span><span class="params">(GLFWwindow* window)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">glfwGetKey</span>(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)</span><br><span class="line">		<span class="built_in">glfwSetWindowShouldClose</span>(window, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region InitializeVertex</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> vertices[] = &#123;</span><br><span class="line">	<span class="comment">// positions         // colors</span></span><br><span class="line">	 <span class="number">0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>,  <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>,  <span class="comment">// bottom right</span></span><br><span class="line">	<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>,  <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>,  <span class="comment">// bottom left</span></span><br><span class="line">	 <span class="number">0.0f</span>,  <span class="number">0.5f</span>, <span class="number">0.0f</span>,  <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>   <span class="comment">// top </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> VAO, VBO;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Initialize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// Generate</span></span><br><span class="line">	<span class="built_in">glGenVertexArrays</span>(<span class="number">1</span>, &amp;VAO);</span><br><span class="line">	<span class="built_in">glGenBuffers</span>(<span class="number">1</span>, &amp;VBO);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Bind</span></span><br><span class="line">	<span class="built_in">glBindVertexArray</span>(VAO);</span><br><span class="line">	<span class="built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="built_in"><span class="keyword">sizeof</span></span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// position attribute</span></span><br><span class="line">	<span class="built_in">glVertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">6</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>), (<span class="keyword">void</span>*)<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">glEnableVertexAttribArray</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="comment">// color attribute</span></span><br><span class="line">	<span class="built_in">glVertexAttribPointer</span>(<span class="number">1</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">6</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>), (<span class="keyword">void</span>*)(<span class="number">3</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>)));</span><br><span class="line">	<span class="built_in">glEnableVertexAttribArray</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Render</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">glClearColor</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> time = <span class="built_in">glfwGetTime</span>();</span><br><span class="line">	<span class="function"><span class="keyword">static</span> Shader <span class="title">shader01</span><span class="params">(<span class="string">&quot;Shader01.vs&quot;</span>, <span class="string">&quot;Shader01.fs&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">	shader01.<span class="built_in">setVec3</span>(<span class="string">&quot;posOffset&quot;</span>, <span class="built_in">sin</span>(time) / <span class="number">2.0</span>, <span class="built_in">sin</span>(time) / <span class="number">2.0</span>, <span class="number">0.0f</span>);</span><br><span class="line">	shader01.<span class="built_in">setVec4</span>(<span class="string">&quot;colorOffset&quot;</span>, <span class="built_in">sin</span>(time) / <span class="number">2.0</span>, <span class="built_in">sin</span>(time) / <span class="number">2.0</span>, <span class="built_in">sin</span>(time) / <span class="number">2.0</span>, <span class="number">0.0f</span>);</span><br><span class="line"></span><br><span class="line">	shader01.<span class="built_in">use</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glBindVertexArray</span>(VAO);</span><br><span class="line">	<span class="built_in">glDrawArrays</span>(GL_TRIANGLES, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">InitializeWindow</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Initialize</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">glfwWindowShouldClose</span>(window))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">ProcessInput</span>(window);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">Render</span>();</span><br><span class="line"></span><br><span class="line">		<span class="built_in">glfwSwapBuffers</span>(window);</span><br><span class="line">		<span class="built_in">glfwPollEvents</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glfwTerminate</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
      <tags>
        <tag>图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>[前端开发]网页浏览器</title>
    <url>/2021/09/29/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%5B%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%5D%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
    <content><![CDATA[<h1>网页浏览器</h1>
<h2 id="效果">效果</h2>
<p>制作网页图片浏览器，实现向前向后翻页、图片缩略图总览、图片缩略图选择、图片翻页过渡效果等功能。</p>
<p>点击后有图片淡入淡出效果。可以点击缩略图来切换展示图片，也可以点击左右按钮切换。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202109292041266.png" alt="image-20210929204108381"></p>
<h2 id="代码">代码</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>图片浏览器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">	<span class="selector-tag">body</span> &#123; <span class="attribute">text-align</span>:center; &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">	<span class="selector-class">.thumbnail</span></span></span><br><span class="line"><span class="css">	&#123;</span></span><br><span class="line"><span class="css">		<span class="attribute">display</span>:block;</span></span><br><span class="line"><span class="css">		<span class="attribute">border-bottom</span>:<span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">	&#125;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.thumbnail</span> <span class="selector-tag">img</span></span></span><br><span class="line"><span class="css">	&#123;</span></span><br><span class="line"><span class="css">		<span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">margin</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">border</span>:<span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">	&#125;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.click</span> &#123; <span class="attribute">cursor</span>:pointer; &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">	<span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;button&quot;</span>]</span></span></span><br><span class="line"><span class="css">	&#123;</span></span><br><span class="line"><span class="css">		<span class="attribute">cursor</span>:pointer;</span></span><br><span class="line"><span class="css">		<span class="attribute">background-color</span>:white;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">		<span class="attribute">font-size</span>:<span class="number">70px</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="css">	&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">	<span class="selector-id">#leftButton</span> &#123; <span class="attribute">float</span><span class="selector-pseudo">:left</span>; &#125;</span></span><br><span class="line"><span class="css">	</span></span><br><span class="line"><span class="css">	<span class="selector-id">#img</span></span></span><br><span class="line"><span class="css">	&#123;</span></span><br><span class="line"><span class="css">		<span class="attribute">width</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">height</span>:<span class="number">300px</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">margin</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="css">		<span class="attribute">border</span>:<span class="number">1px</span> solid black; <span class="attribute">border</span>:<span class="number">10px</span> solid black;&#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">	<span class="selector-id">#rightButton</span> &#123; <span class="attribute">float</span><span class="selector-pseudo">:right</span>; &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> maxCount = <span class="number">5</span>;</span></span><br><span class="line"><span class="javascript">			<span class="keyword">var</span> delay = <span class="number">500</span>;</span></span><br><span class="line"><span class="javascript">			</span></span><br><span class="line"><span class="javascript">			$(<span class="built_in">document</span>).ready(</span></span><br><span class="line"><span class="javascript">				<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">				</span>&#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxCount; i++) &#123;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> src = <span class="string">&quot;https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/&quot;</span> + <span class="string">&quot;0&quot;</span> + (i + <span class="number">1</span>).toString() + <span class="string">&quot;.jpg&quot;</span>;</span></span><br><span class="line"><span class="javascript">					<span class="keyword">var</span> img = $(<span class="string">&quot;&lt;img /&gt;&quot;</span>).attr(<span class="string">&quot;id&quot;</span>, (i + <span class="number">1</span>).toString()).attr(<span class="string">&quot;alt&quot;</span>, (i + <span class="number">1</span>).toString()).attr(<span class="string">&quot;src&quot;</span>, src);</span></span><br><span class="line"><span class="javascript">					$(<span class="string">&quot;#thumbnail&quot;</span>).append(img);</span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">				$(<span class="string">&quot;#thumbnail img&quot;</span>).click(</span></span><br><span class="line"><span class="javascript">					<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">					</span>&#123;</span></span><br><span class="line"><span class="javascript">						$(<span class="string">&quot;#img&quot;</span>).css(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;none&quot;</span>);</span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> src = $(<span class="built_in">this</span>).attr(<span class="string">&quot;src&quot;</span>);</span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> alt = $(<span class="built_in">this</span>).attr(<span class="string">&quot;alt&quot;</span>);</span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> nAlt = <span class="built_in">parseInt</span>(alt);</span></span><br><span class="line"><span class="javascript">						$(<span class="string">&quot;#img&quot;</span>).attr(<span class="string">&quot;alt&quot;</span>, nAlt).attr(<span class="string">&quot;src&quot;</span>, src).fadeIn(delay);</span></span><br><span class="line"><span class="javascript">					&#125;</span></span><br><span class="line"><span class="javascript">				)</span></span><br><span class="line"><span class="javascript">				.mouseover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; $(<span class="built_in">this</span>).addClass(<span class="string">&quot;click&quot;</span>); &#125;)</span></span><br><span class="line"><span class="javascript">				.mouseleave(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; $(<span class="built_in">this</span>).removeClass(<span class="string">&quot;click&quot;</span>); &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">				$(<span class="string">&quot;#leftButton&quot;</span>).click(</span></span><br><span class="line"><span class="javascript">					<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">					</span>&#123;</span></span><br><span class="line"><span class="javascript">						$(<span class="string">&quot;#img&quot;</span>).css(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;none&quot;</span>);</span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> alt = $(<span class="string">&quot;#img&quot;</span>).attr(<span class="string">&quot;alt&quot;</span>);</span></span><br><span class="line"><span class="javascript">						<span class="keyword">if</span> (alt == <span class="string">&quot;1&quot;</span>) alt = maxCount + <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">							</span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> nAlt = <span class="built_in">parseInt</span>(alt) - <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> src = <span class="string">&quot;img/&quot;</span> + <span class="string">&quot;0&quot;</span> + nAlt.toString() + <span class="string">&quot;.jpg&quot;</span>;</span></span><br><span class="line"><span class="javascript">						$(<span class="string">&quot;#img&quot;</span>).attr(<span class="string">&quot;alt&quot;</span>, nAlt).attr(<span class="string">&quot;src&quot;</span>, src).fadeIn(delay);</span></span><br><span class="line"><span class="javascript">				&#125;);</span></span><br><span class="line"><span class="javascript">				</span></span><br><span class="line"><span class="javascript">				$(<span class="string">&quot;#rightButton&quot;</span>).click(</span></span><br><span class="line"><span class="javascript">					<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">					</span>&#123;</span></span><br><span class="line"><span class="javascript">						$(<span class="string">&quot;#img&quot;</span>).css(<span class="string">&quot;display&quot;</span>, <span class="string">&quot;none&quot;</span>);</span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> alt = $(<span class="string">&quot;#img&quot;</span>).attr(<span class="string">&quot;alt&quot;</span>);</span></span><br><span class="line"><span class="javascript">						<span class="keyword">if</span> (alt == maxCount.toString()) alt = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">				</span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> nAlt = <span class="built_in">parseInt</span>(alt) + <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">						<span class="keyword">var</span> src = <span class="string">&quot;img/&quot;</span> + <span class="string">&quot;0&quot;</span> + nAlt.toString() + <span class="string">&quot;.jpg&quot;</span>;</span></span><br><span class="line"><span class="javascript">						$(<span class="string">&quot;#img&quot;</span>).attr(<span class="string">&quot;alt&quot;</span>, nAlt).attr(<span class="string">&quot;src&quot;</span>, src).fadeIn(delay);</span></span><br><span class="line"><span class="javascript">					&#125;</span></span><br><span class="line"><span class="javascript">				);</span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			);</span></span><br><span class="line"><span class="javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumbnail&quot;</span> <span class="attr">id</span>=<span class="string">&quot;thumbnail&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;leftButton&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;=&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;img&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;1&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/01.jpg&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;rightButton&quot;</span> <span class="attr">value</span>=<span class="string">&quot;=&gt;&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网站开发</category>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>网站开发</tag>
        <tag>前端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>[图形学]基础图形绘制-圆</title>
    <url>/2021/09/25/%E5%9B%BE%E5%BD%A2%E5%AD%A6/%5B%E5%9B%BE%E5%BD%A2%E5%AD%A6%5D%E5%9F%BA%E7%A1%80%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6-%E5%9C%86/</url>
    <content><![CDATA[<h1>基础图形绘制-圆</h1>
<h2 id="中点画圆">中点画圆</h2>
<p>首先，我们考虑画圆心在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(0,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> 的圆，其它情况仅需要平移即可。</p>
<p>根据圆的对称性，我们只需要画出第一象限的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>8</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 的圆弧，即可通过对称画出整个圆。</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202109251715590.png" alt="image-20210925155553037" style="zoom:33%;" />
<p>圆心在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(0,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span> ，半径为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span> 的圆的隐函数为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>−</mo><msup><mi>R</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">F(x,y)=x^2+y^2-R^2=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，代入各点，有：</p>
<ol>
<li>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>−</mo><msup><mi>R</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">F(x,y)=x^2+y^2-R^2=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时，点在圆上；</li>
<li>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>−</mo><msup><mi>R</mi><mn>2</mn></msup><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">F(x,y)=x^2+y^2-R^2 \gt 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.853208em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时，点在圆外；</li>
<li>当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>−</mo><msup><mi>R</mi><mn>2</mn></msup><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">F(x,y)=x^2+y^2-R^2 \lt 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.853208em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时，点在圆内。</li>
</ol>
<p>考虑画右上方的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>8</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">8</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 圆弧，假设当前点在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> ，考虑下一个点选择 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 还是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 。</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202109251715127.png" alt="image-20210925161813173" style="zoom:33%;" />
<p>下一个点显然是选择 <strong>离圆弧更近的点</strong> ，我们可以通过判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y-0.5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.5</span><span class="mclose">)</span></span></span></span> 在 <strong>圆内</strong> 还是 <strong>圆外</strong>，来判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 、 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>  哪个离圆弧更近（需要注意的是：如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y-0.5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.5</span><span class="mclose">)</span></span></span></span> <strong>恰好在圆上</strong>，算法选择 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 来作为下一个点）。</p>
<p>也就是说，对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> ，我们判断</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.2500em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mi>d</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mn>0.5</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><msup><mi>R</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>x</mi><mo>−</mo><mi>y</mi><mo>+</mo><mn>1.25</mn><mo>−</mo><msup><mi>R</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
d &amp;= F(x+1,y-0.5)\\
  &amp;= (x+1)^2+(y-0.5)^2-R^2\\
  &amp;= x^2+y^2+2x-y+1.25-R^2
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.548216em;vertical-align:-2.024108em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.524108em;"><span style="top:-4.684108em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">d</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.6358920000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.024108em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.524108em;"><span style="top:-4.684108em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose">)</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.6358920000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1.25</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.024108em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>的值，来判断下一个点的选择情况。</p>
<ol>
<li>
<p>若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">d \lt 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，选择 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 作为下一个点。<br>
此时，判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 的下一个点的判断值为：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.2500em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msup><mi>d</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>−</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>2</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>2</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mn>0.5</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><msup><mi>R</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mi>x</mi><mo>−</mo><mi>y</mi><mo>+</mo><mn>4.25</mn><mo>−</mo><msup><mi>R</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>x</mi><mo>−</mo><mi>y</mi><mo>+</mo><mn>1.25</mn><mo>−</mo><msup><mi>R</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mi>x</mi><mo>+</mo><mn>3</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>d</mi><mo>+</mo><mn>2</mn><mi>x</mi><mo>+</mo><mn>3</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
d&#x27; &amp;= F((x+1)+1,(y)-0.5)\\
   &amp;= F(x+2,y-0.5)\\
   &amp;= (x+2)^2+(y-0.5)^2-R^2\\
   &amp;= x^2+y^2+4x-y+4.25-R^2\\
   &amp;= (x^2+y^2+2x-y+1.25-R^2)+2x+3\\
   &amp;= d+2x+3
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9.072324000000002em;vertical-align:-4.286162000000001em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.786162em;"><span style="top:-6.946162em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-5.446161999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-3.9220539999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.3979459999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-0.8738379999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:0.6261620000000008em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.286162000000001em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.786162em;"><span style="top:-6.946162em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">((</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose">)</span></span></span><span style="top:-5.446161999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose">)</span></span></span><span style="top:-3.9220539999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.3979459999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4.25</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-0.8738379999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1.25</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span></span></span><span style="top:0.6261620000000008em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.286162000000001em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
</li>
<li>
<p>若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">d \ge 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>，选择 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 作为下一个点。<br>
此时，判断 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 的下一个点的判断值为：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.2500em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msup><mi>d</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>2</mn><mo separator="true">,</mo><mi>y</mi><mo>−</mo><mn>1.5</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>2</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mi>y</mi><mo>−</mo><mn>1.5</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><msup><mi>R</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mi>x</mi><mo>−</mo><mn>3</mn><mi>y</mi><mo>+</mo><mn>6.25</mn><mo>−</mo><msup><mi>R</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">(</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>x</mi><mo>−</mo><mi>y</mi><mo>+</mo><mn>1.25</mn><mo>−</mo><msup><mi>R</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>+</mo><mn>2</mn><mi>x</mi><mo>−</mo><mn>2</mn><mi>y</mi><mo>+</mo><mn>5</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>d</mi><mo>+</mo><mn>2</mn><mi>x</mi><mo>−</mo><mn>2</mn><mi>y</mi><mo>+</mo><mn>5</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
d&#x27; &amp;= F((x+1)+1,(y-1)-0.5)\\
   &amp;= F(x+2,y-1.5)\\
   &amp;= (x+2)^2+(y-1.5)^2-R^2\\
   &amp;= x^2+y^2+4x-3y+6.25-R^2\\
   &amp;= (x^2+y^2+2x-y+1.25-R^2)+2x-2y+5\\
   &amp;= d+2x-2y+5
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9.072324000000002em;vertical-align:-4.286162000000001em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.786162em;"><span style="top:-6.946162em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-5.446161999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-3.9220539999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.3979459999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-0.8738379999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:0.6261620000000008em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.286162000000001em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.786162em;"><span style="top:-6.946162em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">((</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose">)</span></span></span><span style="top:-5.446161999999999em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1.5</span><span class="mclose">)</span></span></span><span style="top:-3.9220539999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1.5</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.3979459999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">6.25</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-0.8738379999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1.25</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">5</span></span></span><span style="top:0.6261620000000008em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.286162000000001em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
</li>
</ol>
<p>这样我们就可以递推 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span> 的值，不断选择点并更新判断值。</p>
<p>同时考虑初始点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>R</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(0,R)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span></span></span></span> ，显然有：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.2500em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>d</mi><mn>0</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mn>0</mn><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>R</mi><mo>−</mo><mn>0.5</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mo>+</mo><mo stretchy="false">(</mo><mi>R</mi><mo>−</mo><mn>0.5</mn><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><msup><mi>R</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1.25</mn><mo>−</mo><mi>R</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
d_0 &amp;= F(0+1,R-0.5)\\
    &amp;= 1+(R-0.5)^2-R^2\\
    &amp;= 1.25-R
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.524108em;vertical-align:-2.012054em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.512054em;"><span style="top:-4.672054em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.147946em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.6479460000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.012054em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.512054em;"><span style="top:-4.672054em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose">)</span></span></span><span style="top:-3.147946em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">0.5</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.6479460000000001em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1.25</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.012054em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>这样，我们就可以画出基础的圆。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dx[] = &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dy[] = &#123; <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Normalize</span><span class="params">(<span class="keyword">float</span>&amp; x, <span class="keyword">float</span>&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x = (x - (SCR_WIDTH / <span class="number">2</span>)) / (SCR_WIDTH / <span class="number">2</span>);</span><br><span class="line">	y = (y - (SCR_HEIGHT / <span class="number">2</span>)) / (SCR_HEIGHT / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MiddlePoint</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, y = R;</span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">1.25</span> - R;</span><br><span class="line">	<span class="keyword">while</span> (x &lt; y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (d &lt; <span class="number">0</span>) d = d + <span class="number">2</span> * x + <span class="number">3</span>;</span><br><span class="line">		<span class="keyword">else</span> y--, d = d + <span class="number">2</span> * x - <span class="number">2</span> * y + <span class="number">5</span>;</span><br><span class="line">		</span><br><span class="line">		x++;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			vertices[count * <span class="number">3</span>] = x * dx[i] + x0, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = y * dy[i] + y0;</span><br><span class="line">			<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line"></span><br><span class="line">			vertices[count * <span class="number">3</span>] = y * dx[i] + x0, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = x * dy[i] + y0;</span><br><span class="line">			<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Bresenham">Bresenham</h2>
<p><strong>Bresenham</strong> 算法是对 <strong>中点画圆</strong> 算法的改进。</p>
<p>我们发现 <strong>中点画圆</strong> 算法中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span> 的值涉及到过多的浮点数运算，在经过各种改进后，我们考虑对算法做一些数值上的近似。选择了新的方案，也被称为 <strong>Bresenham</strong> 算法：</p>
<p>我们先将所有的关于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span> 的运算扩大两倍，然后将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>=</mo><mn>2</mn><mo>×</mo><mo stretchy="false">(</mo><mn>1.25</mn><mo>−</mo><mi>R</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2.5</mn><mo>−</mo><mn>2</mn><mi>R</mi></mrow><annotation encoding="application/x-tex">d=2 \times (1.25-R) =2.5-2R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1.25</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2.5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span> 改为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mo>−</mo><mn>2</mn><mi>R</mi></mrow><annotation encoding="application/x-tex">3-2R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>。也就是说：</p>
<ol>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span> 的初值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mo>−</mo><mn>2</mn><mi>R</mi></mrow><annotation encoding="application/x-tex">3-2R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span> ；</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">d \lt 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>d</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mi>d</mi><mo>+</mo><mn>4</mn><mi>x</mi><mo>+</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">d&#x27;=d+4x+6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span>；</li>
<li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">d \ge 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>d</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mi>d</mi><mo>+</mo><mn>4</mn><mi>x</mi><mo>−</mo><mn>4</mn><mi>y</mi><mo>+</mo><mn>10</mn></mrow><annotation encoding="application/x-tex">d&#x27;=d+4x-4y+10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">4</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">10</span></span></span></span>。</li>
</ol>
<p>可以发现效果较好的同时消除了浮点运算。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dx[] = &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dy[] = &#123; <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Normalize</span><span class="params">(<span class="keyword">float</span>&amp; x, <span class="keyword">float</span>&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x = (x - (SCR_WIDTH / <span class="number">2</span>)) / (SCR_WIDTH / <span class="number">2</span>);</span><br><span class="line">	y = (y - (SCR_HEIGHT / <span class="number">2</span>)) / (SCR_HEIGHT / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Bresenham</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, y = R, d = <span class="number">3</span> - <span class="number">2</span> * R;</span><br><span class="line">	<span class="keyword">while</span> (x &lt; y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (d &lt; <span class="number">0</span>) d = d + <span class="number">4</span> * x + <span class="number">6</span>;</span><br><span class="line">		<span class="keyword">else</span> y--, d = d + <span class="number">4</span> * x - <span class="number">4</span> * y + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">		x++;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			vertices[count * <span class="number">3</span>] = x * dx[i] + x0, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = y * dy[i] + y0;</span><br><span class="line">			<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line"></span><br><span class="line">			vertices[count * <span class="number">3</span>] = y * dx[i] + x0, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = x * dy[i] + y0;</span><br><span class="line">			<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="OpenGL-完整代码">OpenGL 完整代码</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GLEW_STATIC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glew.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/GL.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region Setting</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> GLFWwindow* window;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_WIDTH = <span class="number">800</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_HEIGHT = <span class="number">600</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> MAX_COUNT = <span class="number">800</span> * <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitializeWindow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">glfwInit</span>();</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class="line"></span><br><span class="line">	window = <span class="built_in">glfwCreateWindow</span>(SCR_WIDTH, SCR_HEIGHT, <span class="string">&quot;Test&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">glfwMakeContextCurrent</span>(window);</span><br><span class="line">	<span class="built_in">glfwSetFramebufferSizeCallback</span>(window, [](GLFWwindow* window, <span class="keyword">int</span> width, <span class="keyword">int</span> height)&#123; <span class="built_in">glViewport</span>(<span class="number">0</span>, <span class="number">0</span>, width, height); &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	glewExperimental = GL_TRUE;</span><br><span class="line">	<span class="built_in">glewInit</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ProcessInput</span><span class="params">(GLFWwindow* window)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">glfwGetKey</span>(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)</span><br><span class="line">		<span class="built_in">glfwSetWindowShouldClose</span>(window, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region InitializeVertex</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> vertices[MAX_COUNT * <span class="number">3</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> VAO, VBO;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dx[] = &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dy[] = &#123; <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Normalize</span><span class="params">(<span class="keyword">float</span>&amp; x, <span class="keyword">float</span>&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x = (x - (SCR_WIDTH / <span class="number">2</span>)) / (SCR_WIDTH / <span class="number">2</span>);</span><br><span class="line">	y = (y - (SCR_HEIGHT / <span class="number">2</span>)) / (SCR_HEIGHT / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MiddlePoint</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, y = R, d = <span class="number">1.25</span> - R;</span><br><span class="line">	<span class="keyword">while</span> (x &lt; y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (d &lt; <span class="number">0</span>) d = d + <span class="number">2</span> * x + <span class="number">3</span>;</span><br><span class="line">		<span class="keyword">else</span> y--, d = d + <span class="number">2</span> * x - <span class="number">2</span> * y + <span class="number">5</span>;</span><br><span class="line">		</span><br><span class="line">		x++;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			vertices[count * <span class="number">3</span>] = x * dx[i] + x0, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = y * dy[i] + y0;</span><br><span class="line">			<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line"></span><br><span class="line">			vertices[count * <span class="number">3</span>] = y * dx[i] + x0, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = x * dy[i] + y0;</span><br><span class="line">			<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Bresenham</span><span class="params">(<span class="keyword">int</span> x0, <span class="keyword">int</span> y0, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, y = R, d = <span class="number">3</span> - <span class="number">2</span> * R;</span><br><span class="line">	<span class="keyword">while</span> (x &lt; y)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (d &lt; <span class="number">0</span>) d = d + <span class="number">4</span> * x + <span class="number">6</span>;</span><br><span class="line">		<span class="keyword">else</span> y--, d = d + <span class="number">4</span> * x - <span class="number">4</span> * y + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">		x++;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			vertices[count * <span class="number">3</span>] = x * dx[i] + x0, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = y * dy[i] + y0;</span><br><span class="line">			<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line"></span><br><span class="line">			vertices[count * <span class="number">3</span>] = y * dx[i] + x0, vertices[count * <span class="number">3</span> + <span class="number">1</span>] = x * dy[i] + y0;</span><br><span class="line">			<span class="built_in">Normalize</span>(vertices[count * <span class="number">3</span>], vertices[count * <span class="number">3</span> + <span class="number">1</span>]), count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitializeVertex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// Generate</span></span><br><span class="line">	<span class="built_in">glGenVertexArrays</span>(<span class="number">1</span>, &amp;VAO);</span><br><span class="line">	<span class="built_in">glGenBuffers</span>(<span class="number">1</span>, &amp;VBO);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Bind</span></span><br><span class="line">	<span class="built_in">glBindVertexArray</span>(VAO);</span><br><span class="line">	<span class="built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="built_in"><span class="keyword">sizeof</span></span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glVertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">3</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>), (<span class="keyword">void</span>*)<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">glEnableVertexAttribArray</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Render</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">glClearColor</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glBindVertexArray</span>(VAO);</span><br><span class="line">	<span class="built_in">glDrawArrays</span>(GL_POINTS, <span class="number">0</span>, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x0, y0, R;</span><br><span class="line">	std::cin &gt;&gt; x0 &gt;&gt; y0 &gt;&gt; R;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">InitializeWindow</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">MiddlePoint</span>(x0, y0, R);</span><br><span class="line">	<span class="built_in">Bresenham</span>(x0, y0, R);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">InitializeVertex</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">glfwWindowShouldClose</span>(window))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">ProcessInput</span>(window);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">Render</span>();</span><br><span class="line"></span><br><span class="line">		<span class="built_in">glfwSwapBuffers</span>(window);</span><br><span class="line">		<span class="built_in">glfwPollEvents</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glfwTerminate</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
      <tags>
        <tag>图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>[Unity]Unity中的协程</title>
    <url>/2021/09/24/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/%5BUnity%5DUnity%E4%B8%AD%E7%9A%84%E5%8D%8F%E7%A8%8B/</url>
    <content><![CDATA[<h1>Unity中的协程</h1>
<h2 id="协程的基础">协程的基础</h2>
<ol>
<li>
<p><strong>协程</strong> 是用户态的轻量级线程，线程内部调度的基本单位，拥有自己的寄存器上下文和栈。</p>
</li>
<li>
<p>同一时间只能执行一个协程，而其他协程处于休眠状态，适合对任务进行分时处理。对于 Unity 来说协程是<strong>单线程</strong>的，在主线程中完成。</p>
</li>
<li>
<p>切换时先将寄存器上下文和栈保存，等切换回来的时候再进行恢复。也就是说<strong>协程能保留上一次调用时的状态</strong>，每次过程重入时，就相当于进入上一次调用的状态。由于直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换<strong>非常快</strong>。</p>
</li>
</ol>
<h2 id="协程的使用">协程的使用</h2>
<p>协程就像一个函数，能够暂停执行并将控制权返还给 Unity，然后在达到条件时被挂起，继续执行后面的部分。</p>
<ol>
<li>挂起协程</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Coroutine <span class="title">StartCoroutine</span>(<span class="params">IEnumerator routine</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Coroutine <span class="title">StartCoroutine</span>(<span class="params"><span class="built_in">string</span> methodName, <span class="built_in">object</span> <span class="keyword">value</span> = <span class="literal">null</span></span>)</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>终止协程</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StopCoroutine</span>(<span class="params">IEnumerator routine</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StopCoroutine</span>(<span class="params"><span class="built_in">string</span> methodName</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StopAllCoroutines</span>(<span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="协程的原理">协程的原理</h2>
<h3 id="IEnumerator">IEnumerator</h3>
<p>协程的本质是一个 <strong>IEnumerator</strong> (迭代器)。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IEnumerator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">object</span> Current &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    <span class="function"><span class="built_in">bool</span> <span class="title">MoveNext</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Reset</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Unity</strong> 在每帧做的工作就是：调用 <code>IEnumerator</code> 的 <code>MoveNext()</code> 方法，如果返回 <code>true</code> ，就从当前位置继续往下执行；如果是返回 <code>false</code>，就是结束迭代器。</p>
<h3 id="Yield">Yield</h3>
<p><code>yield</code> 的本质是<strong>语法糖</strong>，通过实现 <code>IEnumerator</code> 来实现迭代功能。</p>
<p>在协程中使用 <code>yield return</code> 会返回一个 <code>IEnumerator</code> 对象。</p>
<p><strong>Unity</strong> 每帧调用这个 <code>IEnumerator</code> 对象的 <code>MoveNext()</code> 方法。</p>
<p>当这个 <code>IEnumerator</code> 对象的 <code>MoveNext()</code> 返回 <code>false</code> 时（也就是说这个 <code>IEnumertator</code> 的 <code>Current</code> 已经迭代到最后一个元素），<strong>Unity</strong> 就会将这个 <code>IEnumerator</code> 从 <strong>Cortoutines list</strong> 中移除。</p>
<p>移除了这个  <code>IEnumerator</code> 对象，也就可以接着执行后面的语句了（也就是 <code>yield return</code> 后面的语句）。</p>
<p><strong>Unity</strong> 中实现了一个 <strong>YieldInstruction</strong>，是所有 <code>yield</code> 指令的基类。本质上也可以看作一个函数体，每帧 <code>MoveNext()</code> 检查是否返回 <code>false</code> 。</p>
<p>举个例子：</p>
<p><code>yield retrun new WaitForSeconds(2f);  </code></p>
<p>等价于实现了一个这样的 <code>MoveNext()</code> 方法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> elapsedTime;  </span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> time;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MoveNext</span>(<span class="params"></span>)</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    elapesedTime += Time.deltaTime;  </span><br><span class="line">    <span class="keyword">return</span> time &lt;= elapsedTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>yield</strong> 的使用：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="literal">null</span> / <span class="number">0</span> / 任意数字;</span><br><span class="line"><span class="comment">// 等待 下一帧 继续执行</span></span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 直接结束该协程的后续操作</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitUntil</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"><span class="comment">// 执行直到 当输入的参数（或者委托）为true 时</span></span></span><br><span class="line"><span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitWhile</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"><span class="comment">// 将协同执行直到 当输入的参数（或者委托）不为 true 的时</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> asyncOperation</span>;</span><br><span class="line"><span class="comment">// 等 异步操作结束后 继续执行</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="title">WWW</span>(<span class="params"></span>)</span>;</span><br><span class="line"><span class="comment">// 等待 WWW 操作完成后 继续执行</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="title">StartCoroution</span>(<span class="params"><span class="comment">/*某个协程*/</span></span>)</span>;</span><br><span class="line"><span class="comment">// 等待 某个协程执行完毕后 继续执行</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForEndOfFrame</span>(<span class="params"></span>)</span>;</span><br><span class="line"><span class="comment">// 等待 渲染周期循环和GUI完成后 继续执行</span></span><br><span class="line"><span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForFixedUpdate</span>(<span class="params"></span>)</span>;</span><br><span class="line"><span class="comment">// 等待 物理周期循环完成后 继续执行</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForSeconds</span>(<span class="params"><span class="number">1.0f</span></span>)</span>;</span><br><span class="line"><span class="comment">// 等待 1.0s的时间周期后 继续执行（时间会受到 Time.timeScale 的影响）</span></span><br><span class="line"><span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForSecondsRealtime</span>(<span class="params"><span class="number">0.1f</span></span>)</span>;</span><br><span class="line"><span class="comment">// 等待 1.0s的时间周期后 继续执行（时间不受 Time.timeScale 的影响）</span></span><br></pre></td></tr></table></figure>
<h2 id="协程的生命周期">协程的生命周期</h2>
<p><strong>协程</strong>虽然是在 <strong>MonoBehvaviour</strong> 中经过 <strong>StartCoroutine</strong> 挂起的，但是 <strong>协程</strong> 与 <strong>MonoBehaviour</strong> 是一等级的，不受 <strong>MonoBehaviour</strong> 的状态影响；但协程与 <strong>MonoBehaviour</strong> 一样受到 <strong>GameObject</strong> 的控制。</p>
<p>也就是说：在某一个 <strong>MonoBehavior</strong> 中的协程在执行时，若将该 <strong>MonoBehavior</strong> <code>.enabled = false</code>，协程并不会停止；但将挂载该 <strong>MonoBehavior</strong> 的 <strong>GameObject</strong> <code>SetActive(false)</code> ，协程就会停止。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202109241659891.png" alt="20161208161255508"></p>
<h2 id="参考">参考</h2>
<p>Unity协程（Coroutine）原理深入剖析：<a href="https://www.cnblogs.com/123ing/p/3704949.html">https://www.cnblogs.com/123ing/p/3704949.html</a></p>
<p>Unity协程（Coroutine）原理深入剖析再续：<a href="https://www.cnblogs.com/123ing/p/3704947.html">https://www.cnblogs.com/123ing/p/3704947.html</a></p>
<p>c# yield关键字原理详解：<a href="https://www.cnblogs.com/blueberryzzz/p/8678700.html#undefined">https://www.cnblogs.com/blueberryzzz/p/8678700.html#undefined</a></p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>Gameplay</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Gameplay</tag>
      </tags>
  </entry>
  <entry>
    <title>[图形学]基础图形绘制-直线</title>
    <url>/2021/09/24/%E5%9B%BE%E5%BD%A2%E5%AD%A6/%5B%E5%9B%BE%E5%BD%A2%E5%AD%A6%5D%E5%9F%BA%E7%A1%80%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6-%E7%9B%B4%E7%BA%BF/</url>
    <content><![CDATA[<h1>基础图形绘制-直线</h1>
<h2 id="DDA">DDA</h2>
<p><strong>数值微分 DDA (Digital Differential Analyzer) 算法</strong></p>
<p>给点两点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mtext>、</mtext><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_1,y_1)、(x_2,y_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord cjk_fallback">、</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，考虑直线表达式： <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>k</mi><mi>x</mi><mo>+</mo><mi>b</mi><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mfrac><mrow><mi>y</mi><mn>2</mn><mo>−</mo><mi>y</mi><mn>1</mn></mrow><mrow><mi>x</mi><mn>2</mn><mo>−</mo><mi>x</mi><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">y=kx+b,k=\frac{y2-y1}{x2-x1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.300547em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.897216em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mord mtight">2</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">x</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mtight">2</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p>
<p>显然我们可以直接模拟这个过程：从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_1,y_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 走向 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_2, y_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，每次 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的时候 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>+</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">y+k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>。</p>
<p>易发现，在斜率 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 较小的时候，所画直线比较合理，但是在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 比较大的时候，会出现下图左侧这样割裂的问题：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202109232323914.png" alt="image-20210923210159313"></p>
<p>于是，我们在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 较大的时候，交换表达式中的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span> 、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>，这样就可以让 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span> 变小。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Normalize</span><span class="params">(<span class="keyword">float</span> &amp;x, <span class="keyword">float</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x = (x - (SCR_WIDTH / <span class="number">2</span>)) / (SCR_WIDTH / <span class="number">2</span>);</span><br><span class="line">	y = (y - (SCR_HEIGHT / <span class="number">2</span>)) / (SCR_HEIGHT / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DDA</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> dx = x2 - x1, dy = y2 - y1;</span><br><span class="line">	<span class="keyword">int</span> _k = <span class="built_in">abs</span>(dx) &gt; <span class="built_in">abs</span>(dy) ? <span class="built_in">abs</span>(dx) : <span class="built_in">abs</span>(dy);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> x = x1, y = y1;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= _k; i++, count++)</span><br><span class="line">	&#123;</span><br><span class="line">		vertices[i * <span class="number">3</span>] = x, x += (<span class="keyword">float</span>)dx / _k;</span><br><span class="line">		vertices[i * <span class="number">3</span> + <span class="number">1</span>] = y, y += (<span class="keyword">float</span>)dy / _k;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">Normalize</span>(vertices[i * <span class="number">3</span>], vertices[i * <span class="number">3</span> + <span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Bresenham">Bresenham</h2>
<p><strong>Bresenham</strong> 算法是计算机图形学典型的直线光栅化算法。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202109232323827.png" alt="image-20210923212851571"></p>
<p>假设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">k \in [0,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>，在绘制一条直线的时候，我们考虑每次将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，那么对于一个点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>，理想的下一个点应该是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>+</mo><mi>k</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mfrac><mrow><msub><mi>y</mi><mn>2</mn></msub><mo>−</mo><msub><mi>y</mi><mn>1</mn></msub></mrow><mrow><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><msub><mi>x</mi><mn>1</mn></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">(x+1,y+k),k=\frac{y_2-y_1}{x_2-x_1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2995389999999998em;vertical-align:-0.44509999999999994em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854439em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。</p>
<p>但我们栅格化后，绘制的下一个点是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，于是考虑应该选择哪个点。</p>
<p>我们令 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span> 表示从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 到理想位置的误差，显然有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">d\in[0,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> ：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202109232324357.png" alt="image-20210923213153789"></p>
<p>显然，当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>≤</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">d\le0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0.5</span></span></span></span> 时，我们选择 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> ；当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>&gt;</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">d\gt0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0.5</span></span></span></span> 时，我们选择 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>y</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x+1,y+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</p>
<p>首先：考虑怎么求这个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span>，显然设 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span></span></span></span> 的初值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>；每次 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">x+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 时候，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>+</mo><mi>k</mi><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mfrac><mrow><mi mathvariant="normal">Δ</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">Δ</mi><mi>x</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">d+k,k=\frac{\Delta y}{\Delta x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.269439em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.924439em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Δ</span><span class="mord mathnormal mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Δ</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> ；若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>&gt;</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">d\gt0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0.5</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 变成了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">y+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，相对的也要 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">d-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> ，保证其相对性。</p>
<p>现在有：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>x</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn><mspace linebreak="newline"></mspace><msub><mi>y</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3600em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>y</mi><mi>i</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi><mo>≤</mo><mn>0.5</mn></mstyle></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi><mo>&gt;</mo><mn>0.5</mn></mstyle></mrow></mstyle></mtd></mtr></mtable></mrow><mspace linebreak="newline"></mspace><msub><mi>d</mi><mn>0</mn></msub><mo>=</mo><mn>0</mn><mspace linebreak="newline"></mspace><msub><mi>d</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>d</mi><mi>i</mi></msub><mo>+</mo><mfrac><mrow><mi mathvariant="normal">Δ</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">Δ</mi><mi>x</mi></mrow></mfrac><mspace linebreak="newline"></mspace><mi>d</mi><mo>=</mo><mi>d</mi><mo>−</mo><mn>1</mn><mtext> </mtext><mtext> </mtext><mtext> </mtext><mrow><mtext>if </mtext><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi><mo>&gt;</mo><mn>0.5</mn></mstyle></mrow></mrow><annotation encoding="application/x-tex">x_{i+1} = x_{i} + 1\\
y_{i+1} = 
  \begin{cases}
    y_{i} &amp; \text{if $d \leq 0.5$} \\
	 y_{i}+1 &amp; \text{if $d \gt 0.5$}
  \end{cases}\\
d_0=0\\
d_{i+1}=d_i+\frac{\Delta y}{\Delta x}\\
d=d-1 \:\:\: \text{if $d \gt 0.5$}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0.5</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0.5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.0463299999999998em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603299999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord text"><span class="mord">if </span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0.5</span></span></span></span></span></span></p>
<p>我们考虑优化一下这个式子，去掉精度处理：</p>
<ol>
<li>令 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>=</mo><mi>d</mi><mo>−</mo><mn>0.5</mn></mrow><annotation encoding="application/x-tex">d=d-0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0.5</span></span></span></span>，得到：</li>
</ol>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>x</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn><mspace linebreak="newline"></mspace><msub><mi>y</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3600em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>y</mi><mi>i</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi><mo>≤</mo><mn>0</mn></mstyle></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi><mo>&gt;</mo><mn>0</mn></mstyle></mrow></mstyle></mtd></mtr></mtable></mrow><mspace linebreak="newline"></mspace><msub><mi>d</mi><mn>0</mn></msub><mo>=</mo><mo>−</mo><mn>0.5</mn><mspace linebreak="newline"></mspace><msub><mi>d</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>d</mi><mi>i</mi></msub><mo>+</mo><mfrac><mrow><mi mathvariant="normal">Δ</mi><mi>y</mi></mrow><mrow><mi mathvariant="normal">Δ</mi><mi>x</mi></mrow></mfrac><mspace linebreak="newline"></mspace><mi>d</mi><mo>=</mo><mi>d</mi><mo>−</mo><mn>1</mn><mtext> </mtext><mtext> </mtext><mtext> </mtext><mrow><mtext>if </mtext><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi><mo>&gt;</mo><mn>0</mn></mstyle></mrow></mrow><annotation encoding="application/x-tex">x_{i+1} = x_{i} + 1\\
y_{i+1} = 
  \begin{cases}
    y_{i} &amp; \text{if $d \leq 0$} \\
	 y_{i}+1 &amp; \text{if $d \gt 0$}
  \end{cases}\\
d_0=-0.5\\
d_{i+1}=d_i+\frac{\Delta y}{\Delta x}\\
d=d-1 \:\:\: \text{if $d \gt 0$}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">0.5</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.0463299999999998em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603299999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Δ</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord text"><span class="mord">if </span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span></span></span></p>
<ol start="2">
<li>令 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>=</mo><mi>d</mi><mo>×</mo><mn>2</mn><mo>×</mo><mi mathvariant="normal">Δ</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">d=d \times 2 \times \Delta x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Δ</span><span class="mord mathnormal">x</span></span></span></span>，得到：</li>
</ol>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>x</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn><mspace linebreak="newline"></mspace><msub><mi>y</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3600em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>y</mi><mi>i</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi><mo>≤</mo><mn>0</mn></mstyle></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi><mo>&gt;</mo><mn>0</mn></mstyle></mrow></mstyle></mtd></mtr></mtable></mrow><mspace linebreak="newline"></mspace><msub><mi>d</mi><mn>0</mn></msub><mo>=</mo><mo>−</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><mspace linebreak="newline"></mspace><msub><mi>d</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msub><mi>d</mi><mi>i</mi></msub><mo>+</mo><mn>2</mn><mo>×</mo><mi mathvariant="normal">Δ</mi><mi>y</mi><mspace linebreak="newline"></mspace><mi>d</mi><mo>=</mo><mi>d</mi><mo>−</mo><mn>2</mn><mo>×</mo><mi mathvariant="normal">Δ</mi><mi>x</mi><mtext> </mtext><mtext> </mtext><mtext> </mtext><mrow><mtext>if </mtext><mstyle scriptlevel="0" displaystyle="false"><mi>d</mi><mo>&gt;</mo><mn>0</mn></mstyle></mrow></mrow><annotation encoding="application/x-tex">x_{i+1} = x_{i} + 1\\
y_{i+1} = 
  \begin{cases}
    y_{i} &amp; \text{if $d \leq 0$} \\
	 y_{i}+1 &amp; \text{if $d \gt 0$}
  \end{cases}\\
d_0=-\Delta x\\
d_{i+1}=d_i+2\times\Delta y\\
d=d-2 \times \Delta x \:\:\: \text{if $d \gt 0$}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord">Δ</span><span class="mord mathnormal">x</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.902771em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">Δ</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord">Δ</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord text"><span class="mord">if </span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span></span></span></p>
<p>这样就可以实现 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">k \in [0,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> 的直线的绘制。</p>
<p>最后，我们扩展一下，处理一下其它情况即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Normalize</span><span class="params">(<span class="keyword">float</span> &amp;x, <span class="keyword">float</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x = (x - (SCR_WIDTH / <span class="number">2</span>)) / (SCR_WIDTH / <span class="number">2</span>);</span><br><span class="line">	y = (y - (SCR_HEIGHT / <span class="number">2</span>)) / (SCR_HEIGHT / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span> </span>&#123; <span class="keyword">int</span> temp = a; a = b; b = temp; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Bresenham</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> steep = <span class="built_in">abs</span>(y2 - y1) &gt; <span class="built_in">abs</span>(x2 - x1);</span><br><span class="line">	<span class="keyword">if</span> (steep) <span class="built_in">swap</span>(x1, y1), <span class="built_in">swap</span>(x2, y2);</span><br><span class="line">	<span class="keyword">if</span> (x1 &gt; x2) <span class="built_in">swap</span>(x1, x2), <span class="built_in">swap</span>(y1, y2);</span><br><span class="line">	<span class="keyword">int</span> dx = x2 - x1, dy = y2 - y1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> d = -dx;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x = x1, y = y1; i &lt;= dx; i++, count++)</span><br><span class="line">	&#123;</span><br><span class="line">        vertices[i * <span class="number">3</span>] = !steep ? x : y;</span><br><span class="line">		vertices[i * <span class="number">3</span> + <span class="number">1</span>] = !steep ? y : x;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">Normalize</span>(vertices[i * <span class="number">3</span>], vertices[i * <span class="number">3</span> + <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        x++;</span><br><span class="line">		d += <span class="number">2</span> * <span class="built_in">abs</span>(dy);</span><br><span class="line">        <span class="keyword">if</span> (d &gt; <span class="number">0</span>) y += (dy &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>), d -= <span class="number">2</span> * dx;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="OpenGL-完整代码">OpenGL 完整代码</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GLEW_STATIC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glew.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/GL.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region Setting</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> GLFWwindow* window;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_WIDTH = <span class="number">800</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_HEIGHT = <span class="number">600</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> MAX_COUNT = <span class="number">800</span> * <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitializeWindow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">glfwInit</span>();</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class="line"></span><br><span class="line">	window = <span class="built_in">glfwCreateWindow</span>(SCR_WIDTH, SCR_HEIGHT, <span class="string">&quot;Test&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">glfwMakeContextCurrent</span>(window);</span><br><span class="line">	<span class="built_in">glfwSetFramebufferSizeCallback</span>(window, [](GLFWwindow* window, <span class="keyword">int</span> width, <span class="keyword">int</span> height)&#123; <span class="built_in">glViewport</span>(<span class="number">0</span>, <span class="number">0</span>, width, height); &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	glewExperimental = GL_TRUE;</span><br><span class="line">	<span class="built_in">glewInit</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ProcessInput</span><span class="params">(GLFWwindow* window)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">glfwGetKey</span>(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)</span><br><span class="line">		<span class="built_in">glfwSetWindowShouldClose</span>(window, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region InitializeVertex</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> vertices[MAX_COUNT * <span class="number">3</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> VAO, VBO;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Normalize</span><span class="params">(<span class="keyword">float</span>&amp; x, <span class="keyword">float</span>&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x = (x - (SCR_WIDTH / <span class="number">2</span>)) / (SCR_WIDTH / <span class="number">2</span>);</span><br><span class="line">	y = (y - (SCR_HEIGHT / <span class="number">2</span>)) / (SCR_HEIGHT / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DDA</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> dx = x2 - x1, dy = y2 - y1;</span><br><span class="line">	<span class="keyword">int</span> _k = <span class="built_in">abs</span>(dx) &gt; <span class="built_in">abs</span>(dy) ? <span class="built_in">abs</span>(dx) : <span class="built_in">abs</span>(dy);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> x = x1, y = y1;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= _k; i++, count++)</span><br><span class="line">	&#123;</span><br><span class="line">		vertices[i * <span class="number">3</span>] = x, x += (<span class="keyword">float</span>)dx / _k;</span><br><span class="line">		vertices[i * <span class="number">3</span> + <span class="number">1</span>] = y, y += (<span class="keyword">float</span>)dy / _k;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">Normalize</span>(vertices[i * <span class="number">3</span>], vertices[i * <span class="number">3</span> + <span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span> </span>&#123; <span class="keyword">int</span> temp = a; a = b; b = temp; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Bresenham</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">bool</span> steep = <span class="built_in">abs</span>(y2 - y1) &gt; <span class="built_in">abs</span>(x2 - x1);</span><br><span class="line">	<span class="keyword">if</span> (steep) <span class="built_in">swap</span>(x1, y1), <span class="built_in">swap</span>(x2, y2);</span><br><span class="line">	<span class="keyword">if</span> (x1 &gt; x2) <span class="built_in">swap</span>(x1, x2), <span class="built_in">swap</span>(y1, y2);</span><br><span class="line">	<span class="keyword">int</span> dx = x2 - x1, dy = y2 - y1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> d = -dx;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x = x1, y = y1; i &lt;= dx; i++, count++)</span><br><span class="line">	&#123;</span><br><span class="line">        vertices[i * <span class="number">3</span>] = !steep ? x : y;</span><br><span class="line">		vertices[i * <span class="number">3</span> + <span class="number">1</span>] = !steep ? y : x;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">Normalize</span>(vertices[i * <span class="number">3</span>], vertices[i * <span class="number">3</span> + <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        x++;</span><br><span class="line">		d += <span class="number">2</span> * <span class="built_in">abs</span>(dy);</span><br><span class="line">        <span class="keyword">if</span> (d &gt; <span class="number">0</span>) y += (dy &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>), d -= <span class="number">2</span> * dx;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitializeVertex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// Generate</span></span><br><span class="line">	<span class="built_in">glGenVertexArrays</span>(<span class="number">1</span>, &amp;VAO);</span><br><span class="line">	<span class="built_in">glGenBuffers</span>(<span class="number">1</span>, &amp;VBO);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Bind</span></span><br><span class="line">	<span class="built_in">glBindVertexArray</span>(VAO);</span><br><span class="line">	<span class="built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="built_in"><span class="keyword">sizeof</span></span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glVertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">3</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>), (<span class="keyword">void</span>*)<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">glEnableVertexAttribArray</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Render</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">glClearColor</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glBindVertexArray</span>(VAO);</span><br><span class="line">	<span class="built_in">glDrawArrays</span>(GL_POINTS, <span class="number">0</span>, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line">	std::cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">InitializeWindow</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">DDA</span>(x1, y1, x2, y2);</span><br><span class="line">    <span class="built_in">Bresenham</span>(x1, y1, x2, y2);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">InitializeVertex</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">glfwWindowShouldClose</span>(window))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">ProcessInput</span>(window);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">Render</span>();</span><br><span class="line"></span><br><span class="line">		<span class="built_in">glfwSwapBuffers</span>(window);</span><br><span class="line">		<span class="built_in">glfwPollEvents</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glfwTerminate</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
      <tags>
        <tag>图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>[前端开发]网页时钟</title>
    <url>/2021/09/23/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%5B%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%5D%E7%BD%91%E9%A1%B5%E6%97%B6%E9%92%9F/</url>
    <content><![CDATA[<h1>网页计算器</h1>
<h2 id="效果">效果</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202109231932698.png" alt="image-20210923193231968"></p>
<h2 id="代码">代码</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>时钟<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> radius = canvas.height / <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        Init();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">Init</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">        </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, ResizeCanvas, <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">            ResizeCanvas();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">ResizeCanvas</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">        </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> s = <span class="built_in">Math</span>.min(<span class="built_in">window</span>.innerWidth, <span class="built_in">window</span>.innerHeight);</span></span><br><span class="line"><span class="javascript">            canvas.width = canvas.height = s;</span></span><br><span class="line"><span class="javascript">            radius = canvas.height / <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">            ctx.translate(radius, radius);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            radius *= <span class="number">0.8</span>;</span></span><br><span class="line"><span class="javascript">            DrawClock();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">setInterval</span>(DrawClock, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">DrawClock</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">        </span>&#123;</span></span><br><span class="line"><span class="javascript">            DrawFace(ctx, radius);</span></span><br><span class="line"><span class="javascript">            DrawNumbers(ctx, radius);</span></span><br><span class="line"><span class="javascript">            DrawTime(ctx, radius);</span></span><br><span class="line"><span class="javascript">            DrawString(ctx, radius);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">DrawFace</span>(<span class="params">ctx, radius</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">        </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> grad;</span></span><br><span class="line"><span class="javascript">            ctx.beginPath();</span></span><br><span class="line"><span class="javascript">            ctx.arc(<span class="number">0</span>, <span class="number">0</span>, radius, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span></span><br><span class="line"><span class="javascript">            ctx.fillStyle = <span class="string">&#x27;white&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            ctx.fill();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            grad = ctx.createRadialGradient(<span class="number">0</span>, <span class="number">0</span>, radius * <span class="number">0.9</span>, <span class="number">0</span>, <span class="number">0</span>, radius);</span></span><br><span class="line"><span class="javascript">            grad.addColorStop(<span class="number">0</span>, <span class="string">&#x27;#333&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            grad.addColorStop(<span class="number">0.5</span>, <span class="string">&#x27;white&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            grad.addColorStop(<span class="number">1</span>, <span class="string">&#x27;#333&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            </span></span><br><span class="line"><span class="javascript">            ctx.strokeStyle = grad;</span></span><br><span class="line"><span class="javascript">            ctx.lineWidth = radius * <span class="number">0.1</span>;</span></span><br><span class="line"><span class="javascript">            ctx.stroke();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            ctx.beginPath();</span></span><br><span class="line"><span class="javascript">            ctx.arc(<span class="number">0</span>, <span class="number">0</span>, radius * <span class="number">0.1</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI);</span></span><br><span class="line"><span class="javascript">            ctx.fillStyle = <span class="string">&#x27;#333&#x27;</span>;</span></span><br><span class="line"><span class="javascript">            ctx.fill();</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">DrawNumbers</span>(<span class="params">ctx, radius</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">        </span>&#123;</span></span><br><span class="line"><span class="javascript">            ctx.font = radius * <span class="number">0.2</span> + <span class="string">&quot;px arial&quot;</span>;</span></span><br><span class="line"><span class="javascript">            ctx.textBaseline = <span class="string">&quot;middle&quot;</span>;</span></span><br><span class="line"><span class="javascript">            ctx.textAlign = <span class="string">&quot;center&quot;</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> num = <span class="number">1</span>; num &lt;= <span class="number">12</span>; num++)</span></span><br><span class="line"><span class="javascript">            &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> ang = num * <span class="built_in">Math</span>.PI / <span class="number">6</span>;</span></span><br><span class="line"><span class="javascript">                ctx.rotate(ang);</span></span><br><span class="line"><span class="javascript">                ctx.translate(<span class="number">0</span>, -radius * <span class="number">0.8</span>);</span></span><br><span class="line"><span class="javascript">                ctx.rotate(-ang);</span></span><br><span class="line"><span class="javascript">                ctx.fillText(num.toString(), <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">                ctx.rotate(ang);</span></span><br><span class="line"><span class="javascript">                ctx.translate(<span class="number">0</span>, radius * <span class="number">0.8</span>);</span></span><br><span class="line"><span class="javascript">                ctx.rotate(-ang);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">DrawHand</span>(<span class="params">ctx, pos, length, width</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">        </span>&#123;</span></span><br><span class="line"><span class="javascript">            ctx.beginPath();</span></span><br><span class="line"><span class="javascript">            ctx.lineWidth = width;</span></span><br><span class="line"><span class="javascript">            ctx.lineCap = <span class="string">&quot;round&quot;</span>;</span></span><br><span class="line"><span class="javascript">            ctx.moveTo(<span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">            ctx.rotate(pos);</span></span><br><span class="line"><span class="javascript">            ctx.lineTo(<span class="number">0</span>, -length);</span></span><br><span class="line"><span class="javascript">            ctx.stroke();</span></span><br><span class="line"><span class="javascript">            ctx.rotate(-pos);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">DrawTime</span>(<span class="params">ctx, radius</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">        </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> hour = date.getHours();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> minute = date.getMinutes();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> second = date.getSeconds();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            hour = hour % <span class="number">12</span>;</span></span><br><span class="line"><span class="javascript">            hour = (hour * <span class="built_in">Math</span>.PI / <span class="number">6</span>) + (minute * <span class="built_in">Math</span>.PI / (<span class="number">6</span> * <span class="number">60</span>)) + (second * <span class="built_in">Math</span>.PI / (<span class="number">360</span> * <span class="number">60</span>));</span></span><br><span class="line"><span class="javascript">            DrawHand(ctx, hour, radius * <span class="number">0.5</span>, radius * <span class="number">0.05</span>);</span></span><br><span class="line"><span class="javascript">            minute = (minute * <span class="built_in">Math</span>.PI / <span class="number">30</span>) + (second * <span class="built_in">Math</span>.PI / (<span class="number">30</span> * <span class="number">60</span>));</span></span><br><span class="line"><span class="javascript">            DrawHand(ctx, minute, radius * <span class="number">0.8</span>, radius * <span class="number">0.03</span>);</span></span><br><span class="line"><span class="javascript">            second = (second * <span class="built_in">Math</span>.PI / <span class="number">30</span>);</span></span><br><span class="line"><span class="javascript">            DrawHand(ctx, second, radius * <span class="number">0.9</span>, radius * <span class="number">0.02</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">DrawString</span>(<span class="params">ctx, radius</span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript">        </span>&#123;</span></span><br><span class="line"><span class="javascript">            ctx.translate(<span class="number">0</span>, -radius * <span class="number">0.25</span>);</span></span><br><span class="line"><span class="javascript">            ctx.font = radius * <span class="number">0.1</span> + <span class="string">&quot;px arial&quot;</span>;</span></span><br><span class="line"><span class="javascript">            ctx.textBaseline = <span class="string">&quot;middle&quot;</span>;</span></span><br><span class="line"><span class="javascript">            ctx.textAlign = <span class="string">&quot;center&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> s = date.getFullYear().toString() + <span class="string">&quot;-&quot;</span></span></span><br><span class="line"><span class="javascript">                + (date.getMonth() + <span class="number">1</span>).toString() + <span class="string">&quot;-&quot;</span></span></span><br><span class="line"><span class="javascript">                + date.getDate().toString() + <span class="string">&quot;  &quot;</span></span></span><br><span class="line"><span class="javascript">                + <span class="string">&quot;星期 &quot;</span> + date.getDay().toString() + <span class="string">&quot;  &quot;</span></span></span><br><span class="line"><span class="javascript">                + date.getHours().toString() + <span class="string">&quot;:&quot;</span></span></span><br><span class="line"><span class="javascript">                + date.getMinutes().toString() + <span class="string">&quot;:&quot;</span></span></span><br><span class="line"><span class="javascript">                + date.getSeconds().toString();</span></span><br><span class="line"><span class="javascript">            ctx.fillText(s, <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            ctx.translate(<span class="number">0</span>, radius * <span class="number">0.25</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网站开发</category>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>网站开发</tag>
        <tag>前端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>[前端开发]网页计算器</title>
    <url>/2021/09/23/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/%5B%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%5D%E7%BD%91%E9%A1%B5%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
    <content><![CDATA[<h1>网页计算器</h1>
<h2 id="效果">效果</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202109231931832.png" alt="image-20210923193111081"></p>
<h2 id="代码">代码</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>计算器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-id">#calc</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: solid <span class="number">1px</span> black;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">                <span class="attribute">background-color</span>: gainsboro;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">border</span>: solid <span class="number">1px</span> black;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">input</span><span class="selector-attr">[type=button]</span>&#123;</span></span><br><span class="line"><span class="css">                <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">                <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            &#125;</span></span><br><span class="line"><span class="css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">cal</span>(<span class="params">btn</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> num=btn.value;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">switch</span> (num)</span></span><br><span class="line"><span class="javascript">                &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">&quot;=&quot;</span>:</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&quot;input&quot;</span>).value = <span class="built_in">eval</span>(<span class="built_in">document</span>.getElementById(<span class="string">&quot;input&quot;</span>).value);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">case</span> <span class="string">&quot;C&quot;</span>:</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&quot;input&quot;</span>).value = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&quot;input&quot;</span>).value = <span class="built_in">document</span>.getElementById(<span class="string">&quot;input&quot;</span>).value + num;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;calc&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;cal(this)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;8&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;cal(this)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;9&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;cal(this)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;×&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;cal(this)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;cal(this)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;cal(this)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;6&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;cal(this)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;cal(this)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;cal(this)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;cal(this)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;cal(this)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;+&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;cal(this)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;c&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;cal(this)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;cal(this)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;cal(this)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;=&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;cal(this)&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网站开发</category>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>网站开发</tag>
        <tag>前端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>[图形学]基础知识-渲染管线</title>
    <url>/2021/09/22/%E5%9B%BE%E5%BD%A2%E5%AD%A6/%5B%E5%9B%BE%E5%BD%A2%E5%AD%A6%5D%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/</url>
    <content><![CDATA[<h1>基础知识-渲染管线</h1>
<h2 id="基本概念">基本概念</h2>
<h3 id="Graphics-Pipeline">Graphics Pipeline</h3>
<p><strong>Graphics Pipeline</strong> （图形渲染管线）：管理 <strong>将3D坐标，转变为屏幕上的有色2D像素</strong> 的过程。也就是将一些原始图形数据，经过各种变化处理最终在屏幕上显示。</p>
<p>Graphics Pipeline 可以被划分为两个主要部分：</p>
<ol>
<li>把3D坐标转换为2D坐标；</li>
<li>把2D坐标转变为实际的有颜色的像素。</li>
</ol>
<h3 id="Shader">Shader</h3>
<p><strong>Shader</strong> （着色器）：运行在 GPU 的小程序，自定义显卡渲染画面的算法，使画面达到我们想要的效果。本质就是一段代码（主流的有 基于 OpenGL 的 <strong>GLSL</strong>、基于 DirectX 的 <strong>HLSL</strong> 等），这段代码的作用是阐述如何绘制每一个顶点的颜色以及最终每一个像素点的颜色。</p>
<h3 id="渲染流程">渲染流程</h3>
<p>我们可以将其分为三个阶段：应用阶段、几何阶段、光栅化阶段。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202112012104820.png" alt="image-20211201192800788"></p>
<h4 id="应用阶段">应用阶段</h4>
<p>由 <strong>CPU</strong> 负责。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202112012104432.png" alt="image-20211201200709582"></p>
<h5 id="1-准备场景数据">1. 准备场景数据</h5>
<p>准备好 <strong>场景数据</strong> ，包括：摄像机的位置、视锥体、场景中包含哪些模型、使用哪些光源等。</p>
<h5 id="2-粗粒度剔除">2. 粗粒度剔除</h5>
<p>处理 <strong>场景数据</strong>， 将 <strong>在摄像机视锥体之外、被其他物品遮挡住</strong> 的物品剔除。</p>
<h5 id="3-设置渲染状态">3. 设置渲染状态</h5>
<p>渲染状态定义了场景中的一个个 <strong>Mesh</strong> 是如何处理的，例如：</p>
<ol>
<li>设置渲染属性：使用哪个 <strong>Shader、Material、光源属性</strong> 来渲染、 <strong>动态静态合批</strong> 、 <strong>GPU Instance</strong> 等；</li>
<li>设置渲染顺序：根据物体的 <strong>Render Queue</strong> 、距离相机的深度 等来设置渲染顺序；</li>
<li>设置渲染目标：将渲染输出到 <strong>屏幕</strong> ，或者是 <strong>RenderTexture</strong> 等地方；</li>
<li>设置渲染模式：使用 <strong>前向渲染</strong> ，或者是 <strong>延迟渲染</strong> 等。</li>
</ol>
<h5 id="4-调用-Draw-Call">4. 调用 Draw Call</h5>
<p>将前面准备好的所有 <strong>渲染所需要的数据</strong> 从 <strong>硬盘</strong> 加载到 <strong>系统内存</strong> 中，然后再加载到 <strong>显存</strong> 中，接着调用 <strong>Draw Call</strong> 。</p>
<p><strong>Draw Call</strong> 就是由 <strong>CPU</strong> 发起、由 <strong>GPU</strong> 接收信息的命令。<strong>CPU</strong> 通过调用 <strong>Draw Call</strong> 来告诉 <strong>GPU</strong> 开始进行一个渲染流程，一个 <strong>Draw Call</strong> 会指向本次调用 <strong>需要渲染的图元列表</strong> 。</p>
<p>（图元是一组表示顶点位置的顶点，基本图元有：点、直线、三角形）</p>
<h4 id="几何阶段">几何阶段</h4>
<p>由 <strong>GPU</strong> 负责，以 <strong>顶点数据</strong> 作为输入，顶点数据是由 <strong>应用阶段</strong> 的 <strong>Draw Call</strong> 指定的。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202112012104415.png" alt="image-20211201200848484"></p>
<h5 id="1-顶点着色器">1. 顶点着色器</h5>
<p>进行顶点相关的一系列操作。通常用来实现顶点的 <strong>空间变换</strong> 、 <strong>顶点着色</strong> 等操作。</p>
<p>它执行 <strong>通过矩阵变换位置（把顶点从 模型空间 变换到 齐次裁剪空间 ）</strong>、<strong>计算照明公式</strong> 来 <strong>生成逐顶点颜色</strong> 、 <strong>生成或变换纹理坐标</strong> 等基于顶点的操作。</p>
<h5 id="2-曲面细分着色器">2. 曲面细分着色器</h5>
<p>用于 <strong>细分图元</strong> ，将 <strong>Mesh</strong> 更加细分，获得更加高精度的模型。</p>
<p>比如：我们需要一个模型在远处比较粗糙，近看的时候更加精致（顶点数更多）。其中一种方案是使用 <strong>LOD</strong> ，但从渲染方面处理也可以使用 <strong>曲面细分着色器</strong> 。</p>
<h5 id="3-几何着色器">3. 几何着色器</h5>
<p>以 <strong>完整的图元</strong> 作为输入数据，可以执行 <strong>创建更多的图元</strong>、 <strong>销毁图元</strong> 、 <strong>图元着色</strong> 等操作。</p>
<p>最简单的一个使用例子就是：比如我们可以将 <strong>一个图形</strong> 通过几何着色器扩展成 <strong>多个图形</strong> 。</p>
<h5 id="4-裁剪">4. 裁剪</h5>
<ol>
<li>对之前变换到 <strong>齐次裁剪空间</strong> 的图元操作，将不在摄像机视野范围内的部分剪裁掉；</li>
<li>剔除某些三角图元的面片，比如控制裁剪物体的正面或者背面。</li>
</ol>
<h5 id="5-屏幕映射">5. 屏幕映射</h5>
<p>把每个图元的坐标从 <strong>标准坐标系 (-1 ~ 1)</strong> 映射到 <strong>窗口坐标系</strong> 上。</p>
<h4 id="光栅化阶段">光栅化阶段</h4>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202112012104815.png" alt="image-20211201204219582"></p>
<h5 id="1-三角形设置">1. 三角形设置</h5>
<p>上个阶段输出的图元是 <strong>三角网格的顶点</strong> ，我们要得到整个三角形（不单单是顶点，还包括三角形内部）的覆盖情况，由顶点变为面，我们需要 <strong>三角形边界的表示方式</strong> 。</p>
<p>计算这样一个 <strong>三角网格的边界</strong> 的过程就是 <strong>三角形设置</strong> 。</p>
<h5 id="2-三角形遍历">2. 三角形遍历</h5>
<p>得到 <strong>三角网格的边界</strong> ，我们要计算得到 <strong>三角形内部的像素</strong>，如果被一个像素被这个三角形覆盖则生成 <strong>片元</strong> 。</p>
<p>每个片元中的信息就是三个顶点信息 <strong>插值</strong> 得到的。</p>
<p>片元并不是真正意义上的一个像素，它比像素的信息更多，包括了：屏幕坐标、深度信息这些 <strong>顶点着色器传递的数据</strong>。</p>
<h5 id="3-逐片元操作-①">3. 逐片元操作 ①</h5>
<p>在 <strong>三角形遍历</strong>  后，片元已经大致分出来了，接下来可以顺便进行 <strong>抗锯齿处理</strong> 与 <strong>提前深度测试</strong> 。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202112012104175.png" alt="image-20211201204330739"></p>
<h6 id="3-1-抗锯齿处理">3.1 抗锯齿处理</h6>
<p>抗锯齿就是为了处理 <strong>用有限离散的像素点去逼近连续的三角形出现的锯齿走样</strong> 现象。</p>
<p>这一步，我们可以执行 <strong>SSAA、MSAA</strong> 等支持 <strong>前向渲染</strong> 的算法来处理抗锯齿。FXAA / TAA 等算法用于后处理。</p>
<p><strong>SSAA</strong> ：超采样反走样（Super Sampling AA），将一个像素点再细分为多个采样点，计算每个采样点的颜色取均值，作为该像素点的颜色</p>
<p><strong>MSAA</strong> ：多采样反走样（Multi-Sampling AA），将一个像素点再细分为多个采样点，计算在三角面内的采样点占总采样点的比值，根据该比值计算该像素点的颜色。</p>
<h6 id="3-2-提前深度测试">3.2 提前深度测试</h6>
<p><strong>提前深度测试</strong> 也就是 <strong>Early-Z</strong> 。</p>
<p>要求片元着色器中 <strong>不能对深度进行修改</strong> ，所以我们先判断片元着色器是否开启 <strong>透明度测试 (Alpha Test)</strong> ，如果没有的话进行 <strong>Early-Z</strong> 。</p>
<p>进行逐片元的深度测试和深度写入，将没通过该深度测试的片元舍弃。</p>
<h5 id="4-片元着色器">4. 片元着色器</h5>
<p>对片元进行纹理采样、颜色汇总等处理，计算一个像素的最终颜色。</p>
<h5 id="5-逐片元操作-②">5. 逐片元操作 ②</h5>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202112012104448.png" alt="image-20211201205510462"></p>
<h6 id="5-1-透明度测试">5.1 透明度测试</h6>
<p>将片元的 <strong>透明度</strong> 进行条件筛选，不满足条件的话（比如小于某个阈值），那么就舍弃该片元。</p>
<h6 id="5-2-模板测试">5.2 模板测试</h6>
<p>将片元的 <strong>模板值</strong> 与缓冲区的模板值比较，（我们自己定义某个模板值与比较条件），不满足条件的话，舍弃该片元。</p>
<h6 id="5-3-深度测试">5.3 深度测试</h6>
<p>将片元的 <strong>深度值</strong> 与深度缓冲区的值进行比较，不满足条件的话（片元深度更大），舍弃该片元。</p>
<h6 id="5-4-颜色混合">5.4 颜色混合</h6>
<p>将片元颜色与存在深度缓冲区中的颜色值进行混合。</p>
<h2 id="OpenGL-绘制图形">OpenGL 绘制图形</h2>
<h3 id="Vertex">Vertex</h3>
<ol>
<li>
<p><strong>创建输入顶点数据</strong><br>
输入<strong>Normalized Device Coordinates, NDC)</strong>，也就是 -1.0 到 1.0 的值。</p>
</li>
<li>
<p><strong>创建、绑定 VAO</strong><br>
<strong>Vertex Array Object</strong> (顶点数组对象)，顶点属性调用都会储存在 VAO 中。<br>
当配置顶点属性指针时，只需要将调用执行一次，之后再绘制物体的时候绑定相应的 VAO 即可。不同顶点数据和属性配置之间切换只需要绑定不同的VAO。</p>
</li>
<li>
<p><strong>创建、绑定 VBO</strong><br>
<strong>Vertex Buffer Object</strong> (顶点缓冲对象)，通过 VBO 管理顶点数据储存在显卡的内存。<br>
绑定后缓冲调用都会用来配置当前绑定的缓冲。</p>
</li>
<li>
<p><strong>创建、绑定 EBO</strong><br>
<strong>Element Buffer Object</strong> (索引缓冲对象)，专门储存索引，调用这些顶点的索引来决定该绘制哪个顶点。<br>
为了防止同一个点被多次渲染，我们用索引绘制(Indexed Drawing)来处理，把索引复制到缓冲里，使用当前绑定的索引缓冲对象中的索引进行绘制。</p>
</li>
</ol>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202109231655927.png" alt="image-20210922211303724" style="zoom:33%;" />
<ol start="5">
<li><strong>链接顶点属性</strong><br>
指定如何解析顶点数据（应用到逐个顶点属性上）。指定输入数据的哪一个部分对应顶点着色器的哪一个顶点属性。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> vertices0[] = &#123;</span><br><span class="line">	<span class="number">-0.9f</span>, <span class="number">0.9f</span>, <span class="number">0.0f</span>,</span><br><span class="line">	<span class="number">-0.8f</span>, <span class="number">0.8f</span>, <span class="number">0.0f</span>,</span><br><span class="line">	<span class="number">-0.9f</span>, <span class="number">0.7f</span>, <span class="number">0.0f</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> vertices1[] = &#123;</span><br><span class="line">	<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.0f</span>,</span><br><span class="line">	<span class="number">0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>,</span><br><span class="line">	<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>,</span><br><span class="line">	<span class="number">-0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.0f</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> indices1[] = &#123;</span><br><span class="line">	<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>,</span><br><span class="line">	<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> VAO[<span class="number">2</span>], VBO[<span class="number">2</span>], EBO;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitializeVertex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// Generate</span></span><br><span class="line">	<span class="built_in">glGenVertexArrays</span>(<span class="number">2</span>, VAO);</span><br><span class="line">	<span class="built_in">glGenBuffers</span>(<span class="number">2</span>, VBO);</span><br><span class="line">	<span class="built_in">glGenBuffers</span>(<span class="number">1</span>, &amp;EBO);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Bind 0</span></span><br><span class="line">	<span class="built_in">glBindVertexArray</span>(VAO[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="built_in"><span class="keyword">sizeof</span></span>(vertices0), vertices0, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glVertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">3</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>), (<span class="keyword">void</span>*)<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">glEnableVertexAttribArray</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Bind 1</span></span><br><span class="line">	<span class="built_in">glBindVertexArray</span>(VAO[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="built_in"><span class="keyword">sizeof</span></span>(vertices1), vertices1, GL_STATIC_DRAW);</span><br><span class="line">	<span class="built_in">glBufferData</span>(GL_ELEMENT_ARRAY_BUFFER, <span class="built_in"><span class="keyword">sizeof</span></span>(indices1), indices1, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glVertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">3</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>), (<span class="keyword">void</span>*)<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">glEnableVertexAttribArray</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Shader-2">Shader</h3>
<ol>
<li>
<p><strong>创建、编译 Vertex Shader</strong><br>
<strong>Vertex Shader</strong> (顶点着色器)，处理顶点操作。<br>
用 <strong>GLSL</strong> (OpenGL Shading Language) 编写顶点着色器，然后编译这个着色器，这样我们就可以在程序中使用它。</p>
</li>
<li>
<p><strong>创建、编译 Fragment Shader</strong><br>
<strong>Fragment Shader</strong> (片元着色器)，处理片元操作，计算像素最后的颜色输出。</p>
</li>
<li>
<p><strong>链接着色器</strong><br>
Shader Program Object 是多个着色器合并之后并最终链接完成的版本。<br>
如果要使用刚才编译的着色器我们必须把它们 <strong>链接</strong> 在一个 Shader 上，之后在渲染对象的时候激活这个 Shader。已激活着色器程序的着色器将在我们发送渲染调用的时候被使用。<br>
之所以将这部放到最后，是因为我们创建、编译完成的一个 <strong>Vertex Shader</strong> 或一个 <strong>Fragment Shader</strong> 可以链接给多个不同的 Shader。</p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> shaderProgram;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* vertexShaderSource =</span><br><span class="line">	<span class="string">&quot;#version 330 core\n&quot;</span></span><br><span class="line">	<span class="string">&quot;layout (location = 0) in vec3 aPos;\n&quot;</span></span><br><span class="line">	<span class="string">&quot;void main()\n&quot;</span></span><br><span class="line">	<span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">	<span class="string">&quot;   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n&quot;</span></span><br><span class="line">	<span class="string">&quot;&#125;\0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* fragmentShaderSource =</span><br><span class="line">	<span class="string">&quot;#version 330 core\n&quot;</span></span><br><span class="line">	<span class="string">&quot;out vec4 FragColor;\n&quot;</span></span><br><span class="line">	<span class="string">&quot;void main()\n&quot;</span></span><br><span class="line">	<span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">	<span class="string">&quot;   FragColor = vec4(1.0f, 1.0f, 1.0f, 1.0f);\n&quot;</span></span><br><span class="line">	<span class="string">&quot;&#125;\0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitializeShader</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	shaderProgram = <span class="built_in">glCreateProgram</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> vertexShader = <span class="built_in">glCreateShader</span>(GL_VERTEX_SHADER);</span><br><span class="line">	<span class="built_in">glShaderSource</span>(vertexShader, <span class="number">1</span>, &amp;vertexShaderSource, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">glCompileShader</span>(vertexShader);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> fragmentShader = <span class="built_in">glCreateShader</span>(GL_FRAGMENT_SHADER);</span><br><span class="line">	<span class="built_in">glShaderSource</span>(fragmentShader, <span class="number">1</span>, &amp;fragmentShaderSource, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">glCompileShader</span>(fragmentShader);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// link shaders</span></span><br><span class="line">	<span class="built_in">glAttachShader</span>(shaderProgram, vertexShader);</span><br><span class="line">	<span class="built_in">glAttachShader</span>(shaderProgram, fragmentShader);</span><br><span class="line">	<span class="built_in">glLinkProgram</span>(shaderProgram);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glDeleteShader</span>(vertexShader);</span><br><span class="line">	<span class="built_in">glDeleteShader</span>(fragmentShader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="完整代码">完整代码</h3>
<p>以输出 一个三角形 和 一个矩形（两个三角形组成）为例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GLEW_STATIC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/glew.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GL/GL.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region Setting</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> GLFWwindow* window;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_WIDTH = <span class="number">800</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_HEIGHT = <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitializeWindow</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">glfwInit</span>();</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class="line"></span><br><span class="line">	window = <span class="built_in">glfwCreateWindow</span>(SCR_WIDTH, SCR_HEIGHT, <span class="string">&quot;Test&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">glfwMakeContextCurrent</span>(window);</span><br><span class="line">	<span class="built_in">glfwSetFramebufferSizeCallback</span>(window, [](GLFWwindow* window, <span class="keyword">int</span> width, <span class="keyword">int</span> height)&#123; <span class="built_in">glViewport</span>(<span class="number">0</span>, <span class="number">0</span>, width, height); &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	glewExperimental = GL_TRUE;</span><br><span class="line">	<span class="built_in">glewInit</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ProcessInput</span><span class="params">(GLFWwindow* window)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">glfwGetKey</span>(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)</span><br><span class="line">		<span class="built_in">glfwSetWindowShouldClose</span>(window, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region InitializeVertex</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> vertices0[] = &#123;</span><br><span class="line">	<span class="number">-0.9f</span>, <span class="number">0.9f</span>, <span class="number">0.0f</span>,</span><br><span class="line">	<span class="number">-0.8f</span>, <span class="number">0.8f</span>, <span class="number">0.0f</span>,</span><br><span class="line">	<span class="number">-0.9f</span>, <span class="number">0.7f</span>, <span class="number">0.0f</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> vertices1[] = &#123;</span><br><span class="line">	<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.0f</span>,</span><br><span class="line">	<span class="number">0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>,</span><br><span class="line">	<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>,</span><br><span class="line">	<span class="number">-0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.0f</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> indices1[] = &#123;</span><br><span class="line">	<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>,</span><br><span class="line">	<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> VAO[<span class="number">2</span>], VBO[<span class="number">2</span>], EBO;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitializeVertex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// Generate</span></span><br><span class="line">	<span class="built_in">glGenVertexArrays</span>(<span class="number">2</span>, VAO);</span><br><span class="line">	<span class="built_in">glGenBuffers</span>(<span class="number">2</span>, VBO);</span><br><span class="line">	<span class="built_in">glGenBuffers</span>(<span class="number">1</span>, &amp;EBO);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Bind 0</span></span><br><span class="line">	<span class="built_in">glBindVertexArray</span>(VAO[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="built_in"><span class="keyword">sizeof</span></span>(vertices0), vertices0, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glVertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">3</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>), (<span class="keyword">void</span>*)<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">glEnableVertexAttribArray</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Bind 1</span></span><br><span class="line">	<span class="built_in">glBindVertexArray</span>(VAO[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">glBindBuffer</span>(GL_ARRAY_BUFFER, VBO[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">glBindBuffer</span>(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glBufferData</span>(GL_ARRAY_BUFFER, <span class="built_in"><span class="keyword">sizeof</span></span>(vertices1), vertices1, GL_STATIC_DRAW);</span><br><span class="line">	<span class="built_in">glBufferData</span>(GL_ELEMENT_ARRAY_BUFFER, <span class="built_in"><span class="keyword">sizeof</span></span>(indices1), indices1, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glVertexAttribPointer</span>(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">3</span> * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span>), (<span class="keyword">void</span>*)<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">glEnableVertexAttribArray</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region InitializeShader</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> shaderProgram;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* vertexShaderSource =</span><br><span class="line">	<span class="string">&quot;#version 330 core\n&quot;</span></span><br><span class="line">	<span class="string">&quot;layout (location = 0) in vec3 aPos;\n&quot;</span></span><br><span class="line">	<span class="string">&quot;void main()\n&quot;</span></span><br><span class="line">	<span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">	<span class="string">&quot;   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n&quot;</span></span><br><span class="line">	<span class="string">&quot;&#125;\0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* fragmentShaderSource =</span><br><span class="line">	<span class="string">&quot;#version 330 core\n&quot;</span></span><br><span class="line">	<span class="string">&quot;out vec4 FragColor;\n&quot;</span></span><br><span class="line">	<span class="string">&quot;void main()\n&quot;</span></span><br><span class="line">	<span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line">	<span class="string">&quot;   FragColor = vec4(1.0f, 1.0f, 1.0f, 1.0f);\n&quot;</span></span><br><span class="line">	<span class="string">&quot;&#125;\0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">InitializeShader</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	shaderProgram = <span class="built_in">glCreateProgram</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> vertexShader = <span class="built_in">glCreateShader</span>(GL_VERTEX_SHADER);</span><br><span class="line">	<span class="built_in">glShaderSource</span>(vertexShader, <span class="number">1</span>, &amp;vertexShaderSource, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">glCompileShader</span>(vertexShader);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> fragmentShader = <span class="built_in">glCreateShader</span>(GL_FRAGMENT_SHADER);</span><br><span class="line">	<span class="built_in">glShaderSource</span>(fragmentShader, <span class="number">1</span>, &amp;fragmentShaderSource, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">glCompileShader</span>(fragmentShader);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// link shaders</span></span><br><span class="line">	<span class="built_in">glAttachShader</span>(shaderProgram, vertexShader);</span><br><span class="line">	<span class="built_in">glAttachShader</span>(shaderProgram, fragmentShader);</span><br><span class="line">	<span class="built_in">glLinkProgram</span>(shaderProgram);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glDeleteShader</span>(vertexShader);</span><br><span class="line">	<span class="built_in">glDeleteShader</span>(fragmentShader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Render</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">glClearColor</span>(<span class="number">0.2f</span>, <span class="number">0.3f</span>, <span class="number">0.3f</span>, <span class="number">1.0f</span>);</span><br><span class="line">	<span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 0</span></span><br><span class="line">	<span class="built_in">glUseProgram</span>(shaderProgram);</span><br><span class="line">	<span class="built_in">glBindVertexArray</span>(VAO[<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">glDrawArrays</span>(GL_TRIANGLES, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 1</span></span><br><span class="line">	<span class="built_in">glUseProgram</span>(shaderProgram);</span><br><span class="line">	<span class="built_in">glBindVertexArray</span>(VAO[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">glDrawElements</span>(GL_TRIANGLES, <span class="number">6</span>, GL_UNSIGNED_INT, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">InitializeWindow</span>();</span><br><span class="line">	<span class="built_in">InitializeVertex</span>();</span><br><span class="line">	<span class="built_in">InitializeShader</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">glfwWindowShouldClose</span>(window))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">ProcessInput</span>(window);</span><br><span class="line"></span><br><span class="line">		<span class="built_in">Render</span>();</span><br><span class="line"></span><br><span class="line">		<span class="built_in">glfwSwapBuffers</span>(window);</span><br><span class="line">		<span class="built_in">glfwPollEvents</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">glfwTerminate</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>图形学</category>
      </categories>
      <tags>
        <tag>图形学</tag>
      </tags>
  </entry>
  <entry>
    <title>[UE]CanvasPanelSlot布局规则</title>
    <url>/2021/08/12/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/UI/%5BUE%5DCanvasPanelSlot%E5%B8%83%E5%B1%80%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<h1>CanvasPanelSlot 布局规则</h1>
<h2 id="UMG-中的-CanvasPanelSlot">UMG 中的 CanvasPanelSlot</h2>
<p>我们先来看一下在 UI 面板中，CanvasPanelSlot 有哪些信息：</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202108121642491.png" alt="image-20210812153142702" style="zoom:50%;" />
<h2 id="源码中的-CanvasPanelSlot">源码中的 CanvasPanelSlot</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UMG_API</span> <span class="title">UCanvasPanelSlot</span> :</span> <span class="keyword">public</span> UPanelSlot</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">GENERATED_UCLASS_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** The anchoring information for the slot */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadOnly, Category=<span class="string">&quot;Layout|Canvas Slot&quot;</span>)</span><br><span class="line">	FAnchorData LayoutData;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** When AutoSize is true we use the widget&#x27;s desired size */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadOnly, Category=<span class="string">&quot;Layout|Canvas Slot&quot;</span>, AdvancedDisplay, meta=( DisplayName=<span class="string">&quot;Size To Content&quot;</span> ))</span><br><span class="line">	<span class="keyword">bool</span> bAutoSize;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** The order priority this widget is rendered in.  Higher values are rendered last (and so they will appear to be on top). */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadOnly, Category=<span class="string">&quot;Layout|Canvas Slot&quot;</span>)</span><br><span class="line">	int32 ZOrder;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/*其余信息*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FAnchorData</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">GENERATED_USTRUCT_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Offset. */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category=AnchorData)</span><br><span class="line">	FMargin Offsets;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/** Anchors. */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category=AnchorData)</span><br><span class="line">	FAnchors Anchors;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Alignment is the pivot point of the widget.  Starting in the upper left at (0,0),</span></span><br><span class="line"><span class="comment">	 * ending in the lower right at (1,1).  Moving the alignment point allows you to move</span></span><br><span class="line"><span class="comment">	 * the origin of the widget.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="built_in">UPROPERTY</span>(EditAnywhere, BlueprintReadWrite, Category=AnchorData)</span><br><span class="line">	FVector2D Alignment;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们会发现，在面板中的 <code>Position</code> 与 <code>Size</code>，在源码中也是以 <code>Offsets</code> 形式存在的。</p>
<p><code>Anchor.Minimum.X / Anchor.Minimum.Y</code>、<code>Anchor.Maximum.X / Anchor.Maximum.Y</code>、<code>Alignment.X / Alignment.Y</code>，均是以 <strong>比例</strong> 的形式给出。</p>
<h2 id="布局规则">布局规则</h2>
<p>实际上，如果我们改动 Anchor，在 <code>Minimum.X ≠ Maximum.X</code> 的时候，<code>Position X</code> 会显示为 <code>Offset Left</code>，<code>Size X</code> 会显示为 <code>OffsetRight</code>：</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202108121648711.png" alt="image-20210812164808737" style="zoom:67%;" />
<p>在控件绝对位置不变的情况下，修改锚点的位置，会导致此时这两个值会改变非常多，对绝对位置的转换造成了困难。</p>
<p>接下来简单整理下其规则：</p>
<table>
<thead>
<tr>
<th><code>Minimum.X</code> = <code>Maximum.X</code></th>
<th><code>Minimum.X</code> ≠ <code>Maximum.X</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202108121643933.png" alt="image-20210812160759667" style="zoom:25%;" /></td>
<td><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202108121643765.png" alt="image-20210812160922400" style="zoom:25%;" /></td>
</tr>
<tr>
<td><code>Alignment</code> 有用：<br /><code>Alignment.X * Size.X</code> 确定了 “对齐点” 的横坐标偏移量。<br />当 <code>Alignment.X</code> 为 0 时，对齐点在最左边；<br />当 <code>Alignment.X</code> 为 1 时，对齐点在最右边；</td>
<td><code>Alignment</code> 无用</td>
</tr>
<tr>
<td>采用：<code>Position X</code><br />（表示 <code>Anchor_Min</code> 横坐标 到 对齐点.X 的距离）<br /><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202108121643173.png" alt="image-20210812162308662" style="zoom:33%;" /></td>
<td>采用：<code>Offset Left</code> <br />（表示 Anchor_Min 横坐标 到 控件左侧的距离）<br /><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202108121643621.png" alt="image-20210812163026182" style="zoom:33%;" /></td>
</tr>
<tr>
<td>采用：<code>Size X</code><br />（表示控件自身的横坐标大小）<br /><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202108121643732.png" alt="image-20210812162439904" style="zoom: 33%;" /></td>
<td>采用 <code>Offset Right</code> <br />（表示 <code>Anchor_Max</code> 横坐标到 控件右侧的距离）<br /><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202108121643326.png" alt="image-20210812163222501" style="zoom:33%;" /></td>
</tr>
<tr>
<td><code>AbsolutePosition.X = AnchorMinimumPositon.X + Offsets.Left - Alignment.X * Offsets.Right</code></td>
<td><code>AbsolutePosition.X = MinimumPositon.X + Offsets.Left</code></td>
</tr>
<tr>
<td><code> AbsoluteSize.X = Offsets.Right</code></td>
<td><code>AbsoluteSize.X = AnchorMaximumPositon.X - AnchorMinimumPositon.X - Offsets.Left - Offsets.Right</code></td>
</tr>
</tbody>
</table>
<p>其中 <code>AnchorMinimumPosition.X</code> = <code>Anchor.Minimum.X * 父控件的 Size.X</code>。</p>
<p>对于 Y 轴的处理也是类似的。<code>Position Y</code> 对应 <code>Offset Top</code>，<code>Size Y</code> 对应 <code>Offset Bottom</code>。</p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>UI</category>
      </categories>
      <tags>
        <tag>UI</tag>
        <tag>UE</tag>
      </tags>
  </entry>
  <entry>
    <title>[UE]读取本地字体文件</title>
    <url>/2021/08/12/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%B7%A5%E5%85%B7%E6%B5%81/%5BUE%5D%E8%AF%BB%E5%8F%96%E6%9C%AC%E5%9C%B0%E5%AD%97%E4%BD%93%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1>读取本地字体文件</h1>
<h2 id="效果">效果</h2>
<p>通过代码读取指定目录下的字体文件 (.ttf / .otf) 转换为 UE4 内部可用的 Font</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202108121737676.png" alt="image-20210812171850767" style="zoom:50%;" />
<h2 id="步骤">步骤</h2>
<ol>
<li>根据 FontName 在目录下寻找字体文件</li>
<li>生成 FontFace</li>
<li>生成字体对象</li>
<li>保存资源</li>
</ol>
<h2 id="根据-FontName-在目录下寻找字体文件">根据 FontName 在目录下寻找字体文件</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">FString FontPath;</span><br><span class="line"><span class="keyword">const</span> FString FontPathTTF = FontDirectory.Path + <span class="built_in">TEXT</span>(<span class="string">&quot;/&quot;</span>) + FontNameStr + <span class="built_in">TEXT</span>(<span class="string">&quot;.ttf&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> FString FontPathOTF = FontDirectory.Path + <span class="built_in">TEXT</span>(<span class="string">&quot;/&quot;</span>) + FontNameStr + <span class="built_in">TEXT</span>(<span class="string">&quot;.otf&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否存在 TTF / OTF 文件</span></span><br><span class="line"><span class="keyword">if</span> (FPlatformFileManager::<span class="built_in">Get</span>().<span class="built_in">GetPlatformFile</span>().<span class="built_in">FileExists</span>(*FontPathTTF)) FontPath = FontPathTTF;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (FPlatformFileManager::<span class="built_in">Get</span>().<span class="built_in">GetPlatformFile</span>().<span class="built_in">FileExists</span>(*FontPathOTF)) FontPath = FontPathOTF;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 不存在名字为 FontNameStr 的字体文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="生成-FontFace">生成 FontFace</h2>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202108121737983.png" alt="image-20210812171924508" style="zoom: 50%;" />
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取字体数据</span></span><br><span class="line">TArray&lt;uint8&gt; FontData;</span><br><span class="line"><span class="keyword">if</span> (!FFileHelper::<span class="built_in">LoadFileToArray</span>(FontData, *FontPath))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 无法解析数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FontFace-&gt;FontFaceData-&gt;<span class="built_in">SetData</span>(<span class="built_in">MoveTemp</span>(FontData));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (FontFace)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* 执行之后的操作 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="生成字体对象">生成字体对象</h2>
<p>根据刚才生成的 FontFace 生成一个默认的 Font，就像使用拖入生成字体文件时一样：</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202108121737101.png" alt="image-20210812171939351" style="zoom:33%;" />
<p>（即模拟此时选中 <strong>Yes</strong> 时的操作）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先生成一个空的字体对象</span></span><br><span class="line">Font = NewObject&lt;UFont&gt;(FontPackage, <span class="built_in">FName</span>(*(FontNameStr + <span class="built_in">TEXT</span>(<span class="string">&quot;_FONT&quot;</span>))), RF_Public | RF_Standalone | RF_MarkAsRootSet | RF_Transactional);</span><br><span class="line"></span><br><span class="line">Font-&gt;FontCacheType = EFontCacheType::Runtime;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用刚才生成的 FontFace 生成一个默认字体</span></span><br><span class="line">FTypefaceEntry&amp; DefaultTypefaceEntry = Font-&gt;CompositeFont.DefaultTypeface.Fonts[Font-&gt;CompositeFont.DefaultTypeface.Fonts.<span class="built_in">AddDefaulted</span>()];</span><br><span class="line">DefaultTypefaceEntry.Name = <span class="string">&quot;Default&quot;</span>;</span><br><span class="line">DefaultTypefaceEntry.Font = <span class="built_in">FFontData</span>(FontFace);</span><br></pre></td></tr></table></figure>
<h2 id="保存资源">保存资源</h2>
<p>首先我们要确定想要生成的 Font 所在的位置，也就是要确定 Package 的位置，也就是确定 Path：</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202108121737934.png" alt="image-20210812172807755" style="zoom:50%;" />
<p>Package 的位置由 <code>MountPoint</code> 开始，这个 <code>MountPoint</code> 就是类似 <code>/Game</code>、<code>/Engine</code> 这样的东西；</p>
<p>如果我们需要 <strong>在指定目录保存这些文件</strong>，比如我们不想在 <code>/Game</code>、<code>/Engine</code> 的目录写入这些信息，想在自己的插件目录、其它本地目录保存，那么我们需要先注册 MountPoint：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Register mount point to save assets</span></span><br><span class="line">FPackageName::<span class="built_in">RegisterMountPoint</span>(<span class="string">&quot;/你想的 MountPoint 名字/&quot;</span>,  对应的路径);</span><br></pre></td></tr></table></figure>
<p>需要注意的是，MountPoint 一般直接使用 <code>/Game</code> 或者 <code>/Engine</code>，如果我们的 MountPoint 是自己给定的，有可能就无法在 UMG 中搜索到：</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202108121737045.png" alt="image-20210812173227245" style="zoom:50%;" />
<p>接着我们：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">FString PackageName = MountPointName + <span class="built_in">TEXT</span>(<span class="string">&quot;/fonts/&quot;</span>) + FontNameStr;</span><br><span class="line">UPackage* FontPackage = <span class="built_in">CreatePackage</span>(<span class="literal">nullptr</span>, *PackageName);</span><br><span class="line">FontPackage-&gt;<span class="built_in">FullyLoad</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 生成字体 */</span></span><br><span class="line"></span><br><span class="line">FontPackage-&gt;<span class="built_in">MarkPackageDirty</span>();</span><br><span class="line">FAssetRegistryModule::<span class="built_in">AssetCreated</span>(Font);</span><br><span class="line"></span><br><span class="line">FString PackageFileName = FPackageName::<span class="built_in">LongPackageNameToFilename</span>(PackageName, FPackageName::<span class="built_in">GetAssetPackageExtension</span>());</span><br><span class="line"></span><br><span class="line">UPackage::<span class="built_in">SavePackage</span>(FontPackage, Font, EObjectFlags::RF_Public | EObjectFlags::RF_Standalone, *PackageFileName);</span><br></pre></td></tr></table></figure>
<h2 id="完整代码">完整代码</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">UObject* <span class="title">CreateFontObject</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 设置一开始默认字体，若生成失败则返回默认字体</span></span><br><span class="line">	UFont* Font = GEngine-&gt;<span class="built_in">GetSmallFont</span>();</span><br><span class="line">	</span><br><span class="line">	FString FontPath;</span><br><span class="line">	<span class="keyword">const</span> FString FontPathTTF = FontDirectory.Path + <span class="built_in">TEXT</span>(<span class="string">&quot;/&quot;</span>) + FontNameStr + <span class="built_in">TEXT</span>(<span class="string">&quot;.ttf&quot;</span>);</span><br><span class="line">	<span class="keyword">const</span> FString FontPathOTF = FontDirectory.Path + <span class="built_in">TEXT</span>(<span class="string">&quot;/&quot;</span>) + FontNameStr + <span class="built_in">TEXT</span>(<span class="string">&quot;.otf&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (FPlatformFileManager::<span class="built_in">Get</span>().<span class="built_in">GetPlatformFile</span>().<span class="built_in">FileExists</span>(*FontPathTTF)) FontPath = FontPathTTF;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (FPlatformFileManager::<span class="built_in">Get</span>().<span class="built_in">GetPlatformFile</span>().<span class="built_in">FileExists</span>(*FontPathOTF)) FontPath = FontPathOTF;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">        <span class="comment">// 不存在名字为 FontNameStr 的字体文件</span></span><br><span class="line">		<span class="keyword">return</span> Font;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	FString PackageName = MountPointName + <span class="built_in">TEXT</span>(<span class="string">&quot;/fonts/&quot;</span>) + FontNameStr;</span><br><span class="line">	UPackage* FontPackage = <span class="built_in">CreatePackage</span>(<span class="literal">nullptr</span>, *PackageName);</span><br><span class="line">	FontPackage-&gt;<span class="built_in">FullyLoad</span>();</span><br><span class="line"></span><br><span class="line">	UFontFace* FontFace = NewObject&lt;UFontFace&gt;(FontPackage, <span class="built_in">FName</span>(*FontNameStr), RF_Public | RF_Standalone | RF_MarkAsRootSet);</span><br><span class="line">	FontFace-&gt;SourceFilename = FontNameStr;</span><br><span class="line"></span><br><span class="line">	TArray&lt;uint8&gt; FontData;</span><br><span class="line">	<span class="keyword">if</span> (!FFileHelper::<span class="built_in">LoadFileToArray</span>(FontData, *FontPath))</span><br><span class="line">	&#123;</span><br><span class="line">        <span class="comment">// 无法解析数据</span></span><br><span class="line">		<span class="keyword">return</span> Font;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	FontFace-&gt;FontFaceData-&gt;<span class="built_in">SetData</span>(<span class="built_in">MoveTemp</span>(FontData));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (FontFace)</span><br><span class="line">	&#123;</span><br><span class="line">		Font = NewObject&lt;UFont&gt;(FontPackage, <span class="built_in">FName</span>(*(FontNameStr + <span class="built_in">TEXT</span>(<span class="string">&quot;_FONT&quot;</span>))), RF_Public | RF_Standalone | RF_MarkAsRootSet | RF_Transactional);</span><br><span class="line">		</span><br><span class="line">		Font-&gt;FontCacheType = EFontCacheType::Runtime;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Add a default typeface referencing the newly created font face</span></span><br><span class="line">		FTypefaceEntry&amp; DefaultTypefaceEntry = Font-&gt;CompositeFont.DefaultTypeface.Fonts[Font-&gt;CompositeFont.DefaultTypeface.Fonts.<span class="built_in">AddDefaulted</span>()];</span><br><span class="line">		DefaultTypefaceEntry.Name = <span class="string">&quot;Default&quot;</span>;</span><br><span class="line">		DefaultTypefaceEntry.Font = <span class="built_in">FFontData</span>(FontFace);</span><br><span class="line"></span><br><span class="line">		FontPackage-&gt;<span class="built_in">MarkPackageDirty</span>();</span><br><span class="line">		FAssetRegistryModule::<span class="built_in">AssetCreated</span>(Font);</span><br><span class="line">		</span><br><span class="line">		FString PackageFileName = FPackageName::<span class="built_in">LongPackageNameToFilename</span>(PackageName, FPackageName::<span class="built_in">GetAssetPackageExtension</span>());</span><br><span class="line"></span><br><span class="line">		UPackage::<span class="built_in">SavePackage</span>(FontPackage, Font, EObjectFlags::RF_Public | EObjectFlags::RF_Standalone, *PackageFileName);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">        <span class="comment">// 不存在 FontFace，无法生成 Font</span></span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">return</span> Font;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考源码">参考源码</h2>
<p><code>EditorFactories : UFontFileImportFactory</code>：生成字体的工厂</p>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>工具流</category>
      </categories>
      <tags>
        <tag>工具流</tag>
        <tag>UE</tag>
      </tags>
  </entry>
  <entry>
    <title>[UE]读取与导出本地图片</title>
    <url>/2021/08/12/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%B7%A5%E5%85%B7%E6%B5%81/%5BUE%5D%E8%AF%BB%E5%8F%96%E4%B8%8E%E5%AF%BC%E5%87%BA%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h1>读取与导出本地图片</h1>
<h2 id="效果">效果</h2>
<ol>
<li>
<p>通过代码读取本地的 png 图片（可自己扩展其它类型）转换为 UE4 内部可用的 Texture2D；</p>
</li>
<li>
<p>利用 UE4 内的 Texture2D 在本地指定目录下生成对应 png 图片；</p>
</li>
<li>
<p>利用 UE4 内的 Sprite 在本地指定目录下生成对应的 png 图片。</p>
</li>
</ol>
<h2 id="PNG-Texture2D">PNG -&gt; Texture2D</h2>
<h3 id="分析">分析</h3>
<ol>
<li>读取指定目录的 png 图片，将信息存入数组 RawFileData</li>
<li>用 ImageWrapper 来保存 RawFileData 转为可用信息</li>
<li>生成空的 Texture</li>
<li>将数据写入 Texture 中</li>
<li>保存资源</li>
</ol>
<h3 id="读取指定目录的-png-图片，将信息存入数组-RawFileData">读取指定目录的 png 图片，将信息存入数组 RawFileData</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> FString PicturePath = ImageDirectory.Path + <span class="built_in">TEXT</span>(<span class="string">&quot;/&quot;</span>) + ImageName + <span class="built_in">TEXT</span>(<span class="string">&quot;.png&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!FPlatformFileManager::<span class="built_in">Get</span>().<span class="built_in">GetPlatformFile</span>().<span class="built_in">FileExists</span>(*PicturePath))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 不存在 PicturePath 文件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TArray&lt;uint8&gt; RawFileData;</span><br><span class="line"><span class="keyword">if</span> (!FFileHelper::<span class="built_in">LoadFileToArray</span>(RawFileData, *PicturePath))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 无法解析 PicturePath</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="用-ImageWrapper-来保存-RawFileData-转为可用信息">用 ImageWrapper 来保存 RawFileData 转为可用信息</h3>
<p>需要依赖模块：<code>ImageWrapper </code>，包含头文件：<code>IImageWrapper.h</code>、<code>IImageWrapperModule.h</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">IImageWrapperModule&amp; ImageWrapperModule = FModuleManager::LoadModuleChecked&lt;IImageWrapperModule&gt;(<span class="string">&quot;ImageWrapper&quot;</span>);</span><br><span class="line"></span><br><span class="line">TSharedPtr&lt;IImageWrapper&gt; ImageWrapper = ImageWrapperModule.<span class="built_in">CreateImageWrapper</span>(EImageFormat::PNG);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ImageWrapper.<span class="built_in">IsValid</span>() &amp;&amp; ImageWrapper-&gt;<span class="built_in">SetCompressed</span>(RawFileData.<span class="built_in">GetData</span>(), RawFileData.<span class="built_in">Num</span>()))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> TArray&lt;uint8&gt;* UncompressedRGBA = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ERGBFormat::BGRA 为 RGB 的格式</span></span><br><span class="line">    <span class="comment">// 第二个参数为通道的位深度，通常为 8</span></span><br><span class="line">    <span class="comment">// UncompressedRGBA 保存了uncompressed raw data.</span></span><br><span class="line">    <span class="keyword">if</span> (ImageWrapper-&gt;<span class="built_in">GetRaw</span>(ERGBFormat::BGRA, <span class="number">8</span>, UncompressedRGBA))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* 执行接下来的操作 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="生成空的-Texture">生成空的 Texture</h3>
<p>首先我们要确定想要生成的 Texture 所在的位置，也就是要确定 Package 的位置，也就是确定 Path：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202108121427037.png" alt="image-20210812142156093.png"></p>
<p>Package 的位置由 <code>MountPoint</code> 开始，这个 <code>MountPoint</code> 就是类似 <code>/Game</code>、<code>/Engine</code> 这样的东西；</p>
<p>如果我们需要 <strong>在指定目录保存这些文件</strong>，比如我们不想在 <code>/Game</code>、<code>/Engine</code> 的目录写入这些信息，想在自己的插件目录、其它本地目录保存，那么我们需要先注册 MountPoint：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Register mount point to save assets</span></span><br><span class="line">FPackageName::<span class="built_in">RegisterMountPoint</span>(<span class="string">&quot;/你想的 MountPoint 名字/&quot;</span>,  对应的路径);</span><br></pre></td></tr></table></figure>
<p>接着我们：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> FString PackageName = MountPointName + <span class="built_in">TEXT</span>(<span class="string">&quot;/textures/&quot;</span>) + ImageName;</span><br><span class="line"></span><br><span class="line">UPackage* TexturePackage = <span class="built_in">CreatePackage</span>(<span class="literal">nullptr</span>, *PackageName);</span><br><span class="line">TexturePackage-&gt;<span class="built_in">FullyLoad</span>();</span><br><span class="line"></span><br><span class="line">Texture = NewObject&lt;UTexture2D&gt;(TexturePackage, <span class="built_in">FName</span>(*ImageName), RF_Public | RF_Standalone | RF_MarkAsRootSet);</span><br></pre></td></tr></table></figure>
<h3 id="将数据写入-Texture-中">将数据写入 Texture 中</h3>
<p>我们生成的空 Texture 会默认采用 Mipmap 压缩，但是显然这不一定合理。</p>
<p>如果 边长 不是 <strong>2 的幂次方</strong>，则不能使用 Mipmap 压缩，否则会出现错误，我们可以用 <code>x &amp; (x - 1)</code> 来判断 <code>x</code> 是否是 2 的幂次方，如果 <code>x &amp; (x - 1) == 0</code> 则说明是，否则不是 。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">int32 SizeX = ImageWrapper-&gt;<span class="built_in">GetWidth</span>();</span><br><span class="line">int32 SizeY = ImageWrapper-&gt;<span class="built_in">GetHeight</span>();</span><br><span class="line"><span class="keyword">const</span> EPixelFormat PixelFormat = PF_B8G8R8A8;</span><br><span class="line">int32 PixelSize = SizeX * SizeY * GPixelFormats[PixelFormat].BlockBytes;</span><br><span class="line"><span class="comment">// PixelSize 计算了所有的像素信息一共占了多少空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SizeX &gt; <span class="number">0</span> &amp;&amp; SizeY &gt; <span class="number">0</span> &amp;&amp; (SizeX % GPixelFormats[PixelFormat].BlockSizeX) == <span class="number">0</span> &amp;&amp; (SizeY % GPixelFormats[PixelFormat].BlockSizeY) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">   		<span class="comment">/* 先生成一个空的 Texture */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新 Texture 的 PlatformData</span></span><br><span class="line">    Texture-&gt;PlatformData = <span class="keyword">new</span> <span class="built_in">FTexturePlatformData</span>();</span><br><span class="line">    Texture-&gt;PlatformData-&gt;SizeX = SizeX;</span><br><span class="line">    Texture-&gt;PlatformData-&gt;SizeY = SizeY;</span><br><span class="line">    Texture-&gt;PlatformData-&gt;NumSlices = <span class="number">1</span>;</span><br><span class="line">    Texture-&gt;PlatformData-&gt;PixelFormat = PixelFormat;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断边长是否是 2 的幂次方，如果当前的边长不是 2 的幂次方的时候，不开启 Mipmap 压缩</span></span><br><span class="line">    <span class="keyword">if</span> ( (SizeX &amp; (SizeX - <span class="number">1</span>) || (SizeY &amp; (SizeY - <span class="number">1</span>))) )</span><br><span class="line">        Texture-&gt;MipGenSettings = TextureMipGenSettings::TMGS_NoMipmaps;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分配第一个 Mip</span></span><br><span class="line">    FTexture2DMipMap* Mip = <span class="keyword">new</span> <span class="built_in">FTexture2DMipMap</span>();</span><br><span class="line">    Texture-&gt;PlatformData-&gt;Mips.<span class="built_in">Add</span>(Mip);</span><br><span class="line">    Mip-&gt;SizeX = SizeX;</span><br><span class="line">    Mip-&gt;SizeY = SizeY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向 Mip 的 Bulkdata 中写入数据，注意先加上锁</span></span><br><span class="line">    Mip-&gt;BulkData.<span class="built_in">Lock</span>(LOCK_READ_WRITE);</span><br><span class="line">    uint8* TextureData = (uint8*) Mip-&gt;BulkData.<span class="built_in">Realloc</span>(PixelSize);</span><br><span class="line">    FMemory::<span class="built_in">Memcpy</span>(TextureData, UncompressedRGBA-&gt;<span class="built_in">GetData</span>(), PixelSize);</span><br><span class="line">    Mip-&gt;BulkData.<span class="built_in">Unlock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Texture 的信息，完成数据的临时写入，也就是可选保存的状态</span></span><br><span class="line">    Texture-&gt;Source.<span class="built_in">Init</span>(SizeX, SizeY, <span class="number">1</span>, <span class="number">1</span>, ETextureSourceFormat::TSF_BGRA8, UncompressedRGBA-&gt;<span class="built_in">GetData</span>());</span><br><span class="line">    Texture-&gt;<span class="built_in">UpdateResource</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="保存资源">保存资源</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create Assets</span></span><br><span class="line">TexturePackage-&gt;<span class="built_in">MarkPackageDirty</span>();</span><br><span class="line">FAssetRegistryModule::<span class="built_in">AssetCreated</span>(Texture);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 Package 的文件名</span></span><br><span class="line">FString PackageFileName = FPackageName::<span class="built_in">LongPackageNameToFilename</span>(PackageName, FPackageName::<span class="built_in">GetAssetPackageExtension</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存资源</span></span><br><span class="line">UPackage::<span class="built_in">SavePackage</span>(TexturePackage, Texture, EObjectFlags::RF_Public | EObjectFlags::RF_Standalone, *PackageFileName);</span><br></pre></td></tr></table></figure>
<h3 id="完整代码">完整代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">UTexture2D* <span class="title">CreateTexture</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	UTexture2D* Texture = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> FString PicturePath = ImageDirectory.Path + <span class="built_in">TEXT</span>(<span class="string">&quot;/&quot;</span>) + ImageName + <span class="built_in">TEXT</span>(<span class="string">&quot;.png&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span> (!FPlatformFileManager::<span class="built_in">Get</span>().<span class="built_in">GetPlatformFile</span>().<span class="built_in">FileExists</span>(*PicturePath))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">const</span> FString PackageName = MountPointName + <span class="built_in">TEXT</span>(<span class="string">&quot;/textures/&quot;</span>) + ImageName;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Read loacl PNG to Texture</span></span><br><span class="line"></span><br><span class="line">	TArray&lt;uint8&gt; RawFileData;</span><br><span class="line">	<span class="keyword">if</span> (!FFileHelper::<span class="built_in">LoadFileToArray</span>(RawFileData, *PicturePath))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	IImageWrapperModule&amp; ImageWrapperModule = FModuleManager::LoadModuleChecked&lt;IImageWrapperModule&gt;(<span class="string">&quot;ImageWrapper&quot;</span>);</span><br><span class="line"></span><br><span class="line">	TSharedPtr&lt;IImageWrapper&gt; ImageWrapper = ImageWrapperModule.<span class="built_in">CreateImageWrapper</span>(EImageFormat::PNG);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (ImageWrapper.<span class="built_in">IsValid</span>() &amp;&amp; ImageWrapper-&gt;<span class="built_in">SetCompressed</span>(RawFileData.<span class="built_in">GetData</span>(), RawFileData.<span class="built_in">Num</span>()))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">const</span> TArray&lt;uint8&gt;* UncompressedRGBA = <span class="literal">nullptr</span>;</span><br><span class="line">		<span class="keyword">if</span> (ImageWrapper-&gt;<span class="built_in">GetRaw</span>(ERGBFormat::BGRA, <span class="number">8</span>, UncompressedRGBA))</span><br><span class="line">		&#123;</span><br><span class="line">			int32 SizeX = ImageWrapper-&gt;<span class="built_in">GetWidth</span>();</span><br><span class="line">			int32 SizeY = ImageWrapper-&gt;<span class="built_in">GetHeight</span>();</span><br><span class="line">			<span class="keyword">const</span> EPixelFormat PixelFormat = PF_B8G8R8A8;</span><br><span class="line">			int32 PixelSize = SizeX * SizeY * GPixelFormats[PixelFormat].BlockBytes;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span> (SizeX &gt; <span class="number">0</span> &amp;&amp; SizeY &gt; <span class="number">0</span> &amp;&amp; (SizeX % GPixelFormats[PixelFormat].BlockSizeX) == <span class="number">0</span> &amp;&amp; (SizeY % GPixelFormats[PixelFormat].BlockSizeY) == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">// Create new texture pointer			</span></span><br><span class="line">				UPackage* TexturePackage = <span class="built_in">CreatePackage</span>(<span class="literal">nullptr</span>, *PackageName);</span><br><span class="line">				TexturePackage-&gt;<span class="built_in">FullyLoad</span>();</span><br><span class="line">				Texture = NewObject&lt;UTexture2D&gt;(TexturePackage, <span class="built_in">FName</span>(*ImageName), RF_Public | RF_Standalone | RF_MarkAsRootSet);</span><br><span class="line"></span><br><span class="line">				Texture-&gt;PlatformData = <span class="keyword">new</span> <span class="built_in">FTexturePlatformData</span>();</span><br><span class="line">				Texture-&gt;PlatformData-&gt;SizeX = SizeX;</span><br><span class="line">				Texture-&gt;PlatformData-&gt;SizeY = SizeY;</span><br><span class="line">				Texture-&gt;PlatformData-&gt;NumSlices = <span class="number">1</span>;</span><br><span class="line">				Texture-&gt;PlatformData-&gt;PixelFormat = PixelFormat;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Determine whether it is a power of 2 to use mipmap</span></span><br><span class="line">				<span class="keyword">if</span> ( (SizeX &amp; (SizeX - <span class="number">1</span>) || (SizeY &amp; (SizeY - <span class="number">1</span>))) )</span><br><span class="line">					Texture-&gt;MipGenSettings = TextureMipGenSettings::TMGS_NoMipmaps;</span><br><span class="line">				</span><br><span class="line">				<span class="comment">// Allocate first mipmap.</span></span><br><span class="line">				FTexture2DMipMap* Mip = <span class="keyword">new</span> <span class="built_in">FTexture2DMipMap</span>();</span><br><span class="line">				Texture-&gt;PlatformData-&gt;Mips.<span class="built_in">Add</span>(Mip);</span><br><span class="line">				Mip-&gt;SizeX = SizeX;</span><br><span class="line">				Mip-&gt;SizeY = SizeY;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Lock the texture so that it can be modified</span></span><br><span class="line">				Mip-&gt;BulkData.<span class="built_in">Lock</span>(LOCK_READ_WRITE);</span><br><span class="line">				uint8* TextureData = (uint8*) Mip-&gt;BulkData.<span class="built_in">Realloc</span>(PixelSize);</span><br><span class="line">				FMemory::<span class="built_in">Memcpy</span>(TextureData, UncompressedRGBA-&gt;<span class="built_in">GetData</span>(), PixelSize);</span><br><span class="line">				Mip-&gt;BulkData.<span class="built_in">Unlock</span>();</span><br><span class="line"></span><br><span class="line">				Texture-&gt;Source.<span class="built_in">Init</span>(SizeX, SizeY, <span class="number">1</span>, <span class="number">1</span>, ETextureSourceFormat::TSF_BGRA8, UncompressedRGBA-&gt;<span class="built_in">GetData</span>());</span><br><span class="line">				Texture-&gt;<span class="built_in">UpdateResource</span>();</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Create Assets</span></span><br><span class="line">				TexturePackage-&gt;<span class="built_in">MarkPackageDirty</span>();</span><br><span class="line">				</span><br><span class="line">				FAssetRegistryModule::<span class="built_in">AssetCreated</span>(Texture);</span><br><span class="line"></span><br><span class="line">				FString PackageFileName = FPackageName::<span class="built_in">LongPackageNameToFilename</span>(PackageName, FPackageName::<span class="built_in">GetAssetPackageExtension</span>());</span><br><span class="line"></span><br><span class="line">				UPackage::<span class="built_in">SavePackage</span>(TexturePackage, Texture, EObjectFlags::RF_Public | EObjectFlags::RF_Standalone, *PackageFileName);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> Texture; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考源码">参考源码</h3>
<p><code>EditorFactories : UTextureFactory::ImportTexture()</code>：实现了从外部导入图片生成 Texture</p>
<p><code>Texture2D : UTexture2D::CreateTransient()</code>：实现了生成一个临时性的 Texture2D 文件</p>
<p><code>Texture : FTextureSource::GetMipData()</code>：实现了获取 Texture 中 Mip 的数据</p>
<h2 id="Texture2D-PNG">Texture2D -&gt; PNG</h2>
<h3 id="分析-2">分析</h3>
<ol>
<li>修改 Texture 的设置</li>
<li>读取像素信息并生成图片</li>
</ol>
<h3 id="修改-Texture-的设置">修改 Texture 的设置</h3>
<p>在原本 Texture 的设置下，我们可能无法从 BulkData 读取出信息，会返回一个空指针，所以我们需要先修改一下 Texture 的设置；同时记录一下原本的设置，用于之后的复原。</p>
<blockquote>
<p>CompressionSettings 设置为 TC_VectorDisplacementmap</p>
<p>MipGenSettings 设置为 TMGS_NoMipmaps</p>
<p>SRGB 设置为 false</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记录原本的设置信息</span></span><br><span class="line">TextureCompressionSettings OldCompressionSettings = Texture-&gt;CompressionSettings;</span><br><span class="line">TextureMipGenSettings OldMipGenSettings = Texture-&gt;MipGenSettings;</span><br><span class="line"><span class="keyword">bool</span> OldSRGB = Texture-&gt;SRGB;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改设置</span></span><br><span class="line">Texture-&gt;CompressionSettings = TextureCompressionSettings::TC_VectorDisplacementmap;</span><br><span class="line">Texture-&gt;MipGenSettings = TextureMipGenSettings::TMGS_NoMipmaps;</span><br><span class="line">Texture-&gt;SRGB = <span class="literal">false</span>;</span><br><span class="line">Texture-&gt;<span class="built_in">UpdateResource</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 读取信息 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 复原回原本的设置</span></span><br><span class="line">Texture-&gt;CompressionSettings = OldCompressionSettings;</span><br><span class="line">Texture-&gt;MipGenSettings = OldMipGenSettings;</span><br><span class="line">Texture-&gt;SRGB = OldSRGB;</span><br><span class="line">Texture-&gt;<span class="built_in">UpdateResource</span>();</span><br></pre></td></tr></table></figure>
<h3 id="读取像素信息并生成图片">读取像素信息并生成图片</h3>
<p>我们从 Texture 的 Platform 中读取出 Mip 的 BulkData，然后对其进行映射，将信息映射到 PixelColor 中</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202108121506053.png" alt="image-20210812145950820" style="zoom:50%;" />
<p>每一个 PixelColor 包含着 BGRA 的信息，多个 PixelColor 组成了数组 ColorData；</p>
<p>接着依赖于 <code>ImageUtils</code> ，我们压缩这个 ColorData 生成 ImageData，并将其写入指定位置，就可以生成出 png 图片。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export texture to image</span></span><br><span class="line">FTexture2DMipMap&amp; Mip = Texture-&gt;PlatformData-&gt;Mips[<span class="number">0</span>];</span><br><span class="line">uint8* TextureData = (uint8*) Mip.BulkData.<span class="built_in">Lock</span>(LOCK_READ_WRITE);</span><br><span class="line">Mip.BulkData.<span class="built_in">Unlock</span>();</span><br><span class="line"></span><br><span class="line">int32 SizeX = Texture-&gt;PlatformData-&gt;SizeX;</span><br><span class="line">int32 SizeY = Texture-&gt;PlatformData-&gt;SizeY;</span><br><span class="line">TArray&lt;FColor&gt; ColorData;</span><br><span class="line"><span class="keyword">for</span> (int32 IndexY = <span class="number">0</span>; IndexY &lt; SizeY; IndexY++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (int32 IndexX = <span class="number">0</span>; IndexX &lt; SizeX; IndexX++)</span><br><span class="line">    &#123;</span><br><span class="line">        FColor PixelColor;</span><br><span class="line">        PixelColor.B = TextureData[(IndexY * SizeX + IndexX) * <span class="number">4</span> + <span class="number">0</span>];</span><br><span class="line">        PixelColor.G = TextureData[(IndexY * SizeX + IndexX) * <span class="number">4</span> + <span class="number">1</span>];</span><br><span class="line">        PixelColor.R = TextureData[(IndexY * SizeX + IndexX) * <span class="number">4</span> + <span class="number">2</span>];</span><br><span class="line">        PixelColor.A = TextureData[(IndexY * SizeX + IndexX) * <span class="number">4</span> + <span class="number">3</span>];</span><br><span class="line">        ColorData.<span class="built_in">Add</span>(PixelColor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TArray&lt;uint8&gt; ImageData;</span><br><span class="line">FImageUtils::<span class="built_in">CompressImageArray</span>(SizeX, SizeY, ColorData, ImageData);</span><br><span class="line">FFileHelper::<span class="built_in">SaveArrayToFile</span>(ImageData, *PicturePath);</span><br></pre></td></tr></table></figure>
<h3 id="完整代码-2">完整代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WriteTexture</span><span class="params">(UTexture2D* Texture)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FString PicturePath = ExportImageDirectory.Path + <span class="built_in">TEXT</span>(<span class="string">&quot;/&quot;</span>) + Texture-&gt;<span class="built_in">GetName</span>() + <span class="built_in">TEXT</span>(<span class="string">&quot;.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// record old settings</span></span><br><span class="line">	TextureCompressionSettings OldCompressionSettings = Texture-&gt;CompressionSettings;</span><br><span class="line">	TextureMipGenSettings OldMipGenSettings = Texture-&gt;MipGenSettings;</span><br><span class="line">	<span class="keyword">bool</span> OldSRGB = Texture-&gt;SRGB;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// modified to exportable settings</span></span><br><span class="line">	Texture-&gt;CompressionSettings = TextureCompressionSettings::TC_VectorDisplacementmap;</span><br><span class="line">	Texture-&gt;MipGenSettings = TextureMipGenSettings::TMGS_NoMipmaps;</span><br><span class="line">	Texture-&gt;SRGB = <span class="literal">false</span>;</span><br><span class="line">	Texture-&gt;<span class="built_in">UpdateResource</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// export texture to image</span></span><br><span class="line">	FTexture2DMipMap&amp; Mip = Texture-&gt;PlatformData-&gt;Mips[<span class="number">0</span>];</span><br><span class="line">	uint8* TextureData = (uint8*) Mip.BulkData.<span class="built_in">Lock</span>(LOCK_READ_WRITE);</span><br><span class="line">	Mip.BulkData.<span class="built_in">Unlock</span>();</span><br><span class="line">	</span><br><span class="line">	int32 SizeX = Texture-&gt;PlatformData-&gt;SizeX;</span><br><span class="line">	int32 SizeY = Texture-&gt;PlatformData-&gt;SizeY;</span><br><span class="line">	TArray&lt;FColor&gt; ColorData;</span><br><span class="line">	<span class="keyword">for</span> (int32 IndexY = <span class="number">0</span>; IndexY &lt; SizeY; IndexY++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (int32 IndexX = <span class="number">0</span>; IndexX &lt; SizeX; IndexX++)</span><br><span class="line">		&#123;</span><br><span class="line">			FColor PixelColor;</span><br><span class="line">			PixelColor.B = TextureData[(IndexY * SizeX + IndexX) * <span class="number">4</span> + <span class="number">0</span>];</span><br><span class="line">			PixelColor.G = TextureData[(IndexY * SizeX + IndexX) * <span class="number">4</span> + <span class="number">1</span>];</span><br><span class="line">			PixelColor.R = TextureData[(IndexY * SizeX + IndexX) * <span class="number">4</span> + <span class="number">2</span>];</span><br><span class="line">			PixelColor.A = TextureData[(IndexY * SizeX + IndexX) * <span class="number">4</span> + <span class="number">3</span>];</span><br><span class="line">			ColorData.<span class="built_in">Add</span>(PixelColor);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	TArray&lt;uint8&gt; ImageData;</span><br><span class="line">	FImageUtils::<span class="built_in">CompressImageArray</span>(SizeX, SizeY, ColorData, ImageData);</span><br><span class="line">	FFileHelper::<span class="built_in">SaveArrayToFile</span>(ImageData, *PicturePath);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// return to old settings</span></span><br><span class="line">	Texture-&gt;CompressionSettings = OldCompressionSettings;</span><br><span class="line">	Texture-&gt;MipGenSettings = OldMipGenSettings;</span><br><span class="line">	Texture-&gt;SRGB = OldSRGB;</span><br><span class="line">	Texture-&gt;<span class="built_in">UpdateResource</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参考源码-2">参考源码</h3>
<p><code>GameViewportClient : UGameViewportClient::ProcessScreenShots()</code>：实现了导出屏幕截图</p>
<h2 id="Sprite-PNG">Sprite -&gt; PNG</h2>
<h3 id="分析-3">分析</h3>
<p>首先我们来看一下 Sprite 的信息：</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202108121506969.png" alt="image-20210812150627183" style="zoom: 50%;" />
<p>其中，SourceUV 切割出的图片，左上角的偏移量；Source Dimension 表示切割图片的大小；SourceTexture 表示从哪个 Texture 切割而来。</p>
<p>举个例子：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210812231715.png" alt="image-20210812231527306"></p>
<p>在这幅图中，<code>Texture-&gt;PlatformData-&gt;SizeX = 9</code>、<code>Texture-&gt;PlatformData-&gt;SizeY = 5</code>，</p>
<p>假设我们切割的是红色部分，则 <code>SourceUV = (3, 1) </code>、<code>SourceDimension = (4, 3)</code>，此时的偏移量应该是 <code>9(第一行) + 3(第二行空白处) = 12</code></p>
<p>我们发现 PaperSprite 中预留了这个函数，可以让我们获取到这三个信息：</p>
<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202108121509794.png" alt="image-20210812150952019" style="zoom:50%;" />
<p>这下子就很明确了，我们拿到这些信息，通过计算偏移量，就可以从 SourceTexture 中切割出图片来，剩下的内容和 Texture -&gt; PNG 就一样了。</p>
<p>还一些需要注意的是，记得包含 <code>PaperSpriteComponent.h</code>、<code>PaperSprite.h</code>，如果在插件中使用 Sprite，需要依赖模块 <code>Paper2D</code>。</p>
<h3 id="完整代码-3">完整代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WriteSprite</span><span class="params">(UPaperSprite* Sprite)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FString PicturePath = ExportImageDirectory.Path + <span class="built_in">TEXT</span>(<span class="string">&quot;/&quot;</span>) + Sprite-&gt;<span class="built_in">GetName</span>() + <span class="built_in">TEXT</span>(<span class="string">&quot;.png&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// record old settings</span></span><br><span class="line">	UTexture2D* Texture = Sprite-&gt;<span class="built_in">GetSourceTexture</span>();</span><br><span class="line">	</span><br><span class="line">	TextureCompressionSettings OldCompressionSettings = Texture-&gt;CompressionSettings;</span><br><span class="line">	TextureMipGenSettings OldMipGenSettings = Texture-&gt;MipGenSettings;</span><br><span class="line">	<span class="keyword">bool</span> OldSRGB = Texture-&gt;SRGB;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// modified to exportable settings</span></span><br><span class="line">	Texture-&gt;CompressionSettings = TextureCompressionSettings::TC_VectorDisplacementmap;</span><br><span class="line">	Texture-&gt;MipGenSettings = TextureMipGenSettings::TMGS_NoMipmaps;</span><br><span class="line">	Texture-&gt;SRGB = <span class="literal">false</span>;</span><br><span class="line">	Texture-&gt;<span class="built_in">UpdateResource</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// export texture to image</span></span><br><span class="line">	FTexture2DMipMap&amp; Mip = Texture-&gt;PlatformData-&gt;Mips[<span class="number">0</span>];</span><br><span class="line">	uint8* TextureData = (uint8*) Mip.BulkData.<span class="built_in">Lock</span>(LOCK_READ_WRITE);</span><br><span class="line">	Mip.BulkData.<span class="built_in">Unlock</span>();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 切割 Sprite，计算偏移量</span></span><br><span class="line">	FVector2D SourceUV = Sprite-&gt;<span class="built_in">GetSourceUV</span>();</span><br><span class="line">	FVector2D SourceSize = Sprite-&gt;<span class="built_in">GetSourceSize</span>();</span><br><span class="line">	</span><br><span class="line">	int32 SizeX = (int32)SourceSize.X;</span><br><span class="line">	int32 SizeY = (int32)SourceSize.Y;</span><br><span class="line">	int32 Offsets = (int32)SourceUV.Y * Texture-&gt;PlatformData-&gt;SizeX + (int32)SourceUV.X;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	TArray&lt;FColor&gt; ColorData;</span><br><span class="line">	<span class="keyword">for</span> (int32 IndexY = <span class="number">0</span>; IndexY &lt; SizeY; IndexY++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (int32 IndexX = <span class="number">0</span>; IndexX &lt; SizeX; IndexX++)</span><br><span class="line">		&#123;</span><br><span class="line">			FColor PixelColor;</span><br><span class="line">			PixelColor.B = TextureData[(IndexY * Texture-&gt;PlatformData-&gt;SizeX + IndexX + Offsets) * <span class="number">4</span> + <span class="number">0</span>];</span><br><span class="line">			PixelColor.G = TextureData[(IndexY * Texture-&gt;PlatformData-&gt;SizeX + IndexX + Offsets) * <span class="number">4</span> + <span class="number">1</span>];</span><br><span class="line">			PixelColor.R = TextureData[(IndexY * Texture-&gt;PlatformData-&gt;SizeX + IndexX + Offsets) * <span class="number">4</span> + <span class="number">2</span>];</span><br><span class="line">			PixelColor.A = TextureData[(IndexY * Texture-&gt;PlatformData-&gt;SizeX + IndexX + Offsets) * <span class="number">4</span> + <span class="number">3</span>];</span><br><span class="line">			ColorData.<span class="built_in">Add</span>(PixelColor);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	TArray&lt;uint8&gt; ImageData;</span><br><span class="line">	FImageUtils::<span class="built_in">CompressImageArray</span>(SizeX, SizeY, ColorData, ImageData);</span><br><span class="line">	FFileHelper::<span class="built_in">SaveArrayToFile</span>(ImageData, *PicturePath);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// return to old settings</span></span><br><span class="line">	Texture-&gt;CompressionSettings = OldCompressionSettings;</span><br><span class="line">	Texture-&gt;MipGenSettings = OldMipGenSettings;</span><br><span class="line">	Texture-&gt;SRGB = OldSRGB;</span><br><span class="line">	Texture-&gt;<span class="built_in">UpdateResource</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>游戏开发</category>
        <category>工具流</category>
      </categories>
      <tags>
        <tag>工具流</tag>
        <tag>UE</tag>
      </tags>
  </entry>
  <entry>
    <title>跳表的介绍与实现</title>
    <url>/2021/06/13/%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/%E8%B7%B3%E8%A1%A8%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1>跳表的介绍与实现</h1>
<h2 id="背景">背景</h2>
<p>我们现在要实现一种数据结构，可以实现较为快速的 插入、删除、查询 操作。</p>
<p>显然每次暴力 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 操作并不可取，我们第一眼就想到了比如 红黑树、Splay、Treap 这样的 <strong>平衡树</strong> 结构来实现。</p>
<p>最近我发现一种数据结构 —— <strong>跳表</strong>，它基于链表建立多层索引来实现快速操作。</p>
<p>原本我以为这玩意儿形同鸡肋，但是了解到其在 <strong>Redis、LevelDB、ES</strong> 中都有应用，了解过后，发现其确实有可取之处。</p>
<h2 id="介绍">介绍</h2>
<p>首先对于一段序列，我们可以用链表的形式储存，如果不进行任何其它设计，那么我们进行 插入、删除、查询  的操作，复杂度显然是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 的，因为我们基本需要遍历每一个节点。</p>
<p>现在我们引用多个 <strong>索引链表</strong> 来优化这个链表。</p>
<p>对于一个链表，我们这样构建它：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210613003928.png" alt="image-20210613003910137"></p>
<p>原本的链表是：<strong>1→2→3→4→5</strong>，我们现在将其中的 <em><strong>某几个（后面会介绍如何确定）</strong></em> 节点，放到上一层链表中（即上一层索引中），构建出了一个新链表： <strong>1→3→5</strong>，对于 <strong>1→3→5</strong> ，我们再将其中某几个节点继续放到上一层中，构建出 <strong>3→5</strong>。</p>
<p>对于这样一个结构，我们就可以快速地实现一些操作。</p>
<p>比如我们现在要查询 <strong>4</strong> 是否存在：</p>
<ol>
<li>在最高层索引中（即第二层索引）中，找到 该层中最后一个比 <strong>4</strong> 小的值，这里也就是 <strong>3</strong> ；</li>
<li>进入 <strong>3</strong> 的低一层索引（即第一层索引）的位置，发现这一层 <strong>3</strong> 后面的值还是 <strong>5</strong>，那么 <strong>3</strong> 依然是 该层最后一个比 <strong>4</strong> 小的元素；</li>
<li>我们依然从 <strong>3</strong> 进入低一层索引（即原链表），发现 <strong>3</strong> 后面的值是 <strong>4</strong>，那么 <strong>4</strong> 就存在；假设这里后面依然是 <strong>5</strong>，那比 <strong>4</strong> 大，并且我们当前已经在最底层的链表了，也就是说不存在 <strong>4</strong>。</li>
</ol>
<h2 id="时间复杂度">时间复杂度</h2>
<p>我们考虑一下需要遍历的节点，显然是上一层的某些节点，加上下一层往后的节点（红色为走的节点）：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210613031112.png" alt="image-20210613021317589"></p>
<p>我们现在有 <strong>一种直观的策略：</strong> 假设，一层的个数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>，每距离 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span> 个节点将其放到上一层中，对于每一层如此操作，显然这样对于每一次操作可以做到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\sqrt{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 的复杂度。</p>
<p>事实上，我们可以用一种更优秀的策略确定 <em><strong>某几个</strong></em> 放到上一层，到底是哪些节点该往上放。</p>
<p><strong>新的策略</strong> ： 对于一层的节点，我们以一个 <strong>随机的概率 P</strong> 来决定是否将它往上一层放，当前 <strong>Redis</strong> 中将 <strong>P</strong> 设置为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.25</mn></mrow><annotation encoding="application/x-tex">0.25</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0.25</span></span></span></span> （旧版本为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.5</mn></mrow><annotation encoding="application/x-tex">0.5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0.5</span></span></span></span> ）。可以证明这样进行一次操作的复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 左右的，确实比较优秀。</p>
<p>为了防止某些情况以及方便实现，我们在一开始就确定这个跳表的最高层数 <strong>MAXLEVEL</strong>，当前 <strong>Redis</strong> 中的最高层数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>64</mn></mrow><annotation encoding="application/x-tex">64</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">64</span></span></span></span> （旧版本为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>32</mn></mrow><annotation encoding="application/x-tex">32</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">32</span></span></span></span> ）。</p>
<h2 id="实现">实现</h2>
<p>对于这个 <strong>跳表</strong> 我们要怎么实现呢，我们可以稍微改一下上面的图，来更加直观的理解：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210613031115.png" alt="image-20210613012035980"></p>
<p>对于每一个节点，我们分别记录：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span>  、 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>o</mi><mi>r</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">forward[]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mclose">]</span></span></span></span> ，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 表示这个节点的值， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>o</mi><mi>r</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">forward[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span> 表示这个节点在第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 层（记原链表为第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 层）的后序节点。</p>
<p>当然，对于一开始我们需要一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">header</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span></span></span></span> 节点，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo>→</mo><mi>f</mi><mi>o</mi><mi>r</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">header→forward[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span> 用于表示第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 层的开始节点。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> key;</span><br><span class="line">	vector &lt;shared_ptr&lt;Node&gt;&gt; forward;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 创建一个所在最高层为 level 的节点</span></span><br><span class="line">	<span class="built_in">Node</span>(<span class="keyword">int</span> _key, <span class="keyword">int</span> _level) : <span class="built_in">key</span>(_key)</span><br><span class="line">	&#123;</span><br><span class="line">		forward = vector&lt;shared_ptr&lt;Node&gt;&gt;(_level + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>有了这些信息，我们就可以进行最基础的操作了。</p>
<h3 id="查找">查找</h3>
<p>我们考虑查找一个值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 的节点。</p>
<p>从最高层级开始走，每次找到当前层最后一个值比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 小的节点，然后从这个节点的位置进入下一层。</p>
<p>如此走完一遍后，找到的节点一定是比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 小且最接近的。</p>
<p>如果这个点所在层不是原链表，我们从该节点往下跳到原链表的 这个节点所在的位置。那么当前位置的 后一个节点 的值才有可能是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span>。当然，也有可能比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 大，或者不存在后面的节点，这时候链表中就不存在值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 的节点。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Search</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    shared_ptr&lt;Node&gt; cur = header;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从最高层级开始走，找到当前层最后一个比 key 值小的节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = level; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;forward[i] != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;forward[i]-&gt;key &lt; key)</span><br><span class="line">            cur = cur-&gt;forward[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跳转到原链表，然后往后一个位置</span></span><br><span class="line">    cur = cur-&gt;forward[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> cur != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;key == key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="插入">插入</h3>
<p>我们考虑插入一个值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 的节点。</p>
<p>显然，我们首先需要判断一下是否已经存在值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 的节点。</p>
<p>于是我们从最上层开始走，每次找到当前层最后一个值比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 小的节点，然后从这个节点的位置进入下一层。在这个过程中，我们对于第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 层记录下这个节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">record[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">recor</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>，方便后面的更新。</p>
<p>然后我们和 <strong>查找</strong> 操作一样，判断是否 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 已存在。如果存在则直接返回（或者进行你想要的操作，比如记录下出现 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 了几次，自己修改即可），如果不存在我们进行之后的插入。</p>
<p>我们按照之前的策略，为这个节点按生成一个随机的最高层数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>L</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">rLevel</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">L</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>。</p>
<p>对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>r</mi><mi>L</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">i\in[0,rLevel]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">L</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">]</span></span></span></span> 层的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">record[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">recor</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>，显然我们现在要将它的后一个节点，设置成我们现在的节点。然后将现在节点的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>o</mi><mi>r</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">forward[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span> 设为原本 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">record[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">recor</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span> 的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>o</mi><mi>r</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">forward[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>。</p>
<p>需要特别注意的是，如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>跳表当前的</mtext><mi>l</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi><mo>&lt;</mo><mi>r</mi><mi>L</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">跳表当前的level &lt; rLevel</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord cjk_fallback">跳表当前的</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">L</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span> ，我们需要将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>∈</mo><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mi>L</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">i\in(level,rLevel]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">L</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">]</span></span></span></span> 的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mi>e</mi><mi>a</mi><mi>d</mi><mi>e</mi><mi>r</mi><mo>→</mo><mi>f</mi><mi>o</mi><mi>r</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">header→forward[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span> 设为该节点，最后更新一下 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">level</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> record = vector&lt;shared_ptr&lt;Node&gt;&gt;(MAXLEVEL + <span class="number">1</span>);</span><br><span class="line">    shared_ptr&lt;Node&gt; cur = header;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = level; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;forward[i] != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;forward[i]-&gt;key &lt; key)</span><br><span class="line">            cur = cur-&gt;forward[i];</span><br><span class="line">        record[i] = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    cur = cur-&gt;forward[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 节点已存在则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (cur != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;key == key) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个新的节点 n 进行更新</span></span><br><span class="line">    <span class="keyword">int</span> rLevel = <span class="built_in">RandomLevel</span>();</span><br><span class="line">    shared_ptr&lt;Node&gt; n = make_shared&lt;Node&gt;(key, rLevel);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= rLevel; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= level)</span><br><span class="line">        &#123;</span><br><span class="line">            n-&gt;forward[i] = record[i]-&gt;forward[i];</span><br><span class="line">            record[i]-&gt;forward[i] = n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> header-&gt;forward[i] = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    level = <span class="built_in">max</span>(level, rLevel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除">删除</h3>
<p>我们考虑删除一个值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 的节点。</p>
<p>我们从最上层开始走，每次找到当前层最后一个值比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 小的节点，然后从这个节点的位置进入下一层。在这个过程中，我们对于第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 层记录下这个节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">record[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">recor</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>，方便后面的更新。</p>
<p>然后我们跳转到原链表，判断一下是否存在值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 的节点，若存在我们假设它为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">cur</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>。</p>
<p>我们从原链表开始一层一层往上走，进行删除。显然我们对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>→</mo><mi>f</mi><mi>o</mi><mi>r</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">record[i]→forward[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">recor</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">cur</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 的节点，我们直接将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>→</mo><mi>f</mi><mi>o</mi><mi>r</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">record[i]→forward[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">recor</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span> 设置为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi><mo>→</mo><mi>f</mi><mi>o</mi><mi>r</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">cur→forward[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>；如果不是，则说明 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">cur</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 并没有被上放到该层，可以停止操作。</p>
<p>然后释放 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">cur</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 的资源。可能我们的删除会导致跳表 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">level</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span> 的改变，更新一下 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">level</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> record = vector&lt;shared_ptr&lt;Node&gt;&gt;(MAXLEVEL + <span class="number">1</span>);</span><br><span class="line">    shared_ptr&lt;Node&gt; cur = header;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = level; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (cur-&gt;forward[i] != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;forward[i]-&gt;key &lt; key)</span><br><span class="line">        &#123;</span><br><span class="line">            cur = cur-&gt;forward[i];</span><br><span class="line">        &#125;</span><br><span class="line">        record[i] = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    cur = cur-&gt;forward[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 节点不存在 或 值不为 key 则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (cur == <span class="literal">nullptr</span> || cur-&gt;key != key) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= level; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (record[i]-&gt;forward[i] == <span class="literal">nullptr</span> || record[i]-&gt;forward[i]-&gt;key != key) <span class="keyword">break</span>;</span><br><span class="line">        record[i]-&gt;forward[i] = cur-&gt;forward[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新 level</span></span><br><span class="line">    <span class="keyword">while</span> (header-&gt;forward[level] == <span class="literal">nullptr</span> &amp;&amp; level &gt; <span class="number">0</span>)</span><br><span class="line">        level--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="完整代码">完整代码</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> key;</span><br><span class="line">	vector &lt;shared_ptr&lt;Node&gt;&gt; forward;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 创建一个所在最高层为 level 的节点</span></span><br><span class="line">	<span class="built_in">Node</span>(<span class="keyword">int</span> _key, <span class="keyword">int</span> _level) : <span class="built_in">key</span>(_key)</span><br><span class="line">	&#123;</span><br><span class="line">		forward = vector&lt;shared_ptr&lt;Node&gt;&gt;(_level + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkipList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	shared_ptr&lt;Node&gt; header;</span><br><span class="line">	<span class="keyword">int</span> MAXLEVEL;</span><br><span class="line">	<span class="keyword">float</span> P;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 跳表当前的层数</span></span><br><span class="line">	<span class="keyword">int</span> level;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">SkipList</span>(<span class="keyword">int</span> _MAXLEVEL = <span class="number">64</span>, <span class="keyword">float</span> _P = <span class="number">0.25</span>) :</span><br><span class="line">		<span class="built_in">MAXLEVEL</span>(_MAXLEVEL), <span class="built_in">P</span>(_P), <span class="built_in">level</span>(<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		header = make_shared&lt;Node&gt;(<span class="number">-1</span>, MAXLEVEL);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 随机生成一个节点最高的层数</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">RandomLevel</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> rLevel = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> ((<span class="keyword">float</span>)<span class="built_in">rand</span>() / RAND_MAX &lt; P &amp;&amp; rLevel &lt; MAXLEVEL)</span><br><span class="line">		&#123;</span><br><span class="line">			rLevel++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> rLevel;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Search</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		shared_ptr&lt;Node&gt; cur = header;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 从最高层级开始走，找到当前层最后一个比 key 值小的节点</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = level; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span> (cur-&gt;forward[i] != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;forward[i]-&gt;key &lt; key)</span><br><span class="line">				cur = cur-&gt;forward[i];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 跳转到原链表，然后往后一个位置</span></span><br><span class="line">		cur = cur-&gt;forward[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">return</span> cur != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;key == key;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">auto</span> record = vector&lt;shared_ptr&lt;Node&gt;&gt;(MAXLEVEL + <span class="number">1</span>);</span><br><span class="line">		shared_ptr&lt;Node&gt; cur = header;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = level; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span> (cur-&gt;forward[i] != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;forward[i]-&gt;key &lt; key)</span><br><span class="line">				cur = cur-&gt;forward[i];</span><br><span class="line">			record[i] = cur;</span><br><span class="line">		&#125;</span><br><span class="line">		cur = cur-&gt;forward[<span class="number">0</span>];</span><br><span class="line">		<span class="comment">// 节点已存在则直接返回</span></span><br><span class="line">		<span class="keyword">if</span> (cur != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;key == key) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 创建一个新的节点 n 进行更新</span></span><br><span class="line">		<span class="keyword">int</span> rLevel = <span class="built_in">RandomLevel</span>();</span><br><span class="line">		shared_ptr&lt;Node&gt; n = make_shared&lt;Node&gt;(key, rLevel);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= rLevel; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i &lt;= level)</span><br><span class="line">			&#123;</span><br><span class="line">				n-&gt;forward[i] = record[i]-&gt;forward[i];</span><br><span class="line">				record[i]-&gt;forward[i] = n;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> header-&gt;forward[i] = n;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		level = <span class="built_in">max</span>(level, rLevel);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">auto</span> record = vector&lt;shared_ptr&lt;Node&gt;&gt;(MAXLEVEL + <span class="number">1</span>);</span><br><span class="line">		shared_ptr&lt;Node&gt; cur = header;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = level; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span> (cur-&gt;forward[i] != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;forward[i]-&gt;key &lt; key)</span><br><span class="line">			&#123;</span><br><span class="line">				cur = cur-&gt;forward[i];</span><br><span class="line">			&#125;</span><br><span class="line">			record[i] = cur;</span><br><span class="line">		&#125;</span><br><span class="line">		cur = cur-&gt;forward[<span class="number">0</span>];</span><br><span class="line">		<span class="comment">// 节点不存在 或 值不为 key 则直接返回</span></span><br><span class="line">		<span class="keyword">if</span> (cur == <span class="literal">nullptr</span> || cur-&gt;key != key) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= level; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (record[i]-&gt;forward[i] == <span class="literal">nullptr</span> || record[i]-&gt;forward[i]-&gt;key != key) <span class="keyword">break</span>;</span><br><span class="line">			record[i]-&gt;forward[i] = cur-&gt;forward[i];</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 更新 level</span></span><br><span class="line">		<span class="keyword">while</span> (header-&gt;forward[level] == <span class="literal">nullptr</span> &amp;&amp; level &gt; <span class="number">0</span>)</span><br><span class="line">			level--;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;- SkipList:\n&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = level; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		&#123;</span><br><span class="line">			shared_ptr&lt;Node&gt; cur = header-&gt;forward[i];</span><br><span class="line">			<span class="keyword">while</span> (cur != <span class="literal">nullptr</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, cur-&gt;key);</span><br><span class="line">				cur = cur-&gt;forward[i];</span><br><span class="line">				<span class="built_in">printf</span>(cur != <span class="literal">nullptr</span> ? <span class="string">&quot; → &quot;</span> : <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;- End\n\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">	SkipList* skipList = <span class="keyword">new</span> <span class="built_in">SkipList</span>(<span class="number">10</span>, <span class="number">0.5</span>);</span><br><span class="line"></span><br><span class="line">	skipList-&gt;<span class="built_in">Insert</span>(<span class="number">1</span>);</span><br><span class="line">	skipList-&gt;<span class="built_in">Insert</span>(<span class="number">2</span>);</span><br><span class="line">	skipList-&gt;<span class="built_in">Insert</span>(<span class="number">3</span>);</span><br><span class="line">	skipList-&gt;<span class="built_in">Insert</span>(<span class="number">4</span>);</span><br><span class="line">	skipList-&gt;<span class="built_in">Insert</span>(<span class="number">5</span>);</span><br><span class="line">	skipList-&gt;<span class="built_in">Insert</span>(<span class="number">6</span>);</span><br><span class="line">	skipList-&gt;<span class="built_in">Insert</span>(<span class="number">7</span>);</span><br><span class="line">	skipList-&gt;<span class="built_in">Insert</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	skipList-&gt;<span class="built_in">Show</span>();</span><br><span class="line"></span><br><span class="line">	skipList-&gt;<span class="built_in">Delete</span>(<span class="number">2</span>);</span><br><span class="line">	skipList-&gt;<span class="built_in">Delete</span>(<span class="number">4</span>);</span><br><span class="line">	skipList-&gt;<span class="built_in">Delete</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">	skipList-&gt;<span class="built_in">Show</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">delete</span> skipList;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法详解</category>
      </categories>
      <tags>
        <tag>算法详解</tag>
        <tag>跳表</tag>
      </tags>
  </entry>
  <entry>
    <title>Github+Hexo建站记录</title>
    <url>/2021/05/28/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/Github+Hexo%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="Hexo-建站">Hexo 建站</h2>
<p><a href="https://blog.csdn.net/qq_42579187/article/details/104760516">https://blog.csdn.net/qq_42579187/article/details/104760516</a></p>
<p><a href="https://www.jianshu.com/p/189fd945f38f">https://www.jianshu.com/p/189fd945f38f</a></p>
<h2 id="换电脑重新部署">换电脑重新部署</h2>
<p><a href="https://www.jianshu.com/p/906294181814">https://www.jianshu.com/p/906294181814</a></p>
<h2 id="主题">主题</h2>
<p><a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a></p>
<p>文档：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p>
<p><a href="https://www.cnblogs.com/ldu-xingjiahui/p/12594024.html">https://www.cnblogs.com/ldu-xingjiahui/p/12594024.html</a></p>
<h2 id="使用-Butterfly-主题无法显示">使用 Butterfly 主题无法显示</h2>
<p>错误显示：</p>
<blockquote>
<p>extends includes/layout.pug block content #recent-posts.recent-posts include includes/recent-posts.pug include includes/pagination.pug</p>
</blockquote>
<p>需要在hexo目录下输入命令：</p>
<blockquote>
<p>npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</p>
</blockquote>
<h1>DEBUG注意事项</h1>
<p>记得清理缓存，F12 → Network → Disable cache</p>
<h2 id="修改文字">修改文字</h2>
<p>在 default.yml 中修改标签文字等</p>
<h2 id="页面美化">页面美化</h2>
<p><a href="https://www.antmoe.com/posts/a811d614/">https://www.antmoe.com/posts/a811d614/</a></p>
<p><a href="https://blog.csdn.net/u012208219/article/details/106883001/">https://blog.csdn.net/u012208219/article/details/106883001/</a></p>
<h2 id="侧边栏添加访客地图">侧边栏添加访客地图</h2>
<p><a href="https://blog.csdn.net/cungudafa/article/details/105925710">https://blog.csdn.net/cungudafa/article/details/105925710</a></p>
<p>使用时候修改主题的  _config.yml</p>
<blockquote>
<p>番剧: /bangumis/ || fab fa-youtube</p>
</blockquote>
<h2 id="B站追番列表">B站追番列表</h2>
<p><a href="https://imszz.com/p/8422e92e/">https://imszz.com/p/8422e92e/</a></p>
<h2 id="评论系统">评论系统</h2>
<p><a href="https://blog.zhheo.com/p/2e6bbbd0.html">https://blog.zhheo.com/p/2e6bbbd0.html</a></p>
<h2 id="百度-谷歌-SEO">百度/谷歌 SEO</h2>
<p><a href="https://blog.csdn.net/qq_32623363/article/details/100532463">https://blog.csdn.net/qq_32623363/article/details/100532463</a></p>
<h2 id="标签云">标签云</h2>
<p><a href="https://blog.csdn.net/SmalOSnail/article/details/105258820">https://blog.csdn.net/SmalOSnail/article/details/105258820</a></p>
<h2 id="Markdown-笔记">Markdown 笔记</h2>
<p>使用 PicGo+腾讯云COS：<a href="https://www.pianshen.com/article/19421261808/">https://www.pianshen.com/article/19421261808/</a></p>
<p>Typora上传失败：<a href="https://blog.csdn.net/qq754772661/article/details/111385955">https://blog.csdn.net/qq754772661/article/details/111385955</a></p>
<p>从网络上上传图片，应该先保存到本地。</p>
]]></content>
      <categories>
        <category>网站开发</category>
        <category>网站搭建</category>
      </categories>
      <tags>
        <tag>网站开发</tag>
        <tag>网站搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>[A*搜索]牛跑步</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BAstar%E6%90%9C%E7%B4%A2%5D%E7%89%9B%E8%B7%91%E6%AD%A5/</url>
    <content><![CDATA[<h1>牛跑步</h1>
<p>Time Limit: 10 Sec Memory Limit: 162 MB</p>
<h2 id="Description">Description</h2>
<p>BESSIE准备用从牛棚跑到池塘的方法来锻炼.<br>
　　但是因为她懒,她只准备沿着下坡的路跑到池塘, 然后走回牛棚.<br>
　　BESSIE也不想跑得太远,所以她想走最短的路经.<br>
　　农场上一共有M 条路, 每条路连接两个用1…N标号的地点.<br>
　　更方便的是,如果X&gt;Y,则地点X的高度大于地点Y的高度.<br>
　　地点N是BESSIE的牛棚;地点1是池塘.<br>
　　很快, BESSIE厌倦了一直走同一条路.所以她想走不同的路,更明确地讲,她想找出K条不同的路经.为了避免过度劳累,她想使这K条路经为最短的K条路经.<br>
　　请帮助BESSIE找出这K条最短路经的长度.<br>
　　你的程序需要读入农场的地图,一些从X_i到Y_i 的路经和它们的长度(X_i, Y_i, D_i).</p>
<h2 id="Input">Input</h2>
<p>第1行: 3个数: N, M, 和K<br>
　　第 2…M+1行: 第 i+1 行包含3个数 X_i, Y_i, 和 D_i, 表示一条下坡的路.</p>
<h2 id="Output">Output</h2>
<p>第1…K行: 第i行包含第i最短路经的长度,或-1如果这样的路经不存在.如果多条路经有同样的长度,请注意将这些长度逐一列出.</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 8 7<br>
　5 4 1<br>
　5 3 1<br>
　5 2 1<br>
　5 1 1<br>
　4 3 4<br>
　3 1 1<br>
　3 2 1<br>
　2 1 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>1<br>
　2<br>
　2<br>
　3<br>
　6<br>
　7<br>
　-1</p>
<h2 id="HINT">HINT</h2>
<p>1 &lt;= M &lt;= 10,000, 1 &lt;= N &lt;= 1000, 1 &lt;= K &lt;= 100</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定一张图，输出1~k短路的距离。</p>
<h2 id="Solution">Solution</h2>
<p>既然是求k短路，那我们使用A<em>搜索，先反向建图，记录<strong>终点到每一个点的最短路</strong>，然后把这个dist当做<strong>估价</strong>来跑A</em>即可。可以证明：<strong>第k次搜到的路即是k短路</strong>。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="keyword">int</span> dist[ONE],vis[ONE],Output[ONE],tou,wei;</span><br><span class="line"><span class="keyword">int</span> next[ONE],first[ONE],go[ONE],w[ONE],tot;</span><br><span class="line"><span class="keyword">int</span> Ans[ONE],num;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,real,eva;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> power &amp;a) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.real + a.eva &lt; real + eva;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;  w[tot]=z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q[<span class="number">10000001</span>];</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">63</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dist));</span><br><span class="line">    tou = <span class="number">0</span>; wei = <span class="number">1</span>;</span><br><span class="line">    vis[x] = <span class="number">1</span>; dist[x] = <span class="number">0</span>; q[<span class="number">1</span>] = x;</span><br><span class="line">    <span class="keyword">while</span>(tou &lt; wei)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q[++tou];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = go[e];</span><br><span class="line">            <span class="keyword">if</span>(dist[v] &gt; dist[u] + w[e])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v] = dist[u] + w[e];</span><br><span class="line">                <span class="keyword">if</span>(!vis[v]) vis[v] = <span class="number">1</span>, q[++wei] = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Astar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue &lt;power&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>( (power)&#123;S, <span class="number">0</span>, dist[S]&#125; );</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        power u = q.<span class="built_in">top</span>();  q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(u.x == T) Ans[++num] = u.real;</span><br><span class="line">        <span class="keyword">if</span>(++Output[u.x] &gt; k) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(Output[T] == k) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u.x]; e; e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            q.<span class="built_in">push</span>( (power)&#123;v, u.real+w[e], dist[v]&#125; );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();    k=<span class="built_in">get</span>();</span><br><span class="line">    S=n,    T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i].x=<span class="built_in">get</span>();   a[i].y=<span class="built_in">get</span>();   a[i].z=<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Add</span>(a[i].y, a[i].x, a[i].z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">SPFA</span>(T);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(first,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(first));  tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">Add</span>(a[i].x,a[i].y,a[i].z);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Astar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Ans[i]!=<span class="number">0</span>?Ans[i]:<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>A*搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>[A*搜索]骑士精神</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BAstar%E6%90%9C%E7%B4%A2%5D%E9%AA%91%E5%A3%AB%E7%B2%BE%E7%A5%9E/</url>
    <content><![CDATA[<h1>骑士精神</h1>
<p>Time Limit: 10 Sec Memory Limit: 162 MB</p>
<h2 id="Description">Description</h2>
<p>在一个5×5的棋盘上有12个白色的骑士和12个黑色的骑士， 且有一个空位。<br>
　　在任何时候一个骑士都能按照骑士的走法（它可以走到和它横坐标相差为1，纵坐标相差为2或者横坐标相差为2，纵坐标相差为1的格子）移动到空位上。<br>
　　给定一个初始的棋盘，怎样才能经过移动变成如下目标棋盘： 为了体现出骑士精神，他们必须以最少的步数完成任务。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528003946.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p>第一行有一个正整数T(T&lt;=10)，表示一共有N组数据。接下来有T个5×5的矩阵，0表示白色骑士，1表示黑色骑士，*表示空位。两组数据之间没有空行。</p>
<h2 id="Output">Output</h2>
<p>对于每组数据都输出一行。如果能在15步以内（包括15步）到达目标状态，则输出步数，否则输出－1。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>2<br>
　10110<br>
　01*11<br>
　10111<br>
　01001<br>
　00000</p>
<p>01011<br>
　110*1<br>
　01110<br>
　01010<br>
　00100</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>7<br>
　-1</p>
<h2 id="HINT">HINT</h2>
<p>Ans&lt;=15</p>
<h2 id="Solution">Solution</h2>
<p>看到这题，我们没有什么思路，只能运用搜索，然后把<strong>错位的个数</strong>当做估价，跑一遍A*就可以了。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">8</span>][<span class="number">8</span>],Step,Vx,Vy;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">bool</span> PD;</span><br><span class="line"><span class="keyword">int</span> dx[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[]=&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Goal[<span class="number">6</span>][<span class="number">6</span>]=</span><br><span class="line">&#123;</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>; </span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>) </span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Evaluation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(a[i][j] != Goal[i][j])</span><br><span class="line">                res++;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> T,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(PD) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(T == Step)</span><br><span class="line">    &#123;</span><br><span class="line">        PD = !<span class="built_in">Evaluation</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> Nx = x+dx[i], Ny = y+dy[i];</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="number">1</span>&lt;=Nx &amp;&amp; Nx&lt;=<span class="number">5</span> &amp;&amp; <span class="number">1</span>&lt;=Ny &amp;&amp; Ny&lt;=<span class="number">5</span>)) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">swap</span>(a[x][y], a[Nx][Ny]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Evaluation</span>() + T &lt;= Step) <span class="built_in">Dfs</span>(T+<span class="number">1</span>, Nx,Ny);</span><br><span class="line">        <span class="built_in">swap</span>(a[x][y], a[Nx][Ny]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ch[j] == <span class="string">&#x27;*&#x27;</span>) &#123;a[i][j] = <span class="number">2</span>, Vx=i,Vy=j;&#125;</span><br><span class="line">            <span class="keyword">else</span> a[i][j] = ch[j]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PD=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(Step=<span class="number">1</span>;Step&lt;=<span class="number">15</span>;Step++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Dfs</span>(<span class="number">0</span>,Vx,Vy);</span><br><span class="line">        <span class="keyword">if</span>(PD) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,PD==<span class="number">1</span> ? Step:<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">        <span class="built_in">Solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>A*搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>[A*搜索]魔法猪学院</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BAstar%E6%90%9C%E7%B4%A2%5D%E9%AD%94%E6%B3%95%E7%8C%AA%E5%AD%A6%E9%99%A2/</url>
    <content><![CDATA[<h1>魔法猪学院</h1>
<p>Time Limit: 10 Sec Memory Limit: 64 MB</p>
<h2 id="Description">Description</h2>
<p>iPig在假期来到了传说中的魔法猪学院，开始为期两个月的魔法猪训练。<br>
　　经过了一周理论知识和一周基本魔法的学习之后，iPig对猪世界的世界本原有了很多的了解：众所周知，世界是由元素构成的；元素与元素之间可以互相转换；能量守恒……。<br>
　　iPig 今天就在进行一个麻烦的测验。<br>
　　iPig 在之前的学习中已经知道了很多种元素，并学会了可以转化这些元素的魔法，每种魔法需要消耗 iPig 一定的能量。<br>
　　作为 PKU 的顶尖学猪，让 iPig 用最少的能量完成从一种元素转换到另一种元素……等等，iPig 的魔法导猪可没这么笨！<br>
　　这一次，他给 iPig 带来了很多 1 号元素的样本，要求 iPig 使用学习过的魔法将它们一个个转化为 N 号元素，为了增加难度，要求每份样本的转换过程都不相同。<br>
　　这个看似困难的任务实际上对 iPig 并没有挑战性，因为，他有坚实的后盾……现在的你呀！<br>
　　注意，两个元素之间的转化可能有多种魔法，转化是单向的。<br>
　　转化的过程中，可以转化到一个元素（包括开始元素）多次，但是一但转化到目标元素，则一份样本的转化过程结束。<br>
　　iPig 的总能量是有限的，所以最多能够转换的样本数一定是一个有限数。具体请参看样例。</p>
<h2 id="Input">Input</h2>
<p>第一行三个数 N、M、E 表示iPig知道的元素个数（元素从 1 到 N 编号）、iPig已经学会的魔法个数和iPig的总能量。</p>
<p>后跟 M 行每行三个数 si、ti、ei 表示 iPig 知道一种魔法，消耗 ei 的能量将元素 si 变换到元素 ti 。</p>
<h2 id="Output">Output</h2>
<p>一行一个数，表示最多可以完成的方式数。输入数据保证至少可以完成一种方式。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4 6 14.9<br>
　1 2 1.5<br>
　2 1 1.5<br>
　1 3 3<br>
　2 3 1.5<br>
　3 4 1.5<br>
　1 4 1.5</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3</p>
<h2 id="HINT">HINT</h2>
<p>占总分不小于 10% 的数据满足 N &lt;= 6，M&lt;=15。<br>
　占总分不小于 20% 的数据满足 N &lt;= 100，M&lt;=300，E&lt;=100且E和所有的ei均为整数（可以直接作为整型数字读入）。<br>
　所有数据满足 2 &lt;= N &lt;= 5000，1 &lt;= M &lt;= 200000，1&lt;=E&lt;=107，1&lt;=ei&lt;=E，E和所有的ei为实数。</p>
<h2 id="Main-idea">Main idea</h2>
<p>询问第一个满足1~k短路的和&gt;E的k。</p>
<h2 id="Solution">Solution</h2>
<p>求k短路，直接运用A*搜索即可，把T-&gt;每个点的最短路当做<strong>估价</strong>即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">205000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> POI = <span class="number">5500</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="keyword">double</span> dist[POI],w[ONE],E;</span><br><span class="line"><span class="keyword">bool</span> vis[POI];</span><br><span class="line"><span class="keyword">int</span> next[ONE],first[POI],go[ONE],tot;</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y; <span class="keyword">double</span> z;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x; <span class="keyword">double</span> real;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> power &amp;a) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.real + dist[a.x] &lt; real + dist[x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">double</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;  w[tot]=z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=S;i&lt;=T;i++) dist[i] = INF;</span><br><span class="line">    vis[x] = <span class="number">1</span>; dist[x] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = go[e];</span><br><span class="line">            <span class="keyword">if</span>(dist[v] &gt; dist[u] + w[e])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v] = dist[u] + w[e];</span><br><span class="line">                <span class="keyword">if</span>(!vis[v]) vis[v] = <span class="number">1</span>, q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Astar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue &lt;power&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>( (power)&#123;S, <span class="number">0</span>&#125; );</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        power u = q.<span class="built_in">top</span>();  q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(u.x == T) &#123;E -= u.real; <span class="keyword">if</span>(E &lt; <span class="number">0</span>) <span class="keyword">return</span>; Ans++;&#125;</span><br><span class="line">        <span class="keyword">if</span>(u.real + dist[u.x] &gt; E) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u.x]; e; e=next[e])</span><br><span class="line">            q.<span class="built_in">push</span>( (power)&#123;go[e], u.real+w[e]&#125; );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;E);</span><br><span class="line">        S=<span class="number">1</span>,    T=n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i].x=<span class="built_in">get</span>();   a[i].y=<span class="built_in">get</span>();   <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;a[i].z);</span><br><span class="line">            <span class="built_in">Add</span>(a[i].y, a[i].x, a[i].z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">SPFA</span>(T);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(first,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(first));  tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">Add</span>(a[i].x,a[i].y,a[i].z);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Astar</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>A*搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>[CDQ分治]连通图</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BCDQ%E5%88%86%E6%B2%BB%5D%E8%BF%9E%E9%80%9A%E5%9B%BE/</url>
    <content><![CDATA[<h1>连通图</h1>
<p>Time Limit: 20 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p>给定一个连通的无向图和若干个小集合,每个小集合包含一些边。对于每个集合，你需要确定将集合中的边从原来的无向图中删除后该图是否保持连通。<br>
一个图是连通的当且仅当任意两个不同的点之间存在一条路径连接他们。</p>
<h2 id="Input">Input</h2>
<p>输入的第一行包含两个整数n和m(l≤n≤10000,1≤m≤100000)，表示无向图的点数和边数，每个点从1到n标号。</p>
<p>接下来的m行表示图的每条边，每行包含两个整数a和b——一条边连接的两个端点的标号。保证每对顶点最多被一条边连接。</p>
<p>没有一条边连接两个相同的顶点。</p>
<p>每条边按照输入的顺序标号为1到m。<br>
接下来的一行包含一个整数k(1≤k≤100000)，表示需要测试的小集合的个数。</p>
<p>接下来的k行每行描述一个小集合。</p>
<p>每行的第一个数c(1≤c≤4)表示集合中边的个数,接下来有c个整数表示集合中边的标号,保证集合中的整数互不相同。</p>
<h2 id="Output">Output</h2>
<p>输出k行,每行对应一个小集合的测试结果。</p>
<p>第i行包含“Connected”（没有引号)，如果给定的图去掉对应的集合中的边仍然连通，否则应该包含一个“Disconnected”。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4 5<br>
　1 2<br>
　2 3<br>
　3 4<br>
　4 1<br>
　2 4<br>
　3<br>
　1 5<br>
　2 2 3<br>
　2 1 2</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>Connected<br>
　Disconnected<br>
　Connected</p>
<h2 id="HINT">HINT</h2>
<p>N&lt;=100000 M&lt;=200000 K&lt;=100000</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定一张无向联通图，询问删除掉若干条边后图是否联通，多次询问。</p>
<h2 id="Solution">Solution</h2>
<p>首先我们看到<strong>删边判联通</strong>，第一反应想到了LCT，由于图不是一棵树，无法用LCT实现，那么我们否决掉了动态维护的方法。<br>
　　根据<strong>可以离线询问</strong>这一特征来思考如何操作，发现k(询问数)&lt;=100000，显然是log级别的做法，结合可离线的特征，这时候只剩下了对于所有询问一起进行操作的方法 ，现在我们得出了算法：CDQ分治。<br>
　　发现直接删边操作较为困难，我们逆向思维，考虑<strong>如何在一个空的图上加边</strong>。<br>
　　先考虑只有两个询问的情况，假定我们的询问删边集合为A,B，那么显然想到了<strong>先把不在A中并且不在B中边加入</strong>（这时称其为状态一），然后分开处理，<strong>先加入不在A中但是在B中的边</strong>，判下是否联通就<strong>得到了A中的答案</strong>，然后回到状态一，<strong>加入不在B中在A中的边</strong>，判断一下<strong>得到了B的答案</strong>。<br>
　　然后基于这样的整个思路，我们考虑<strong>如何将两个集合拓展到多个集合</strong>。<br>
　　立马想到了分治，对于所有集合分治使其类同于<strong>A,B两种“大集合”</strong>，然后继续分治，最后必然可以归于仅有两个小集合的情况，然后向上回溯即可。加边用并查集加入即可。<br>
　　我们来整理一下CDQ分治的思路：<br>
　　　　1、加入不在左区间但在右区间的边；<br>
　　　　2、对于左区间继续分治；<br>
　　　　3、回到上一层的状态（在分治的时候记录并查集中改变了的父子关系，暴力修改回去即可）<br>
　　　　4、加入不在右区间但在左区间的边；<br>
　　　　5、对于右区间继续分治；<br>
　　　　……<br>
　　最后判断是否联通的时候又发现一开始的整张图是处于连通状态的，所以我们只要<strong>判断删掉的边的端点是否连通</strong>即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,Bian;</span><br><span class="line"><span class="keyword">int</span> fat[ONE],cnt;</span><br><span class="line"><span class="keyword">int</span> PD[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;a[ONE*<span class="number">2</span>],q[ONE*<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">int</span> b[<span class="number">5</span>];</span><br><span class="line">&#125;quey[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x!=fat[x])</span><br><span class="line">    &#123;</span><br><span class="line">        q[++cnt].x=x;   q[cnt].y=fat[x];</span><br><span class="line">        fat[x]=<span class="built_in">Find</span>(fat[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fat[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Un</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f1=<span class="built_in">Find</span>(x);</span><br><span class="line">    <span class="keyword">int</span> f2=<span class="built_in">Find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(f1!=f2)</span><br><span class="line">    &#123;</span><br><span class="line">        q[++cnt].x=f2;  q[cnt].y=fat[f2];</span><br><span class="line">        fat[f2]=f1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_pd</span><span class="params">(<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pd=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=quey[l].c;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j=quey[l].b[i];</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Find</span>(a[j].x) != <span class="built_in">Find</span>(a[j].y))</span><br><span class="line">        &#123;</span><br><span class="line">            pd=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mark</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=quey[i].c;j++)</span><br><span class="line">            PD[quey[i].b[j]]=t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=quey[i].c;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> num=quey[i].b[j];</span><br><span class="line">            <span class="keyword">if</span>(PD[num]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">Un</span>(a[num].x,a[num].y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Back</span><span class="params">(<span class="keyword">int</span> Now_cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;cnt&gt;Now_cnt;cnt--)</span><br><span class="line">        fat[q[cnt].x]=q[cnt].y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        Ans[l]=<span class="built_in">Get_pd</span>(l);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> Now_cnt=cnt;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">Mark</span>(l,mid,<span class="number">1</span>); <span class="built_in">Add</span>(mid+<span class="number">1</span>,r); <span class="built_in">Mark</span>(l,mid,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">CDQ</span>(l,mid);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Back</span>(Now_cnt);</span><br><span class="line">    <span class="built_in">Mark</span>(mid+<span class="number">1</span>,r,<span class="number">1</span>); <span class="built_in">Add</span>(l,mid); <span class="built_in">Mark</span>(mid+<span class="number">1</span>,r,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">CDQ</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    Bian=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fat[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Bian;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i].x=<span class="built_in">get</span>();   a[i].y=<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        quey[i].c=<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=quey[i].c;j++)</span><br><span class="line">            quey[i].b[j]=<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Mark</span>(<span class="number">1</span>,m,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Bian;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(PD[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">Un</span>(a[i].x,a[i].y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Mark</span>(<span class="number">1</span>,m,<span class="number">0</span>); cnt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CDQ</span>(<span class="number">1</span>,m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Ans[i]) <span class="built_in">printf</span>(<span class="string">&quot;Connected&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Disconnected&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>分治</category>
      </categories>
      <tags>
        <tag>CDQ分治</tag>
      </tags>
  </entry>
  <entry>
    <title>[CDQ分治]纸箱堆叠</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BCDQ%E5%88%86%E6%B2%BB%5D%E7%BA%B8%E7%AE%B1%E5%A0%86%E5%8F%A0/</url>
    <content><![CDATA[<h1>纸箱堆叠</h1>
<p>Time Limit: 30 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>P 工厂是一个生产纸箱的工厂。<br>
　　纸箱生产线在人工输入三个参数 n p a , 之后即可自动化生产三边边长为</p>
<p>(a mod P,a^2 mod p,a^3 mod P)<br>
　　(a^4 mod p,a^5 mod p,a^6 mod P)<br>
　　…<br>
　　(a^(3n-2) mod p,a^(3n-1) mod p,a^(3n) mod p)</p>
<p>的n个纸箱。<br>
　　在运输这些纸箱时，为了节约空间，必须将它们嵌套堆叠起来。<br>
　　一个纸箱可以嵌套堆叠进另一个纸箱当且仅当它的最短边、次短边和最长边长度分别严格小于另一个纸箱的最短边、次短边和最长边长度。<br>
　　你的任务是找出这n个纸箱中数量最多的一个子集，使得它们两两之间都可嵌套堆叠起来。</p>
<h2 id="Input">Input</h2>
<p>输入文件的第一行三个整数，分别代表 a,p,n</p>
<h2 id="Output">Output</h2>
<p>输出文件仅包含一个整数，代表数量最多的可嵌套堆叠起来的纸箱的个数。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>10 17 4</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>2<br>
【样例说明】<br>
　生产出的纸箱的三边长为(10, 15, 14), (4, 6, 9) , (5, 16, 7), (2, 3, 13)。</p>
<p>其中只有(4, 6, 9)可堆叠进(5, 16, 7)，故答案为 2。</p>
<h2 id="HINT">HINT</h2>
<p>2&lt;=P&lt;=2000000000,  1&lt;=a&lt;=p-1, a^k mod p&lt;&gt;0, ap&lt;=2000000000, 1&lt;=N&lt;=50000</p>
<h2 id="Main-idea">Main idea</h2>
<p>每一个元素有三个属性a,b,c，求出最大可连续堆叠个数（可堆叠条件是a1&lt;a2,b1&lt;b2,c1&lt;c2）</p>
<h2 id="Solution">Solution</h2>
<p>题目显然是<strong>三维偏序</strong>问题，运用CDQ分治求解。</p>
<p>用排序处理a保证a有序，分治的时候满足左区间的b都小于右区间的b，再处理c，这样问题就转化为了求一个点在一个平面上横纵坐标都小于它的点有几个，用树状数组处理即可。</p>
<p>发现这样处理之后答案只能满足&lt;=该点，考虑如何令答案<strong>严格小于</strong>。</p>
<p>首先b，c的严格小于处理显然，因为a是sort保证的那么如何要使得a的统计严格小于呢？只需要在b的sort前将分割的指针向左移动到第一个不等于的即可，结合分治考虑一下<strong>while(q[mid].a==q[mid-1].a) mid–</strong>，发现这样处理最后会影响到排序，所以做右区间的时候重新按照a排序一下即可。</p>
<p>考虑如何统计答案，发现显然有： <strong>q[j].ans=max(q[j].ans,Query(q[j].c-1)+1)</strong>。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">1000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,MOD,a,m;</span><br><span class="line"><span class="keyword">int</span> PD[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"><span class="keyword">int</span> C[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans,cnt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b,c;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">&#125;q[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos,value;</span><br><span class="line">&#125;Lisa[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.a!=b.a) <span class="keyword">return</span> a.a&lt;b.a;</span><br><span class="line">    <span class="keyword">if</span>(a.b!=b.b) <span class="keyword">return</span> a.b&lt;b.b;</span><br><span class="line">    <span class="keyword">return</span> a.c&lt;b.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cdp</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.b!=b.b) <span class="keyword">return</span> a.b&lt;b.b;</span><br><span class="line">    <span class="keyword">return</span> a.c&lt;b.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rule</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.a==b.a &amp;&amp; a.b==b.b &amp;&amp; a.c==b.c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> R,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=R;i&lt;=cnt;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">        C[i]=<span class="built_in">max</span>(C[i],x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=R;i&gt;=<span class="number">1</span>;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line">        res=<span class="built_in">max</span>(res,C[i]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Clear</span><span class="params">(<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=R;i&lt;=cnt;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">        C[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clis</span><span class="params">(<span class="keyword">const</span> point &amp;a,<span class="keyword">const</span> point &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.value&lt;b.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetLisan</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(q+<span class="number">1</span>,q+n+<span class="number">1</span>,cmp);</span><br><span class="line">    n=<span class="built_in">unique</span>(q+<span class="number">1</span>,q+n+<span class="number">1</span>,rule)<span class="number">-1</span>-q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Lisa[i].pos=i;</span><br><span class="line">        Lisa[i].value=q[i].c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(Lisa+<span class="number">1</span>,Lisa+n+<span class="number">1</span>,clis);</span><br><span class="line"></span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    Lisa[<span class="number">0</span>].value=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Lisa[i].value!=Lisa[i<span class="number">-1</span>].value) cnt++;</span><br><span class="line">        q[Lisa[i].pos].c=cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(q[mid].a==q[mid<span class="number">-1</span>].a) mid--;</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">Deal</span>(l,mid);</span><br><span class="line">    <span class="built_in">sort</span>(q+l,q+mid+<span class="number">1</span>,cdp);  <span class="built_in">sort</span>(q+mid+<span class="number">1</span>,q+r+<span class="number">1</span>,cdp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i=l,j=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid &amp;&amp; q[i].b&lt;q[j].b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Add</span>(q[i].c,q[i].ans);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        q[j].ans=<span class="built_in">max</span>(q[j].ans,<span class="built_in">Query</span>(q[j].c<span class="number">-1</span>)+<span class="number">1</span>);</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> T=l;T&lt;=mid;T++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Clear</span>(q[T].c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q+mid+<span class="number">1</span>,q+r+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="built_in">Deal</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a=<span class="built_in">get</span>();    MOD=<span class="built_in">get</span>();  n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;    res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            res=(<span class="keyword">long</span> <span class="keyword">long</span>)res*a%MOD;</span><br><span class="line">            PD[j]=res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(PD+<span class="number">1</span>,PD+<span class="number">3</span>+<span class="number">1</span>);</span><br><span class="line">        q[i].a=PD[<span class="number">1</span>]; q[i].b=PD[<span class="number">2</span>]; q[i].c=PD[<span class="number">3</span>];</span><br><span class="line">        q[i].ans=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetLisan</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Deal</span>(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        Ans=<span class="built_in">max</span>(Ans,q[i].ans);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>分治</category>
      </categories>
      <tags>
        <tag>CDQ分治</tag>
      </tags>
  </entry>
  <entry>
    <title>[DP]Famil Door and Brackets</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BDP%5DFamil%20Door%20and%20Brackets/</url>
    <content><![CDATA[<h1>Famil Door and Brackets</h1>
<p>Time Limit: 20 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012351.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012355.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012357.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4 1<br>
　　(</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>4</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012400.png" alt="img"></p>
<h2 id="Solution">Solution</h2>
<p>显然，我们考虑运用DP。先求出 <strong>f[i][j]</strong> 表示 <strong>长度为 i 的括号序列，“)” 比 “(” 多 j 个的方案</strong>（<strong>时刻保证 j &gt;= 0</strong>）。</p>
<p>然后我们考虑怎样获得<strong>答案</strong>。先预处理出<strong>L，R</strong>表示<strong>将读入的括号序列消去若干对</strong>之后剩下的**“)” “(”<strong>个数（消去吼显然</strong>形如“))(((”**）。</p>
<p>那么我们<strong>左边要加入的</strong>就要<strong>至少多R个“(”</strong>，右边类似。</p>
<p>但是显然，我也可以左边<strong>再多填</strong>几个“(”，右边<strong>再多填</strong>几个“)”。</p>
<p>那么我们就可以 <strong>枚举左边填 i 个括号</strong>（则右边填 need - i 个），<strong>左边多填 num 个“(”</strong>（则右边多填 num 个“)”）。</p>
<p>然后统计答案即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">800005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Base = <span class="number">2005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, need;</span><br><span class="line"><span class="keyword">char</span> s[ONE];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"><span class="keyword">int</span> stk[ONE], top;</span><br><span class="line"><span class="keyword">int</span> L = <span class="number">0</span>, R = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> );</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= need; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= need; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j] = (f[i][j] + f[i - <span class="number">1</span>][j + <span class="number">1</span>]) % MOD;</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= <span class="number">1</span>) f[i][j] = (f[i][j] + f[i - <span class="number">1</span>][j - <span class="number">1</span>]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_LR</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; stk[top] == <span class="string">&#x27;(&#x27;</span>) top--;</span><br><span class="line">        <span class="keyword">else</span> stk[++top] = s[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; i++)</span><br><span class="line">        <span class="keyword">if</span>(stk[i] == <span class="string">&#x27;(&#x27;</span>) L++;</span><br><span class="line">    <span class="keyword">else</span> R++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();    m = <span class="built_in">get</span>();    need = n - m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Deal_f</span>(), <span class="built_in">Deal_LR</span>();</span><br><span class="line"></span><br><span class="line">    Ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= need; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num = <span class="number">0</span>; num &lt;= need; num++)<span class="comment">//left&#x27;s L</span></span><br><span class="line">            <span class="keyword">if</span>(R + num &lt; <span class="number">2005</span> &amp;&amp; L + num &lt; <span class="number">2005</span>)</span><br><span class="line">                Ans = (Ans + (s64)f[i][R + num] * f[need - i][L + num] % MOD) % MOD;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[DP]BST again</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BDP%5DBST%20again/</url>
    <content><![CDATA[<h1>BST again</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>求有多少棵大小为n的深度为h的二叉树。（树根深度为0；左右子树有别；答案对1000000007取模）</p>
<h2 id="Input">Input</h2>
<p>第一行一个整数T，表示数据组数。</p>
<p>以下T行，每行2个整数n和h。</p>
<h2 id="Output">Output</h2>
<p>共T行，每行一个整数表示答案（对1000000007取模）</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>2<br>
　2 1<br>
　3 2</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>2<br>
　4</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=n&lt;=600,0&lt;=h&lt;=600,1&lt;=T&lt;=10</p>
<h2 id="Solution">Solution</h2>
<p>我们运用DP来求解。</p>
<p>记<strong>f[i][j]<strong>表示</strong>点数为i，深度==j</strong>的方案数；<br>
　　记<strong>g[i][j]<strong>表示</strong>点数为i，深度&lt;=j</strong>的方案数。</p>
<p>转移的时候所以<strong>枚举一个点k作为根</strong>，那么<strong>左边</strong>显然就<strong>有k-1个点</strong>，<strong>右边</strong>就<strong>有i-k个点</strong>。</p>
<p>此时<strong>深度恰好为j-1</strong>的方案数为：<br>
　　<strong>g[k-1][j-1] * g[i-k][j-1] - g[k-1][j-2] * g[i-k][j-2]</strong>。</p>
<p>所以我们就可以得到答案了。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n, h;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">int</span> f[ONE][ONE], g[ONE][ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pwoer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modit</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &lt; <span class="number">0</span>) a += MOD;</span><br><span class="line">    <span class="keyword">if</span>(a &gt;= MOD) a -= MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; i++)</span><br><span class="line">        a[i].x = <span class="built_in">get</span>(), a[i].y = <span class="built_in">get</span>() + <span class="number">1</span>,</span><br><span class="line">    n = <span class="built_in">max</span>(n, a[i].x), h = <span class="built_in">max</span>(h, a[i].y);</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= h; i++) g[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= h; i++) g[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= i; j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= i; k++)</span><br><span class="line">                <span class="built_in">Modit</span>(f[i][j] += (s64)g[k - <span class="number">1</span>][j - <span class="number">1</span>] * g[i - k][j - <span class="number">1</span>] % MOD - (s64)g[k - <span class="number">1</span>][j - <span class="number">2</span>] * g[i - k][j - <span class="number">2</span>] % MOD);</span><br><span class="line"></span><br><span class="line">        g[i][<span class="number">0</span>] = f[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= h; j++)</span><br><span class="line">            <span class="built_in">Modit</span>(g[i][j] = g[i][j - <span class="number">1</span>] + f[i][j]);</span><br><span class="line">    &#125;    <span class="function">m</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">for</span><span class="params">(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; i++)</span></span></span><br><span class="line"><span class="function">            <span class="title">printf</span><span class="params">(<span class="string">&quot;%d\n&quot;</span>, f[a[i].x][a[i].y])</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[DP]JOIOJI</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BDP%5DJOIOJI/</url>
    <content><![CDATA[<h1>JOIOJI</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>JOIOJI桑是JOI君的叔叔。“JOIOJI”这个名字是由“J、O、I”三个字母各两个构成的。</p>
<p>最近，JOIOJI桑有了一个孩子。JOIOJI桑想让自己孩子的名字和自己一样由“J、O、I”三个字母构成，并且想让“J、O、I”三个字母的出现次数恰好相同。</p>
<p>JOIOJI桑家有一份祖传的卷轴，上面写着一首长诗，长度为N，由“J、O、I”三个字母组成。JOIOJIさん想用诗中最长的满足要求的连续子串作为孩子的名字。</p>
<p>现在JOIOJI桑将这首长诗交给了你，请你求出诗中最长的、包含同样数目的“J、O、I”三个字母的连续子串。</p>
<h2 id="Input">Input</h2>
<p>第一行一个正整数N，代表这首长诗的长度</p>
<p>接下来一行一个长度为N的字符串S，表示这首长诗，保证每个字符都是“J、O、I”三个字母中的一个</p>
<h2 id="Output">Output</h2>
<p>输出一行一个正整数，代表最长的包含等数量“J、O、I”三个字母的最长连续子串的长度。如果不存在这样的子串，输出0</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>10</p>
<p>JOIIJOJOOI</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>6</p>
<h2 id="HINT">HINT</h2>
<p>选择“IIJOJO”这个子串，长度为6，包含“J、O、I”三个字母各2个，这是最长的满足要求的子串。</p>
<p>1&lt;=N&lt;=2*10^5</p>
<h2 id="Solution">Solution</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528010003.png" alt="img"></p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">map &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt; Map;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> S[ONE];</span><br><span class="line"><span class="keyword">int</span> f[ONE][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">char</span> S)</span> </span>&#123;<span class="keyword">return</span> S==<span class="string">&#x27;J&#x27;</span> ? <span class="number">1</span>:(S==<span class="string">&#x27;O&#x27;</span> ? <span class="number">2</span> : <span class="number">3</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, S+<span class="number">1</span>);</span><br><span class="line">    Map[<span class="built_in">make_pair</span>(<span class="number">0</span>,<span class="number">0</span>)] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(f[i], f[i<span class="number">-1</span>], <span class="built_in"><span class="keyword">sizeof</span></span>(f[i<span class="number">-1</span>]));</span><br><span class="line">        f[i][<span class="built_in">id</span>(S[i])]++;</span><br><span class="line"></span><br><span class="line">        pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; t = <span class="built_in">make_pair</span>(f[i][<span class="number">1</span>] - f[i][<span class="number">2</span>], f[i][<span class="number">2</span>] - f[i][<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">if</span>(Map.<span class="built_in">find</span>(t) == Map.<span class="built_in">end</span>()) Map[t] = i;</span><br><span class="line">        <span class="keyword">else</span> Ans = <span class="built_in">max</span>(Ans, i - Map[t]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[DP]Valera and Number</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BDP%5DValera%20and%20Number/</url>
    <content><![CDATA[<h1>Valera and Number</h1>
<p>Time Limit: 20 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012457.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012459.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012501.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 3 25</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>1.9218750000</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012503.png" alt="img"></p>
<h2 id="Solution">Solution</h2>
<p>考虑运用DP。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012505.png" alt="img"></p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">800005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> all = <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x, n;</span><br><span class="line"><span class="keyword">double</span> p;</span><br><span class="line"><span class="keyword">double</span> f[<span class="number">205</span>][<span class="number">260</span>][<span class="number">255</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">double</span> Ans;</span><br><span class="line"><span class="keyword">int</span> val, num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> );</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_first</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> record[<span class="number">250</span>], num = <span class="number">0</span>, x = n;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">        record[++num] = x &amp; <span class="number">1</span>,</span><br><span class="line">    x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>, pos = <span class="number">9</span>, val = record[pos];</span><br><span class="line">    <span class="keyword">for</span>(pos = <span class="number">9</span>; pos + j - <span class="number">1</span> &lt;= num; j++)</span><br><span class="line">        <span class="keyword">if</span>(record[pos + j] != val) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>][n &amp; all][j][val] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x % <span class="number">2</span> == <span class="number">0</span>) res++, x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="built_in">get</span>(), n = <span class="built_in">get</span>(), p = (<span class="keyword">double</span>)<span class="built_in">get</span>() / <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">Deal_first</span>(x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">0</span>; s &lt;= all; s++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">250</span>; j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">1</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    val = s &gt;&gt; <span class="number">8</span> - <span class="number">1</span> &amp; <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(val != k) num = <span class="number">1</span>; <span class="keyword">else</span> num = j + <span class="number">1</span>;</span><br><span class="line">                    f[i + <span class="number">1</span>][s &lt;&lt; <span class="number">1</span> &amp; all][num][val] += f[i][s][j][k] * p;</span><br><span class="line"></span><br><span class="line">                    val = s == all ? (k ^ <span class="number">1</span>) : k;</span><br><span class="line">                    <span class="keyword">if</span>(val != k &amp;&amp; k == <span class="number">0</span>) num = <span class="number">1</span>; <span class="keyword">else</span> num = j;</span><br><span class="line">                    f[i + <span class="number">1</span>][s + <span class="number">1</span> &amp; all][num][val] += f[i][s][j][k] * (<span class="number">1</span> - p);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">0</span>; s &lt;= all; s++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">250</span>; j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">1</span>; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s == <span class="number">0</span> &amp;&amp; k == <span class="number">0</span>) val = j + <span class="number">8</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="number">0</span> &amp;&amp; k == <span class="number">1</span>) val = <span class="number">8</span>;</span><br><span class="line">                <span class="keyword">else</span> val = <span class="built_in">Get</span>(s);</span><br><span class="line">                Ans += f[n][s][j][k] * val;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.8lf&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[DP][Tarjan]最大半连通子图</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BDP%5D%5BTarjan%5D%E6%9C%80%E5%A4%A7%E5%8D%8A%E8%BF%9E%E9%80%9A%E5%AD%90%E5%9B%BE/</url>
    <content><![CDATA[<h1>最大半连通子图</h1>
<p>Time Limit: 30 Sec Memory Limit: 162 MB</p>
<h2 id="Description">Description</h2>
<p>一个有向图G=(V,E)称为半连通的(Semi-Connected)：</p>
<p>如果满足：∀u,v∈V，满足u→v或v→u，即对于图中任意两点u，v,存在一条u到v的有向路径或者从v到u的有向路径。</p>
<p>若G’=(V’,E’)满足V’∈V，E’是E中所有跟V’有关的边，则称G’是G的一个导出子图。</p>
<p>若G’是G的导出子图，且G’半连通，则称G’为G的半连通子图。</p>
<p>若G’是G所有半连通子图中包含节点数最多的，则称G’是G的最大半连通子图。</p>
<p>给定一个有向图G，请求出G的最大半连通子图拥有的节点数K ，以及不同的最大半连通子图的数目C。</p>
<p>由于C可能比较大，仅要求输出C对X的余数。</p>
<h2 id="Input">Input</h2>
<p>第一行包含两个整数N，M，X。N，M分别表示图G的点数与边数，X的意义如上文所述。</p>
<p>接下来M行，每行两个正整数a, b，表示一条有向边(a, b)。图中的每个点将编号为1,2,3…N，保证输入中同一个(a,b)不会出现两次。</p>
<h2 id="Output">Output</h2>
<p>应包含两行，第一行包含一个整数K。第二行包含整数C Mod X.</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>6 6 20070603<br>
　1 2<br>
　2 1<br>
　1 3<br>
　2 4<br>
　5 6<br>
　6 4</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3<br>
　　3</p>
<h2 id="HINT">HINT</h2>
<p>N ≤100000, M ≤1000000；对于100%的数据， X ≤10^8</p>
<h2 id="Main-idea">Main idea</h2>
<p>求最大半联通子图大小与个数。（最大半联通子图定义：在这个图内对于任意节点u,v，存在一条u-&gt;v的路径）</p>
<h2 id="Solution">Solution</h2>
<p>先跑一遍Tarjan，得到了两两连通的图，然后考虑如何加入单向连通的点集，显然两个强连通分量之间要是有连边的话，就可以满足这两个强连通分量的点单向连通，符合题意。</p>
<p>那么答案显然就是在缩点后的DAG（有向无环图）上的<strong>最长路径</strong>。</p>
<p>用拓扑+DP（本质是在拓扑序上的DP）可以求出即为Ans，然后在跑的时候用一个数组f[i]统计一下相同的个数，注意更新dist的时候也要更新f，最后如果dist[i]=Ans，那么累加f[i]，即为答案。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">2000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,MOD;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">int</span> Next[ONE],First[ONE],Go[ONE],tot;</span><br><span class="line"><span class="keyword">int</span> next[ONE],first[ONE],go[ONE],Input[ONE];</span><br><span class="line"><span class="keyword">int</span> dist[ONE];</span><br><span class="line"><span class="keyword">int</span> T,t;</span><br><span class="line"><span class="keyword">int</span> tou,wei,jishu;</span><br><span class="line"><span class="keyword">int</span> q[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans,num,f[ONE];</span><br><span class="line"><span class="keyword">int</span> Dfn[ONE],Low[ONE],vis[ONE],F[ONE],Num[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.u==b.u) <span class="keyword">return</span> a.v&lt;b.v;</span><br><span class="line">    <span class="keyword">return</span> a.u&lt;b.u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rule</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.u==b.u &amp;&amp; a.v==b.v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Next[++tot]=First[u];   First[u]=tot;   Go[tot]=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;  Input[v]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Dfn[u]=Low[u]=++T;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    q[++t]=u;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e=First[u];e;e=Next[e])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=Go[e];</span><br><span class="line">        <span class="keyword">if</span>(!Dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Tarjan</span>(v);</span><br><span class="line">            Low[u]=<span class="built_in">min</span>(Low[u],Low[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>    <span class="keyword">if</span>(vis[v])</span><br><span class="line">            Low[u]=<span class="built_in">min</span>(Low[u],Dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(Low[u]==Dfn[u])</span><br><span class="line">    &#123;</span><br><span class="line">        jishu++;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            v=q[t--];</span><br><span class="line">            F[v]=jishu;</span><br><span class="line">            vis[v]=<span class="number">0</span>;</span><br><span class="line">            Num[jishu]=Num[jishu]+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">while</span>(v!=u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rebuild</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=First[u];e;e=Next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=Go[e];</span><br><span class="line">            <span class="keyword">if</span>(F[u]!=F[v])</span><br><span class="line">            &#123;</span><br><span class="line">                a[++num].u=F[u];</span><br><span class="line">                a[num].v=F[v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+num+<span class="number">1</span>,cmp);</span><br><span class="line">    num=<span class="built_in">unique</span>(a+<span class="number">1</span>,a+num+<span class="number">1</span>,rule)<span class="number">-1</span>-a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Add_edge</span>(a[i].u,a[i].v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Topufirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=jishu;v++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!Input[v]) q[++wei]=v;</span><br><span class="line">        dist[v]=Num[v];</span><br><span class="line">        f[v]=<span class="number">1</span>;</span><br><span class="line">        Ans=<span class="built_in">max</span>(Ans,dist[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TopuA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(tou&lt;wei)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[++tou];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(dist[v]&lt;dist[u]+Num[v])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v]=dist[u]+Num[v];</span><br><span class="line">                f[v]=f[u];</span><br><span class="line">                Ans=<span class="built_in">max</span>(Ans,dist[v]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span>(dist[v]==dist[u]+Num[v]) f[v]=(f[v]+f[u])%MOD;</span><br><span class="line">            <span class="keyword">if</span>(!(--Input[v])) q[++wei]=v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();    MOD=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Add</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!Dfn[i]) <span class="built_in">Tarjan</span>(i);</span><br><span class="line"></span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">Rebuild</span>();</span><br><span class="line"></span><br><span class="line">    tou=<span class="number">0</span>;  wei=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">Topufirst</span>(); <span class="built_in">TopuA</span>();</span><br><span class="line"></span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=jishu;i++)</span><br><span class="line">        <span class="keyword">if</span>(dist[i]==Ans) tot=(tot+f[i])%MOD;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n%d&quot;</span>,Ans,tot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>Tarjan</tag>
      </tags>
  </entry>
  <entry>
    <title>[DP][prufer编码]树</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BDP%5D%5Bprufer%E7%BC%96%E7%A0%81%5D%E6%A0%91/</url>
    <content><![CDATA[<h1>树</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>有n个点，它们从1到n进行标号，第i个点的限制为度数不能超过Ai<br>
现在对于每个s(1≤s≤n)，问从这n个点中选出一些点组成大小为s 的有标号无根树的方案数。</p>
<h2 id="Input">Input</h2>
<p>第一行一个整数n，</p>
<p>第二行n个整数表示Ai</p>
<h2 id="Output">Output</h2>
<p>输出一行n个整数，第i个整数表示s=i时的答案</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3<br>
　　2 2 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3 3 2</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527193335.png" alt="img"></p>
<h2 id="Solution">Solution</h2>
<p>由于是带标号的无根树的计数，于是我们运用<strong>prufer编码</strong>的性质来解题。</p>
<p>prufer编码的几个性质：<br>
　　　　1.对于大小为s的树，prufer编码是一个长度为 s-2 的序列；<br>
　　　　2.i在序列中出现的次数&lt;deg[i]；<br>
　　　　3.一个prufer编码表示一棵树。</p>
<p>所以这题可以转化为求prufer编码的计数。</p>
<p>我们令f[i][j][k]表示前i个点，选择了j个，prufer编码长度为k的方案数。那么显然有</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527193338.png" alt="img"></p>
<p>其中 f[i-1][j][k] 表示不选择该点的方案数，后面的式子表示选择了该点的方案数，选择该点可以在编码中出现0-deg[i]-1次，然后<strong>在编码中的出现顺序可以任意</strong>所以要乘上C。</p>
<p>最后如果i=1显然输出n，否则由于<strong>prufer编码是长度i-2的序列</strong>，所以输出f[n][i][i-2]。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1004535809</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> deg[ONE];</span><br><span class="line"><span class="keyword">int</span> C[ONE][ONE];</span><br><span class="line"><span class="keyword">int</span> f[ONE][ONE][ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mod</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;MOD) a-=MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) deg[i]=<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            C[i][j] = (C[i<span class="number">-1</span>][j] + C[i<span class="number">-1</span>][j<span class="number">-1</span>]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=n;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                f[i][j][k] += f[i<span class="number">-1</span>][j][k]; <span class="built_in">Mod</span>(f[i][j][k]);</span><br><span class="line">                <span class="keyword">if</span>(!j) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>; l &lt; deg[i] &amp;&amp; l &lt;= k ;l++)</span><br><span class="line">                &#123;</span><br><span class="line">                    f[i][j][k] += (s64)f[i<span class="number">-1</span>][j<span class="number">-1</span>][k-l] * C[k][l] % MOD;</span><br><span class="line">                    <span class="built_in">Mod</span>(f[i][j][k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,n);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,f[n][i][i<span class="number">-2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>prufer编码</tag>
      </tags>
  </entry>
  <entry>
    <title>[DP][分治]消失之物</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BDP%5D%5B%E5%88%86%E6%B2%BB%5D%E6%B6%88%E5%A4%B1%E4%B9%8B%E7%89%A9/</url>
    <content><![CDATA[<h1>消失之物</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>ftiasch 有 <em>N</em> 个物品, 体积分别是 <em>W1</em>, <em>W2</em>, …, <em>WN</em>。</p>
<p>由于她的疏忽, 第 <em>i</em> 个物品丢失了.</p>
<p>“要使用剩下的 <em>N</em> - 1 物品装满容积为 <em>x</em> 的背包，有几种方法呢？” – 这是经典的问题了。</p>
<p>她把答案记为 <em>Count(i, x)</em> ，想要得到所有1 &lt;= i &lt;= N, 1 &lt;= x &lt;= M的 <em>Count(i, x)</em> 表格。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528013114.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p>第1行：两个整数 <em>N</em> 和 <em>M</em> ，物品的数量和最大的容积。</p>
<p>第2行： <em>N</em> 个整数 <em>W1</em>, <em>W2</em>, …, <em>WN</em>, 物品的体积。</p>
<h2 id="Output">Output</h2>
<p>一个 <em>N</em> × <em>M</em> 的矩阵， *Count(i, x)*的末位数字。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3 2<br>
　1 1 2</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>11<br>
　11<br>
　21</p>
<h2 id="HINT">HINT</h2>
<p>1 ≤ <em>N</em> ≤ 2 × 1e3, 1 ≤ <em>M</em> ≤ 2 × 1e3</p>
<h2 id="Solution">Solution</h2>
<p>首先，我们发现，对于L，R：<br>
　　去掉L，就是要用**[1, L - 1]∪[L + 1, n]<strong>的物品来求解；<br>
　　去掉R，就是要用</strong>[1, R - 1]∪[R + 1, n]<strong>的物品来求解。<br>
　　若是我们更新完了</strong>([1, L - 1]∪[L + 1, n])<strong>∩</strong>([1, R - 1]∪[R + 1, n])<strong>的部分，<br>
　　再加上</strong>L<strong>的，即是去掉</strong>R<strong>的答案；再加上</strong>R<strong>的，即是去掉</strong>L**的答案。</p>
<p>那么我们就可以考虑分治：<br>
　　设计状态<strong>Solve(L, R)</strong>，表示<strong>已经做完了[1, L - 1]∪[R + 1, n]时</strong>的答案。<br>
　　然后二分一个<strong>mid = L + R &gt;&gt; 1;</strong><br>
　　要处理**[L, mid]<strong>则将</strong>[mid + 1, R]<strong>的更新一下，反之同理。<br>
　　那么这样我们最后做到</strong>L == R**时候，显然就是去掉L的答案了。</p>
<p>DP部分显然就是一个简单的背包。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[ONE];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">20</span>][ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> Dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L == R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, f[Dep][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = L + R &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= <span class="number">0</span>; j--) f[Dep + <span class="number">1</span>][j] = f[Dep][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt;= R; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">            (f[Dep + <span class="number">1</span>][j] += f[Dep + <span class="number">1</span>][j - a[i]]) %= <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">Solve</span>(L, mid, Dep + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= <span class="number">0</span>; j--) f[Dep + <span class="number">1</span>][j] = f[Dep][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = L; i &lt;= mid; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">            (f[Dep + <span class="number">1</span>][j] += f[Dep + <span class="number">1</span>][j - a[i]]) %= <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">Solve</span>(mid + <span class="number">1</span>, R, Dep + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();    m = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = <span class="built_in">get</span>();</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Solve</span>(<span class="number">1</span>, n, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>分治</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>[DP][数论]Count</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BDP%5D%5B%E6%95%B0%E8%AE%BA%5DCount/</url>
    <content><![CDATA[<h1>Count</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528011311.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528011314.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528011324.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>6 3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>2248</p>
<h2 id="HINT">HINT</h2>
<p><img src="F:%5CData%5Cimg%5C1109445-20170916102503688-1674223828.png" alt="img"></p>
<h2 id="Solution">Solution</h2>
<p>这必然是一道数学题。首先，显然的有：如果 <strong>π xi &lt;= n ^ 2m</strong> 时，显然是<strong>没有限制的</strong>。并且 n ^ m = sqrt(n ^ 2m)。</p>
<p>我们记录：<strong>s1</strong> 表示 <strong>&lt; n ^ m</strong> 的个数，<strong>s2</strong> 表示 <strong>= n ^ m</strong> 的个数，<strong>s3</strong> 表示 <strong>&gt; n ^ m</strong> 的个数。</p>
<p>那么显然有 <strong>s1 = s3</strong>。并且<strong>无限制方案数 = (n的约数个数)^2m</strong>，这时候，我们只要求出 s2 即可。</p>
<p>问题转化为：在 <strong>2m 个位置中</strong> 填入若干个<strong>数</strong>，记 <strong>n的某一质因子为 x</strong>，那我们要满足 <strong>填入数中 x 的指数之和</strong> = <strong>m * （n 中这个 x 的指数）</strong>。</p>
<p>那么显然对于<strong>n的每一个质因子</strong> DP 一下，<strong>f[i][j]<strong>表示</strong>填到了第 i 个数， 和为 j 的方案数</strong>。（由于 <strong>填数只能是 n 的约数</strong>，还要保证 <strong>每个数的 x 的指数 &lt; n 中这个 x 的指数</strong>）。显然 <strong>统计的时候乘上 f[2 * m][指数 * m]</strong>。</p>
<p>最后算一下<strong>s1 + s2</strong>即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[ONE], T;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">2</span>][<span class="number">35</span> * <span class="number">100</span>], Ans = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quickpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = (s64)res * a % MOD;</span><br><span class="line">        a = (s64)a * a % MOD;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">(<span class="keyword">int</span> Num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f)); f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> A = <span class="number">1</span>, B = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> id = <span class="number">1</span>; id &lt;= <span class="number">2</span> * m; id++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(A, B); <span class="built_in">memset</span>(f[B], <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f[B]));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= Num * m; j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= Num &amp;&amp; k &lt;= j; k++)</span><br><span class="line">                f[B][j] = (f[B][j] + f[A][j - k]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Ans = (s64)Ans * f[B][Num * m] % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Factor</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= x; i++)</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> Num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x % i == <span class="number">0</span>) x /= i, Num++;</span><br><span class="line">            <span class="built_in">Deal</span>(Num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">1</span>) <span class="built_in">Deal</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();    m = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span>(n % i == <span class="number">0</span>) &#123;T++; <span class="keyword">if</span>(n / i != i) T++;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Factor</span>(n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ((s64)(<span class="built_in">Quickpow</span>(T, <span class="number">2</span>*m) - Ans + MOD) % MOD * <span class="built_in">Quickpow</span>(<span class="number">2</span>, MOD - <span class="number">2</span>) % MOD + Ans) % MOD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>[DP][数论]登山</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BDP%5D%5B%E6%95%B0%E8%AE%BA%5D%E7%99%BB%E5%B1%B1/</url>
    <content><![CDATA[<h1>登山</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>恶梦是一个登山爱好者，今天他来到了黄山<br>
　　俗话说的好，不走回头路。所以在黄山，你只能往前走，或者往上走。<br>
　　并且很显然的是，当你走到山脊的时候，你不能够往上走，你只能往前走一步再往上走。<br>
　　抽象一点而言就是，你可以把黄山视为一个N * N格点图，恶梦从(0,0)开始出发，要走到 (N,N)。<br>
　　当他走到位置(x,y)的时候，它可以往(x + 1,y),或(x,y+1)走。<br>
　　并且当他走到(x,x)的时候，由于他已经处在了山脊上，所以他不能够往(x,x+1)方向上走。<br>
　　当恶梦兴致勃勃准备开始爬山的时候，他的同伴告诉他，黄山由于年久失修，有一些位置出现了大坑，不能走。<br>
　　恶梦觉得更刺激了，但他想先知道他能有多少种方式走到黄山顶。<br>
　　由于这个数字很大，所以你只需要将答案对10^9 + 7取模输出即可。</p>
<h2 id="Input">Input</h2>
<p>第一行包括两个整数N,C,分别表示你可以把黄山视作一个N * N的格点图，并且黄山上面有C个位置出现了大坑。<br>
　　接下来的C行，每行包括两个整数X,Y,表示X,Y这个位置不能走。<br>
　　保证X&gt;=Y,也就是说(X,Y)必然在山上。<br>
　　保证这C个点互不相同。</p>
<h2 id="Output">Output</h2>
<p>输出只有一个整数Ans,表示恶梦爬上山顶的路径数对10^9+7取模的值。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 2<br>
　　5 0<br>
　　1 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>27</p>
<h2 id="HINT">HINT</h2>
<p>对于100%的数据，保证N&lt;=100000,C&lt;=1000。<br>
　　保证对于(0,0),(N,N)不存在障碍点。</p>
<h2 id="Solution">Solution</h2>
<p>这显然是一道数学题，结合DP，我们令 <strong>f[i] 表示不经过其它障碍点，首先经过障碍点 i</strong> 的方案数。</p>
<p>那么显然有：<strong>f[i] = Ways(0,0 -&gt; i) - f[j] * Ways(i -&gt; j)</strong>。</p>
<p>问题就转化为了，怎样求出<strong>满足不超过直线y=x+1</strong>，<strong>从一点走向另外一点</strong>的方案数。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528013324.png" alt="img"></p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528013327.png" alt="img"></p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528013329.png" alt="img"></p>
<p>所以<strong>Ways = ((x1, y1) -&gt; (x2, y2)) - ((x1, y1) -&gt; (y2-1, x2+1))</strong>。</p>
<p>统计答案只要加入一个**(n, n)<strong>在</strong>f**里面计算即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">5000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">int</span> fac[ONE], inv[ONE];</span><br><span class="line"><span class="keyword">int</span> f[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> point &amp;a, <span class="keyword">const</span> point &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.x != b.x) <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">    <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quickpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = (s64)res * a % MOD;</span><br><span class="line">        a = (s64)a * a % MOD;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_first</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++)</span><br><span class="line">        fac[i] = (s64)fac[i - <span class="number">1</span>] * i % MOD;</span><br><span class="line">    inv[<span class="number">2</span> * n] = <span class="built_in">Quickpow</span>(fac[<span class="number">2</span> * n], MOD - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span> * n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        inv[i] = (s64)inv[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">0</span> || m &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (s64)fac[n] * inv[m] % MOD * inv[n - m] % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modit</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &lt; <span class="number">0</span>) a += MOD;</span><br><span class="line">    <span class="keyword">if</span>(a &gt;= MOD) a -= MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Ways</span><span class="params">(point a, point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">0</span> || m &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">C</span>(b.y - a.y + b.x - a.x, b.y - a.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Getit</span><span class="params">(point a, point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Ways</span>(a, b) - <span class="built_in">Ways</span>(a, (point)&#123;b.y - <span class="number">1</span>, b.x + <span class="number">1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();    m = <span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">Deal_first</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        a[i].x = <span class="built_in">get</span>(), a[i].y = <span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    a[++m] = (point)&#123;n, n&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Modit</span>(f[i] = <span class="built_in">Getit</span>((point)&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, a[i]));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">            <span class="built_in">Modit</span>(f[i] -= (s64)f[j] * <span class="built_in">Getit</span>(a[j], a[i]) % MOD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, f[m]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>[DP][树状数组]Perm</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BDP%5D%5B%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%5DPerm/</url>
    <content><![CDATA[<h1>Perm</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>很久以前，有一个 1~n的排列。<br>
　　这个排列太杂乱无章了，方老师想要让它变得单调一些。<br>
　　方老师打算把排列中的数划分成两个非空子序列，一个单调上升，一个单调下降。<br>
　　需要注意的是，排列中的每个数必须恰在一个子序列中并保持原来在排列中的相对顺序不变。<br>
　　由于方案可能会比较多，你只需要输出方案数 mod 666623333。</p>
<h2 id="Input">Input</h2>
<p>第一行一个整数 n。<br>
　　第二行 n 个 1~n 的整数，为一个 1~n 的排列。</p>
<h2 id="Output">Output</h2>
<p>一个整数，满足题意的方案数 mod 666623333。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3<br>
　　1 3 2</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3</p>
<h2 id="HINT">HINT</h2>
<p>1 &lt;= n &lt;= 10^6</p>
<h2 id="Solution">Solution</h2>
<p>显然，我们运用DP。</p>
<p>我们记 <strong>f[i][j]</strong> 为<strong>做到了第 i 个数</strong>，<strong>i 为递增子序列结尾</strong>，<strong>j 为递减子序列结尾</strong>的<strong>方案数</strong>，<strong>g[i][j]</strong> 为<strong>做到了第 i 个数</strong>，<strong>i 为递减子序列结尾</strong>，<strong>j 为递增子序列结尾</strong>的<strong>方案数</strong>。</p>
<p>我们考虑 <strong>第 i 个数</strong> 和 <strong>第 i-1 个数</strong> 是否<strong>同属一个子序列</strong>：<br>
　　　　如果<strong>同属一个子序列</strong>，那么 <strong>f[i][j] += f[i-1][j]（a[i-1] &lt; a[i]）</strong>，<strong>g[i][j] += g[i-1][j]（a[i-1] &gt; a[i]）</strong>；（这里的 += 等价于 =）<br>
　　　　如果<strong>不同属一个子序列</strong>，那么 <strong>f[i][i-1] += g[i-1][j]（a[j] &lt; a[i]）</strong>，<strong>g[i][i-1] += f[i-1][j]（a[j] &gt; a[i]）</strong>。</p>
<p>我们考虑是否优化这个暴力。运用树状数组。</p>
<p><strong>省掉第一维</strong>。如果 a[i-1] &lt; a[i]，我们<strong>清空g</strong>，否则我们<strong>清空f</strong>。这个过程相当于<strong>完成了同属一个子序列的转移</strong>。</p>
<p>在<strong>转移之前记录</strong>接下来我们记<strong>S1</strong>为<strong>a[j] &lt; a[i]<strong>的</strong>g[j]的和</strong>，记<strong>S2</strong>为<strong>a[j] &gt; a[i]的f[j]的和</strong>。那么<strong>不同属一个的转移</strong>相当于<strong>f[i-1] += S1</strong>, <strong>g[i-1]+=S2</strong>。</p>
<p>初值显然就是<strong>f[n + 1] = 1, g[0] = 1</strong>（为了方便起见，BearChild把它设成<strong>f[n] = 1, g[1] = 1</strong>，在<strong>求和的时候求&lt;=的和</strong>）</p>
<p>最后求一下<strong>f、g的和</strong>即可。注意考虑<strong>全为上升</strong>的或者<strong>全为下降</strong>的，若是如此，则<strong>答案-1</strong>。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> C[ONE], mark[ONE], Time_cnt;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">BIT</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        Time_cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(C, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(C));</span><br><span class="line">        <span class="built_in">memset</span>(mark, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(mark));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Clear</span><span class="params">()</span> </span>&#123;Time_cnt++;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x &amp; -x;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mark[x] != Time_cnt)</span><br><span class="line">            C[x] = <span class="number">0</span>, mark[x] = Time_cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> R, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = R; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">            <span class="built_in">Check</span>(i), C[i] += x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(R == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = R; i &gt;= <span class="number">1</span>; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">            <span class="built_in">Check</span>(i), res += C[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;F, G;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = <span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> PD;</span><br><span class="line">    PD = <span class="number">-1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="keyword">if</span>(a[i - <span class="number">1</span>] &gt; a[i]) &#123;PD = <span class="number">0</span>; <span class="keyword">break</span>;&#125; Ans += PD;</span><br><span class="line">    PD = <span class="number">-1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="keyword">if</span>(a[i - <span class="number">1</span>] &lt; a[i]) &#123;PD = <span class="number">0</span>; <span class="keyword">break</span>;&#125; Ans += PD;</span><br><span class="line"></span><br><span class="line">    F.<span class="built_in">Add</span>(n, <span class="number">1</span>);    G.<span class="built_in">Add</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> S1 = G.<span class="built_in">Query</span>(a[i]);</span><br><span class="line">        <span class="keyword">int</span> S2 = F.<span class="built_in">Query</span>(n) - F.<span class="built_in">Query</span>(a[i] - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[i - <span class="number">1</span>] &lt; a[i]) G.<span class="built_in">Clear</span>();</span><br><span class="line">        <span class="keyword">if</span>(a[i - <span class="number">1</span>] &gt; a[i]) F.<span class="built_in">Clear</span>();</span><br><span class="line">        F.<span class="built_in">Add</span>(a[i - <span class="number">1</span>], S1), G.<span class="built_in">Add</span>(a[i - <span class="number">1</span>], S2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Ans += F.<span class="built_in">Query</span>(n) + G.<span class="built_in">Query</span>(n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>[DP]卡牌游戏</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BDP%5D%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<h1>卡牌游戏</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>N个人坐成一圈玩游戏。一开始我们把所有玩家按顺时针从1到N编号。首先第一回合是玩家1作为庄家。每个回合庄家都会随机（即按相等的概率）从卡牌堆里选择一张卡片，假设卡片上的数字为X，则庄家首先把卡片上的数字向所有玩家展示，然后按顺时针从庄家位置数第X个人将被处决即退出游戏。然后卡片将会被放回卡牌堆里并重新洗牌。被处决的人按顺时针的下一个人将会作为下一轮的庄家。那么经过N-1轮后最后只会剩下一个人，即为本次游戏的胜者。现在你预先知道了总共有M张卡片，也知道每张卡片上的数字。现在你需要确定每个玩家胜出的概率。</p>
<p>这里有一个简单的例子：</p>
<p>例如一共有4个玩家，有四张卡片分别写着3,4,5,6.</p>
<p>第一回合，庄家是玩家1，假设他选择了一张写着数字5的卡片。那么按顺时针数1,2,3,4,1，最后玩家1被踢出游戏。</p>
<p>第二回合，庄家就是玩家1的下一个人，即玩家2.假设玩家2这次选择了一张数字6，那么2,3,4,2,3,4，玩家4被踢出游戏。</p>
<p>第三回合，玩家2再一次成为庄家。如果这一次玩家2再次选了6，则玩家3被踢出游戏，最后的胜者就是玩家2.</p>
<h2 id="Input">Input</h2>
<p>第一行包括两个整数N,M分别表示玩家个数和卡牌总数。</p>
<p>接下来一行是包含M个整数，分别给出每张卡片上写的数字。</p>
<h2 id="Output">Output</h2>
<p>输出一行包含N个百分比形式给出的实数，四舍五入到两位小数。分别给出从玩家1到玩家N的胜出概率，每个概率之间用空格隔开，最后不要有空格。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 5<br>
　2 3 5 7 11</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>22.72% 17.12% 15.36% 25.44% 19.36%</p>
<h2 id="HINT">HINT</h2>
<p>对于100%的数据，有1&lt;=N&lt;=50 1&lt;=M&lt;=50 1&lt;=每张卡片上的数字&lt;=50</p>
<h2 id="Solution">Solution</h2>
<p>首先，我们每次删除之后，钦定<strong>被删除的下一个位置的新标号为1</strong>，那么<strong>最后剩下的就是1</strong>，所以我们可以运用DP，令 <strong>f[i][j] 表示剩下i个人，j存活的概率</strong>。</p>
<p>那么显然可以<strong>从剩下一个人往多了推</strong>，考虑在i个人中删除掉标号为j，对新标号的影响：记<strong>被删除的标号为del</strong>，显然影响就是<strong>所有标号顺时针往后顺延 i-del 位</strong>，那么新标号就是 <strong>(j+i-del) % i</strong>。</p>
<p>这样就可以转移啦qwq。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">10007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[ONE];</span><br><span class="line"><span class="keyword">double</span> f[ONE][ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();  m = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">        a[i] = <span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=m; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> del = (a[k] - <span class="number">1</span>) % i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(del == j) <span class="keyword">continue</span>;</span><br><span class="line">                f[i][j] += f[i<span class="number">-1</span>][(j + i - del)%i] / m;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j != <span class="number">1</span>) <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,f[n][j] * <span class="number">100</span>), <span class="built_in">putchar</span>(<span class="string">&#x27;%&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[DP]吉夫特</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BDP%5D%E5%90%89%E5%A4%AB%E7%89%B9/</url>
    <content><![CDATA[<h1>吉夫特</h1>
<p>Time Limit: 15 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528005449.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p>第一行一个整数n。<br>
　　接下来n行，每行一个整数，这n行中的第i行，表示ai。</p>
<h2 id="Output">Output</h2>
<p>一行一个整数表示答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4<br>
　　15<br>
　　7<br>
　　3<br>
　　1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>11</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528005443.png" alt="img"></p>
<h2 id="Main-idea">Main idea</h2>
<p>给定一个序列，问有多少个子序列满足相邻的数构成的组合数都为奇数。</p>
<h2 id="Solution">Solution</h2>
<p>首先我们用Lucas定理推一推可以知道：<strong>C(n,m)为奇数当且仅当n&amp;m=m</strong>。</p>
<p>有了这个定理就好办了，我们可以显然地想到DP：通过<strong>枚举数在二进制下的子集</strong>转移，这样保证了可以转移过去。</p>
<p>由于序列每个数都不同，且最大值为233333，所以效率是**O(3^18)**的。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">300005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,x;</span><br><span class="line"><span class="keyword">int</span> f[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">int</span> record = (f[x] + <span class="number">1</span>) % MOD;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> sub=x; sub; sub=(sub<span class="number">-1</span>) &amp; x)</span><br><span class="line">            f[sub] = (f[sub] + record) % MOD;</span><br><span class="line">        Ans = (Ans + record) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Ans-n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[DP]字串变化</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BDP%5D%E5%AD%97%E4%B8%B2%E5%8F%98%E5%8C%96/</url>
    <content><![CDATA[<h1>字串变化</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>定义一个（大写字母）字符串集合{S},初始时值包含一个给定的字符串S1，每次从中任意取出一个字符串，将它变换后再放入集合中。要求新的字符串在集合中没有出现过。<br>
　　变换的规则：在变化前、后，字符串均有大写字母组成，每次只改动一个位置，使它的ASCLL加1。例如：‘A’ –&gt; ‘B’。如果位置为‘Z’，则无法改动。<br>
若干次操作后，该集合的元素个数一定会达到最大。<br>
　　对最后的集合（已按字典序排列）中的Si（i &gt;1），定义Sj=P[Si]（Si由Sj变化而来）。<br>
　　求最大元素个数及{P}的方案数。（详情见样例。）</p>
<h2 id="Input">Input</h2>
<p>第1行有1个由大写字母组成的字符串。</p>
<h2 id="Output">Output</h2>
<p>输出2行，每行包含一个数，第一行表示最大元素个数，第二行表示方案数，答案都模10007。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>XYZ</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>6<br>
　　4</p>
<p>explain：<br>
　　最终集合为{XYZ,XZZ,YYZ,YZZ,ZYZ,ZZZ}<br>
　　{P}方案有{0,1,1,2,3,4},{0,1,1,3,3,4},{0,1,1,2,3,5},{0,1,1,3,3,5}</p>
<h2 id="HINT">HINT</h2>
<p>初始字符串长度&lt;=1000.</p>
<h2 id="Solution">Solution</h2>
<p>第一问<strong>乘一下</strong>就好了，这里讨论一下第二问。<br>
　　用**‘Z’-ai<strong>得到一个数字串，那么操作就变成了：<strong>每次将一个数字-1，最后全部减成0</strong>。比如</strong>’XYZ’<strong>，我们将其变成</strong>’012’<strong>。<br>
　　然后考虑</strong>状态<strong>是怎么变来的：<br>
　　显然，有</strong>几位是不满<strong>的，就</strong>有几种转移来的方法**（其中任意一位数字+1，即可得到一种父状态）。<br>
　　记一个状态可以<strong>由k个状态转移过来</strong>，然后答案显然就是：<strong>πk</strong>。<br>
　　我们考虑，<br>
　　我们得到一个<strong>长度为n</strong>的<strong>01串vis</strong>，如果这一位是<strong>1表示这一位不满</strong>。<br>
　　那么这个<strong>01串对答案的贡献</strong>就是：<strong>k ^ (π [vis_i=1]*a_i)</strong>。（<strong>k表示1的个数</strong>）<br>
　　为什么呢？<strong>对于一个位置</strong>，当<strong>这一位是[0,ai-1]都是不满的</strong>，<strong>个数</strong>就是<strong>ai</strong>。<br>
　　然后这样<strong>枚举</strong>每一位是否满，可以做到<strong>O(2^n)</strong>。<br>
　　我们考虑<strong>优化</strong>：<br>
　　<strong>把k相同的放在一起计算</strong>，记贡献为<strong>k^num[k]</strong>。<strong>num[k]<strong>即是</strong>各种1的个数为k情况的指数之和</strong>。<br>
　　<strong>num</strong>怎么得到呢？<br>
　　用<strong>f[i][j]<strong>表示</strong>到了第i位，有j个数不满的方案数</strong>，显然可以得到这样的递推式子：<br>
　　<strong>f[i][j] = f[i-1][j] + f[i-1][j-1] * (‘Z’-a[i])</strong><br>
　　然后<strong>Ans = π k^f[n][k]</strong>，就解决了这题qwq。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">4005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">10007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[ONE];</span><br><span class="line"><span class="keyword">char</span> ch[ONE];</span><br><span class="line"><span class="keyword">int</span> f[ONE][ONE];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quickpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = (s64)res * a % MOD;</span><br><span class="line">        a = (s64)a * a % MOD;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ch + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(ch + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        a[i] = <span class="string">&#x27;Z&#x27;</span> - ch[i];</span><br><span class="line"></span><br><span class="line">    Ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        Ans = (s64)Ans * (a[i]+<span class="number">1</span>) % MOD;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Ans);    Ans = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=i; j++)</span><br><span class="line">            f[i][j] = (f[i<span class="number">-1</span>][j] + f[i<span class="number">-1</span>][j<span class="number">-1</span>] * a[i] % (MOD - <span class="number">1</span>)) % (MOD - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++)</span><br><span class="line">        Ans = (s64)Ans * <span class="built_in">Quickpow</span>(k, f[n][k]) % MOD;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[DP]太空猫</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BDP%5D%E5%A4%AA%E7%A9%BA%E7%8C%AB/</url>
    <content><![CDATA[<h1>太空猫</h1>
<p>Time Limit: 1 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>太空猫(SpaceCat)是一款画面精致、玩法有趣的休闲游戏，你需要控制一只坐在迷你飞碟上的猫咪在太空里不断探索，让大家看看你能飞得多远。<br>
　　游戏地图可以看成一个二维的网格图，上下是两段障碍物。<br>
　　在游戏的一开始，太空猫位于地图最左边的下边界之上，且重力方向向下。<br>
　　在每个时刻，你可以用手指点击屏幕，翻转重力的方向，或者通过遥感控制太空猫往左或往右移动。<br>
　　每次翻转重力方向时，你需要消耗的能量值等于上下底边之间的高度差。<br>
　　在左右移动的时候，太空猫可以下降到对应重力方向更低的位置，但不能往上爬。<br>
　　当然，太空猫也不能穿墙而过。在重力翻转的过程中，直到碰到地面之前，你都不能操控太空猫左右移动。<br>
　　太空猫的终点位于地图的最右端的下底边之上，请计算为了让太空猫到达终点，需要消耗能量的最小值。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528003652.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p>第一行包含一个正整数n，即地图的宽度。</p>
<p>第二行包含n个正整数c_1,c_2,…,c_n，分别表示每个横坐标对应的上边界的高度。</p>
<p>第三行包含n个正整数f_1,f_2,…,f_n，分别表示每个横坐标对应的下边界的高度。</p>
<h2 id="Output">Output</h2>
<p>输出一行一个整数，即最少的能量，若无法到达终点，请输出“-1”。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4<br>
　3 4 3 2<br>
　1 2 1 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>4</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=n&lt;=100000, 2&lt;=c_i&lt;=10^9, 1&lt;=f_i&lt;c_i</p>
<h2 id="Solution">Solution</h2>
<p>很简单的DP，我们令 <strong>f[i][0/1]表示 到达第 i 个位置，重力方向为 向上/向下 的最小花费</strong>。</p>
<p>然后转移显然，可以参考程序。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[ONE],b[ONE];</span><br><span class="line">s64 f[ONE][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> s64 <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s64 res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=<span class="built_in">get</span>(), f[i][<span class="number">0</span>]=<span class="number">1e18</span>L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) b[i]=<span class="built_in">get</span>(), f[i][<span class="number">1</span>]=<span class="number">1e18</span>L;</span><br><span class="line"></span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;    f[<span class="number">1</span>][<span class="number">1</span>] = a[<span class="number">1</span>]-b[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i<span class="number">-1</span>] &lt;= a[i]) f[i][<span class="number">1</span>] = f[i<span class="number">-1</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(b[i<span class="number">-1</span>] &gt;= b[i]) f[i][<span class="number">0</span>] = f[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(a[i<span class="number">-1</span>] &lt;= b[i] || b[i<span class="number">-1</span>] &gt;= a[i]) &#123;<span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line"></span><br><span class="line">        f[i][<span class="number">0</span>] = <span class="built_in">min</span>(f[i][<span class="number">0</span>], f[i][<span class="number">1</span>] + a[i]-b[i]);</span><br><span class="line">        f[i][<span class="number">1</span>] = <span class="built_in">min</span>(f[i][<span class="number">1</span>], f[i][<span class="number">0</span>] + a[i]-b[i]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,f[n][<span class="number">0</span>]==<span class="number">1e18</span> ? <span class="number">-1</span>:f[n][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[DP]巴厘岛的雕塑</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BDP%5D%E5%B7%B4%E5%8E%98%E5%B2%9B%E7%9A%84%E9%9B%95%E5%A1%91/</url>
    <content><![CDATA[<h1>巴厘岛的雕塑</h1>
<p>Time Limit: 10 Sec Memory Limit: 64 MB</p>
<h2 id="Description">Description</h2>
<p>印尼巴厘岛的公路上有许多的雕塑,我们来关注它的一条主干道。</p>
<p>在这条主干道上一共有 N 座雕塑，为方便起见，我们把这些雕塑从 1 到 N 连续地进行标号，其中第 i 座雕塑的年龄是 Yi 年。为了使这条路的环境更加优美，政府想把这些雕塑分成若干组，并通过在组与组之间种上一些树，来吸引更多的游客来巴厘岛。</p>
<p>下面是将雕塑分组的规则：</p>
<p>这些雕塑必须被分为恰好 X 组，其中 A&lt; = X&lt; = B，每组必须含有至少一个雕塑，每个雕塑也必须属于且只属于一个组。同一组中的所有雕塑必须位于这条路的连续一段上。</p>
<p>当雕塑被分好组后，对于每个组，我们首先计算出该组所有雕塑的年龄和。</p>
<p>计算所有年龄和按位取或的结果。我们这个值把称为这一分组的最终优美度。</p>
<p>请问政府能得到的最小的最终优美度是多少?</p>
<p>备注：将两个非负数 P 和 Q 按位取或是这样进行计算的：</p>
<p>首先把 P 和 Q 转换成二进制。</p>
<p>设 nP 是 P  的二进制位数，nQ 是 Q 的二进制位数，M 为 nP 和 nQ 中的最大值。P 的二进制表示为 pM−1pM−2…p1p0，Q 的二进制表示为 qM−1qM−2…q1q0，其中 pi 和 qi 分别是 P 和 Q 二进制表示下的第 i 位，第 M−1 位是数的最高位，第 0  位是数的最低位。</p>
<p>P 与 Q 按位取或后的结果是： (pM−1  OR  qM−1)(pM−2 OR qM−2)…(p1 OR q1)(p0 OR q0)。其中：</p>
<p>0 OR 0=0</p>
<p>0 OR 1=1</p>
<p>1 OR 0=1</p>
<p>1 OR 1=1</p>
<h2 id="Input">Input</h2>
<p>输入的第一行包含三个用空格分开的整数 N,A,B。</p>
<p>第二行包含 N 个用空格分开的整数 Y1,Y2,…,YN。</p>
<h2 id="Output">Output</h2>
<p>输出一行一个数，表示最小的最终优美度。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>6 1 3<br>
　8 1 2 1 5 4</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>11</p>
<p>explanation<br>
　将这些雕塑分为 2 组，(8,1,2) 和 (1,5,4)，它们的和是 (11) 和 (10)，最终优美度是 (11  OR  10)=11。（不难验证，这也是最终优美度的最小值。）</p>
<h2 id="HINT">HINT</h2>
<p><strong>子任务 1 （9 分）</strong></p>
<p>1&lt; = N&lt; = 20</p>
<p>1&lt; = A&lt; = B&lt; = N</p>
<p>0&lt; = Yi&lt; = 1000000000</p>
<p><strong>子任务 2 （16 分）</strong></p>
<p>1&lt; = N&lt; = 50</p>
<p>1&lt; = A&lt; = B&lt; = min{20,N}</p>
<p>0&lt; = Yi&lt; = 10</p>
<p><strong>子任务 3 （21 分）</strong></p>
<p>1&lt; = N&lt; = 100</p>
<p>A=1</p>
<p>1&lt; = B&lt; = N</p>
<p>0&lt; = Yi&lt; = 20</p>
<p><strong>子任务 4 （25 分）</strong></p>
<p>1&lt; = N&lt; = 100</p>
<p>1&lt; = A&lt; = B&lt; = N</p>
<p>0&lt; = Yi&lt; = 1000000000</p>
<p><strong>子任务 5 （29 分）</strong></p>
<p>1&lt; = N&lt; = 2000</p>
<p>A=1</p>
<p>1&lt; = B&lt; = N</p>
<p>0&lt; = Yi&lt; = 1000000000</p>
<h2 id="Main-idea">Main idea</h2>
<p>将一个序列分为若干组，使得每组的和OR起来的值最小。</p>
<h2 id="Solution">Solution</h2>
<p>根据题意，要使最终的答案最小，可以想到利用贪心，从高到低枚举答案的每一位，如果能取0则取0，否则取1。</p>
<p>问题转化为如何判断答案的某一位能否取0，我们考虑用DP解决这个问题。假设当前枚举到第pos位。</p>
<p>令<strong>f[i][j]表示前i个数分成j组</strong>，显然该位可以填0的条件是：</p>
<p><strong>1.存在k在i前面分了j-1组可行；</strong></p>
<p><strong>2.异或值满足之前已经枚举的相同（保证最小）</strong></p>
<p><strong>3.这一位可以是0</strong>。</p>
<p>这样可以过71分，最后一组数据TLE，发现最后一组数据下界固定为1，由于显然发现组数越小越优，可以令g[i]表示令第i位为0的最小组数，如果组数&lt;B则这位可以为0。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">2001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,A,B;</span><br><span class="line"><span class="keyword">int</span> a[ONE],g[ONE];</span><br><span class="line"><span class="keyword">bool</span> f[ONE][ONE];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Sum[ONE];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> total;</span><br><span class="line"><span class="keyword">int</span> PD,len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PartOne</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> pos=len;pos&gt;=<span class="number">1</span>;pos--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=i<span class="number">-1</span>;k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    total=Sum[i]-Sum[k];</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(f[k][j<span class="number">-1</span>] &amp;&amp; ((total&gt;&gt;pos)|res)==res &amp;&amp;  ((total&gt;&gt;(pos<span class="number">-1</span>)) &amp; (<span class="keyword">long</span> <span class="keyword">long</span>)<span class="number">1</span>)==<span class="number">0</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                        f[i][j]=<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        PD=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=A;i&lt;=B;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            PD=f[n][i];</span><br><span class="line">            <span class="keyword">if</span>(PD) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        res&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!PD) res|=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PartTwo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> pos=len;pos&gt;=<span class="number">1</span>;pos--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(g,<span class="number">63</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(g));</span><br><span class="line">        g[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=i<span class="number">-1</span>;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                total=Sum[i]-Sum[k];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(((total&gt;&gt;pos)|res)==res &amp;&amp;  ((total&gt;&gt;(pos<span class="number">-1</span>)) &amp; (<span class="keyword">long</span> <span class="keyword">long</span>)<span class="number">1</span>)==<span class="number">0</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                    g[i]=<span class="built_in">min</span>(g[i],g[k]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        res&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(g[n]&gt;B) res|=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    A=<span class="built_in">get</span>();    B=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=<span class="built_in">get</span>();</span><br><span class="line">        Sum[i]=Sum[i<span class="number">-1</span>]+a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    total=Sum[n];</span><br><span class="line">    <span class="keyword">while</span>(total)</span><br><span class="line">    &#123;</span><br><span class="line">        len++;</span><br><span class="line">        total&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(A!=<span class="number">1</span>) <span class="built_in">PartOne</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">PartTwo</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,res);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[DP]火星藏宝图</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BDP%5D%E7%81%AB%E6%98%9F%E8%97%8F%E5%AE%9D%E5%9B%BE/</url>
    <content><![CDATA[<h1>火星藏宝图</h1>
<p>Time Limit: 10 Sec Memory Limit: 64 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528005534.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528005549.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528005547.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4 10<br>
　1 1 20<br>
　10 10 10<br>
　3 5 60<br>
　5 3 30</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>-4</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;= M &lt;=2000, 2&lt;= N &lt;=100000.</p>
<h2 id="Main-idea">Main idea</h2>
<p>每个点上有一个收益，从一个点走到另外一个点的花费是欧几里得距离的平方，问从(1,1)走到(m,m)的最大收益。</p>
<h2 id="Solution">Solution</h2>
<p>首先，运用DP。而且若<strong>A &lt; C &lt; B</strong>，显然则有 <strong>(A-B)^2 &gt; (A-C)^2 + (C-B)^2</strong>。</p>
<p>那么我们对横坐标排序一下，可以<strong>保证横向的大小关系</strong>。然后对于一个转移，<strong>每一纵向只有最接近它的点有用</strong>。这样就可以做到**O(nm)**了。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">500005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> pos[ONE];</span><br><span class="line"><span class="keyword">int</span> f[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> power &amp;a, <span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.x != b.x) <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">    <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cost</span><span class="params">(<span class="keyword">int</span> Ax, <span class="keyword">int</span> Ay, <span class="keyword">int</span> Bx, <span class="keyword">int</span> By)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Ax - Bx) * (Ax - Bx) + (Ay - By) * (Ay - By);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();   m = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        a[i].x = <span class="built_in">get</span>(),  a[i].y = <span class="built_in">get</span>(), a[i].z = <span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>, a+n+<span class="number">1</span>, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-127</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    pos[<span class="number">1</span>] = <span class="number">1</span>; f[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> id=<span class="number">1</span>; id&lt;=n; id++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = a[id].x, y = a[id].y;</span><br><span class="line">        <span class="keyword">int</span> record = -INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=y; j++)</span><br><span class="line">            <span class="keyword">if</span>(pos[j])</span><br><span class="line">                record = <span class="built_in">max</span>( record, f[j] - <span class="built_in">cost</span>(pos[j],j, x,y) );</span><br><span class="line"></span><br><span class="line">        pos[y] = x;</span><br><span class="line">        f[y] = record + a[id].z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, f[m]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[FFT]快速傅立叶之二</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BFFT%5D%E5%BF%AB%E9%80%9F%E5%82%85%E7%AB%8B%E5%8F%B6%E4%B9%8B%E4%BA%8C/</url>
    <content><![CDATA[<h1>快速傅立叶之二</h1>
<p>Time Limit: 10 Sec Memory Limit: 259 MB</p>
<h2 id="Description">Description</h2>
<p>请计算C[k]=sigma(a[i]*b[i-k]) 其中 k &lt; = i &lt; n。 a,b中的元素均为小于等于100的非负整数。</p>
<h2 id="Input">Input</h2>
<p>第一行一个整数N,接下来N行，第i+2…i+N-1行，每行两个数，依次表示a[i],b[i] (0 &lt; = i &lt; N)。</p>
<h2 id="Output">Output</h2>
<p>输出N行，每行一个整数，第i行输出C[i-1]。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5<br>
　3 1<br>
　2 4<br>
　1 1<br>
　2 4<br>
　1 4</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>24<br>
　12<br>
　10<br>
　6<br>
　1</p>
<h2 id="HINT">HINT</h2>
<p>n &lt; = 10 ^ 5</p>
<h2 id="Solution">Solution</h2>
<p>显然是运用FFT，看到题目里 <strong>b</strong> 的<strong>下标</strong>为 <strong>i-k</strong>，于是乎我们就要想一个办法，把它弄成<strong>卷积</strong>的形式。<br>
　　然后翻转一下，下标就变成了**(n-1)-(i-k)**。那 <strong>Ans[n-1+k]=Σa[i]*b[(n-1)-(i-k)]</strong> 啦。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> tn, tl;</span><br><span class="line"><span class="keyword">int</span> bitRev[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> r, i;</span><br><span class="line">    <span class="built_in">Complex</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="keyword">double</span> _r, <span class="keyword">double</span> _i)</span><br><span class="line">        : <span class="built_in">r</span>(_r), <span class="built_in">i</span>(_i) &#123;&#125;</span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span> +(Complex a, Complex b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(a.r + b.r, a.i + b.i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span> -(Complex a, Complex b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(a.r - b.r, a.i - b.i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span> *(Complex a, Complex b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Complex</span>(a.r*b.r - a.i*b.i, a.r*b.i + a.i*b.r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;a[ONE], b[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT_init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tn = <span class="number">1</span>, tl = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(tn &lt; n)</span><br><span class="line">        tn &lt;&lt;= <span class="number">1</span>, tl ++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tn; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> l = bitRev[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> r = (i &amp; <span class="number">1</span>) &lt;&lt; (tl - <span class="number">1</span>);</span><br><span class="line">        bitRev[i] = l | r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(Complex *a, <span class="keyword">int</span> rev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tn; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> r = bitRev[i];</span><br><span class="line">        <span class="keyword">if</span>(i &lt; r) <span class="built_in">swap</span>(a[i], a[r]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt; tn; k &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Complex <span class="title">wn</span><span class="params">(cos(Pi / k), rev * sin(Pi / k))</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; tn; s += k&lt;&lt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">Complex <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = s; i &lt; s + k; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Complex f1 = a[i], f2 = w * a[i + k];</span><br><span class="line">                a[i] = f1 + f2;</span><br><span class="line">                a[i + k] = f1 - f2;</span><br><span class="line">                w = w * wn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        a[i].r = <span class="built_in">get</span>(), b[n<span class="number">-1</span>-i].r = <span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FFT_init</span>(n + n + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FFT</span>(a, <span class="number">1</span>);  <span class="built_in">FFT</span>(b, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tn; i++)</span><br><span class="line">        a[i] = a[i] * b[i];</span><br><span class="line">    <span class="built_in">FFT</span>(a, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>; i&lt;n+n<span class="number">-1</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (<span class="keyword">int</span>)(a[i].r / tn + <span class="number">0.5</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>FFT</tag>
      </tags>
  </entry>
  <entry>
    <title>[KD-tree]Rectangle</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BKD-tree%5DRectangle/</url>
    <content><![CDATA[<h1>Rectangle</h1>
<p>Time Limit: 50 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528015103.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528015105.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528015107.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>0<br>
　　4<br>
　　2 0<br>
　　2 1<br>
　　1 1<br>
　　1 2<br>
　　4<br>
　　0 0 2 2<br>
　　1 1 2 2<br>
　　1 0 2 1<br>
　　0 0 1 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>2 3<br>
　　2 2<br>
　　2 2<br>
　　1 1</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528015110.png" alt="img"></p>
<h2 id="Solution">Solution</h2>
<p>显然，如果我们求出了 <strong>last[i]</strong> 表示 在某个相同<strong>横/纵坐标</strong>下，前一个<strong>纵/横坐标</strong>的取值，那问题就转化为了<strong>三维偏序</strong>，且要求<strong>在线</strong>。</p>
<p>限制显然形如：<strong>L1 &lt;= xi &lt;= R1, L2 &lt;= yi &lt;= R2, last_i &lt;= L3</strong>。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">500005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max = <span class="number">500000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>, Q = <span class="number">1</span>; <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &lt; <span class="number">48</span> || c &gt; <span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) Q = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res = c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &gt;= <span class="number">48</span> &amp;&amp; c &lt;= <span class="number">57</span>)</span><br><span class="line">        res = res * <span class="number">10</span> + c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">return</span> res * Q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T, n;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span><span class="keyword">int</span> x, y;&#125; fir[ONE];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_x</span><span class="params">(<span class="keyword">const</span> node &amp;a, <span class="keyword">const</span> node &amp;b)</span> </span>&#123;<span class="keyword">return</span> a.x &lt; b.x || (a.x == b.x &amp;&amp; a.y &lt; b.y);&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_y</span><span class="params">(<span class="keyword">const</span> node &amp;a, <span class="keyword">const</span> node &amp;b)</span> </span>&#123;<span class="keyword">return</span> a.y &lt; b.y || (a.y == b.y &amp;&amp; a.x &lt; b.x);&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span> &#123;</span><span class="keyword">int</span> c[<span class="number">3</span>];&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_0</span><span class="params">(<span class="keyword">const</span> power &amp;a, <span class="keyword">const</span> power &amp;b)</span> </span>&#123;<span class="keyword">return</span> a.c[<span class="number">0</span>] &lt; b.c[<span class="number">0</span>];&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_1</span><span class="params">(<span class="keyword">const</span> power &amp;a, <span class="keyword">const</span> power &amp;b)</span> </span>&#123;<span class="keyword">return</span> a.c[<span class="number">1</span>] &lt; b.c[<span class="number">1</span>];&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp_2</span><span class="params">(<span class="keyword">const</span> power &amp;a, <span class="keyword">const</span> power &amp;b)</span> </span>&#123;<span class="keyword">return</span> a.c[<span class="number">2</span>] &lt; b.c[<span class="number">2</span>];&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ID</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span><span class="keyword">int</span> lc, rc, size, l[<span class="number">3</span>], r[<span class="number">3</span>];&#125; p[ONE];</span><br><span class="line">    power a[ONE];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> kd_num;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(point &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x.lc) x.size += p[x.lc].size;</span><br><span class="line">        <span class="keyword">if</span>(x.rc) x.size += p[x.rc].size;</span><br><span class="line">        point y;</span><br><span class="line">        <span class="keyword">if</span>(x.lc) y = p[x.lc],</span><br><span class="line">        x.l[<span class="number">0</span>] = <span class="built_in">min</span>(x.l[<span class="number">0</span>], y.l[<span class="number">0</span>]), x.r[<span class="number">0</span>] = <span class="built_in">max</span>(x.r[<span class="number">0</span>], y.r[<span class="number">0</span>]),</span><br><span class="line">        x.l[<span class="number">1</span>] = <span class="built_in">min</span>(x.l[<span class="number">1</span>], y.l[<span class="number">1</span>]), x.r[<span class="number">1</span>] = <span class="built_in">max</span>(x.r[<span class="number">1</span>], y.r[<span class="number">1</span>]),</span><br><span class="line">        x.l[<span class="number">2</span>] = <span class="built_in">min</span>(x.l[<span class="number">2</span>], y.l[<span class="number">2</span>]), x.r[<span class="number">2</span>] = <span class="built_in">max</span>(x.r[<span class="number">2</span>], y.r[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(x.rc) y = p[x.rc],</span><br><span class="line">        x.l[<span class="number">0</span>] = <span class="built_in">min</span>(x.l[<span class="number">0</span>], y.l[<span class="number">0</span>]), x.r[<span class="number">0</span>] = <span class="built_in">max</span>(x.r[<span class="number">0</span>], y.r[<span class="number">0</span>]),</span><br><span class="line">        x.l[<span class="number">1</span>] = <span class="built_in">min</span>(x.l[<span class="number">1</span>], y.l[<span class="number">1</span>]), x.r[<span class="number">1</span>] = <span class="built_in">max</span>(x.r[<span class="number">1</span>], y.r[<span class="number">1</span>]),</span><br><span class="line">        x.l[<span class="number">2</span>] = <span class="built_in">min</span>(x.l[<span class="number">2</span>], y.l[<span class="number">2</span>]), x.r[<span class="number">2</span>] = <span class="built_in">max</span>(x.r[<span class="number">2</span>], y.r[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">s64 <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        s64 x = <span class="number">0</span>, xx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">            x += a[i].c[id], xx += (s64)a[i].c[id] * a[i].c[id];</span><br><span class="line">        <span class="keyword">return</span> (r - l + <span class="number">1</span>) * xx - x * x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        point &amp;x = p[mid];</span><br><span class="line"></span><br><span class="line">        s64 w0 = <span class="built_in">calc</span>(l, r, <span class="number">0</span>), w1 = <span class="built_in">calc</span>(l, r, <span class="number">1</span>), w2 = <span class="built_in">calc</span>(l, r, <span class="number">2</span>);</span><br><span class="line">        s64 w = <span class="built_in">max</span>(w0, <span class="built_in">max</span>(w1, w2));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(w == w0) <span class="built_in">nth_element</span>(a + l, a + mid, a + r + <span class="number">1</span>, cmp_0);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(w == w1) <span class="built_in">nth_element</span>(a + l, a + mid, a + r + <span class="number">1</span>, cmp_1);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(w == w2) <span class="built_in">nth_element</span>(a + l, a + mid, a + r + <span class="number">1</span>, cmp_2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(l &lt; mid) x.lc = <span class="built_in">Build</span>(l, mid - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(mid &lt; r) x.rc = <span class="built_in">Build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">        x.size = <span class="number">1</span>;</span><br><span class="line">        x.l[<span class="number">0</span>] = x.r[<span class="number">0</span>] = a[mid].c[<span class="number">0</span>];</span><br><span class="line">        x.l[<span class="number">1</span>] = x.r[<span class="number">1</span>] = a[mid].c[<span class="number">1</span>];</span><br><span class="line">        x.l[<span class="number">2</span>] = x.r[<span class="number">2</span>] = a[mid].c[<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">Update</span>(x);</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">insect</span><span class="params">(<span class="keyword">const</span> point &amp;a, <span class="keyword">const</span> point &amp;b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.r[<span class="number">0</span>] &lt; b.l[<span class="number">0</span>] || b.r[<span class="number">0</span>] &lt; a.l[<span class="number">0</span>]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(a.r[<span class="number">1</span>] &lt; b.l[<span class="number">1</span>] || b.r[<span class="number">1</span>] &lt; a.l[<span class="number">1</span>]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(a.r[<span class="number">2</span>] &lt; b.l[<span class="number">2</span>] || b.r[<span class="number">2</span>] &lt; a.l[<span class="number">2</span>]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">contain</span><span class="params">(<span class="keyword">const</span> point &amp;a, <span class="keyword">const</span> point &amp;b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(a.l[<span class="number">0</span>] &lt;= b.l[<span class="number">0</span>] &amp;&amp; b.r[<span class="number">0</span>] &lt;= a.r[<span class="number">0</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!(a.l[<span class="number">1</span>] &lt;= b.l[<span class="number">1</span>] &amp;&amp; b.r[<span class="number">1</span>] &lt;= a.r[<span class="number">1</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!(a.l[<span class="number">2</span>] &lt;= b.l[<span class="number">2</span>] &amp;&amp; b.r[<span class="number">2</span>] &lt;= a.r[<span class="number">2</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">contain</span><span class="params">(<span class="keyword">const</span> point &amp;a, <span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!(a.l[<span class="number">0</span>] &lt;= b.c[<span class="number">0</span>] &amp;&amp; b.c[<span class="number">0</span>] &lt;= a.r[<span class="number">0</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!(a.l[<span class="number">1</span>] &lt;= b.c[<span class="number">1</span>] &amp;&amp; b.c[<span class="number">1</span>] &lt;= a.r[<span class="number">1</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!(a.l[<span class="number">2</span>] &lt;= b.c[<span class="number">2</span>] &amp;&amp; b.c[<span class="number">2</span>] &lt;= a.r[<span class="number">2</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">const</span> point &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        point now = p[i];</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">insect</span>(x, now)) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">contain</span>(x, now)) &#123;Ans += now.size; <span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">contain</span>(x, a[i])) Ans++;</span><br><span class="line">        <span class="keyword">if</span>(now.lc) <span class="built_in">Query</span>(now.lc, x);</span><br><span class="line">        <span class="keyword">if</span>(now.rc) <span class="built_in">Query</span>(now.rc, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">ID A, B;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Make_1</span><span class="params">()</span><span class="comment">//|</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(fir + <span class="number">1</span>, fir + n + <span class="number">1</span>, cmp_y);</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> last[ONE];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Max; i++) last[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        A.a[i].c[<span class="number">0</span>] = fir[i].x;</span><br><span class="line">        A.a[i].c[<span class="number">1</span>] = fir[i].y;</span><br><span class="line">        A.a[i].c[<span class="number">2</span>] = last[fir[i].x];</span><br><span class="line">        last[fir[i].x] = fir[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    A.root = A.<span class="built_in">Build</span>(<span class="number">1</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Make_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(fir + <span class="number">1</span>, fir + n + <span class="number">1</span>, cmp_x);</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> last[ONE];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Max; i++) last[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        B.a[i].c[<span class="number">0</span>] = fir[i].x;</span><br><span class="line">        B.a[i].c[<span class="number">1</span>] = fir[i].y;</span><br><span class="line">        B.a[i].c[<span class="number">2</span>] = last[fir[i].y];</span><br><span class="line">        last[fir[i].y] = fir[i].x;</span><br><span class="line">    &#125;</span><br><span class="line">    B.root = B.<span class="built_in">Build</span>(<span class="number">1</span>, n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = <span class="built_in">get</span>(), n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        fir[i].x = <span class="built_in">get</span>(), fir[i].y = <span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">Make_1</span>(), <span class="built_in">Make_2</span>();</span><br><span class="line">    <span class="keyword">int</span> Q = <span class="built_in">get</span>(), lax = <span class="number">0</span>, lay = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(Q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x_1 = <span class="built_in">get</span>(), y_1 = <span class="built_in">get</span>(), x_2 = <span class="built_in">get</span>(), y_2 = <span class="built_in">get</span>();</span><br><span class="line">        x_1 = x_1 + (lax + lay) * T, y_1 = y_1 + (lax + lay) * T;</span><br><span class="line">        x_2 = x_2 + (lax + lay) * T, y_2 = y_2 + (lax + lay) * T;</span><br><span class="line">        ID::point x;</span><br><span class="line"></span><br><span class="line">        Ans = x.size = x.lc = x.rc = <span class="number">0</span>;</span><br><span class="line">        x.l[<span class="number">0</span>] = x_1, x.r[<span class="number">0</span>] = x_2, x.l[<span class="number">1</span>] = y_1, x.r[<span class="number">1</span>] = y_2;</span><br><span class="line">        x.l[<span class="number">2</span>] = <span class="number">-1</span>, x.r[<span class="number">2</span>] = y_1 - <span class="number">1</span>;</span><br><span class="line">        A.<span class="built_in">Query</span>(A.root, x), lax = Ans;</span><br><span class="line"></span><br><span class="line">        Ans = x.size = x.lc = x.rc = <span class="number">0</span>;</span><br><span class="line">        x.l[<span class="number">0</span>] = x_1, x.r[<span class="number">0</span>] = x_2, x.l[<span class="number">1</span>] = y_1, x.r[<span class="number">1</span>] = y_2;</span><br><span class="line">        x.l[<span class="number">2</span>] = <span class="number">-1</span>, x.r[<span class="number">2</span>] = x_1 - <span class="number">1</span>;</span><br><span class="line">        B.<span class="built_in">Query</span>(B.root, x), lay = Ans;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, lax, lay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>KD-tree</tag>
      </tags>
  </entry>
  <entry>
    <title>[KD-tree]SYJ摆棋子</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BKD-tree%5DSYJ%E6%91%86%E6%A3%8B%E5%AD%90/</url>
    <content><![CDATA[<h1>SJY摆棋子</h1>
<p>Time Limit: 20 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>这天，SJY显得无聊。在家自己玩。在一个棋盘上，有N个黑色棋子。他每次要么放到棋盘上一个黑色棋子，要么放上一个白色棋子，如果是白色棋子，他会找出距离这个白色棋子最近的黑色棋子。此处的距离是 曼哈顿距离 即(|x1-x2|+|y1-y2|)  。现在给出N个初始棋子，和M个操作。对于每个白色棋子，输出距离这个白色棋子最近的黑色棋子的距离。同一个格子可能有多个棋子。</p>
<h2 id="Input">Input</h2>
<p>第一行两个数 N M</p>
<p>然后N行，每行2个数 x y，表示初始棋子</p>
<p>以后M行，每行3个数 t x y</p>
<p>如果t=1 那么放下一个黑色棋子</p>
<p>如果t=2 那么放下一个白色棋子</p>
<h2 id="Output">Output</h2>
<p>对于每个T=2 输出一个最小距离</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>2 3<br>
　1 1<br>
　2 3<br>
　2 1 2<br>
　1 3 3<br>
　2 4 2</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>1<br>
　2</p>
<h2 id="HINT">HINT</h2>
<p>N&lt;=500000 , M&lt;=500000</p>
<h2 id="Main-idea">Main idea</h2>
<p>在平面上加入黑点，对于询问一个坐标到其它点的曼哈顿距离中最小的一个。</p>
<h2 id="Solution">Solution</h2>
<p>这题显然是一道KD-tree的模板题。</p>
<p>我们来考虑如何估价，由于求的是最小的曼哈顿距离，我们可以这样估价：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527190317.png" alt="img"></p>
<p>（其实我也并不懂为什么可以这样估，详情可以查询**“n+e KDtree在信息学奥赛中的应用”**）</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> t,x,y;</span><br><span class="line"><span class="keyword">int</span> cnt,Ans;</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line"><span class="keyword">int</span> Ran;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="keyword">int</span> minx,miny;</span><br><span class="line">    <span class="keyword">int</span> maxx,maxy;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> KD</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i].minx=<span class="built_in">min</span>(a[i].minx,a[a[i].l].minx);    a[i].miny=<span class="built_in">min</span>(a[i].miny,a[a[i].l].miny);</span><br><span class="line">            a[i].maxx=<span class="built_in">max</span>(a[i].maxx,a[a[i].l].maxx);    a[i].maxy=<span class="built_in">max</span>(a[i].maxy,a[a[i].l].maxy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i].minx=<span class="built_in">min</span>(a[i].minx,a[a[i].r].minx);    a[i].miny=<span class="built_in">min</span>(a[i].miny,a[a[i].r].miny);</span><br><span class="line">            a[i].maxx=<span class="built_in">max</span>(a[i].maxx,a[a[i].r].maxx);    a[i].maxy=<span class="built_in">max</span>(a[i].maxy,a[a[i].r].maxy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Ran) <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">        <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> T)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        Ran=T;</span><br><span class="line">        <span class="built_in">nth_element</span>(a+l, a+mid+<span class="number">1</span>, a+r+<span class="number">1</span>, cmp);</span><br><span class="line">        <span class="keyword">if</span>(l&lt;mid) a[mid].l = <span class="built_in">Build</span>(l,mid<span class="number">-1</span>,T^<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(mid&lt;r) a[mid].r = <span class="built_in">Build</span>(mid+<span class="number">1</span>,r,T^<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">Update</span>(mid);</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> &amp;i,<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!i)</span><br><span class="line">    &#123;</span><br><span class="line">        i=++cnt;</span><br><span class="line">        a[i].x=a[i].minx=a[i].maxx=x;</span><br><span class="line">        a[i].y=a[i].miny=a[i].maxy=y;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(T)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; a[i].x) <span class="built_in">Update</span>(a[i].l,x,y,T^<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">Update</span>(a[i].r,x,y,T^<span class="number">1</span>);</span><br><span class="line">        KD::<span class="built_in">Update</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(y &lt; a[i].y) <span class="built_in">Update</span>(a[i].l,x,y,T^<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">Update</span>(a[i].r,x,y,T^<span class="number">1</span>);</span><br><span class="line">        KD::<span class="built_in">Update</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dist</span><span class="params">(<span class="keyword">int</span> x1,<span class="keyword">int</span> y1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(x1-x2)+<span class="built_in">abs</span>(y1-y2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dist</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(a[i].minx-x,<span class="number">0</span>)+<span class="built_in">max</span>(x-a[i].maxx,<span class="number">0</span>) + <span class="built_in">max</span>(a[i].miny-y,<span class="number">0</span>)+<span class="built_in">max</span>(y-a[i].maxy,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!i) <span class="keyword">return</span>;</span><br><span class="line">    Ans=<span class="built_in">min</span>(Ans,<span class="built_in">dist</span>(x,y , a[i].x,a[i].y));</span><br><span class="line">    <span class="keyword">int</span> l=<span class="built_in">dist</span>(a[i].l,x,y);</span><br><span class="line">    <span class="keyword">int</span> r=<span class="built_in">dist</span>(a[i].r,x,y);</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=Ans) <span class="built_in">Query</span>(a[i].l,x,y);</span><br><span class="line">        <span class="keyword">if</span>(r&lt;=Ans) <span class="built_in">Query</span>(a[i].r,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(r&lt;=Ans) <span class="built_in">Query</span>(a[i].r,x,y);</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=Ans) <span class="built_in">Query</span>(a[i].l,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">        a[i].x=a[i].minx=a[i].maxx=x;</span><br><span class="line">        a[i].y=a[i].miny=a[i].maxy=y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cnt=n;</span><br><span class="line">    root=KD::<span class="built_in">Build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="built_in">get</span>();    x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n++;</span><br><span class="line">            a[n].x=a[n].minx=a[n].maxx=x;</span><br><span class="line">            a[n].y=a[n].miny=a[n].maxy=y;</span><br><span class="line">            <span class="built_in">Update</span>(root,x,y,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Ans=INF;</span><br><span class="line">            <span class="built_in">Query</span>(root,x,y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Ans);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>KD-tree</tag>
      </tags>
  </entry>
  <entry>
    <title>[KMP]Censoring</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BKMP%5DCensoring/</url>
    <content><![CDATA[<h1>Censoring</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>有一个S串和一个T串，长度均小于1,000,000，设当前串为U串，然后从前往后枚举S串一个字符一个字符往U串里添加，若U串后缀为T，则去掉这个后缀继续流程。</p>
<h2 id="Input">Input</h2>
<p>第一行是S串，第二行是T串。</p>
<h2 id="Output">Output</h2>
<p>输出一行，表示按照操作后得到的串。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>whatthemomooofun<br>
　moo</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>whatthefun</p>
<h2 id="HINT">HINT</h2>
<p>串长小于1000000。</p>
<h2 id="Main-idea">Main idea</h2>
<p>按照S串的顺序加入S串中的字符，一旦出现了一段和T串一样，则删去这一段，求最后得到的串。</p>
<h2 id="Solution">Solution</h2>
<p>运用KMP，我们显然只要先把T串加入到Stack里面，然后再按照S的顺序加入字符，每次求next（<strong>next[i]表示s[1…i]中最长的公共前后缀</strong>），显然next==T串长度的话删去相应长度即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">2000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> a[ONE],b[ONE],Stack[ONE];</span><br><span class="line"><span class="keyword">int</span> next[ONE],j,top;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">        res=c<span class="number">-48</span>;</span><br><span class="line">        <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">        <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">char</span> a[],<span class="keyword">int</span> PD)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=PD;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Stack[++top] = a[i];</span><br><span class="line">            j=next[top<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">while</span>(j &amp;&amp; Stack[j+<span class="number">1</span>] != Stack[top]) j=next[j];</span><br><span class="line">            <span class="keyword">if</span>(Stack[j+<span class="number">1</span>] == Stack[top]) j++;</span><br><span class="line">            next[top] = j;</span><br><span class="line">            <span class="keyword">if</span>(PD==<span class="number">1</span> &amp;&amp; next[top]==m) top-=m;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a+<span class="number">1</span>);    n=<span class="built_in">strlen</span>(a+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,b+<span class="number">1</span>);    m=<span class="built_in">strlen</span>(b+<span class="number">1</span>);</span><br><span class="line">        Stack[++top]=b[<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">Deal</span>(m,b,<span class="number">2</span>);    <span class="built_in">Deal</span>(n,a,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=m+<span class="number">1</span>;i&lt;=top;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,Stack[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>KMP</tag>
      </tags>
  </entry>
  <entry>
    <title>[KD-tree]巧克力王国</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BKD-tree%5D%E5%B7%A7%E5%85%8B%E5%8A%9B%E7%8E%8B%E5%9B%BD/</url>
    <content><![CDATA[<h1>巧克力王国</h1>
<p>Time Limit: 60 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p>巧克力王国里的巧克力都是由牛奶和可可做成的。</p>
<p>但是并不是每一块巧克力都受王国人民的欢迎，因为大家都不喜欢过于甜的巧克力。</p>
<p>对于每一块巧克力，我们设x和y为其牛奶和可可的含量。</p>
<p>由于每个人对于甜的程度都有自己的评判标准，所以每个人都有两个参数a和b，分别为他自己为牛奶和可可定义的权重，因此牛奶和可可含量分别为x和y的巧克力对于他的甜味程度即为ax + by。</p>
<p>而每个人又有一个甜味限度c，所有甜味程度大于等于c的巧克力他都无法接受。</p>
<p>每块巧克力都有一个美味值h。</p>
<p>现在我们想知道对于每个人，他所能接受的巧克力的美味值之和为多少。</p>
<h2 id="Input">Input</h2>
<p>第一行两个正整数n和m，分别表示巧克力个数和询问个数。接下来n行，每行三个整数x,y,h，含义如题目所示。再</p>
<p>接下来m行，每行三个整数a,b,c，含义如题目所示。</p>
<h2 id="Output">Output</h2>
<p>输出m行，其中第i行表示第i个人所能接受的巧克力的美味值之和。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3 3<br>
1 2 5<br>
3 1 4<br>
2 2 1<br>
2 1 6<br>
1 3 5<br>
1 3 7</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>5<br>
0<br>
4</p>
<h2 id="HINT">HINT</h2>
<p>1 &lt;= n, m &lt;= 50000，1 &lt;= 10^9，-10^9 &lt;= a, b, x, y &lt;= 10^9。</p>
<h2 id="Main-idea">Main idea</h2>
<p>每个点(x,y)以及价值，对于每个询问给定A,B,C。对于一个点，若A<em>x+B</em>y&lt;C则可以获得该点的价值，问每个点可以得到的价值总和。</p>
<h2 id="Solution">Solution</h2>
<p>看到这种在平面上的题，我们显然想到了KD-tree。</p>
<p>因为<strong>可以离线</strong>，所以我们可以直接在建树的时候运用nth_element函数让它平衡。</p>
<p>对于每个点记录<strong>子树的最大最小的x与y以及总价值</strong>，然后KD-tree建树建完之后，查询的时候，如果<strong>所有情况都&lt;C</strong>，我们就可以直接取走这个子树里面所有的值，如果存在可能的可能性就往下走。</p>
<p>PS：nth_element: 将一段序列从中间分开，给定的一个值放在中间(我们取中间的值即可)，剩下两边排放，效率O(n) 。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">1000001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> x,y,A,B;</span><br><span class="line">s64 C,h;</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line">s64 Ans;</span><br><span class="line"><span class="keyword">int</span> Ran;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,l,r;</span><br><span class="line">    <span class="keyword">int</span> maxx,maxy;</span><br><span class="line">    <span class="keyword">int</span> minx,miny;</span><br><span class="line">    s64 val,sum;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> KD</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        a[i].sum=a[i].val;</span><br><span class="line">        <span class="keyword">if</span>(a[i].l)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i].sum+=a[a[i].l].sum;</span><br><span class="line">            a[i].minx=<span class="built_in">min</span>(a[i].minx,a[a[i].l].minx);    a[i].miny=<span class="built_in">min</span>(a[i].miny,a[a[i].l].miny);</span><br><span class="line">            a[i].maxx=<span class="built_in">max</span>(a[i].maxx,a[a[i].l].maxx);    a[i].maxy=<span class="built_in">max</span>(a[i].maxy,a[a[i].l].maxy);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[i].r)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i].sum+=a[a[i].r].sum;</span><br><span class="line">            a[i].minx=<span class="built_in">min</span>(a[i].minx,a[a[i].r].minx);    a[i].miny=<span class="built_in">min</span>(a[i].miny,a[a[i].r].miny);</span><br><span class="line">            a[i].maxx=<span class="built_in">max</span>(a[i].maxx,a[a[i].r].maxx);    a[i].maxy=<span class="built_in">max</span>(a[i].maxy,a[a[i].r].maxy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Ran) <span class="keyword">return</span> a.x&lt;b.x; <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> T)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        Ran=T;</span><br><span class="line">        <span class="built_in">nth_element</span>(a+l,a+mid,a+r+<span class="number">1</span>,cmp);</span><br><span class="line">        <span class="keyword">if</span>(l&lt;mid) a[mid].l = <span class="built_in">Build</span>(l,mid<span class="number">-1</span>,T^<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(mid&lt;r) a[mid].r = <span class="built_in">Build</span>(mid+<span class="number">1</span>,r,T^<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">Update</span>(mid);</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PD</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (s64)A*x+(s64)B*y &lt; C ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    res+= <span class="built_in">PD</span>(a[i].minx,a[i].miny);</span><br><span class="line">    res+= <span class="built_in">PD</span>(a[i].minx,a[i].maxy);</span><br><span class="line">    res+= <span class="built_in">PD</span>(a[i].maxx,a[i].miny);</span><br><span class="line">    res+= <span class="built_in">PD</span>(a[i].maxx,a[i].maxy);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">PD</span>(a[i].x,a[i].y)) Ans+=a[i].val;</span><br><span class="line">    <span class="keyword">if</span>(a[i].l)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> Record=<span class="built_in">Check</span>(a[i].l);</span><br><span class="line">        <span class="keyword">if</span>(Record==<span class="number">4</span>) Ans+=a[a[i].l].sum;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Record) <span class="built_in">Query</span>(a[i].l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[i].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> Record=<span class="built_in">Check</span>(a[i].r);</span><br><span class="line">        <span class="keyword">if</span>(Record==<span class="number">4</span>) Ans+=a[a[i].r].sum;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Record) <span class="built_in">Query</span>(a[i].r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i].minx=a[i].miny=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;h);</span><br><span class="line">        a[i].val=h;</span><br><span class="line">        a[i].x=a[i].minx=a[i].maxx=x;</span><br><span class="line">        a[i].y=a[i].miny=a[i].maxy=y;</span><br><span class="line">    &#125;</span><br><span class="line">    root=KD::<span class="built_in">Build</span>(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        A=<span class="built_in">get</span>();    B=<span class="built_in">get</span>();    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;C);</span><br><span class="line">        Ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">Query</span>(root);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,Ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>KD-tree</tag>
      </tags>
  </entry>
  <entry>
    <title>[KMP]动物园</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BKMP%5D%E5%8A%A8%E7%89%A9%E5%9B%AD/</url>
    <content><![CDATA[<h1>动物园</h1>
<p>Time Limit: 10 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p>近日，园长发现动物园中好吃懒做的动物越来越多了。例如企鹅，只会卖萌向游客要吃的。为了整治动物园的不良风气，让动物们凭自己的真才实学向游客要吃的，园长决定开设算法班，让动物们学习算法。<br>
　　某天，园长给动物们讲解KMP算法。<br>
　　园长：“对于一个字符串S，它的长度为L。我们可以在O(L)的时间内，求出一个名为next的数组。有谁预习了next数组的含义吗？”<br>
　　熊猫：“对于字符串S的前i个字符构成的子串，既是它的后缀又是它的前缀的字符串中（它本身除外），最长的长度记作next[i]。”<br>
　　园长：“非常好！那你能举个例子吗？”<br>
　　熊猫：“例S为abcababc，则next[5]=2。因为S的前5个字符为abcab，ab既是它的后缀又是它的前缀，并且找不到一个更长的字符串满足这个性质。同理，还可得出next[1] = next[2] = next[3] = 0，next[4] = next[6] = 1，next[7] = 2，next[8] = 3。”<br>
　　园长表扬了认真预习的熊猫同学。随后，他详细讲解了如何在O(L)的时间内求出next数组。<br>
　　下课前，园长提出了一个问题：“KMP算法只能求出next数组。我现在希望求出一个更强大num数组一一对于字符串S的前i个字符构成的子串，既是它的后缀同时又是它的前缀，并且该后缀与该前缀不重叠，将这种字符串的数量记作num[i]。例如S为aaaaa，则num[4] =  2。这是因为S的前4个字符为aaaa，其中a和aa都满足性质‘既是后缀又是前缀’，同时保证这个后缀与这个前缀不重叠。而aaa虽然满足性质‘既是后缀又是前缀’，但遗憾的是这个后缀与这个前缀重叠了，所以不能计算在内。同理，num[1] = 0,num[2] = num[3] = 1,num[5] = 2。”<br>
　　最后，园长给出了奖励条件，第一个做对的同学奖励巧克力一盒。听了这句话，睡了一节课的企鹅立刻就醒过来了！但企鹅并不会做这道题，于是向参观动物园的你寻求帮助。你能否帮助企鹅写一个程序求出num数组呢？<br>
　　特别地，为了避免大量的输出，你不需要输出num[i]分别是多少，你只需要输出<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527192609.png" alt="img">对1,000,000,007取模的结果即可。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527192611.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p>第1行仅包含一个正整数n ，表示测试数据的组数。随后n行，每行描述一组测试数据。每组测试数据仅含有一个字符串S，S的定义详见题目描述。数据保证S 中仅含小写字母。输入文件中不会包含多余的空行，行末不会存在多余的空格。</p>
<h2 id="Output">Output</h2>
<p>包含 n 行，每行描述一组测试数据的答案，答案的顺序应与输入数据的顺序保持一致。对于每组测试数据，仅需要输出一个整数，表示这组测试数据的答案对 1,000,000,007 取模的结果。输出文件中不应包含多余的空行。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3<br>
　aaaaa<br>
　ab<br>
　abcababc</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>36<br>
　1<br>
　32</p>
<h2 id="HINT">HINT</h2>
<p>n≤5 , L≤1,000,000</p>
<h2 id="Main-idea">Main idea</h2>
<p>定义一种前缀，这个前缀和后缀一样并且没有交集，num[i]为前i位有多少个这样的前缀，求题目中的式子。</p>
<h2 id="Solution">Solution</h2>
<p>看到这道题，我们一眼想到了从KMP的角度开始考虑。</p>
<p>然后我们想到了怎么暴力，显然就是把 fail[i]-&gt;i ，然后对于每个 i 的 num[i] ，一步步往上跳直到符合条件位置，那个位置的dep也就是num[i]。</p>
<p>我们想想这个过程优化吗？答案显然是可以的！我们运用倍增。</p>
<p>怎么倍增呢？直接从小到大枚举，可行就跳不一定最优。那么我们<strong>逆向思维</strong>，这么来想：一个点往上跳，跳到的<strong>最上面的不可行的位置</strong>的<strong>上一个</strong>显然就是<strong>最下面的可行的位置</strong>，那么我们可以从大到小枚举然后不合法的话往上跳，最后再跳一步即可。</p>
<p>由于这是带log的做法，我们要<strong>卡卡常</strong>，这里有一个<strong>小技巧：把数组最右边的那一维连续的话访问效率更高</strong>。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> a[ONE];</span><br><span class="line"><span class="keyword">int</span> fail[ONE];</span><br><span class="line"><span class="keyword">int</span> LOG[ONE],f[<span class="number">21</span>][ONE],Dep[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_KMP</span><span class="params">(<span class="keyword">char</span> a[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">    Dep[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(a[j+<span class="number">1</span>] != a[i] &amp;&amp; j) j=fail[j];</span><br><span class="line">        <span class="keyword">if</span>(a[j+<span class="number">1</span>] == a[i]) j++;</span><br><span class="line">        fail[i] = j;</span><br><span class="line">        f[<span class="number">0</span>][i] = j;  Dep[i] = Dep[j]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=LOG[Dep[u]];i++)</span><br><span class="line">            f[i+<span class="number">1</span>][u] = f[i][f[i][u]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Deal_Ans</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> Limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=LOG[Dep[x]];i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span>(f[i][x] &gt; Limit) x = f[i][x];</span><br><span class="line">    <span class="keyword">return</span> Dep[f[<span class="number">0</span>][x]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=ONE<span class="number">-1</span>;i++) LOG[i]=LOG[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a+<span class="number">1</span>);    n=<span class="built_in">strlen</span>(a+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">Deal_KMP</span>(a);        <span class="built_in">Dfs</span>();</span><br><span class="line"></span><br><span class="line">        Ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Ans = (s64)Ans * ( <span class="built_in">Deal_Ans</span>(i,i&gt;&gt;<span class="number">1</span>)+<span class="number">1</span> ) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>KMP</tag>
      </tags>
  </entry>
  <entry>
    <title>[LCA]发展城市</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BLCA%5D%E5%8F%91%E5%B1%95%E5%9F%8E%E5%B8%82/</url>
    <content><![CDATA[<h1>发展城市</h1>
<p>Time Limit: 20 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p>众所周知，Hzwer学长是一名高富帅，他打算投入巨资发展一些小城市。<br>
　　Hzwer打算在城市中开N个宾馆，由于Hzwer非常壕，所以宾馆必须建在空中，但是这样就必须建立宾馆之间的连接通道。机智的Hzwer在宾馆中修建了N-1条隧道，也就是说，宾馆和隧道形成了一个树形结构。<br>
　　Hzwer有时候会花一天时间去视察某个城市，当来到一个城市之后，Hzwer会分析这些宾馆的顾客情况。对于每个顾客，Hzwer用三个数值描述他：（S， T， V）表示该顾客这天想要从宾馆S走到宾馆T，他的速度是V。<br>
　　Hzwer需要做一些收集一些数据，这样他就可以规划他接下来的投资。<br>
　　其中有一项数据就是收集所有顾客可能的碰面次数。<br>
　　每天清晨，顾客同时从S出发以V的速度前往T（注意S可能等于T），当到达了宾馆T的时候，顾客显然要找个房间住下，那么别的顾客再经过这里就不会碰面了。特别的，两个顾客同时到达一个宾馆是可以碰面的。同样，两个顾客同时从某宾馆出发也会碰面。</p>
<h2 id="Input">Input</h2>
<p>第一行一个正整数T(1&lt;=T&lt;=20)，表示Hzwer发展了T个城市，并且在这T个城市分别视察一次。<br>
　对于每个T，第一行有一个正整数N(1&lt;=N&lt;=10^5)表示Hzwer在这个城市开了N个宾馆。<br>
　接下来N-1行，每行三个整数X，Y，Z表示宾馆X和宾馆Y之间有一条长度为Z的隧道<br>
　再接下来一行M表示这天顾客的数量。<br>
　紧跟着M行每行三个整数（S， T， V）表示该顾客会从宾馆S走到宾馆T，速度为v</p>
<h2 id="Output">Output</h2>
<p>对于每个T，输出一行，表示顾客的碰面次数。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>2<br>
　　3<br>
　　1 2 1<br>
　　2 3 1<br>
　　3<br>
　　1 3 2<br>
　　3 1 1<br>
　　1 2 3<br>
　　1<br>
　　0</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>2<br>
　　0</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=T&lt;=20  1&lt;=N&lt;=10^5  0&lt;=M&lt;=10^3  1&lt;=V&lt;=10^6  1&lt;=Z&lt;=10^3</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定若干个顾客，每个顾客会匀速从一个点走到另外一个点，问有几对人会在路上相遇。</p>
<h2 id="Solution">Solution</h2>
<p>由于人数较少，所以我们可以O(m^2)判断两人是否相交。</p>
<p>首先，两个人相遇只可能是在路径重叠的部分相遇，所以我们先对两人的路径求交，这里提供一种对树上路径求交的方法：</p>
<p><strong>求出AB两人路径的交：</strong><br>
　　　　　　设A路径为a.u-&gt;a.v，B路径为b.u-&gt;b.v。那么我们求出 LCA(a.u,b.u)，<strong>LCA(a.v,b.v)，LCA(a.u,b.v)，LCA(b.u,a.v)</strong>，然后保留下在AB路径上的点。（判断一个点是否在路径上：<strong>若u在LCA(x,y)的子树中，且u为LCA(u,x)或者LCA(u,y)，则u在路径x,y上</strong>），然后<strong>按照dfs序位置排序</strong>，去重，保留下后两个点，则后两个点即是路径的端点。</p>
<p>但是这样求交的话需要<strong>多次查询LCA</strong>，我们用每次log的时间查询显然会超时，于是我们引进O(nlog(n))预处理，O(1)查询的LCA。</p>
<p><strong>O(1)查询的LCA：</strong><br>
　　　　　　我们先求出对于这棵树的欧拉序（<strong>欧拉序：记下每个点第一次访问的位置以及回溯完的位置</strong>），然后我们用那么这时候x,y之间的LCA也就是 [pos[x],pos[y]] 区间内深度最小的点（pos[x]表示点x第一次在欧拉序中出现的位置），这个区间最小值用RMQ求即可。</p>
<p>现在我们已经求出了路径的交集，然后我们暴力分类讨论一下。如果没有交集则必然不相交，若交于一点判断一下到达时间即可，否则：</p>
<p>先考虑两人运动的方向。我们记录p.u,p.v表示路径交集的两个端点。A1表示A到先进入路径的端点，A2表示A后到的端点，B1、B2类似（<strong>用距离长短判断即可</strong>），如果<strong>A1=B1则表示两人同向运动，否则表示相向运动</strong>。然后我们讨论一下：</p>
<p>**同向运动：**如果两人同向运动，那么若先进入路径的后离开路径，则两人会相遇。<br>
　　　　**相向运动：**如果两人相向运动，则我们记录到端点的时间，如果两个人在路径上的时间有交集的话，则会相遇。</p>
<p>然后这样判断一下就可以求出答案了，但是由于double定义下的除法速度很慢，会被卡常数，所以我们再用<strong>在long long定义下的交叉相乘</strong>来判断以上情况。这样我们就解决了这道题(≧▽≦)/</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">int</span> next[ONE*<span class="number">2</span>],first[ONE],go[ONE*<span class="number">2</span>],w[ONE*<span class="number">2</span>],tot;</span><br><span class="line"><span class="keyword">int</span> pos[ONE],dfn_cnt,Dep[ONE],size[ONE];</span><br><span class="line"><span class="keyword">int</span> MinD[ONE*<span class="number">2</span>][<span class="number">18</span>],NumD[ONE*<span class="number">2</span>][<span class="number">18</span>];</span><br><span class="line"><span class="keyword">int</span> Log[ONE*<span class="number">2</span>],Bin[<span class="number">18</span>];</span><br><span class="line"><span class="keyword">int</span> Stk[<span class="number">5</span>],top,fc;</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line">s64 d[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125;a[<span class="number">1005</span>],p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> input</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> BufferSize = <span class="number">1</span> &lt;&lt; <span class="number">16</span> | <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buffer[BufferSize];</span><br><span class="line">    <span class="keyword">char</span> *head = buffer + BufferSize;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *tail = head;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nextChar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == tail)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">fread</span>(buffer, <span class="number">1</span>, BufferSize, stdin);</span><br><span class="line">            head = buffer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *head++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">while</span> ((c = <span class="built_in">nextChar</span>()) &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">while</span> ((c = <span class="built_in">nextChar</span>()) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">            res = res * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> input::get;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;  w[tot]=z;</span><br><span class="line">    next[++tot]=first[v];   first[v]=tot;   go[tot]=u;  w[tot]=z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> F</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        pos[u] = ++dfn_cnt;</span><br><span class="line">        Dep[u] = Dep[father] + <span class="number">1</span>;</span><br><span class="line">        size[u] = <span class="number">1</span>;</span><br><span class="line">        MinD[dfn_cnt][<span class="number">0</span>]=Dep[u];    NumD[dfn_cnt][<span class="number">0</span>]=u;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(v==father) <span class="keyword">continue</span>;</span><br><span class="line">            d[v] = d[u] + w[e];</span><br><span class="line">            Dep[v] = Dep[u] + <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">Dfs</span>(v,u);</span><br><span class="line">            size[u] += size[v];</span><br><span class="line">            MinD[++dfn_cnt][<span class="number">0</span>]=Dep[u];  NumD[dfn_cnt][<span class="number">0</span>]=u;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Pre_Rmq</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">17</span>;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=dfn_cnt;i++)</span><br><span class="line">                <span class="keyword">if</span>(i+Bin[j]<span class="number">-1</span> &lt;= dfn_cnt)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> Next = i + Bin[j<span class="number">-1</span>];</span><br><span class="line">                    <span class="keyword">if</span>(MinD[i][j<span class="number">-1</span>] &lt; MinD[Next][j<span class="number">-1</span>])</span><br><span class="line">                        MinD[i][j]=MinD[i][j<span class="number">-1</span>], NumD[i][j]=NumD[i][j<span class="number">-1</span>];</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        MinD[i][j]=MinD[Next][j<span class="number">-1</span>], NumD[i][j]=NumD[Next][j<span class="number">-1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=pos[x];   y=pos[y];</span><br><span class="line">    <span class="keyword">if</span>(x &gt; y) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="keyword">int</span> T = Log[y - x +<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(MinD[x][T] &lt; MinD[y-Bin[T]+<span class="number">1</span>][T]) <span class="keyword">return</span> NumD[x][T];</span><br><span class="line">    <span class="keyword">return</span> NumD[y-Bin[T]+<span class="number">1</span>][T];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> s64 <span class="title">dist</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> d[x] + d[y] - (d[<span class="built_in">LCA</span>(x,y)] &lt;&lt; <span class="number">1</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> PD</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">inroad</span><span class="params">(<span class="keyword">int</span> u,power a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lca = <span class="built_in">LCA</span>(a.u,a.v);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">LCA</span>(u,lca) != lca) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">LCA</span>(u,a.u)==u || <span class="built_in">LCA</span>(u,a.v)==u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">if</span>(pos[Stk[i]] &gt; pos[Stk[j]])</span><br><span class="line">                <span class="built_in">swap</span>(Stk[i], Stk[j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> power <span class="title">Get_road</span><span class="params">(power a,power b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fc=top=<span class="number">0</span>;</span><br><span class="line">    Stk[++fc] = <span class="built_in">LCA</span>(a.u,b.u);   Stk[++fc] = <span class="built_in">LCA</span>(a.v,b.v);</span><br><span class="line">    Stk[++fc] = <span class="built_in">LCA</span>(a.u,b.v);   Stk[++fc] = <span class="built_in">LCA</span>(b.u,a.v);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=fc;i++)</span><br><span class="line">        <span class="keyword">if</span>(PD::<span class="built_in">inroad</span>(Stk[i],a) &amp;&amp; PD::<span class="built_in">inroad</span>(Stk[i],b))</span><br><span class="line">            Stk[++top] = Stk[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Sort</span>(top);</span><br><span class="line">    top=<span class="built_in">unique</span>(Stk+<span class="number">1</span>,Stk+top+<span class="number">1</span>) - Stk - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    power p;    p.val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(top==<span class="number">0</span>)  p.u = p.v = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(top==<span class="number">1</span>)  p.u = p.v = Stk[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(top==<span class="number">2</span>)  p.u=Stk[<span class="number">1</span>], p.v=Stk[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span>(top==<span class="number">3</span>)  p.u=Stk[<span class="number">2</span>], p.v=Stk[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">pmin</span><span class="params">(s64 a,s64 b,s64 c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;=b &amp;&amp; b&lt;=c) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Deal</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[x].u == a[y].u) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    p = <span class="built_in">Get_road</span>(a[x],a[y]);</span><br><span class="line">    <span class="keyword">if</span>(p.u==p.v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!p.u) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> (s64) <span class="built_in">dist</span>(a[x].u,p.u) * a[y].val == (s64) <span class="built_in">dist</span>(a[y].u,p.u) * a[x].val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> A1,A2,B1,B2;</span><br><span class="line">    <span class="keyword">double</span> A1_time,A2_time,B1_time,B2_time;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">dist</span>(a[x].u,p.u) &lt; <span class="built_in">dist</span>(a[x].u,p.v)) A1=p.u, A2=p.v;<span class="keyword">else</span> A1=p.v, A2=p.u;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">dist</span>(a[y].u,p.u) &lt; <span class="built_in">dist</span>(a[y].u,p.v)) B1=p.u, B2=p.v;<span class="keyword">else</span> B1=p.v, B2=p.u;</span><br><span class="line"></span><br><span class="line">    A1_time=(s64)<span class="built_in">dist</span>(A1,a[x].u)*a[y].val;   A2_time=(s64)<span class="built_in">dist</span>(A2,a[x].u)*a[y].val;</span><br><span class="line">    B1_time=(s64)<span class="built_in">dist</span>(B1,a[y].u)*a[x].val;   B2_time=(s64)<span class="built_in">dist</span>(B2,a[y].u)*a[x].val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(A1==B1)<span class="comment">//same</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A1_time == B1_time) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(A1_time &lt; B1_time) <span class="keyword">return</span> A2_time &gt;= B2_time;</span><br><span class="line">        <span class="keyword">return</span> A2_time &lt;= B2_time;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pmin</span>(A1_time,B1_time,A2_time)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pmin</span>(A1_time,B2_time,A2_time)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pmin</span>(B1_time,A1_time,B2_time)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pmin</span>(B1_time,A2_time,B2_time)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    dfn_cnt=tot=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(first,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(first));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();    z=<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Add</span>(x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    F::<span class="built_in">Dfs</span>(<span class="number">1</span>,<span class="number">0</span>);    F::<span class="built_in">Pre_Rmq</span>();</span><br><span class="line"></span><br><span class="line">    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i].u=<span class="built_in">get</span>();   a[i].v=<span class="built_in">get</span>();   a[i].val=<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            Ans += <span class="built_in">Deal</span>(i,j);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Log[<span class="number">0</span>]=<span class="number">-1</span>;  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2e5</span>;i++) Log[i] = Log[i&gt;&gt;<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    Bin[<span class="number">0</span>]=<span class="number">1</span>;   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">17</span>; i++) Bin[i] = Bin[i<span class="number">-1</span>] &lt;&lt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">        <span class="built_in">Solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>LCA</tag>
      </tags>
  </entry>
  <entry>
    <title>[KMP]字符串匹配</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BKMP%5D%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<h1>字符串匹配</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>对于一个字符集大小为C的字符串P，我们可以将任意两种字符在Р中的位置进行互换，例如P = abcba，我们交换a,b就变为bacab，交换 a, d就变为dbcbd，交换可以进行任意次。若交换后P变为了字符串Q，则我们称Q与P是匹配的。<br>
现在给定两个字符集大小为C的字符串 S,T，请你求出S中有多少个连续子串与T是匹配的。</p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527193628.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527193630.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3 3<br>
　　6 3<br>
　　1 2 1 2 3 2<br>
　　3 1 3<br>
　　6 3<br>
　　1 2 1 2 1 2<br>
　　3 1 3<br>
　　6 3<br>
　　1 1 2 1 2 1<br>
　　3 1 3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3<br>
　　1 2 4<br>
　　4<br>
　　1 2 3 4<br>
　　3<br>
　　2 3 4</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527193632.png" alt="img"></p>
<h2 id="Solution">Solution</h2>
<p>发现题目中颜色的具体权值是对答案无关的，然后就是只要<strong>相对位置一样</strong>即可。</p>
<p>那么显然是一个KMP的模型，变相更改，条件改为：<strong>两个字符上一次出现的相对位置相同（也就是位置差值相等）</strong>。</p>
<p>那么我们只要求出差值来KMP即可，再考虑一下<strong>串长对于答案的影响</strong>，差值&gt;串长显然是不会影响答案的，但是直接匹配的话可能将这种情况默认为不可行，所以我们在匹配的时候判断一下串长，若<strong>dist&gt;=当前匹配****串长</strong>则同设为0即可，更新fail的时候也要这么做。这样做KMP即可求出答案。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">10001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,C;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[ONE],b[ONE];</span><br><span class="line"><span class="keyword">int</span> da[ONE],db[ONE],la[ONE],lb[ONE];</span><br><span class="line"><span class="keyword">int</span> fail[ONE],j;</span><br><span class="line"><span class="keyword">int</span> Ans[ONE],ans_num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Da</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> len)</span> </span>&#123;<span class="keyword">if</span>(da[i]&gt;=len) <span class="keyword">return</span> <span class="number">0</span>;<span class="keyword">return</span> da[i];&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Db</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> len)</span> </span>&#123;<span class="keyword">if</span>(db[i]&gt;=len) <span class="keyword">return</span> <span class="number">0</span>;<span class="keyword">return</span> db[i];&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T=<span class="built_in">get</span>();    C=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">memset</span>(la,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(la));    <span class="built_in">memset</span>(lb,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(lb));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) b[i]=<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) da[i]=i-la[a[i]], la[a[i]]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) db[i]=i-lb[b[i]], lb[b[i]]=i;</span><br><span class="line"></span><br><span class="line">        j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            j=fail[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">while</span>(j &amp;&amp; <span class="built_in">Db</span>(j+<span class="number">1</span>,j+<span class="number">1</span>)!=<span class="built_in">Db</span>(i,j+<span class="number">1</span>)) j=fail[j];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Db</span>(j+<span class="number">1</span>,j+<span class="number">1</span>) == <span class="built_in">Db</span>(i,j+<span class="number">1</span>)) j++; <span class="keyword">else</span> j=<span class="number">0</span>;</span><br><span class="line">            fail[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        j=<span class="number">0</span>;    ans_num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(j &amp;&amp; <span class="built_in">Db</span>(j+<span class="number">1</span>,j+<span class="number">1</span>)!=<span class="built_in">Da</span>(i,j+<span class="number">1</span>)) j=fail[j];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Db</span>(j+<span class="number">1</span>,j+<span class="number">1</span>) == <span class="built_in">Da</span>(i,j+<span class="number">1</span>)) j++; <span class="keyword">else</span> j=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(j==m) Ans[++ans_num] = i-m+<span class="number">1</span>, j=fail[j];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans_num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ans_num;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Ans[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>KMP</tag>
      </tags>
  </entry>
  <entry>
    <title>[LCA]灾难</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BLCA%5D%E7%81%BE%E9%9A%BE/</url>
    <content><![CDATA[<h1>灾难</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>阿米巴是小强的好朋友。<br>
　　阿米巴和小强在草原上捉蚂蚱。小强突然想，如果蚂蚱被他们捉灭绝了，那么吃蚂蚱的小鸟就会饿死，而捕食小鸟的猛禽也会跟着灭绝，从而引发一系列的生态灾难。<br>
　　学过生物的阿米巴告诉小强，草原是一个极其稳定的生态系统。如果蚂蚱灭绝了，小鸟照样可以吃别的虫子，所以一个物种的灭绝并不一定会引发重大的灾难。<br>
　　我们现在从专业一点的角度来看这个问题。我们用一种叫做食物网的有向图来描述生物之间的关系：<br>
　　一个食物网有 N个点，代表 N 种生物，如果生物 x 可以吃生物 y，那么从 y 向 x 连一个有向边。<br>
　　这个图没有环。<br>
　　图中有一些点没有连出边，这些点代表的生物都是生产者，可以通过光合作用来生存； 而有连出边的点代表的都是消费者，它们必须通过吃其他生物来生存。<br>
　　如果某个消费者的所有食物都灭绝了，它会跟着灭绝。<br>
　　我们定义一个生物在食物网中的“灾难值”为，如果它突然灭绝，那么会跟着一起灭绝的生物的种数。<br>
　　举个例子：在一个草场上，生物之间的关系是：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527182539.png" alt="img"></p>
<p>如果小强和阿米巴把草原上所有的羊都给吓死了，那么狼会因为没有食物而灭绝，而小强和阿米巴可以通过吃牛、牛可以通过吃草来生存下去。所以，羊的灾难值是 1。但是，如果草突然灭绝，那么整个草原上的 5 种生物都无法幸免，所以草的灾难值是4，请求出所有的灾难值。</p>
<h2 id="Input">Input</h2>
<p>第一行是一个正整数 N，表示生物的种数。生物从 1 标号到 N。<br>
　　接下来 N 行，每行描述了一个生物可以吃的其他生物的列表，格式为用空格隔开的若干个数字，每个数字表示一种生物的标号，最后一个数字是 0 表示列表的结束。</p>
<h2 id="Output">Output</h2>
<p>包含N行，每行一个整数，表示每个生物的灾难值。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5<br>
　　0<br>
　　1 0<br>
　　1 0<br>
　　2 3 0<br>
　　2 0</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>4<br>
　　1<br>
　　0<br>
　　0<br>
　　0</p>
<h2 id="HINT">HINT</h2>
<p>对 50%的数据，N ≤ 10000。<br>
　　对 100%的数据，1 ≤ N ≤ 65534。<br>
　　输入文件的大小不超过 1M。保证输入的食物网没有环。</p>
<h2 id="Main-idea">Main idea</h2>
<p>每个点删去后可以影响到一个点，一个点被删去的条件是所有指向它的点都被删去，求一个点被删去后可以直接影响到几个点。</p>
<h2 id="Solution">Solution</h2>
<p>首先知道一个点至多有一个点使得那个点删除后直接影响到该点的，所以可以想到树形结构，也就是建立一棵**“灭绝树”**。</p>
<p>我们定义“灭绝树”满足以下性质：对于一棵多叉树的任意一个结点，当它“灭绝”时，它所有的后代也会跟着“灭绝”。</p>
<p>如何建立呢？首先利用拓扑序顺序进行操作，因为在前面的点可以影响到后面的点，而做到后面的点的时候前面的点已经处理完毕了，然后利用图的反向图，该点在灭绝树中的父亲是在反向图中所有儿子的LCA，因为只有LCA灭绝了才可以导致该点直接灭绝，那么最后答案显然就是<strong>一个点在灭绝树中的子树大小</strong>，由于可能有多个根节点，所以我们假设一个超级点为0，如果一个点入度为0则连向0，由0跑DFS求size（<strong>子树个数</strong>），最后size要-1。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">500001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,x;</span><br><span class="line"><span class="keyword">int</span> f[ONE][<span class="number">22</span>],Dep[ONE];</span><br><span class="line"><span class="keyword">int</span> next1[ONE],first1[ONE],go1[ONE],Input[ONE],tot1;</span><br><span class="line"><span class="keyword">int</span> next[ONE],first[ONE],go[ONE],tot;</span><br><span class="line"><span class="keyword">int</span> q[ONE],tou,wei;</span><br><span class="line"><span class="keyword">int</span> size[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next1[++tot1]=first1[u];   first1[u]=tot1;   go1[tot1]=v;</span><br><span class="line">    Input[v]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">New_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>) <span class="keyword">return</span> y;</span><br><span class="line">    <span class="keyword">if</span>(Dep[x]&lt;Dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Dep[f[x][i]]&gt;=Dep[y]) x=f[x][i];</span><br><span class="line">        <span class="keyword">if</span>(x==y) <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(f[x][i]!=f[y][i])</span><br><span class="line">        &#123;</span><br><span class="line">            x=f[x][i];</span><br><span class="line">            y=f[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Topo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tou=wei=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)</span><br><span class="line">        <span class="keyword">if</span>(!Input[u]) q[++wei]=u;</span><br><span class="line">    <span class="keyword">while</span>(tou&lt;wei)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[++tou];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first1[u];e;e=next1[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go1[e];</span><br><span class="line">            <span class="keyword">if</span>(!(--Input[v])) q[++wei]=v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rebuild</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=wei;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[i];</span><br><span class="line">        <span class="keyword">int</span> To=-INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first1[u];e;e=next1[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go1[e];</span><br><span class="line">            To=<span class="built_in">LCA</span>(To,v);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> v=<span class="built_in">max</span>(To,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">New_edge</span>(v,u);</span><br><span class="line"></span><br><span class="line">        Dep[u]=Dep[v]+<span class="number">1</span>;</span><br><span class="line">        f[u][<span class="number">0</span>]=v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">19</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[u][i+<span class="number">1</span>]=f[f[u][i]][i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    size[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=go[e];</span><br><span class="line">        <span class="built_in">Dfs</span>(v);</span><br><span class="line">        size[u]+=size[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(;;)</span><br><span class="line">        &#123;</span><br><span class="line">            x=<span class="built_in">get</span>();</span><br><span class="line">            <span class="keyword">if</span>(!x) <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">Add</span>(i,x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Topo</span>();</span><br><span class="line">    <span class="built_in">Rebuild</span>();</span><br><span class="line">    <span class="built_in">Dfs</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,size[i]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>LCA</tag>
      </tags>
  </entry>
  <entry>
    <title>[LCT][线段树]染色</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BLCT%5D%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5D%E6%9F%93%E8%89%B2/</url>
    <content><![CDATA[<h1>染色</h1>
<p>Time Limit: 20 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>给定一棵有n个结点的树，结点从О开始编号，0号点为根。初始时i号点颜色为i。</p>
<p>从一个点出发可以移动到与它有边相连的点，若两个点颜色不同则代价为1，否则代价为0。</p>
<p>接下来会有若干次操作，操作有两种:<br>
1、新增颜色操作：指定一个结点 u，将u到根的路径上的所有结点的颜色，统一染为一个从未出现过的新颜色。<br>
2、询问操作：给定结点u，询问以u为根的子树内的所有结点，它们走到根结点(0号点)的代价和的平均值。<br>
现在请你给出每次询问的答案。</p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194024.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194026.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>13<br>
　　0 1<br>
　　0 2<br>
　　1 11<br>
　　1 10<br>
　　1 9<br>
　　9 12<br>
　　2 5<br>
　　5 8<br>
　　2 4<br>
　　2 3<br>
　　4 6<br>
　　4 7<br>
　　7<br>
　　q 0<br>
　　O 4<br>
　　q 6<br>
　　q 2<br>
　　O 9<br>
　　q 9<br>
　　q 2</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>2.0000000000<br>
　　1.0000000000<br>
　　0.8571428571<br>
　　0.5000000000<br>
　　1.8571428571</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194028.png" alt="img"></p>
<h2 id="Main-idea">Main idea</h2>
<p>询问x到根路径上不同颜色的个数，支持将x到根的路径上的点全部设为新的颜色。</p>
<h2 id="Solution">Solution</h2>
<p>我们将边两端的点<strong>颜色相同的边设为实边</strong>，<strong>不同的设为虚边</strong>。那么一次新增颜色的操作显然就是LCT的access操作！access的时候恰是虚边和实边的转换。</p>
<p>那么我们只要用线段树维护每个点到根的贡献，结合dfs序来实现子树加，每次在LCT进行access的时候进行±1修改，然后询问的时候用<strong>区间求和</strong>求得答案即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">1500001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,x,y;</span><br><span class="line"><span class="keyword">int</span> pos[ONE],size[ONE],Dep[ONE],dfn[ONE],cnt;</span><br><span class="line">s64 res;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> lc[ONE],rc[ONE],fa[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> tree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> next[ONE],first[ONE],go[ONE],tot;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        next[++tot]=first[u];    first[u]=tot;    go[tot]=v;</span><br><span class="line">        next[++tot]=first[v];    first[v]=tot;    go[tot]=u;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        pos[u] = ++cnt; dfn[cnt] = u;</span><br><span class="line">        size[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(v==father) <span class="keyword">continue</span>;</span><br><span class="line">            Dep[v] = Dep[u] + <span class="number">1</span>;</span><br><span class="line">            fa[v] = u;</span><br><span class="line">            <span class="built_in">Dfs</span>(v,u);</span><br><span class="line">            size[u] += size[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Seg</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        s64 add,value;</span><br><span class="line">    &#125;Node[ONE];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> Q)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Node[i].add)</span><br><span class="line">        &#123;</span><br><span class="line">            Node[i&lt;&lt;<span class="number">1</span>].add+=Node[i].add;</span><br><span class="line">            Node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].add+=Node[i].add;</span><br><span class="line">            Node[i&lt;&lt;<span class="number">1</span>].value+=Node[i].add*(Q-Q/<span class="number">2</span>);</span><br><span class="line">            Node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].value+=Node[i].add*(Q/<span class="number">2</span>);</span><br><span class="line">            Node[i].add=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)</span><br><span class="line">        &#123;</span><br><span class="line">            Node[i].value = Dep[dfn[l]];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">Build</span>(i&lt;&lt;<span class="number">1</span>,l,mid);    <span class="built_in">Build</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        Node[i].value=Node[i&lt;&lt;<span class="number">1</span>].value+Node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)</span><br><span class="line">        &#123;</span><br><span class="line">            Node[i].add+=x;</span><br><span class="line">            Node[i].value+=(s64)(r-l+<span class="number">1</span>)*x;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">pushdown</span>(i,r-l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid) <span class="built_in">Update</span>(i&lt;&lt;<span class="number">1</span>,l,mid,L,R,x);</span><br><span class="line">        <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=R) <span class="built_in">Update</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R,x);</span><br><span class="line">        Node[i].value=Node[i&lt;&lt;<span class="number">1</span>].value+Node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)</span><br><span class="line">        &#123;</span><br><span class="line">            res+=Node[i].value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushdown</span>(i,r-l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid) <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>,l,mid,L,R);</span><br><span class="line">        <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=R) <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> LCT</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">is_real</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (lc[fa[x]]==x || rc[fa[x]]==x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Turn</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y=fa[x],z=fa[y];</span><br><span class="line">        <span class="keyword">int</span> b= x==lc[y] ? rc[x]:lc[x];</span><br><span class="line"></span><br><span class="line">        fa[x]=z;    fa[y]=x;</span><br><span class="line">        <span class="keyword">if</span>(b) fa[b]=y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(z)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(y==lc[z]) lc[z]=x;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span>(y==rc[z]) rc[z]=x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x==lc[y]) rc[x]=y,lc[y]=b;</span><br><span class="line">        <span class="keyword">else</span> lc[x]=y,rc[y]=b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">is_real</span>(x))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">is_real</span>(fa[x]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>( (lc[fa[x]]==x) == (lc[fa[fa[x]]]==fa[x]) ) <span class="built_in">Turn</span>(fa[x]);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">Turn</span>(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Turn</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(lc[x]) x=lc[x];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p=x,q=<span class="number">0</span>; p; q=p,p=fa[p])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Splay</span>(p);</span><br><span class="line">            <span class="keyword">if</span>(rc[p])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> N=<span class="built_in">find_root</span>(rc[p]);</span><br><span class="line">                Seg::<span class="built_in">Update</span>(<span class="number">1</span>,<span class="number">1</span>,n,pos[N],pos[N]+size[N]<span class="number">-1</span>,+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            rc[p]=q;</span><br><span class="line">            <span class="keyword">if</span>(rc[p])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> N=<span class="built_in">find_root</span>(rc[p]);</span><br><span class="line">                Seg::<span class="built_in">Update</span>(<span class="number">1</span>,<span class="number">1</span>,n,pos[N],pos[N]+size[N]<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">        x++;    y++;</span><br><span class="line">        tree::<span class="built_in">Add</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    tree::<span class="built_in">Dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    Seg::<span class="built_in">Build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line">    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch);    x=<span class="built_in">get</span>(); x++;</span><br><span class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>]==<span class="string">&#x27;O&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            LCT::<span class="built_in">access</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            res=<span class="number">0</span>;</span><br><span class="line">            Seg::<span class="built_in">Query</span>(<span class="number">1</span>,<span class="number">1</span>,n,pos[x],pos[x]+size[x]<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.10lf\n&quot;</span>,(<span class="keyword">double</span>)res/size[x]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>LCT</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[LCT][线段树]树点涂色</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BLCT%5D%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5D%E6%A0%91%E7%82%B9%E6%B6%82%E8%89%B2/</url>
    <content><![CDATA[<h1>树点涂色</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>Bob有一棵n个点的有根树，其中1号点是根节点。Bob在每个点上涂了颜色，并且每个点上的颜色不同。定义一条路径的权值是：这条路径上的点（包括起点和终点）共有多少种不同的颜色。Bob可能会进行这几种操作：</p>
<p>1 x:</p>
<p>把点x到根节点的路径上所有的点染上一种没有用过的新颜色。</p>
<p>2 x y:</p>
<p>求x到y的路径的权值。</p>
<p>3 x:</p>
<p>在以x为根的子树中选择一个点，使得这个点到根节点的路径权值最大，求最大权值。</p>
<p>Bob一共会进行m次操作</p>
<h2 id="Input">Input</h2>
<p>第一行两个数n,m。</p>
<p>接下来n-1行，每行两个数a,b，表示a与b之间有一条边。</p>
<p>接下来m行，表示操作，格式见题目描述。</p>
<h2 id="Output">Output</h2>
<p>每当出现2,3操作，输出一行。</p>
<p>如果是2操作，输出一个数表示路径的权值</p>
<p>如果是3操作，输出一个数表示权值的最大值</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 6<br>
　1 2<br>
　2 3<br>
　3 4<br>
　3 5<br>
　2 4 5<br>
　3 3<br>
　1 4<br>
　2 4 5<br>
　1 5<br>
　2 4 5</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3<br>
　4<br>
　2<br>
　2</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=n,m&lt;=100000</p>
<h2 id="Solution">Solution</h2>
<p>我们将边两端的点<strong>颜色相同的边设为实边</strong>，<strong>不同的设为虚边</strong>。那么一次新增颜色的操作显然就是LCT的<strong>access</strong>操作！access的时候恰是虚边和实边的转换。</p>
<p>那么我们只要用线段树维护每个点到根的贡献，结合dfs序来实现子树加，每次在LCT进行access的时候进行±1修改，然后询问的时候用<strong>区间求和，区间最值</strong>求得答案即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> x,y,P;</span><br><span class="line"><span class="keyword">int</span> POS[ONE],POSCNT;</span><br><span class="line"><span class="keyword">int</span> pos[ONE],dfn_cnt,size[ONE],dfn[ONE];</span><br><span class="line"><span class="keyword">int</span> Dep[ONE],son[ONE],Top[ONE];</span><br><span class="line"><span class="keyword">int</span> lc[ONE],rc[ONE],fa[ONE],fat[ONE];</span><br><span class="line"><span class="keyword">int</span> res_max,res_value;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> tree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> next[ONE],first[ONE],go[ONE],tot=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        next[++tot]=first[u];    first[u]=tot;    go[tot]=v;</span><br><span class="line">        next[++tot]=first[v];    first[v]=tot;    go[tot]=u;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        pos[u] = ++dfn_cnt; dfn[dfn_cnt] = u;</span><br><span class="line">        size[u] = <span class="number">1</span>;</span><br><span class="line">        Dep[u] = Dep[father] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(v==father) <span class="keyword">continue</span>;</span><br><span class="line">            fa[v] = u;    fat[v] = u;</span><br><span class="line">            <span class="built_in">Dfs</span>(v,u);</span><br><span class="line">            size[u] += size[v];</span><br><span class="line">            <span class="keyword">if</span>(size[v] &gt; size[son[u]]) son[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Dfs_twice</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        POS[u] = ++POSCNT;</span><br><span class="line">        <span class="keyword">if</span>(son[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=son[u];</span><br><span class="line">            Top[v] = Top[u];</span><br><span class="line">            <span class="built_in">Dfs_twice</span>(v,u);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(v==father || v==son[u]) <span class="keyword">continue</span>;</span><br><span class="line">            Top[v] = v;</span><br><span class="line">            <span class="built_in">Dfs_twice</span>(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(Top[x]!=Top[y])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( Dep[Top[x]] &lt; Dep[Top[y]] ) <span class="built_in">swap</span>(x,y);</span><br><span class="line">            x = fat[Top[x]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(POS[x] &gt; POS[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Seg</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> add,value;</span><br><span class="line">        <span class="keyword">int</span> maxx;</span><br><span class="line">    &#125;Node[ONE*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> Q)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Node[i].add)</span><br><span class="line">        &#123;</span><br><span class="line">            Node[i&lt;&lt;<span class="number">1</span>].add += Node[i].add;</span><br><span class="line">            Node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].add += Node[i].add;</span><br><span class="line">            Node[i&lt;&lt;<span class="number">1</span>].maxx += Node[i].add;</span><br><span class="line">            Node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].maxx += Node[i].add;</span><br><span class="line">            Node[i&lt;&lt;<span class="number">1</span>].value += Node[i].add * (Q-Q/<span class="number">2</span>);</span><br><span class="line">            Node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].value += Node[i].add * (Q/<span class="number">2</span>);</span><br><span class="line">            Node[i].add = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)</span><br><span class="line">        &#123;</span><br><span class="line">            Node[i].value = Dep[dfn[l]];</span><br><span class="line">            Node[i].maxx = Dep[dfn[l]];</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">Build</span>(i&lt;&lt;<span class="number">1</span>,l,mid);    <span class="built_in">Build</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        Node[i].value = Node[i&lt;&lt;<span class="number">1</span>].value + Node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].value;</span><br><span class="line">        Node[i].maxx = <span class="built_in">max</span>(Node[i&lt;&lt;<span class="number">1</span>].maxx, Node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].maxx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)</span><br><span class="line">        &#123;</span><br><span class="line">            Node[i].add += x;</span><br><span class="line">            Node[i].value += (r-l+<span class="number">1</span>)*x;</span><br><span class="line">            Node[i].maxx += x;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushdown</span>(i,r-l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid) <span class="built_in">Update</span>(i&lt;&lt;<span class="number">1</span>,l,mid,L,R,x);</span><br><span class="line">        <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=R) <span class="built_in">Update</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R,x);</span><br><span class="line"></span><br><span class="line">        Node[i].value = Node[i&lt;&lt;<span class="number">1</span>].value + Node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].value;</span><br><span class="line">        Node[i].maxx = <span class="built_in">max</span>(Node[i&lt;&lt;<span class="number">1</span>].maxx , Node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].maxx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)</span><br><span class="line">        &#123;</span><br><span class="line">            res_max = <span class="built_in">max</span>(res_max,Node[i].maxx);</span><br><span class="line">            res_value += Node[i].value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushdown</span>(i,r-l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid) <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>,l,mid,L,R);</span><br><span class="line">        <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=R) <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> LCT</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">is_real</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (lc[fa[x]]==x || rc[fa[x]]==x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Turn</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = fa[x], z = fa[y];</span><br><span class="line">        <span class="keyword">int</span> b = x==lc[y] ? rc[x]:lc[x];</span><br><span class="line"></span><br><span class="line">        fa[x] = z;    fa[y] = x;</span><br><span class="line">        <span class="keyword">if</span>(b) fa[b] = y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(z)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(y == lc[z]) lc[z] = x;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span>(y == rc[z]) rc[z] = x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x==lc[y]) rc[x]=y,lc[y]=b;</span><br><span class="line">        <span class="keyword">else</span> lc[x]=y,rc[y]=b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">is_real</span>(x))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">is_real</span>(fa[x]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>( (lc[fa[x]]==x) == (lc[fa[fa[x]]]==fa[x])) <span class="built_in">Turn</span>(fa[x]);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">Turn</span>(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Turn</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find_root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(lc[x]) x=lc[x];</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p=x,q=<span class="number">0</span>; p; q=p,p=fa[p])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Splay</span>(p);</span><br><span class="line">            <span class="keyword">if</span>(rc[p])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> N = <span class="built_in">find_root</span>(rc[p]);</span><br><span class="line">                Seg::<span class="built_in">Update</span>(<span class="number">1</span>,<span class="number">1</span>,n,pos[N],pos[N]+size[N]<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rc[p] = q;</span><br><span class="line">            <span class="keyword">if</span>(rc[p])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> N = <span class="built_in">find_root</span>(rc[p]);</span><br><span class="line">                Seg::<span class="built_in">Update</span>(<span class="number">1</span>,<span class="number">1</span>,n,pos[N],pos[N]+size[N]<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Getsum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Ans, Sx, Sy, SLCA, LCA;</span><br><span class="line">    LCA = tree::<span class="built_in">LCA</span>(x,y);</span><br><span class="line">    x=pos[x],    y=pos[y],    LCA=pos[LCA];</span><br><span class="line">    res_value = <span class="number">0</span>;    Seg::<span class="built_in">Query</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,x);    Sx = res_value;</span><br><span class="line">    res_value = <span class="number">0</span>;    Seg::<span class="built_in">Query</span>(<span class="number">1</span>,<span class="number">1</span>,n,y,y);    Sy = res_value;</span><br><span class="line">    res_value = <span class="number">0</span>;    Seg::<span class="built_in">Query</span>(<span class="number">1</span>,<span class="number">1</span>,n,LCA,LCA);    SLCA = res_value;</span><br><span class="line">    <span class="keyword">return</span> Sx+Sy<span class="number">-2</span>*SLCA+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Getmax</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res_max = <span class="number">0</span>;</span><br><span class="line">    Seg::<span class="built_in">Query</span>(<span class="number">1</span>,<span class="number">1</span>,n,pos[x],pos[x]+size[x]<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> res_max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">        tree::<span class="built_in">Add</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tree::<span class="built_in">Dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    Top[<span class="number">1</span>] = <span class="number">1</span>, tree::<span class="built_in">Dfs_twice</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    Seg::<span class="built_in">Build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        P = <span class="built_in">get</span>();    x=<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">if</span>(P==<span class="number">1</span>)</span><br><span class="line">            LCT::<span class="built_in">access</span>(x);</span><br><span class="line">        <span class="keyword">if</span>(P==<span class="number">2</span>)</span><br><span class="line">            y=<span class="built_in">get</span>(), <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">Getsum</span>(x,y));</span><br><span class="line">        <span class="keyword">if</span>(P==<span class="number">3</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">Getmax</span>(x));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>LCT</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[LCT]洞穴勘测</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BLCT%5D%E6%B4%9E%E7%A9%B4%E5%8B%98%E6%B5%8B/</url>
    <content><![CDATA[<h1>洞穴勘测</h1>
<p>Time Limit: 10 Sec Memory Limit: 259 MB</p>
<h2 id="Description">Description</h2>
<p>辉辉热衷于洞穴勘测。某天，他按照地图来到了一片被标记为JSZX的洞穴群地区。经过初步勘测，辉辉发现这片区域由n个洞穴（分别编号为1到n）以及若干通道组成，并且每条通道连接了恰好两个洞穴。假如两个洞穴可以通过一条或者多条通道按一定顺序连接起来，那么这两个洞穴就是连通的，按顺序连接在一起的这些通道则被称之为这两个洞穴之间的一条路径。洞穴都十分坚固无法破坏，然而通道不太稳定，时常因为外界影响而发生改变，比如，根据有关仪器的监测结果，123号洞穴和127号洞穴之间有时会出现一条通道，有时这条通道又会因为某种稀奇古怪的原因被毁。辉辉有一台监测仪器可以实时将通道的每一次改变状况在辉辉手边的终端机上显示：如果监测到洞穴u和洞穴v之间出现了一条通道，终端机上会显示一条指令 Connect u v 如果监测到洞穴u和洞穴v之间的通道被毁，终端机上会显示一条指令 Destroy u v  经过长期的艰苦卓绝的手工推算，辉辉发现一个奇怪的现象：无论通道怎么改变，任意时刻任意两个洞穴之间至多只有一条路径。因而，辉辉坚信这是由于某种本质规律的支配导致的。因而，辉辉更加夜以继日地坚守在终端机之前，试图通过通道的改变情况来研究这条本质规律。然而，终于有一天，辉辉在堆积成山的演算纸中崩溃了……他把终端机往地面一砸（终端机也足够坚固无法破坏），转而求助于你，说道：“你老兄把这程序写写吧”。辉辉希望能随时通过终端机发出指令 Query u  v，向监测仪询问此时洞穴u和洞穴v是否连通。现在你要为他编写程序回答每一次询问。已知在第一条指令显示之前，JSZX洞穴群中没有任何通道存在。</p>
<h2 id="Input">Input</h2>
<p>第一行为两个正整数n和m，分别表示洞穴的个数和终端机上出现过的指令的个数。以下m行，依次表示终端机上出现的各条指令。每行开头是一个表示指令种类的字符串s（&quot;Connect”、”Destroy”或者”Query”，区分大小写），之后有两个整数u和v (1≤u, v≤n且u≠v) 分别表示两个洞穴的编号。</p>
<h2 id="Output">Output</h2>
<p>对每个Query指令，输出洞穴u和洞穴v是否互相连通：是输出”Yes”，否则输出”No”。（不含双引号）</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>样例输入1 <a href="http://cave.in">cave.in</a><br>
　200	5<br>
　Query	123	127<br>
　Connect	123	127<br>
　Query	123	127<br>
　Destroy	127	123<br>
　Query	123	127</p>
<p>样例输入2 <a href="http://cave.in">cave.in</a><br>
　3 	5<br>
　Connect	1	2<br>
　Connect	3	1<br>
　Query	2	3<br>
　Destroy	1	3<br>
　Query	2	3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>样例输出1 cave.out<br>
　No<br>
　Yes<br>
　No</p>
<p>样例输出2 cave.out<br>
　Yes<br>
　No</p>
<h2 id="HINT">HINT</h2>
<p>100%的数据满足n≤10000, m≤200000</p>
<h2 id="Main-idea">Main idea</h2>
<p>若干操作，加入一条边，删去一条边，查询两点是否连通。</p>
<h2 id="Solution">Solution</h2>
<p>LCT模板题。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">200001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,T;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> LCT</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> lc[ONE],rc[ONE],fa[ONE];</span><br><span class="line">    <span class="keyword">int</span> hasRev[ONE];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">is_root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (lc[fa[x]]!=x &amp;&amp; rc[fa[x]]!=x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tag_rev</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        hasRev[x]^=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">swap</span>(lc[x],rc[x]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tag_down</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(hasRev[x])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">tag_rev</span>(lc[x]);</span><br><span class="line">            <span class="built_in">tag_rev</span>(rc[x]);</span><br><span class="line">            hasRev[x]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Turn</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y=fa[x],z=fa[y];</span><br><span class="line">        <span class="keyword">int</span> b= x==lc[y]?rc[x]:lc[x];</span><br><span class="line"></span><br><span class="line">        fa[x]=z;    fa[y]=x;</span><br><span class="line">        <span class="keyword">if</span>(b) fa[b]=y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(z)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(y==lc[z]) lc[z]=x;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span>(y==rc[z]) rc[z]=x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x==lc[y]) rc[x]=y,lc[y]=b;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(x==rc[y]) lc[x]=y,rc[y]=b;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> anc[ONE];</span><br><span class="line">        <span class="keyword">int</span> anc_num=<span class="number">0</span>;</span><br><span class="line">        anc[++anc_num]=x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;!<span class="built_in">is_root</span>(i);i=fa[i]) anc[++anc_num]=fa[i];</span><br><span class="line">        <span class="keyword">while</span>(anc_num&gt;<span class="number">0</span>) <span class="built_in">tag_down</span>(anc[anc_num--]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">is_root</span>(x))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">is_root</span>(fa[x]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>( (lc[fa[x]]==x) == (lc[fa[fa[x]]]==fa[x]) )</span><br><span class="line">                    <span class="built_in">Turn</span>(fa[x]);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">Turn</span>(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Turn</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p=x,q=<span class="number">0</span>; p; q=p,p=fa[p])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Splay</span>(p);</span><br><span class="line">            rc[p]=q;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">make_root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">access</span>(x);    <span class="built_in">Splay</span>(x);    <span class="built_in">tag_rev</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">make_root</span>(x);    fa[x]=y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">make_root</span>(x);    <span class="built_in">access</span>(y);    <span class="built_in">Splay</span>(y);</span><br><span class="line">        fa[x]=lc[y]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">PD</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">make_root</span>(x);    <span class="built_in">access</span>(y);    <span class="built_in">Splay</span>(y);</span><br><span class="line">        <span class="keyword">int</span> pd=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i;i=fa[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==y)</span><br><span class="line">            &#123;</span><br><span class="line">                pd=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch);</span><br><span class="line">        u=<span class="built_in">get</span>();    v=<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>) LCT::<span class="built_in">link</span>(u,v);</span><br><span class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>]==<span class="string">&#x27;D&#x27;</span>) LCT::<span class="built_in">cut</span>(u,v);</span><br><span class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x=LCT::<span class="built_in">PD</span>(u,v);</span><br><span class="line">            <span class="keyword">if</span>(!x) <span class="built_in">printf</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title>[LCT]远行</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BLCT%5D%E8%BF%9C%E8%A1%8C/</url>
    <content><![CDATA[<h1>远行</h1>
<p>Time Limit: 20 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527200323.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527200326.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527200332.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>0<br>
　　5 10<br>
　　1 4 5<br>
　　2 3<br>
　　2 5<br>
　　2 1<br>
　　1 5 3<br>
　　1 1 4<br>
　　2 3<br>
　　2 5<br>
　　1 5 2<br>
　　2 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>0<br>
　　1<br>
　　0<br>
　　3<br>
　　2<br>
　　3</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527200338.png" alt="img"></p>
<h2 id="Main-idea">Main idea</h2>
<p>每次连上一条边，询问一个点和其能到达最远的点的距离。</p>
<h2 id="Solution">Solution</h2>
<p>由于每次要连上一条边，我们显然使用LCT，然后<strong>一个点到达的最远的点必然是树的直径上的端点</strong>，我们合并两棵树维护直径的时候，暴力分几种情况讨论一下即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">300005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Type,n,Q;</span><br><span class="line"><span class="keyword">int</span> opt,x,y;</span><br><span class="line"><span class="keyword">int</span> fat[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fat[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> fat[x]=<span class="built_in">Find</span>(fat[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> LCT</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> lc[ONE],rc[ONE],fa[ONE];</span><br><span class="line">    <span class="keyword">int</span> hasRev[ONE];</span><br><span class="line">    <span class="keyword">int</span> L[ONE],R[ONE],dis[ONE],size[ONE];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            fat[i]=L[i]=R[i]=i,</span><br><span class="line">        size[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        size[x] = size[lc[x]] + size[rc[x]] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">is_real</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (lc[fa[x]]==x || rc[fa[x]]==x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tag_rev</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        hasRev[x]^=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">swap</span>(lc[x],rc[x]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tag_down</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(hasRev[x])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">tag_rev</span>(lc[x]);</span><br><span class="line">            <span class="built_in">tag_rev</span>(rc[x]);</span><br><span class="line">            hasRev[x]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Turn</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y=fa[x],z=fa[y];</span><br><span class="line">        <span class="keyword">int</span> b= x==lc[y]?rc[x]:lc[x];</span><br><span class="line"></span><br><span class="line">        fa[y]=x;    fa[x]=z;</span><br><span class="line">        <span class="keyword">if</span>(b) fa[b]=y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(z)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(y==lc[z]) lc[z]=x;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(y==rc[z]) rc[z]=x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x==lc[y]) rc[x]=y,lc[y]=b;</span><br><span class="line">        <span class="keyword">else</span> lc[x]=y,rc[y]=b;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Update</span>(y);    <span class="built_in">Update</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> anc[ONE];</span><br><span class="line">        <span class="keyword">int</span> anc_num=<span class="number">0</span>;</span><br><span class="line">        anc[++anc_num] = x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x; <span class="built_in">is_real</span>(i); i=fa[i]) anc[++anc_num]=fa[i];</span><br><span class="line">        <span class="keyword">while</span>(anc_num&gt;<span class="number">0</span>) <span class="built_in">tag_down</span>(anc[anc_num--]);</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">is_real</span>(x))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">is_real</span>(fa[x]))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>( (lc[fa[x]]==x) == (lc[fa[fa[x]]]==fa[x]) ) <span class="built_in">Turn</span>(fa[x]);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">Turn</span>(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Turn</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p=x,q=<span class="number">0</span>; p; q=p,p=fa[q])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Splay</span>(p);</span><br><span class="line">            rc[p] = q;</span><br><span class="line">            <span class="built_in">Update</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">make_root</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">access</span>(x);    <span class="built_in">Splay</span>(x);    <span class="built_in">tag_rev</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dist</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">make_root</span>(x);    <span class="built_in">access</span>(y);    <span class="built_in">Splay</span>(y);    <span class="keyword">return</span> size[y]<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lx,rx,ly,ry;</span><br><span class="line">        <span class="keyword">int</span> Fx=<span class="built_in">Find</span>(x), Fy=<span class="built_in">Find</span>(y);</span><br><span class="line">        fat[Fy] = Fx;</span><br><span class="line">        <span class="built_in">make_root</span>(x);    fa[x]=y;</span><br><span class="line">        lx = L[Fx];    rx = R[Fx];    ly = L[Fy];    ry = R[Fy];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dist</span>(lx,rx) &gt;= dis[Fx]) dis[Fx]=<span class="built_in">dist</span>(lx,rx), L[Fx]=lx, R[Fx]=rx;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dist</span>(ly,ry) &gt;= dis[Fx]) dis[Fx]=<span class="built_in">dist</span>(ly,ry), L[Fx]=ly, R[Fx]=ry;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dist</span>(lx,ly) &gt;= dis[Fx]) dis[Fx]=<span class="built_in">dist</span>(lx,ly), L[Fx]=lx, R[Fx]=ly;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dist</span>(lx,ry) &gt;= dis[Fx]) dis[Fx]=<span class="built_in">dist</span>(lx,ry), L[Fx]=lx, R[Fx]=ry;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dist</span>(rx,ly) &gt;= dis[Fx]) dis[Fx]=<span class="built_in">dist</span>(rx,ly), L[Fx]=rx, R[Fx]=ly;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">dist</span>(rx,ry) &gt;= dis[Fx]) dis[Fx]=<span class="built_in">dist</span>(rx,ry), L[Fx]=rx, R[Fx]=ry;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> Fx=<span class="built_in">Find</span>(x);</span><br><span class="line">        Ans = <span class="built_in">max</span>( <span class="built_in">dist</span>(L[Fx],x),<span class="built_in">dist</span>(R[Fx],x) );</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Type=<span class="built_in">get</span>();</span><br><span class="line">    n=<span class="built_in">get</span>();    Q=<span class="built_in">get</span>();</span><br><span class="line">    LCT::<span class="built_in">pre</span>();</span><br><span class="line">    <span class="keyword">while</span>(Q--)</span><br><span class="line">    &#123;</span><br><span class="line">        opt = <span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">            <span class="keyword">if</span>(Type==<span class="number">1</span>) x^=Ans, y^=Ans;</span><br><span class="line">            LCT::<span class="built_in">link</span>(x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x=<span class="built_in">get</span>();</span><br><span class="line">            <span class="keyword">if</span>(Type==<span class="number">1</span>) x^=Ans;</span><br><span class="line">            LCT::<span class="built_in">Query</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lucas]Gate Of Babylon</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BLucas%5DGate%20Of%20Babylon/</url>
    <content><![CDATA[<h1>Gate Of Babylon</h1>
<p>Time Limit: 10 Sec Memory Limit: 162 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527183506.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527183454.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527183456.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>2 1 10 13</p>
<p>3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>12<br>
　　<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527183518.png" alt="img"></p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527183520.png" alt="img"></p>
<h2 id="Main-idea">Main idea</h2>
<p>有若干个没有限制的道具，以及T个有限制个数的道具，取出m个，求方案数。</p>
<h2 id="Solution">Solution</h2>
<p>首先，看到有限制的只有15个，因此可以考虑使用容斥原理：Ans=全部没有限制的方案-有1个超过限制的方案数+有2个超过限制的方案数-有3个超过限制的方案数…。</p>
<p>以此类推。我们先考虑没有限制的，在m组无限制的数中选n个的方案数，显然就是<strong>C(n+m-1,n)</strong>。</p>
<p>因为这道题是要求不超过m的方案数，也就是那么运用加法原理，发现答案也就是C(n+0-1,0)+C(n+1-1,1)+C(n+2-1,2)+…+C(n+m-1,m)=<strong>C(n+m,m)</strong>。</p>
<p>然后考虑有限制的情况，有一个超过限制直接用总数减去（这个的限制+1)就是当前的总数，相当于<strong>强制要选限制+1个为空</strong>。</p>
<p>然后只要DFS，记录到当前为止选了几个，答案要记是b[i]+1,判断加减，最后累加答案。</p>
<p>最后，n、m过大，发现p是一个<strong>质数</strong>，所以可以用Lucas定理：Lucas(n,m,p)=Lucas(n/p,m/p,p)*C(n%p,m%p)，其中C(n%p,m%p)求的时候要用到乘法逆元。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">1000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,T,m,MOD;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Ans;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Jc[ONE];</span><br><span class="line"><span class="keyword">int</span> b[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Quickpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> MOD)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%MOD;</span><br><span class="line">        a=(<span class="keyword">long</span> <span class="keyword">long</span>)a*a%MOD;</span><br><span class="line">        b/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(m&lt;n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> up=Jc[m]%MOD;</span><br><span class="line">    <span class="keyword">int</span> down=(<span class="keyword">long</span> <span class="keyword">long</span>)Jc[m-n]*Jc[n]%MOD;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">long</span> <span class="keyword">long</span>)up*<span class="built_in">Quickpow</span>(down,MOD<span class="number">-2</span>,MOD)%MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lucas</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> MOD)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n &amp;&amp; m)</span><br><span class="line">    &#123;</span><br><span class="line">        res=res*<span class="built_in">C</span>(n%MOD,m%MOD)%MOD;</span><br><span class="line">        n/=MOD; m/=MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> len,<span class="keyword">int</span> PD,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(len==T+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Ans+=PD*<span class="built_in">Lucas</span>(n+m-val,m-val,MOD);</span><br><span class="line">        Ans+=MOD;</span><br><span class="line">        Ans%=MOD;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dfs</span>(len+<span class="number">1</span>,PD,val);</span><br><span class="line">    <span class="built_in">Dfs</span>(len+<span class="number">1</span>,-PD,val+b[len]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    T=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();    MOD=<span class="built_in">get</span>();</span><br><span class="line">    Jc[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=MOD;i++) Jc[i]=(<span class="keyword">long</span> <span class="keyword">long</span>)Jc[i<span class="number">-1</span>]*i%MOD;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;i++)</span><br><span class="line">        b[i]=<span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">Dfs</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>Lucas</tag>
      </tags>
  </entry>
  <entry>
    <title>[Lucas][BSGS]无聊的计算姬</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BLucas%5D%5BBSGS%5D%E6%97%A0%E8%81%8A%E7%9A%84%E8%AE%A1%E7%AE%97%E5%A7%AC/</url>
    <content><![CDATA[<h1>无聊的计算姬</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527200458.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527200456.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527200454.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>6<br>
　　2 2 3 4<br>
　　3 2 7 9<br>
　　2 1 2 9<br>
　　3 1 6 7<br>
　　1 5 3 7<br>
　　1 9 2 8</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>Math Error<br>
　　3<br>
　　Math Error<br>
　　6<br>
　　6<br>
　　1</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527200451.png" alt="img"></p>
<h2 id="Solution">Solution</h2>
<p>我们可以分步骗分。（Task1直接快速幂即可。）</p>
<p>对于前50分：</p>
<p>对于Task2，我们直接暴力枚举，出现一个重复的停止，判断是否存在即可，对于Task3，直接n^2递推组合数即可。</p>
<p>对于11~16的20分：</p>
<p>对于Task2，我们运用BSGS求解即可，对于Task3，直接上Lucas即可。</p>
<p>BearChild不会做满分，满分要运用exBSGS以及exLucas&amp;&amp;CRT。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">10000005</span>;</span><br><span class="line"></span><br><span class="line">map &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; f;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> type,y,z,MOD;</span><br><span class="line"><span class="keyword">int</span> Jc[ONE];</span><br><span class="line"><span class="keyword">int</span> C[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quickpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> MOD)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=(s64)res*a%MOD;</span><br><span class="line">        a=(s64)a*a%MOD;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> PC</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Make_C</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> MOD)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        C[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">                C[i][j] = (C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> C[a][b];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> MOD)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> up = Jc[n];</span><br><span class="line">        <span class="keyword">int</span> down = (s64)Jc[m] * Jc[n-m] % MOD;</span><br><span class="line">        <span class="keyword">return</span> (s64)up * <span class="built_in">Quickpow</span>(down,MOD<span class="number">-2</span>,MOD) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Lucas</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m,<span class="keyword">int</span> MOD)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Jc[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=MOD;i++) Jc[i] = (s64)Jc[i<span class="number">-1</span>] * i % MOD;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n &amp;&amp; m)</span><br><span class="line">        &#123;</span><br><span class="line">            res = (s64)res * <span class="built_in">C</span>(n%MOD,m%MOD,MOD) % MOD;</span><br><span class="line">            n/=MOD;    m/=MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> PB</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Make_min</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> MOD)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(res==b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        f.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100000</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            res = (s64)res * a % MOD;</span><br><span class="line">            <span class="keyword">if</span>(f[res]) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            f[res] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(res==b) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">BSGS</span><span class="params">(<span class="keyword">int</span> A,<span class="keyword">int</span> B,<span class="keyword">int</span> MOD)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(A % MOD == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="built_in">sqrt</span>(MOD) + <span class="number">1</span>;</span><br><span class="line">        f.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">int</span> record = B % MOD;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            record = (s64) record * A % MOD;</span><br><span class="line">            f[record] = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> A_m = <span class="built_in">Quickpow</span>(A,m,MOD);</span><br><span class="line">        record = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            record = (s64)record * A_m % MOD;</span><br><span class="line">            <span class="keyword">if</span>(f[record])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x = (i * m %MOD- f[record]+MOD) %MOD;</span><br><span class="line">                <span class="keyword">return</span> x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        type=<span class="built_in">get</span>();</span><br><span class="line">        y=<span class="built_in">get</span>();    z=<span class="built_in">get</span>();    MOD=<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">if</span>(type==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">Quickpow</span>(y,z,MOD));</span><br><span class="line">        <span class="keyword">if</span>(type==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(z&lt;=<span class="number">1000</span> &amp;&amp; y&lt;=<span class="number">1000</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,PC::<span class="built_in">Make_C</span>(z,y,MOD));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,PC::<span class="built_in">Lucas</span>(z,y,MOD));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(type==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(z&lt;=<span class="number">1000</span> &amp;&amp; y&lt;=<span class="number">1000</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> res=PB::<span class="built_in">Make_min</span>(y,z,MOD);</span><br><span class="line">                <span class="keyword">if</span>(res==<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;Math Error\n&quot;</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> res=PB::<span class="built_in">BSGS</span>(y,z,MOD);</span><br><span class="line">                <span class="keyword">if</span>(res==<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;Math Error\n&quot;</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>Lucas</tag>
        <tag>BSGS</tag>
      </tags>
  </entry>
  <entry>
    <title>[Manacher]Interesting</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BManacher%5DInteresting/</url>
    <content><![CDATA[<h1>Interesting</h1>
<p>Time Limit: 30 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527200749.png" alt="img"></p>
<p>Alice get a string S. She thinks palindrome string is interesting. Now she wanna know how many three tuple (i,j,k) satisfy , S[i…j] and S[j+1…k] are all palindrome strings. It’s easy for her. She wants to know the sum of i*k of all required three tuples. She can’t solve it. So can you help her? The answer may be very large, please output the answer mod 1000000007.</p>
<p>A palindrome string is a string that is same when the string is read from left to right as when the string is read from right to left.</p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527200752.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527200754.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>2<br>
　　aaa<br>
　　abc</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>14<br>
　　8</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527200756.png" alt="img"></p>
<h2 id="Source">Source</h2>
<p>我们先找一下这道题的本质，根据<strong>乘法分配律</strong>，我们可以使得：cntL[i]表示以 i 开始的是回文串的下标和，cntR[i]表示以 i 结束的回文串的下标和，那么这时候答案显然就是cntR[i]×cntL[i+1]。</p>
<p>我们再来思考一下怎么求出cntL和cntR，显然我们可以运用Manacher算法O(n)得到每一个<strong>回文半径</strong>，然后 i 对于cntL和cntR的影响显然就是一个序列上的等差数列。</p>
<p>接着我们再记录一下<strong>del表示公差</strong>，O(n)推一下<strong>等差数列</strong>每个位置的和即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = (<span class="number">1e6</span>+<span class="number">5</span>)*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Niyu = <span class="number">5e8</span>+<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> cntL[ONE],delL[ONE],l;</span><br><span class="line"><span class="keyword">int</span> cntR[ONE],delR[ONE],r;</span><br><span class="line"><span class="keyword">char</span> s[ONE],a[ONE];</span><br><span class="line"><span class="keyword">int</span> p[ONE],n;</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_first</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[<span class="number">2</span>*i<span class="number">-1</span>] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">        a[<span class="number">2</span>*i] = s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    n = <span class="number">2</span> * n + <span class="number">1</span>;</span><br><span class="line">    a[n] = <span class="string">&#x27;#&#x27;</span>;    a[n+<span class="number">1</span>] = <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Manacher</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) p[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= i) p[i] = <span class="built_in">min</span>(p[id + id - i], l - i);</span><br><span class="line">        <span class="keyword">else</span> p[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(a[i-p[i]] == a[i+p[i]]) p[i]++;</span><br><span class="line">        <span class="keyword">if</span>(p[i] + i &gt; l) l = p[i]+i, id = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> b)</span> </span>&#123;a+=b;    <span class="keyword">if</span>(a&gt;<span class="number">0</span>) a-=MOD;    <span class="keyword">if</span>(a&lt;<span class="number">0</span>) a+=MOD;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Deal_first</span>();    <span class="built_in">Manacher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) cntL[i]=cntR[i]=delL[i]=delR[i]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        l = i-p[i]+<span class="number">1</span>;    r = i+p[i]<span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">Add</span>(cntL[l], r);    <span class="built_in">Add</span>(cntL[i+<span class="number">1</span>], -r+(i-l));    <span class="built_in">Add</span>(delL[l+<span class="number">1</span>], <span class="number">-1</span>);    <span class="built_in">Add</span>(delL[i+<span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">Add</span>(cntR[i], i);    <span class="built_in">Add</span>(cntR[r+<span class="number">1</span>], -i+(r-i));    <span class="built_in">Add</span>(delR[i+<span class="number">1</span>], <span class="number">-1</span>);    <span class="built_in">Add</span>(delR[r+<span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Add</span>(cntL[i],cntL[i<span class="number">-1</span>]);    <span class="built_in">Add</span>(delL[i],delL[i<span class="number">-1</span>]);    <span class="built_in">Add</span>(cntL[i],delL[i]);</span><br><span class="line">        <span class="built_in">Add</span>(cntR[i],cntR[i<span class="number">-1</span>]);    <span class="built_in">Add</span>(delR[i],delR[i<span class="number">-1</span>]);    <span class="built_in">Add</span>(cntR[i],delR[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    Ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Ans = Ans + (s64)cntR[<span class="number">2</span>*i] *Niyu%MOD * cntL[<span class="number">2</span>*(i+<span class="number">1</span>)]%MOD *Niyu%MOD ;</span><br><span class="line">        <span class="built_in">Add</span>(Ans,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">        <span class="built_in">Solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>Manacher</tag>
      </tags>
  </entry>
  <entry>
    <title>[SAM]公共串</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BSAM%5D%E5%85%AC%E5%85%B1%E4%B8%B2/</url>
    <content><![CDATA[<h1>公共串</h1>
<p>Time Limit: 3 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>给出几个由小写字母构成的单词，求它们最长的公共子串的长度。<br>
　　任务：<br>
　　l　　读入单词<br>
　　l　　计算最长公共子串的长度<br>
　　l　　输出结果</p>
<h2 id="Input">Input</h2>
<p>文件的第一行是整数 n ，表示单词的数量。接下来n行每行一个单词，只由小写字母组成，单词的长度至少为1，最大为2000。</p>
<h2 id="Output">Output</h2>
<p>仅一行，一个整数，最长公共子串的长度。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3<br>
　abcb<br>
　bca</p>
<p>acbc</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>２</p>
<h2 id="HINT">HINT</h2>
<p>2 &lt;= n &lt;= 5</p>
<h2 id="Solution">Solution</h2>
<p>因为要求所有串的最长公共子串，所以我们运用SAM，<strong>先对第一个串（基本串）构建一个SAM</strong>，然后用后面的串匹配即可。</p>
<p>记录 L[i] 表示<strong>当前串和基本串</strong>在 i 这个状态<strong>匹配的最长长度</strong>。显然，一个状态对答案的贡献是<strong>所有串和基本串匹配时 L[i] 的最小值</strong>。</p>
<p>然后取一个最大值即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">4005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,n;</span><br><span class="line"><span class="keyword">char</span> str[ONE];</span><br><span class="line"><span class="keyword">int</span> ans[ONE], q[ONE], L[ONE];</span><br><span class="line"><span class="keyword">int</span> len[ONE], a[ONE][<span class="number">27</span>], fa[ONE], v[ONE];</span><br><span class="line"><span class="keyword">int</span> last, cnt;</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">SAM</span>() &#123;last = cnt = <span class="number">1</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = last, New = last = ++cnt;</span><br><span class="line">        len[New] = len[x] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(x &amp;&amp; !a[x][c]) a[x][c] = New, x = fa[x];</span><br><span class="line">        <span class="keyword">if</span>(!x) &#123;fa[New] = <span class="number">1</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> q = a[x][c];</span><br><span class="line">        <span class="keyword">if</span>(len[x] + <span class="number">1</span> == len[q]) fa[New] = q;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> Nq = ++cnt; len[Nq] = len[x] + <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memcpy</span>(a[Nq], a[q], <span class="built_in"><span class="keyword">sizeof</span></span>(a[q]));</span><br><span class="line">            fa[Nq] = fa[q];</span><br><span class="line">            fa[New] = fa[q] = Nq;</span><br><span class="line">            <span class="keyword">while</span>(a[x][c] == q) a[x][c] = Nq, x = fa[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=cnt; i++) v[len[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=cnt; i++) ans[i] = len[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) v[i] += v[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt; i&gt;=<span class="number">1</span>; i--) q[v[len[i]]--] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">SAM S;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(L, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(L));</span><br><span class="line">    n = <span class="built_in">strlen</span>(str+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>, record = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> c = str[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(x &amp;&amp; !a[x][c]) x = fa[x];</span><br><span class="line">        <span class="keyword">if</span>(!x) &#123;x = <span class="number">1</span>; record = <span class="number">0</span>; <span class="keyword">continue</span>;&#125;</span><br><span class="line">        record = <span class="built_in">min</span>(record, len[x]) + <span class="number">1</span>;</span><br><span class="line">        x = a[x][c];</span><br><span class="line">        L[x] = <span class="built_in">max</span>(L[x], record);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt; i&gt;=<span class="number">1</span>; i--)</span><br><span class="line">        L[fa[q[i]]] = <span class="built_in">max</span>(L[fa[q[i]]], L[q[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=cnt; i++)</span><br><span class="line">        ans[i] = <span class="built_in">min</span>(ans[i], L[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = <span class="built_in">get</span>();  T --;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str+<span class="number">1</span>); n = <span class="built_in">strlen</span>(str+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) S.<span class="built_in">Add</span>(str[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>);</span><br><span class="line">    S.<span class="built_in">Pre</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">Check</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=cnt; i++)</span><br><span class="line">        Ans = <span class="built_in">max</span>(Ans, ans[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title>[SAM]弦论</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BSAM%5D%E5%BC%A6%E8%AE%BA/</url>
    <content><![CDATA[<h1>弦论</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>对于一个给定长度为N的字符串，求它的第K小子串是什么。</p>
<h2 id="Input">Input</h2>
<p>第一行是一个仅由小写英文字母构成的字符串S。<br>
　　第二行为两个整数T和K，T为0则表示不同位置的相同子串算作一个。<br>
　　T=1则表示不同位置的相同子串算作多个。K的意义如题所述。</p>
<h2 id="Output">Output</h2>
<p>输出仅一行，为一个数字串，为第K小的子串。如果子串数目不足K个，则输出-1</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>aabc<br>
　0 3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>aab</p>
<h2 id="HINT">HINT</h2>
<p>N&lt;=5*10^5, T&lt;2, K&lt;=10^9</p>
<h2 id="Solution">Solution</h2>
<p>首先我们先构造一个后缀自动机，然后分类讨论：</p>
<p>1. <strong>如果T=0，点权为1</strong>。为什么呢？一个点有一个<strong>Right集合</strong>，一个Right集合可以表达<strong>多个子串</strong> ，然后我们一个点 -&gt; 另外一个点 其实不止一条边，我们每条边涵盖了一个信息，意味着 <strong>这个点</strong>-&gt;<strong>(走这条边)</strong>-&gt;<strong>到达了下一个点</strong> 通过这条边得到的那个新子串，而这多个新子串构成了一个 新的点。所以<strong>一条合法的路径，就表达了一个子串</strong>。</p>
<p>2. <strong>如果T=1，点权为Right集合大小</strong>。Right集合是<strong>结束位置的合集</strong>，那么Right集合大小就表示<strong>这条路径表达的这个子串</strong>出现了多少次。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,T,k;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">500005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v[<span class="number">500005</span>], q[ONE], num[ONE], size[ONE];</span><br><span class="line">    <span class="keyword">int</span> a[ONE][<span class="number">28</span>], len[ONE], fa[ONE], New;</span><br><span class="line">    <span class="keyword">int</span> last, cnt;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SAM</span>() &#123;last = cnt = <span class="number">1</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=last, New=last=++cnt;</span><br><span class="line">        len[New] = len[x] + <span class="number">1</span>;</span><br><span class="line">        num[New] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(x &amp;&amp; !a[x][c]) a[x][c] = New, x = fa[x];</span><br><span class="line">        <span class="keyword">if</span>(!x) &#123;fa[New] = <span class="number">1</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> q = a[x][c];</span><br><span class="line">        <span class="keyword">if</span>(len[x] + <span class="number">1</span> == len[q]) fa[New] = q;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> Nq = ++cnt; len[Nq] = len[x] + <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">memcpy</span>(a[Nq], a[q], <span class="built_in"><span class="keyword">sizeof</span></span>(a[q]));</span><br><span class="line">            fa[Nq] = fa[q];</span><br><span class="line">            fa[New] = fa[q] = Nq;</span><br><span class="line">            <span class="keyword">while</span>(a[x][c] == q) a[x][c] = Nq, x = fa[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) v[len[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) v[i] += v[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt;i&gt;=<span class="number">1</span>;i--) q[v[len[i]]--] = i;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt; i&gt;=<span class="number">1</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = q[i];</span><br><span class="line">            <span class="keyword">if</span>(!T) num[x] = <span class="number">1</span>; <span class="keyword">else</span> num[fa[x]] += num[x];</span><br><span class="line">        &#125;</span><br><span class="line">        num[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt; i&gt;=<span class="number">1</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x = q[i];</span><br><span class="line">            size[x] = num[x];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=<span class="number">26</span>; j++)</span><br><span class="line">                size[x] += size[a[x][j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k &lt;= num[u]) <span class="keyword">return</span>;</span><br><span class="line">        k -= num[u];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=<span class="number">26</span>; j++)</span><br><span class="line">            <span class="keyword">if</span>(a[u][j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(k &gt; size[a[u][j]]) k -= size[a[u][j]];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,j+<span class="string">&#x27;a&#x27;</span><span class="number">-1</span>);</span><br><span class="line">                    <span class="built_in">Dfs</span>(a[u][j], k);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;S;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch+<span class="number">1</span>); n = <span class="built_in">strlen</span>(ch+<span class="number">1</span>);</span><br><span class="line">    T = <span class="built_in">get</span>();    k = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) S.<span class="built_in">Add</span>(ch[i]-<span class="string">&#x27;a&#x27;</span>+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    S.<span class="built_in">Update</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(k &gt; S.size[<span class="number">1</span>]) <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> S.<span class="built_in">Dfs</span>(<span class="number">1</span>, k);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title>[SPFA][DP]骑士游戏</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BSPFA%5D%5BDP%5D%E9%AA%91%E5%A3%AB%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<h1>骑士游戏</h1>
<p>Time Limit: 30 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>在这个游戏中，JYY一共有两种攻击方式，一种是普通攻击，一种是法术攻击。</p>
<p>两种攻击方式都会消耗JYY一些体力。</p>
<p>采用普通攻击进攻怪兽并不能把怪兽彻底杀死，怪兽的尸体可以变出其他一些新的怪兽，注意一个怪兽可能经过若干次普通攻击后变回一个或更多同样的怪兽；</p>
<p>而采用法术攻击则可以彻底将一个怪兽杀死。</p>
<p>当然了，一般来说，相比普通攻击，法术攻击会消耗更多的体力值（但由于游戏系统bug，并不保证这一点）。</p>
<p>游戏世界中一共有N种不同的怪兽，分别由1到N编号，现在1号怪兽入侵村庄了，JYY想知道，最少花费多少体力值才能将所有村庄中的怪兽全部杀死呢？</p>
<h2 id="Input">Input</h2>
<p>第一行包含一个整数N。</p>
<p>接下来N行，每行描述一个怪兽的信息；</p>
<p>其中第i行包含若干个整数，前三个整数为Si，Ki和Ri，表示对于i号怪兽，</p>
<p>普通攻击需要消耗Si的体力，法术攻击需要消耗Ki的体力，同时i号怪兽死亡后会产生Ri个新的怪兽。表示一个新出现的怪兽编号。同一编号的怪兽可以出现多个。</p>
<h2 id="Output">Output</h2>
<p>输出一行一个整数，表示最少需要的体力值。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4<br>
　4 27 3 2 3 2<br>
　3 5 1 2<br>
　1 13 2 4 2<br>
　5 6 1 2</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>26</p>
<h2 id="HINT">HINT</h2>
<p>2&lt;=N&lt;=2*10^5, 1&lt;=Ri,Sigma(Ri)&lt;=10^6, 1&lt;=Ki,Si&lt;=5*10^14</p>
<h2 id="Solution">Solution</h2>
<p>首先，若是呈现<strong>树形结构</strong>，我们显然可以得到一个DP：<strong>f[i] = min(f[i], Σf[son[i]])</strong>（<strong>f[i]表示消灭 i 最小花费</strong>）。</p>
<p>但是，显然数据会出现有<strong>环</strong>的情况。所以我们这个DP是<strong>有后效性</strong>的。</p>
<p>那么我们就可以用Spfa来消除这个后效性，具体就是：若一个点的 <strong>f</strong> 在某处被更新了，那么把**father[i]**重新入队计算。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, x;</span><br><span class="line">s64 f[ONE], unit[ONE];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> next[ONE], first[ONE], go[ONE], tot;</span><br><span class="line"><span class="keyword">int</span> nextop[ONE], firstop[ONE], goop[ONE], totop;</span><br><span class="line"></span><br><span class="line">queue &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot] = first[u], first[u] = tot, go[tot] = v;</span><br><span class="line">    nextop[++totop] = firstop[v], firstop[v] = totop, goop[totop] = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) q.<span class="built_in">push</span>(i);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        s64 res = unit[u];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e = first[u]; e; e = next[e])</span><br><span class="line">            res += f[go[e]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(res &lt; f[u])</span><br><span class="line">        &#123;</span><br><span class="line">            f[u] = res;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> e = firstop[u]; e; e = nextop[e])</span><br><span class="line">                q.<span class="built_in">push</span>(goop[e]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;unit[i], &amp;f[i]);</span><br><span class="line">        x = <span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">while</span>(x--) <span class="built_in">Add</span>(i, <span class="built_in">get</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Spfa</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, f[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>SPFA</tag>
      </tags>
  </entry>
  <entry>
    <title>[SAM]生成魔咒</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BSAM%5D%E7%94%9F%E6%88%90%E9%AD%94%E5%92%92/</url>
    <content><![CDATA[<h1>生成魔咒</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>魔咒串由许多魔咒字符组成，魔咒字符可以用数字表示。例如可以将魔咒字符 1、2 拼凑起来形成一个魔咒串 [1,2]。</p>
<p>一个魔咒串 S 的非空字串被称为魔咒串 S 的生成魔咒。</p>
<p>例如 S=[1,2,1] 时，它的生成魔咒有 [1]、[2]、[1,2]、[2,1]、[1,2,1] 五种。</p>
<p>S=[1,1,1] 时，它的生成魔咒有 [1]、[1,1]、[1,1,1] 三种。</p>
<p>最初 S 为空串。共进行 n 次操作，每次操作是在 S 的结尾加入一个魔咒字符。</p>
<p>每次操作后都需要求出，当前的魔咒串 S 共有多少种生成魔咒。</p>
<h2 id="Input">Input</h2>
<p>第一行一个整数 n。</p>
<p>第二行 n 个数，第 i 个数表示第 i 次操作加入的魔咒字符。</p>
<h2 id="Output">Output</h2>
<p>输出 n 行，每行一个数。第 i 行的数表示第 i 次操作后 S 的生成魔咒数量</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>7<br>
　1 2 3 3 3 1 2</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>1<br>
　3<br>
　6<br>
　9<br>
　12<br>
　17<br>
　22</p>
<h2 id="HINT">HINT</h2>
<p>1≤n≤100000</p>
<h2 id="Main-idea">Main idea</h2>
<p>询问在加入每一个字符后当前有多少个本质不同的子串。</p>
<h2 id="Solution">Solution</h2>
<p>直接用SAM，根据SAM的性质，每次增多的子串个数就是<strong>len[New] - len[fa[New]]</strong>。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">400005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,x;</span><br><span class="line">s64 Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    map &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a[ONE];</span><br><span class="line">    <span class="keyword">int</span> len[ONE], fa[ONE];</span><br><span class="line">    <span class="keyword">int</span> last, cnt;</span><br><span class="line">    <span class="built_in">SAM</span>() &#123;last = cnt = <span class="number">1</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = last, New = last = ++cnt;</span><br><span class="line">        len[New] = len[x] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(x &amp;&amp; !a[x][c]) a[x][c] = New, x = fa[x];</span><br><span class="line">        <span class="keyword">if</span>(!x) &#123;fa[New] = <span class="number">1</span>; Ans += len[New] - len[fa[New]]; <span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> q = a[x][c];</span><br><span class="line">        <span class="keyword">if</span>(len[x] + <span class="number">1</span> == len[q]) fa[New] = q;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> Nq = ++cnt;    len[Nq] = len[x] + <span class="number">1</span>;</span><br><span class="line">            a[Nq] = a[q];</span><br><span class="line">            fa[Nq] = fa[q];</span><br><span class="line">            fa[New] = fa[q] = Nq;</span><br><span class="line">            <span class="keyword">while</span>(a[x][c] == q) a[x][c] = Nq, x = fa[x];</span><br><span class="line">        &#125;</span><br><span class="line">        Ans += len[New] - len[fa[New]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;S;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="built_in">get</span>();</span><br><span class="line">        S.<span class="built_in">Add</span>(x);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, Ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title>[SAM]工艺</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BSAM%5D%E5%B7%A5%E8%89%BA/</url>
    <content><![CDATA[<h1>工艺</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>小敏和小燕是一对好朋友。<br>
　　他们正在玩一种神奇的游戏，叫Minecraft。<br>
　　他们现在要做一个由方块构成的长条工艺品。但是方块现在是乱的，而且由于机器的要求，他们只能做到把这个工艺品最左边的方块放到最右边。<br>
　　他们想，在仅这一个操作下，最漂亮的工艺品能多漂亮。<br>
　　两个工艺品美观的比较方法是，从头开始比较，如果第i个位置上方块不一样那么谁的瑕疵度小，那么谁就更漂亮，如果一样那么继续比较第i+1个方块。如果全都一样，那么这两个工艺品就一样漂亮。</p>
<h2 id="Input">Input</h2>
<p>第一行两个整数n，代表方块的数目。<br>
　　第二行n个整数，每个整数按从左到右的顺序输出方块瑕疵度的值。</p>
<h2 id="Output">Output</h2>
<p>一行n个整数，代表最美观工艺品从左到右瑕疵度的值。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>10<br>
　10 9 8 7 6 5 4 3 2 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>1 10 9 8 7 6 5 4 3 2</p>
<h2 id="HINT">HINT</h2>
<p>对于100%的数据，n&lt;=300000</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定一个环，问从哪一位往后走开始得到的串字典序最小。</p>
<h2 id="Solution">Solution</h2>
<p>我们先<strong>把串复制一遍</strong>，然后建立一个SAM，然后贪心地走最小的即可。由于SAM的种种奇特♂性质，<strong>一定可以走完n个</strong>，输出即可。由于数字很大，数组不够存，于是我们使用map。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">1200005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line">map &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,ch[ONE];</span><br><span class="line"><span class="keyword">int</span> len[ONE],fa[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> last, cnt;</span><br><span class="line">    <span class="built_in">SAM</span>() &#123;last = cnt = <span class="number">1</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = last, New = last = ++cnt;</span><br><span class="line">        len[New] = len[x] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(x &amp;&amp; !a[x][c]) a[x][c] = New, x = fa[x];</span><br><span class="line">        <span class="keyword">if</span>(!x) &#123;fa[New] = <span class="number">1</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> q = a[x][c];</span><br><span class="line">        <span class="keyword">if</span>(len[q] == len[x] + <span class="number">1</span>) fa[New] = q;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> Nq = ++cnt; len[Nq] = len[x] + <span class="number">1</span>;</span><br><span class="line">            a[Nq] = a[q];</span><br><span class="line">            fa[Nq] = fa[q];</span><br><span class="line">            fa[New] = fa[q] = Nq;</span><br><span class="line">            <span class="keyword">while</span>(a[x][c] == q) a[x][c] = Nq, x = fa[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        map &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            it = a[x].<span class="built_in">begin</span>();</span><br><span class="line">            x = it-&gt;second;</span><br><span class="line">            <span class="keyword">if</span>(i!=n) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, it-&gt;first);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, it-&gt;first);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;S;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) ch[i] = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n*<span class="number">2</span>; i++) i&lt;=n ? S.<span class="built_in">Add</span>(ch[i]):S.<span class="built_in">Add</span>(ch[i-n]);</span><br><span class="line"></span><br><span class="line">    S.<span class="built_in">Run</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>字符串</category>
      </categories>
      <tags>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title>[SPFA]负环</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BSPFA%5D%E8%B4%9F%E7%8E%AF/</url>
    <content><![CDATA[<h1>负环</h1>
<p>Time Limit: 100 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>在忘记考虑负环之后，黎瑟的算法又出错了。对于边带权的有向图 G = (V, E)，请找出一个点数最小的环，使得环上的边权和为负数。保证图中不包含重边和自环。</p>
<h2 id="Input">Input</h2>
<p>第1两个整数n, m,表示图的点数和边数。</p>
<p>接下来的m行，每&lt;=三个整数ui, vi, wi，表&lt;=有一条从ui到vi，权值为wi的有向边。</p>
<h2 id="Output">Output</h2>
<p>仅一行一个整数，表示点数最小的环上的点数，若图中不存在负环输出0。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3 6<br>
　1 2 -2<br>
　2 1 1<br>
　2 3 -10<br>
　3 2 10<br>
　3 1 -10<br>
　1 3 10</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>2</p>
<h2 id="HINT">HINT</h2>
<p>2 &lt;= n &lt;= 300</p>
<p>0 &lt;= m &lt;= n^2</p>
<p>1 &lt;= ui, vi &lt;= n</p>
<p>|wi| &lt;= 10^4</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定若干单向边，找出点数最小的负环。</p>
<h2 id="Solution">Solution</h2>
<p>显然直接二分答案，用DfsSPFA限制深搜层数判断是否存在可行负环即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> EDG = ONE*ONE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">int</span> next[EDG],first[EDG],go[EDG],w[EDG],tot;</span><br><span class="line"><span class="keyword">int</span> vis[ONE],dist[ONE];</span><br><span class="line"><span class="keyword">int</span> PD;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];    first[u]=tot;    go[tot]=v;    w[tot]=z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Spfa</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> T,<span class="keyword">int</span> Limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(PD) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = go[e];</span><br><span class="line">        <span class="keyword">if</span>(dist[u]+w[e] &lt;= dist[v])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[v]) &#123;PD = <span class="number">1</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span>(T==Limit) <span class="keyword">return</span>;</span><br><span class="line">            dist[v] = dist[u] + w[e];</span><br><span class="line">            vis[v] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">Spfa</span>(v,T+<span class="number">1</span>,Limit);</span><br><span class="line">            vis[v] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> Limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PD = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));  vis[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(dist,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dist));</span><br><span class="line">        <span class="built_in">Spfa</span>(i,<span class="number">1</span>,Limit);</span><br><span class="line">        <span class="keyword">if</span>(PD) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();    z=<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Add</span>(x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">Check</span>(n)) &#123;<span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>, r=n;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Check</span>(l)) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,l);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>SPFA</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>[三分][贪心]期末考试</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E4%B8%89%E5%88%86%5D%5B%E8%B4%AA%E5%BF%83%5D%E6%9C%9F%E6%9C%AB%E8%80%83%E8%AF%95/</url>
    <content><![CDATA[<h1>期末考试</h1>
<p>Time Limit: 20 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p>有n位同学，每位同学都参加了全部的m门课程的期末考试，都在焦急的等待成绩的公布。第i位同学希望在第ti天 或之前得知所有课程的成绩。</p>
<p>如果在第ti天，有至少一门课程的成绩没有公布，他就会等待最后公布成绩的课程公布成绩，每等待一天就会产生C不愉快度</p>
<p>对于第i门课程，按照原本的计划，会在第bi天公布成绩</p>
<p>有如下两种 操作可以调整公布成绩的时间</p>
<p>1.将负责课程X的部分老师调整到课程Y，调整之后公布课程X成绩的时间推迟一天  ，公布课程Y成绩的时间提前一天；每次操作产生A不愉快度。</p>
<p>2.增加一部分老师负责学科Z，这将导致学科Z的出成绩时间提前一天；每次操作产生B不愉快度。</p>
<p>上面两种操作中的参数X,Y,Z均可任意指定，每种操作均可以执行多次 ，每次执行时都可以重新指定参数。</p>
<p>现在希望你通过合理的操作，使得最后总的不愉快度之和最小，输出最小的不愉快度之和即可</p>
<h2 id="Input">Input</h2>
<p>第一行三个非负整数A,B,C，描述三种不愉快度，详见【问题描述】；</p>
<p>第二行两个正整数n,m(1≤n,m≤105)，分别表示学生的数量和课程的数量；</p>
<p>第三行n个正整数ti，表示每个学生希望的公布成绩的时间；</p>
<p>第四行m个正整数bi，表示按照原本的计划，每门课程公布成绩的时间。</p>
<h2 id="Output">Output</h2>
<p>输出一行一个整数，表示最小的不愉快度之和。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>100 100 2<br>
　4 5<br>
　5 1 2 3<br>
　1 1 2 3 3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>6</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528003555.png" alt="img"></p>
<h2 id="Solution">Solution</h2>
<p>首先，由于学生需要知道所有的成绩，这意味着<strong>即使只有一个成绩不知道，代价也是要算的</strong>，那么显然答案只和<strong>所有成绩都发出的时间</strong>有关。<br>
　　显然，如果我们知道了<strong>所有成绩都发出的时间</strong>，必然是<strong>可以算出最小的不愉快度</strong>的，对于一个最后日期x，我们运用贪心得到不愉快度：<br>
　　　　1.由于A策略有负面影响，B策略没有，所有在A&lt;B的情况下才有可能用A<br>
　　　　2.如果我们需要用A，显然能用的次数是：<strong>所有天数在x前面的 (x-天数)</strong>，剩下的用B补满。<br>
　　然后，我们大胆猜测可以三分！这样我们就能AC啦。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1000001</span>;</span><br><span class="line"><span class="keyword">const</span> s64 INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A,B,C,n,m;</span><br><span class="line"><span class="keyword">int</span> t[ONE],b[ONE],MaxN;</span><br><span class="line">s64 Ans = INF;</span><br><span class="line"><span class="keyword">int</span> Now;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> s64 <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s64 res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">Judge</span><span class="params">(s64 x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s64 res = <span class="number">0</span>, num1 = <span class="number">0</span>, num2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) res += <span class="built_in">max</span>(x-t[i],<span class="number">0LL</span>) * C;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) num1 += <span class="built_in">max</span>(x-b[i],<span class="number">0LL</span>), num2 += <span class="built_in">max</span>(b[i]-x,<span class="number">0LL</span>);</span><br><span class="line">    <span class="keyword">if</span>(A &gt; B) res += num2 * B;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        res += <span class="built_in">min</span>(num1,num2) * A;</span><br><span class="line">        res += <span class="built_in">max</span>((num2-num1) * B,<span class="number">0LL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Ans = <span class="built_in">min</span>(Ans,res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A=<span class="built_in">get</span>();    B=<span class="built_in">get</span>();    C=<span class="built_in">get</span>();</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) t[i]=<span class="built_in">get</span>(), MaxN=<span class="built_in">max</span>(MaxN,t[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) b[i]=<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(C &gt;= <span class="number">1e16</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) MaxN=<span class="built_in">min</span>(MaxN,t[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">Judge</span>(MaxN));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    s64 a,b,pass;</span><br><span class="line">    s64 l = <span class="number">0</span>, r = MaxN+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r<span class="number">-2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pass = (r-l)/<span class="number">3</span>;</span><br><span class="line">        a = l+pass; b = r-pass;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Judge</span>(a) &lt; <span class="built_in">Judge</span>(b)) r = b;</span><br><span class="line">        <span class="keyword">else</span> l = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,Ans);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>三分</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>[Splay]神秘物质</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5BSplay%5D%E7%A5%9E%E7%A7%98%E7%89%A9%E8%B4%A8/</url>
    <content><![CDATA[<h1>神秘物质</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>21ZZ 年，冬。</p>
<p>小诚退休以后， 不知为何重新燃起了对物理学的兴趣。 他从研究所借了些实验仪器，整天研究各种微观粒子。这</p>
<p>一天， 小诚刚从研究所得到了一块奇异的陨石样本， 便迫不及待地开始观测。 在精密仪器的视野下，构成陨石</p>
<p>的每个原子都无比清晰。 小诚发现， 这些原子排成若干列， 每一列的结构具有高度相似性。于是，他决定对单</p>
<p>独一列原子进行测量和测试。被选中的这列共有 N 个顺序排列的原子。 最初， 第 i 个原子具有能量 Ei。 随着</p>
<p>时间推移和人为测试， 这列原子在观测上会产生两种变化：</p>
<p>merge x e 当前第 x 个原子和第 x+1 个原子合并，得到能量为 e 的新原子；</p>
<p>insert x e 在当前第 x 个原子和第 x+1 个原子之间插入一个能量为 e 的新原子。</p>
<p>对于一列原子，小诚关心的是相邻一段中能量最大和能量最小的两个原子的能量差值，</p>
<p>称为区间极差。 因此， 除了观测变化外，小诚还要经常统计这列原子的两类数据：</p>
<p>max x y 当前第 x 到第 y 个原子之间的任意子区间中区间极差的最大值；</p>
<p>min x y 当前第 x 到第 y 个原子之间的任意子区间中区间极差的最小值。</p>
<p>其中， 子区间指的是长度至少是 2 的子区间。</p>
<p>小诚坚信这项研究可以获得诺贝尔物理学奖。为了让小诚早日了结心愿，你能否帮助他实现上述的观测和测量呢？</p>
<h2 id="Input">Input</h2>
<p>第一行， 两个整数 N， M， 分别表示最初的原子数目和事件总数。</p>
<p>第二行， N 个整数 E1, E2, …, EN， 由空格隔开。依次表示每个原子的能量。</p>
<p>接下来 M 行， 每行为一个字符串和两个整数， 描述一次事件，格式见题目描述。</p>
<h2 id="Output">Output</h2>
<p>输出若干行， 按顺序依次表示每次 max 和 min 类事件的测量结果。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528002848.png" alt="img"></p>
<h2 id="Sample-Output">Sample Output</h2>
<p>1<br>
　　2<br>
　　1<br>
　　5</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528002844.png" alt="img"></p>
<h2 id="Main-idea">Main idea</h2>
<p>每个点有一个权值，维护一个结构，支持合并相邻两点，删除单点，加入单点，查询区间子集极差的最大值和最小值。</p>
<h2 id="Solution">Solution</h2>
<p>首先我们可以发现，<strong>区间子集极差的最大值</strong>显然就是整个<strong>区间的最大值-区间最小值</strong>，然后<strong>区间子集极差最小值</strong>只有<strong>相邻点的才会产生贡献</strong>。</p>
<p>那么我们用Splay来维护这个结构即可，维护一下<strong>子树最大值、子树最小值、子树邻差最小值</strong>即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">300005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> x,y,a[ONE];</span><br><span class="line"><span class="keyword">int</span> root,cnt;</span><br><span class="line"><span class="keyword">int</span> lc[ONE],rc[ONE],fa[ONE];</span><br><span class="line"><span class="keyword">int</span> size[ONE],val[ONE];</span><br><span class="line"><span class="keyword">int</span> maxx[ONE],minn[ONE],del[ONE];</span><br><span class="line"><span class="keyword">int</span> Ls[ONE],Rs[ONE];</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Up</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    size[i] = size[lc[i]] + size[rc[i]] + <span class="number">1</span>;</span><br><span class="line">    maxx[i] = minn[i] = val[i];</span><br><span class="line">    del[i] = INF;</span><br><span class="line">    Ls[i] = Rs[i] = i;</span><br><span class="line">    <span class="keyword">if</span>(lc[i])</span><br><span class="line">    &#123;</span><br><span class="line">        Ls[i] = Ls[lc[i]];</span><br><span class="line">        maxx[i] = <span class="built_in">max</span>(maxx[i], maxx[lc[i]]);</span><br><span class="line">        minn[i] = <span class="built_in">min</span>(minn[i], minn[lc[i]]);</span><br><span class="line">        del[i] = <span class="built_in">min</span>(del[i], del[lc[i]]);</span><br><span class="line">        del[i] = <span class="built_in">min</span>(del[i], <span class="built_in">abs</span>( val[i]-val[Rs[lc[i]]] ) );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(rc[i])</span><br><span class="line">    &#123;</span><br><span class="line">        Rs[i] = Rs[rc[i]];</span><br><span class="line">        maxx[i] = <span class="built_in">max</span>(maxx[i], maxx[rc[i]]);</span><br><span class="line">        minn[i] = <span class="built_in">min</span>(minn[i], minn[rc[i]]);</span><br><span class="line">        del[i] = <span class="built_in">min</span>(del[i], del[rc[i]]);</span><br><span class="line">        del[i] = <span class="built_in">min</span>(del[i], <span class="built_in">abs</span>( val[i]-val[Ls[rc[i]]] ) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Turn</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = fa[x], z = fa[y];</span><br><span class="line">    <span class="keyword">int</span> b = x==lc[y] ? rc[x]:lc[x];</span><br><span class="line"></span><br><span class="line">    fa[y] = x;    fa[x] = z;</span><br><span class="line">    <span class="keyword">if</span>(b) fa[b] = y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(z)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(y == lc[z]) lc[z] = x;</span><br><span class="line">        <span class="keyword">else</span> rc[z] = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(x==lc[y]) rc[x] = y,lc[y] = b;</span><br><span class="line">    <span class="keyword">else</span> lc[x] = y, rc[y] = b;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Up</span>(y);    <span class="built_in">Up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Splay</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(fa[x] != pos)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[fa[x]] != pos)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( (lc[fa[x]]==x) == (lc[fa[fa[x]]]==fa[x]) ) <span class="built_in">Turn</span>(fa[x]);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">Turn</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Turn</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pos == <span class="number">0</span>) root = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = l+r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    fa[mid] = i;</span><br><span class="line">    <span class="keyword">if</span>(l &lt;= mid<span class="number">-1</span>) lc[mid] = <span class="built_in">Build</span>(mid, l,mid<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span> &lt;= r) rc[mid] = <span class="built_in">Build</span>(mid, mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">Up</span>(mid);</span><br><span class="line">    <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Getid</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = root;</span><br><span class="line">    <span class="keyword">while</span>(size[lc[i]] + <span class="number">1</span> != num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(size[lc[i]] + <span class="number">1</span> &lt; num)</span><br><span class="line">            num -= size[lc[i]] + <span class="number">1</span>,    i = rc[i];</span><br><span class="line">        <span class="keyword">else</span> i = lc[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="built_in">Getid</span>(i);</span><br><span class="line">    <span class="built_in">Splay</span>(x, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> L = Rs[lc[x]];    <span class="built_in">Splay</span>(L,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> R = Ls[rc[x]];    <span class="built_in">Splay</span>(R,L);</span><br><span class="line">    lc[R] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">Splay</span>(R,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> Val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="built_in">Getid</span>(i);</span><br><span class="line">    <span class="built_in">Splay</span>(x,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> R = Ls[rc[x]];    <span class="built_in">Splay</span>(R,x);</span><br><span class="line">    val[++cnt] = Val; fa[cnt] = R; lc[R] = cnt;</span><br><span class="line">    <span class="built_in">Splay</span>(cnt,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        val[i+<span class="number">1</span>] = <span class="built_in">get</span>();</span><br><span class="line">    val[<span class="number">1</span>] = val[n+<span class="number">2</span>] = INF;</span><br><span class="line"></span><br><span class="line">    cnt = n+<span class="number">2</span>;</span><br><span class="line">    root = n+<span class="number">3</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Build</span>(<span class="number">0</span>,<span class="number">1</span>,n+<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch+<span class="number">1</span>);    x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">        x++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ch[<span class="number">3</span>] == <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Insert</span>(x+<span class="number">1</span>,y);</span><br><span class="line">            <span class="built_in">Delete</span>(x);    <span class="built_in">Delete</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ch[<span class="number">3</span>] == <span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">            <span class="built_in">Insert</span>(x,y);</span><br><span class="line">        <span class="keyword">if</span>(ch[<span class="number">3</span>] == <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y++;</span><br><span class="line">            x = <span class="built_in">Getid</span>(x<span class="number">-1</span>);    y = <span class="built_in">Getid</span>(y+<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">Splay</span>(x,<span class="number">0</span>);    <span class="built_in">Splay</span>(y,x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, maxx[lc[y]] - minn[lc[y]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ch[<span class="number">3</span>] == <span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            y++;</span><br><span class="line">            x = <span class="built_in">Getid</span>(x<span class="number">-1</span>);    y = <span class="built_in">Getid</span>(y+<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">Splay</span>(x,<span class="number">0</span>);    <span class="built_in">Splay</span>(y,x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, del[lc[y]]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Splay</tag>
      </tags>
  </entry>
  <entry>
    <title>[三分]传送带</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E4%B8%89%E5%88%86%5D%E4%BC%A0%E9%80%81%E5%B8%A6/</url>
    <content><![CDATA[<h1>传送带</h1>
<p>Time Limit: 1 Sec Memory Limit: 64 MB</p>
<h2 id="Description">Description</h2>
<p>在一个2维平面上有两条传送带，每一条传送带可以看成是一条线段。两条传送带分别为线段AB和线段CD。lxhgww在AB上的移动速度为P，在CD上的移动速度为Q，在平面上的移动速度R。现在lxhgww想从A点走到D点，他想知道最少需要走多长时间</p>
<h2 id="Input">Input</h2>
<p>输入数据第一行是4个整数，表示A和B的坐标，分别为Ax，Ay，Bx，By 第二行是4个整数，表示C和D的坐标，分别为Cx，Cy，Dx，Dy 第三行是3个整数，分别是P，Q，R</p>
<h2 id="Output">Output</h2>
<p>输出数据为一行，表示lxhgww从A点走到D点的最短时间，保留到小数点后2位</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>0 0 0 100<br>
　100 0 100 100<br>
　2 2 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>136.60</p>
<h2 id="HINT">HINT</h2>
<p>对于100%的数据，1&lt;= Ax，Ay，Bx，By，Cx，Cy，Dx，Dy&lt;=1000<br>
　　1&lt;=P，Q，R&lt;=10</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定平面上的两条线段AB,CD，在AB,CD上移动会有一个特别的速度，在平面上移动会有一个速度，求从点A到点D的最短时间。</p>
<h2 id="Solution">Solution</h2>
<p>首先发现坐标范围-1000~1000，并且精度要求不高，从此基础上思考。我们先考虑从AB上一个定点O到CD上的距离，发现其中从O到CD的距离是先减小再增大的，我们大胆猜测这道题的答案<strong>满足单峰性</strong>。然后我们可以用三分（效率为O(log1.5(n))）来实现。<br>
　　我们现在可以求出一个定点求CD的最短时间，这里用三分实现。然后怎么办呢？<br>
　　由于AB也是一条线段，我们大胆猜测，可以再在AB上三分一个点，这样就是<strong>三分套三分</strong>，最后发现其正确性可以证明。<br>
　　<strong>三分方法（这里给出求最小值的方法）：在区间1/3处和2/3处各取两个点l,r，如果左段（即L~l）的答案比右段（r~R）的更优，那么由于单峰性（图像类似一个抛物线）可以抹去右段，多次操作使得答案最优。</strong></p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">19650827</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    <span class="keyword">double</span> AB,CD,PM;</span><br><span class="line">    <span class="keyword">friend</span> power <span class="keyword">operator</span> +(power a,power b) &#123;a.x=a.x+b.x; a.y=a.y+b.y; <span class="keyword">return</span> a;&#125;</span><br><span class="line">    <span class="keyword">friend</span> power <span class="keyword">operator</span> -(power a,power b) &#123;a.x=a.x-b.x; a.y=a.y-b.y; <span class="keyword">return</span> a;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">power A,B,C,D,v;</span><br><span class="line">power l1,l2,r1,r2;</span><br><span class="line">power a,b;</span><br><span class="line">power pass;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">(power a,power b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>)<span class="built_in">sqrt</span>( (a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Getdist</span><span class="params">(power E,power F)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dist</span>(A,E)/v.AB + <span class="built_in">dist</span>(E,F)/v.PM + <span class="built_in">dist</span>(F,D)/v.CD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Trivide</span><span class="params">(power O)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    power l=C,r=D,pass,a,b;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">dist</span>(l,r)&gt;<span class="number">0.001</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pass.x=(r.x-l.x)/<span class="number">3.0</span>;    pass.y=(r.y-l.y)/<span class="number">3.0</span>;</span><br><span class="line">        a=l+pass;    b=r-pass;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Getdist</span>(O,a) &lt; <span class="built_in">Getdist</span>(O,b)) r=b;</span><br><span class="line">        <span class="keyword">else</span> l=a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Getdist</span>(O,l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf %lf %lf&quot;</span>,&amp;A.x,&amp;A.y,&amp;B.x,&amp;B.y);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf %lf %lf&quot;</span>,&amp;C.x,&amp;C.y,&amp;D.x,&amp;D.y);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf %lf&quot;</span>,&amp;v.AB,&amp;v.CD,&amp;v.PM);</span><br><span class="line"></span><br><span class="line">    power l=A,r=B;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">dist</span>(l,r)&gt;<span class="number">0.001</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pass.x=(r.x-l.x)/<span class="number">3.0</span>;    pass.y=(r.y-l.y)/<span class="number">3.0</span>;</span><br><span class="line">        a=l+pass;    b=r-pass;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Trivide</span>(a) &lt; <span class="built_in">Trivide</span>(b)) r=b;</span><br><span class="line">        <span class="keyword">else</span> l=a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,<span class="built_in">Trivide</span>(l));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>三分</tag>
      </tags>
  </entry>
  <entry>
    <title>[主席树]画方框</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E4%B8%BB%E5%B8%AD%E6%A0%91%5D%E7%94%BB%E6%96%B9%E6%A1%86/</url>
    <content><![CDATA[<h1>画方框</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528010758.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528010802.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p>输出一行一个整数，表示 CD 最多可能画了几个方框。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3<br>
　　1 1 1<br>
　　1 0 1<br>
　　1 1 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>9</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528010806.png" alt="img"></p>
<h2 id="Main-idea">Main idea</h2>
<p>给定一个01矩阵，1表示有标记，询问正方形方框的个数。</p>
<h2 id="Solution">Solution</h2>
<p>首先，我们先从 <strong>维护对角线上的点</strong> 这一层面来考虑。</p>
<p>我们先把一个点 <strong>能向左向上拓展的最大长度</strong> 以及 <strong>能向右向下的最长长度</strong> 预处理出来。</p>
<p>那么这时候，我们考虑 <strong>对于一条对角线上的点</strong> 怎么 <strong>在O(nlogn)以内</strong> 统计出答案。必然要用到某些<strong>数据结构</strong>。</p>
<p>举个例子，比如这个数据：<br>
　　　　　　1 1 1 1<br>
　　　　　　1 0 0 0<br>
　　　　　　1 0 0 1<br>
　　　　　　1 0 1 1<br>
　　　　我们现在统计中间对角线的答案。<br>
　　　　现在查询第一个点(1,1)，他向右向下拓展长度为 4 。<br>
　　　　就是查询，后面三个点中 可以向左上拓展的长度 (2,2)&gt;=1 (3,3)&gt;=2 (4,4)&gt;=3，<br>
　　　　这三个条件满足了几个。</p>
<p>这样的话，我们发现：<strong>每次统计一个点的时候</strong> 查询的就是：在<strong>这个点 可以向右向下拓展 到的范围内</strong>，它后面的第 i 个点 <strong>可以向左向上拓展长度</strong> 是否 &gt; i。</p>
<p>我们发现：查询<strong>后面若干个数的值是否 &gt; 一个等差数列</strong>比较复杂。</p>
<p>于是乎，若统计第id个的答案，<strong>后面第num个点（在向右向下范围内）可以被统计</strong>所需要满足的条件是：<strong>num - id + 1 &lt;= val</strong> 也就是 <strong>num - val + 1 &lt;= id</strong>。（其中val表示 <strong>这个点可以向左向上拓展的长度</strong>）</p>
<p>所以我们如果把 <strong>i - val + 1</strong> 加入到一个数据结构中的话，</p>
<p>查询的就是：<strong>某一范围内 &lt;=一个定值 的数的个数</strong>。</p>
<p>那直接用<strong>主席树</strong>来做就好了。</p>
<p>这样我们就<strong>解决</strong>了这个问题 QWQ。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">10001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[ONE][ONE];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> left, right;</span><br><span class="line">    <span class="keyword">int</span> up, down;</span><br><span class="line">    <span class="keyword">int</span> L, R;</span><br><span class="line">&#125;A[ONE][ONE];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt, res;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">int</span> left, right;</span><br><span class="line">&#125;Node[ONE * <span class="number">19</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_first</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = n; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]) A[i][j].right = A[i][j + <span class="number">1</span>].right + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> A[i][j].right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]) A[i][j].left = A[i][j - <span class="number">1</span>].left + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> A[i][j].left = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]) A[i][j].down = A[i + <span class="number">1</span>][j].down + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> A[i][j].down = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]) A[i][j].up = A[i - <span class="number">1</span>][j].up + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> A[i][j].up = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            A[i][j].L = <span class="built_in">min</span>(A[i][j].left, A[i][j].up),</span><br><span class="line">    A[i][j].R = <span class="built_in">min</span>(A[i][j].right, A[i][j].down);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> Q, <span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = ++cnt;</span><br><span class="line">    Node[x].left = Node[y].left;</span><br><span class="line">    Node[x].right = Node[y].right;</span><br><span class="line">    Node[x].value = Node[y].value + val;</span><br><span class="line">    <span class="keyword">if</span>(L == R) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> M = L + R &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q &lt;= M)</span><br><span class="line">        <span class="built_in">Update</span>(Node[x].left, Node[y].left, L, M, Q, val);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">Update</span>(Node[x].right, Node[y].right, M + <span class="number">1</span>, R, Q, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">    &#123;</span><br><span class="line">        res += Node[y].value - Node[x].value;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid) <span class="built_in">Query</span>(Node[x].left, Node[y].left, l, mid, L, R);</span><br><span class="line">    <span class="keyword">if</span>(mid + <span class="number">1</span> &lt;=R) <span class="built_in">Query</span>(Node[x].right, Node[y].right, mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            a[i][j] = <span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Deal_first</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> id = <span class="number">1</span>; id &lt;= n; id++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = id, y = <span class="number">1</span>; x &lt;= n; x++, y++)</span><br><span class="line">            <span class="built_in">Update</span>(Node[y].root, Node[y - <span class="number">1</span>].root, <span class="number">1</span>, INF, y - A[x][y].L + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = id, y = <span class="number">1</span>; x &lt;= n; x++, y++)</span><br><span class="line">        &#123;</span><br><span class="line">            res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(A[x][y].R)</span><br><span class="line">                <span class="built_in">Query</span>(Node[y - <span class="number">1</span>].root, Node[y + A[x][y].R - <span class="number">1</span>].root, <span class="number">1</span>, INF, <span class="number">1</span>, y);</span><br><span class="line">            Ans += res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">            Node[i].left = Node[i].right = Node[i].root = Node[i].value = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> id = <span class="number">2</span>; id &lt;= n; id++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = id, x = <span class="number">1</span>; y &lt;= n; y++, x++)</span><br><span class="line">            <span class="built_in">Update</span>(Node[x].root, Node[x - <span class="number">1</span>].root, <span class="number">1</span>, INF, x - A[x][y].L + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = id, x = <span class="number">1</span>; y &lt;= n; y++, x++)</span><br><span class="line">        &#123;</span><br><span class="line">            res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(A[x][y].R)</span><br><span class="line">                <span class="built_in">Query</span>(Node[x - <span class="number">1</span>].root, Node[x + A[x][y].R - <span class="number">1</span>].root, <span class="number">1</span>, INF, <span class="number">1</span>, x);</span><br><span class="line">            Ans += res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">            Node[i].left = Node[i].right = Node[i].root = Node[i].value = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>主席树</tag>
      </tags>
  </entry>
  <entry>
    <title>[主席树]PATULJCI</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E4%B8%BB%E5%B8%AD%E6%A0%91%5DPATULJCI/</url>
    <content><![CDATA[<h1>PATULJCI</h1>
<p>Time Limit: 10 Sec Memory Limit: 259 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527192706.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p>第一行两个整数n,INF，表示序列长度和ai的上限；<br>
　　第二行有n个数，表示ai；<br>
　　然后有一个整数m，表示询问个数；<br>
　　接下来每行两个l,r，表示询问区间[l,r]中的答案。</p>
<h2 id="Output">Output</h2>
<p>输出m行，表示对于每个询问的答案。如果有这个数，则输出“yes”，然后输出数的值；否则输出“no”。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>10 3<br>
　　1 2 1 2 1 2 3 2 3 3<br>
　　8<br>
　　1 2<br>
　　1 3<br>
　　1 4<br>
　　1 5<br>
　　2 5<br>
　　2 6<br>
　　6 9<br>
　　7 10</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>no<br>
　　yes 1<br>
　　no<br>
　　yes 1<br>
　　no<br>
　　yes 2<br>
　　no<br>
　　yes 3</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=n&lt;=300000 , 1&lt;=m&lt;=10000 , 1&lt;=ai&lt;=10000。</p>
<h2 id="Solution">Solution</h2>
<p>显然是一个主席树，我们建立一棵主席树然后查询是否存在个数&gt;(l+r-1)/2的即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">300005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,INF,m;</span><br><span class="line"><span class="keyword">int</span> x,y,cnt;</span><br><span class="line"><span class="keyword">int</span> res_value,res_num;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">int</span> left,right;</span><br><span class="line">&#125;Node[ONE*<span class="number">19</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = ++cnt;</span><br><span class="line">    Node[x].left = Node[y].left;</span><br><span class="line">    Node[x].right = Node[y].right;</span><br><span class="line">    Node[x].value = Node[y].value + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L == R) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> M = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q &lt;= M)</span><br><span class="line">        <span class="built_in">Update</span>(Node[x].left,Node[y].left, L,M, Q);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">Update</span>(Node[x].right,Node[y].right, M+<span class="number">1</span>,R, Q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> Kth)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L == R)</span><br><span class="line">    &#123;</span><br><span class="line">        res_value = L;</span><br><span class="line">        res_num = Node[y].value - Node[x].value;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> M = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> record = Node[Node[y].left].value - Node[Node[x].left].value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(Kth &lt; record)</span><br><span class="line">        <span class="built_in">Query</span>(Node[x].left,Node[y].left, L,M, Kth);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">Query</span>(Node[x].right,Node[y].right, M+<span class="number">1</span>,R, Kth);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    INF=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Update</span>(Node[i].root,Node[i<span class="number">-1</span>].root, <span class="number">1</span>,INF, x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">        res_value = <span class="number">0</span>, res_num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> M = (y-x+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">Query</span>(Node[x<span class="number">-1</span>].root,Node[y].root, <span class="number">1</span>,INF, M);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(res_num &gt; M)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;yes %d&quot;</span>,res_value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>主席树</tag>
      </tags>
  </entry>
  <entry>
    <title>[二分]Shik and Travel</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E4%BA%8C%E5%88%86%5DShik%20and%20Travel/</url>
    <content><![CDATA[<h1>Shik and Travel</h1>
<p>Time Limit: 50 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p>给定一棵n个点的树，保证一个点出度为2/0。</p>
<p>遍历一遍，要求每条边被经过两次，第一次从根出发，最后一次到根结束，在叶子节点之间移动。</p>
<p>移动一次的费用为路径上的边权之和，第一次和最后一次免费，移动的最大费用 最小可以是多少。</p>
<h2 id="Input">Input</h2>
<p>第一行一个n，表示点数。</p>
<p>之后两个数x, y，若在第 i 行，表示 i+1 -&gt; x 有一条权值为 y 的边。</p>
<h2 id="Output">Output</h2>
<p>输出一个数表示答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>7<br>
　　1 1<br>
　　1 1<br>
　　2 1<br>
　　2 1<br>
　　3 1<br>
　　3 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>4</p>
<h2 id="HINT">HINT</h2>
<p>2 &lt; n &lt; 131,072<br>
　　0 ≤ y ≤ 131,072</p>
<h2 id="Solution">Solution</h2>
<p>问题的本质就是：<strong>求一个叶子节点排列，按照排列顺序走，使得两两距离&lt;=K</strong>。<br>
　　因为<strong>第一天和最后一天不花费</strong>，可以第一天<strong>从根走到一个叶子</strong>，最后一天从某一叶子走回根。<br>
　　我们首先二分答案。</p>
<p>对于<strong>子树u</strong>维护<strong>二元组(a, b)</strong>，表示<strong>存在方案</strong>可以 从 <strong>与u距离为a的点</strong> 出发 然后走到 <strong>与u距离为b的点</strong>，并且<strong>遍历了u中的所有叶子节点</strong>。<br>
　　用个vector存一下即可。显然，<strong>若a升序</strong>，<strong>则b要降序</strong>，否则是<strong>无用状态</strong>。</p>
<p>运用Dfs，<strong>从叶子节点往上推</strong>。我们现在考虑如何<strong>合并子树u、v的(a, b)</strong>。给一棵子树编号**(a1, b1)<strong>，另一棵为</strong>(a2, b2)<strong>。<br>
　　我们</strong>新二元组的走法<strong>应该是 <strong>a1-&gt;b1, b1-&gt;a2, a2-&gt;b2</strong> 的，<br>
　　只要保证 <strong>b1-&gt;a2 这一条路径 权值和&lt;=K</strong> 即可合并成</strong>(a1 + (u-&gt;fa), b2 + (v-&gt;fa))<strong>。<br>
　　显然</strong>用(a1, b1)去合并只有一个有用状态**：满足<strong>b1 + a2 + (u-&gt;fa) + (v-&gt;fa)&lt;=K</strong>，<strong>a2尽量大</strong>，因为这样<strong>b2会尽量小</strong>。<br>
　　枚举<strong>size较小的一边</strong>，二分<strong>一下另外一边</strong>即可。</p>
<p>若推到<strong>根存在一组二元组即</strong>可行。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> s64 INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> next nxt</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>, Q = <span class="number">1</span>; <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &lt; <span class="number">48</span> || c &gt; <span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) Q = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res = c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &gt;= <span class="number">48</span> &amp;&amp; c &lt;= <span class="number">57</span>)</span><br><span class="line">        res = res * <span class="number">10</span> + c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">return</span> res * Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    s64 a, b;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(power A) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A.a != a) <span class="keyword">return</span> a &lt; A.a;</span><br><span class="line">        <span class="keyword">return</span> b &lt; A.b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector &lt;power&gt; A[ONE], R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">s64 l, r, K;</span><br><span class="line"><span class="keyword">int</span> next[ONE], first[ONE], go[ONE], w[ONE], tot;</span><br><span class="line"><span class="keyword">int</span> size[ONE], fat[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot] = first[u], first[u] = tot, go[tot] = v, w[tot] = z;</span><br><span class="line">    next[++tot] = first[v], first[v] = tot, go[tot] = u, w[tot] = z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dist[ONE];</span><br><span class="line"><span class="keyword">int</span> len_x, len_y;</span><br><span class="line">s64 a1, b1, a2, b2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(len_y == <span class="number">0</span>) <span class="keyword">return</span> len_y;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = len_y - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        a2 = A[y][mid].a, b2 = A[y][mid].b;</span><br><span class="line">        <span class="keyword">if</span>(b1 + a2 + dist[x] + dist[y] &lt;= K) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    a2 = A[y][r].a, b2 = A[y][r].b; <span class="keyword">if</span>(b1 + a2 + dist[x] + dist[y] &lt;= K) <span class="keyword">return</span> r;</span><br><span class="line">    a2 = A[y][l].a, b2 = A[y][l].b; <span class="keyword">if</span>(b1 + a2 + dist[x] + dist[y] &lt;= K) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">return</span> len_y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e = first[u]; e; e = next[e])</span><br><span class="line">        <span class="keyword">if</span>(go[e] != fat[u])</span><br><span class="line">            <span class="keyword">if</span>(!x) x = go[e]; <span class="keyword">else</span> y = go[e];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(size[x] &gt; size[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line"></span><br><span class="line">    len_x = A[x].<span class="built_in">size</span>(), len_y = A[y].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    R.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len_x; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a1 = A[x][i].a, b1 = A[x][i].b;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Find</span>() &gt;= len_y) <span class="keyword">continue</span>;</span><br><span class="line">        R.<span class="built_in">push_back</span>((power)&#123;a1 + dist[x], b2 + dist[y]&#125;);</span><br><span class="line">        R.<span class="built_in">push_back</span>((power)&#123;b2 + dist[y], a1 + dist[x]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(R.<span class="built_in">begin</span>(), R.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> len = R.<span class="built_in">size</span>();</span><br><span class="line">    s64 maxx = INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="keyword">if</span>(R[i].b &lt; maxx)</span><br><span class="line">            A[u].<span class="built_in">push_back</span>(R[i]), maxx = R[i].b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    size[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> pd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e = first[u]; e; e = next[e])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = go[e];</span><br><span class="line">        <span class="keyword">if</span>(v == father) <span class="keyword">continue</span>;</span><br><span class="line">        fat[v] = u, dist[v] = w[e];</span><br><span class="line">        <span class="built_in">Dfs</span>(v, u);</span><br><span class="line">        size[u] += size[v], pd++;</span><br><span class="line">        <span class="keyword">if</span>(pd == <span class="number">2</span>) <span class="built_in">Update</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!pd) A[u].<span class="built_in">push_back</span>((power)&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        A[i].<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">Dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> A[<span class="number">1</span>].<span class="built_in">size</span>() &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="built_in">get</span>(), y = <span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Add</span>(i, x, y), r += y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(l &lt; r - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        K = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Check</span>()) r = K;</span><br><span class="line">        <span class="keyword">else</span> l = K;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    K = l;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Check</span>()) <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, l);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>[主席树]粟粟的书架</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E4%B8%BB%E5%B8%AD%E6%A0%91%5D%E7%B2%9F%E7%B2%9F%E7%9A%84%E4%B9%A6%E6%9E%B6/</url>
    <content><![CDATA[<h1>粟粟的书架</h1>
<p>Time Limit: 30 Sec Memory Limit: 552 MB</p>
<h2 id="Description">Description</h2>
<p>幸福幼儿园 B29 班的粟粟是一个聪明机灵、乖巧可爱的小朋友，她的爱好是画画和读书，尤其喜欢 Thomas H. Cormen 的文章。</p>
<p>粟粟家中有一个 R行C列 的巨型书架，书架的每一个位置都摆有一本书，上数第 i 行、左数第 j 列摆放的书有Pi,j页厚。</p>
<p>粟粟每天除了读书之外，还有一件必不可少的工作就是摘苹果，她每天必须摘取一个指定的苹果。</p>
<p>粟粟家果树上的苹果有的高、有的低，但无论如何凭粟粟自己的个头都难以摘到。</p>
<p>不过她发现， 如果在脚下放上几本书，就可以够着苹果；她同时注意到，对于第 i 天指定的那个苹果，只要她脚下放置书的总页数之和不低于Hi，就一定能够摘到。</p>
<p>由于书架内的书过多，父母担心粟粟一天内就把所有书看完而耽误了上幼儿园，于是每天只允许粟粟在一个特定区域内拿书。</p>
<p>这个区域是一个矩形，第 i 天给定区域的左上角是上数第 x1i 行的左数第 y1i 本书，右下角是上数第 x2i 行的左数第 y2i 本书。</p>
<p>换句话说，粟粟在这一天，只能在这﹙x2i－x1i＋1﹚×﹙y2i－y1i＋1﹚本书中挑选若干本垫在脚下，摘取苹果。</p>
<p>粟粟每次取书时都能及时放回原位，并且她的书架不会再撤下书目或换上新书，摘苹果的任务会一直持续M天。</p>
<p>给出每本书籍的页数和每天的区域限制及采摘要求，请你告诉粟粟，她每天至少拿取多少本书，就可以摘到当天指定的苹果。</p>
<h2 id="Input">Input</h2>
<p>第一行是三个正整数R，C，M。</p>
<p>接下来是一个R行C列的矩阵，从上到下、从左向右依次给出了每本书的页数Pi，j。</p>
<p>接下来M行，第i行给出正整数x1i，y1i，x2i，y2i，Hi，表示第i天的指定区域是﹙x1i，y1i﹚与﹙x2i，y2i﹚间的矩形，总页数之和要求不低于Hi。</p>
<p>保证1≤x1i≤x2i≤R，1≤y1i≤y2i≤C。</p>
<h2 id="Output">Output</h2>
<p>有M行，第i 行回答粟粟在第 i 天时为摘到苹果至少需要 拿取多少本书。如果即使取走所有书都无法摘到苹果，则在该行输出“Poor QLW” （不含引号）。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 5 7<br>
　14 15 9 26 53<br>
　58 9 7 9 32<br>
　38 46 26 43 38<br>
　32 7 9 50 28<br>
　8 41 9 7 17<br>
　1 2 5 3 139<br>
　3 1 5 5 399<br>
　3 3 4 5 91<br>
　4 1 4 1 33<br>
　1 3 5 4 185<br>
　3 3 4 3 23<br>
　3 1 3 3 108</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>6<br>
　15<br>
　2<br>
　Poor QLW<br>
　9<br>
　1<br>
　3</p>
<h2 id="HINT">HINT</h2>
<p>对于 10%的数据，满足 R, C≤10；</p>
<p>对于 20%的数据，满足 R, C≤40；</p>
<p>对于 50%的数据，满足 R, C≤200，M≤200,000；</p>
<p>另有 50%的数据，满足 R＝1，C≤500,000，M≤20,000；</p>
<p>对于 100%的数据，满足 1≤Pi,j≤1,000，1≤Hi≤2,000,000,000</p>
<h2 id="Main-idea">Main idea</h2>
<p>求给定矩阵（第二问是序列）中至少要取几个数加起来可以大于给定的值。</p>
<h2 id="Solution">Solution</h2>
<p>分为两部分实现：</p>
<p>第一部分n,m&lt;=200，发现值&lt;=1000，可以令tal表示到i,j位置为止的矩阵数值&gt;=k的权值和与个数。每次<strong>二分最小值</strong>，判断是否可行，最后注意最小值不一定要取满。</p>
<p>第二部分为序列，用主席树求一段区间内&gt;=某个值的权值和与个数，然后<strong>在主席树上二分</strong>，类似静态查询Kth，如果往左子树走则加上右子树的权值与个数，最后走到叶子节点的时候判断是否需要取满即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">205</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> TWO=<span class="number">5500005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,T;</span><br><span class="line"><span class="keyword">int</span> x,Need,cnt;</span><br><span class="line"><span class="keyword">int</span> res_num,res_value;</span><br><span class="line"><span class="keyword">int</span> a[ONE][ONE];</span><br><span class="line"><span class="keyword">int</span> X1,X2,Y1,Y2;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="keyword">int</span> left,right;</span><br><span class="line">    <span class="keyword">int</span> value,num;</span><br><span class="line">&#125;Node[TWO];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">&#125;tal[ONE][ONE][INF];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> Val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x=++cnt;</span><br><span class="line">    Node[x].value=Node[y].value+Val;</span><br><span class="line">    Node[x].num=Node[y].num+<span class="number">1</span>;</span><br><span class="line">    Node[x].left=Node[y].left;</span><br><span class="line">    Node[x].right=Node[y].right;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(Val&lt;=mid) <span class="built_in">Update</span>(Node[x].left,Node[y].left,l,mid,Val);</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=Val) <span class="built_in">Update</span>(Node[x].right,Node[y].right,mid+<span class="number">1</span>,r,Val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> Need)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Need &amp;&amp; l)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> num=Need/l;</span><br><span class="line">            res_num+=num;</span><br><span class="line">            Need-=num*l;</span><br><span class="line">            <span class="keyword">if</span>(Need&gt;<span class="number">0</span>) res_num++,Need-=l;</span><br><span class="line">        &#125;</span><br><span class="line">        res_value=Need;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> value=Node[ Node[y].right ].value-Node[ Node[x].right ].value;</span><br><span class="line">    <span class="keyword">if</span>(value &gt; Need)</span><br><span class="line">        <span class="built_in">Query</span>(Node[x].right,Node[y].right,mid+<span class="number">1</span>,r,Need);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        res_num+=Node[ Node[y].right ].num-Node[ Node[x].right ].num;</span><br><span class="line">        <span class="built_in">Query</span>(Node[x].left,Node[y].left,l,mid,Need-value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Getvalue</span><span class="params">(<span class="keyword">int</span> Val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tal[X2][Y2][Val].value + tal[X1<span class="number">-1</span>][Y1<span class="number">-1</span>][Val].value - tal[X1<span class="number">-1</span>][Y2][Val].value - tal[X2][Y1<span class="number">-1</span>][Val].value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Getnum</span><span class="params">(<span class="keyword">int</span> Val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> tal[X2][Y2][Val].num + tal[X1<span class="number">-1</span>][Y1<span class="number">-1</span>][Val].num - tal[X1<span class="number">-1</span>][Y2][Val].num - tal[X2][Y1<span class="number">-1</span>][Val].num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">(<span class="keyword">int</span> ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res_num=<span class="built_in">Getnum</span>(ans+<span class="number">1</span>);</span><br><span class="line">    res_value=<span class="built_in">Getvalue</span>(ans+<span class="number">1</span>);</span><br><span class="line">    Need-=res_value;</span><br><span class="line">    <span class="keyword">if</span>(Need&gt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> num=Need/ans;</span><br><span class="line">        res_num+=num;</span><br><span class="line">        Need-=num*ans;</span><br><span class="line">        <span class="keyword">if</span>(Need&gt;<span class="number">0</span>) res_num++,Need-=ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PartOne</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i][j]=<span class="built_in">get</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">1000</span>;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                tal[i][j][k].value=tal[i][j<span class="number">-1</span>][k].value;</span><br><span class="line">                tal[i][j][k].num=tal[i][j<span class="number">-1</span>][k].num;</span><br><span class="line">                <span class="keyword">if</span>(a[i][j]&gt;=k) tal[i][j][k].value+=a[i][j],tal[i][j][k].num++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                tal[i][j][k].value+=tal[i<span class="number">-1</span>][j][k].value;</span><br><span class="line">                tal[i][j][k].num+=tal[i<span class="number">-1</span>][j][k].num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        Need=<span class="number">0</span>;</span><br><span class="line">        X1=<span class="built_in">get</span>();   Y1=<span class="built_in">get</span>();   X2=<span class="built_in">get</span>();   Y2=<span class="built_in">get</span>();   Need=<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Getvalue</span>(<span class="number">0</span>)&lt;Need)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Poor QLW\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Getvalue</span>(mid)&gt;Need)</span><br><span class="line">            &#123;</span><br><span class="line">                ans=mid;</span><br><span class="line">                l=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!ans) ans=<span class="number">1</span>;</span><br><span class="line">        res_num=res_value=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">Deal</span>(ans);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res_num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PartTwo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Update</span>(Node[i].root,Node[i<span class="number">-1</span>].root,<span class="number">0</span>,INF,x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x1,x2,y1,y2;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        x1=<span class="built_in">get</span>();   y1=<span class="built_in">get</span>();   x2=<span class="built_in">get</span>();   y2=<span class="built_in">get</span>();   Need=<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        res_num=res_value=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">Query</span>(Node[y1<span class="number">-1</span>].root,Node[y2].root,<span class="number">0</span>,INF,Need);</span><br><span class="line">        <span class="keyword">if</span>(res_value&gt;<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;Poor QLW\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,res_num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">if</span>(n!=<span class="number">1</span>) <span class="built_in">PartOne</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">PartTwo</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>主席树</tag>
      </tags>
  </entry>
  <entry>
    <title>[二分]灵魂宝石</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E4%BA%8C%E5%88%86%5D%E7%81%B5%E9%AD%82%E5%AE%9D%E7%9F%B3/</url>
    <content><![CDATA[<h1>灵魂宝石</h1>
<p>Time Limit: 5 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>“作为你们本体的灵魂，为了能够更好的运用魔法，被赋予了既小巧又安全的外形”<br>
　　我们知道，魔法少女的生命被存放于一个称为灵魂宝石（Soul Gem）的装置内。<br>
　　而有时，当灵魂宝石与躯体的距离较远时，魔法少女就无法控制自己的躯体了。<br>
　　在传说中，魔法少女 Abel仅通过推理就得到了这个现象的一般法则，被称为Abel定理：<br>
　　存在宇宙常量 R（是一个非负实数，或正无穷） ，被称为灵魂宝石常量，量纲为空间度量（即：长度）。<br>
　　如果某个魔法少女的灵魂宝石与她的躯体的距离严格超过 R，则她一定无法控制自己的躯体；如果这个距离严格小于 R，则她一定可以控制自己的躯体。 （这里的距离指平面的 Euclid距离。）<br>
　　注意：该定理不能预言距离刚好为 R 的情形。<br>
　　可能存在魔法少女 A 和 B，她们离自己的灵魂宝石的距离都恰好为 R，但是 A可以控制自己的躯体，而 B 不可以。<br>
　　现在这个世界上再也没有魔法少女了，但是我们却对这个宇宙常量感兴趣。<br>
　　我们只能通过之前的世界遗留下来的数据来确定这个常量的范围了。<br>
　　每一组数据包含以下信息：<br>
　　　　·一共有N 个魔法少女及她们的灵魂宝石，分别编号为 1~N。<br>
　　　　·这 N个魔法少女所在的位置是（Xi, Yi）。<br>
　　　　·这 N个灵魂宝石所在的位置是（xi, yi）。<br>
　　　　·此时恰好有 K个魔法少女能够控制自己的躯体。<br>
　　需要注意的是：<br>
　　　　1. 我们认为这个世界是二维的 Euclid 空间。<br>
　　　　2. 魔法少女与灵魂宝石之间的对应关系是未知的。<br>
　　　　3. 我们不知道是具体是哪 K个魔法少女能够控制自己的躯体。<br>
　　根据以上信息，你需要确定灵魂宝石常量 R可能的最小值 Rmin 和最大值 Rmax。</p>
<h2 id="Input">Input</h2>
<p>第一行包两个整数：N、K。<br>
　　接下来 N行，每行包含两个整数：Xi , Yi ，由空格隔开。<br>
　　再接下来N 行，每行包含两个整数：xi , yi ，由空格隔开。</p>
<h2 id="Output">Output</h2>
<p>输出两个量：Rmin、Rmax，中间用空格隔开。<br>
　　Rmin 一定是一个非负实数，四舍五入到小数点后两位。<br>
　　Rmax 可能是非负实数，或者是正无穷：<br>
　　如果是非负实数，四舍五入到小数点后两位；<br>
　　如果是正无穷，输出“+INF”（不包含引号）。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>2 1<br>
　1 0<br>
　4 0<br>
　0 0<br>
　4 4</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>1.00 5.00</p>
<h2 id="HINT">HINT</h2>
<p>对于100%的数据：<br>
　　1 ≤ N ≤ 50，<br>
　　0 ≤ K ≤ N，<br>
　　-1000 ≤ xi, yi , Xi , Yi ≤ 1000。</p>
<h2 id="Main-idea">Main idea</h2>
<p>有n个人匹配n个宝石，每个人和宝石有一个坐标，R为自己给定的值，如果在平面内人和宝石的距离&lt;R则一定匹配，距离=R可取可不取，距离&gt;R则一定无法取，求使得可以取到k个匹配的R的最小值和最大值。</p>
<h2 id="Solution">Solution</h2>
<p>求最小值最大值，想到了二分答案，然后我们可以直观地看出可以使用二分图匹配来进行求匹配问题，二分一个R，如果人和宝石的距离&lt;=R则连边，判断是否可行，这样我们可以求出最小的R。</p>
<p>发现最大的R无法这么取，因为可能有距离=R的情况，所以我们<strong>反向思考</strong>，考虑枚举一个R，距离&gt;=R的连边，判断是否有&lt;n-k个无法匹配，则可以求得R的最大值。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">101</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">double</span> l,mid,r;</span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line"><span class="keyword">int</span> vis[ONE];</span><br><span class="line"><span class="keyword">int</span> f[ONE][ONE],my[ONE];</span><br><span class="line"><span class="keyword">double</span> X[ONE],Y[ONE];</span><br><span class="line"><span class="keyword">double</span> dist[ONE][ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(f[i][j] &amp;&amp; !vis[j])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[j]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!my[j] || <span class="built_in">find</span>(my[j]))</span><br><span class="line">            &#123;</span><br><span class="line">                my[j]=i;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Getdis</span><span class="params">(<span class="keyword">double</span> x1,<span class="keyword">double</span> y1,<span class="keyword">double</span> x2,<span class="keyword">double</span> y2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>( (x1-x2)*(x1-x2) + (y1-y2)*(y1-y2) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Check_first</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(my,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(my));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j]=(dist[i][j]&lt;=x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> Ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(i)) Ans++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Ans&gt;=k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Check_second</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(my,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(my));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j]=(dist[i][j]&gt;=x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> Ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(i)) Ans++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Ans&lt;=n-k<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    k=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>,&amp;X[i],&amp;Y[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            dist[j][i]=<span class="built_in">Getdis</span>(X[j],Y[j],x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    l=<span class="number">0.0</span>;  r=<span class="number">3500.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(l&lt;r<span class="number">-0.001</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mid=(l+r)/<span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Check_first</span>(mid)) r=mid;</span><br><span class="line">        <span class="keyword">else</span> l=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Check_first</span>(l)) <span class="built_in">printf</span>(<span class="string">&quot;%.2lf &quot;</span>,l);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%.2lf &quot;</span>,r);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    l=<span class="number">0.0</span>;  r=<span class="number">3500.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(l&lt;r<span class="number">-0.001</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mid=(l+r)/<span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Check_second</span>(mid)) r=mid;</span><br><span class="line">        <span class="keyword">else</span> l=mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> ans;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Check_second</span>(r)) ans=r;</span><br><span class="line">    <span class="keyword">else</span> ans=l;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(ans<span class="number">-3500.0</span>)&lt;=<span class="number">0.01</span>) <span class="built_in">printf</span>(<span class="string">&quot;+INF&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title>[二分][贪心]减法</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E4%BA%8C%E5%88%86%5D%5B%E8%B4%AA%E5%BF%83%5D%E5%87%8F%E6%B3%95/</url>
    <content><![CDATA[<h1>减法</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>给你一个n个数的序列A，并且给出m次操作B。</p>
<p>操作的含义是：每次从A中选出不同的B_i个数，把它们减去1。一个数&gt;0被看作是可以选择的。</p>
<p>问最多执行完第几个操作。</p>
<h2 id="Input">Input</h2>
<p>第一行给出两个整数，序列长度n与操作数m。</p>
<p>第二行n个数，表示序列A。</p>
<p>第三行m个数，表示操作序列B。</p>
<h2 id="Output">Output</h2>
<p>输出一个整数，表示最多执行完第几个操作。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3 4<br>
　　2 1 3<br>
　　3 1 2 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3</p>
<h2 id="HINT">HINT</h2>
<p>1 &lt;= n, m &lt;=100000</p>
<h2 id="Solution">Solution</h2>
<p>考虑贪心，显然是<strong>每次减去大的数</strong>。</p>
<p>我们二分答案做到第几次，然后构造一组不<strong>上升序列times</strong>，表示<strong>每个数</strong>最多可以<strong>被减几次</strong>，每次把区间**[1, B[i]]**加一。</p>
<p>如果每个数都<strong>足够大</strong>的话，这显然是一组合法解。但是每个数<strong>不一定都够减</strong>。</p>
<p>我们可以基于这个序列来做调整，考虑什么情况下是<strong>合法</strong>的呢？<br>
　　显然，<strong>前面不够减的</strong>可以是<strong>分摊到后面去</strong>，而若A<strong>从大到小</strong>排序，<strong>贪心</strong>尽量多减，那么<strong>后面减的次数</strong>又<strong>不可能比前面多</strong>，所以这样就<strong>保证了合法性</strong>。</p>
<p>所以先把A<strong>从大到小排序</strong>然后**O(n)**递推。</p>
<p>每次 <strong>left += times[i] - A[i]</strong>。<br>
　　　　如果<strong>left&lt;=0</strong>，表示这个位置的值减完还有剩余，但是这个left不能分摊给后面用，所以我们<strong>把left设为0</strong>；<br>
　　　　如果<strong>left&gt;0</strong>，可以把<strong>left</strong>留在后面减，传递下去即可。</p>
<p>递推完只要判断一下最后是否<strong>left&lt;=0</strong>。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> A[ONE], B[ONE];</span><br><span class="line"><span class="keyword">int</span> times[ONE];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="keyword">return</span> a &gt; b;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) times[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= mid; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        times[<span class="number">1</span>]++, times[B[i] + <span class="number">1</span>]--;</span><br><span class="line">        <span class="keyword">if</span>(B[i] &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        times[i] += times[i - <span class="number">1</span>];</span><br><span class="line">        left += times[i] - A[i];</span><br><span class="line">        <span class="keyword">if</span>(left &lt;= <span class="number">0</span>) left = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left &lt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();    m = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) A[i] = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) B[i] = <span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">sort</span>(A + <span class="number">1</span>, A + n + <span class="number">1</span>, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = m;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Check</span>(r)) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, r);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>[分块]弹飞绵羊</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E5%88%86%E5%9D%97%5D%E5%BC%B9%E9%A3%9E%E7%BB%B5%E7%BE%8A/</url>
    <content><![CDATA[<h1>弹飞绵羊</h1>
<p>Time Limit: 10 Sec Memory Limit: 259 MB</p>
<h2 id="Description">Description</h2>
<p>某天，Lostmonkey发明了一种超级弹力装置，为了在他的绵羊朋友面前显摆，他邀请小绵羊一起玩个游戏。游戏一开始，Lostmonkey在地上沿着一条直线摆上n个装置，每个装置设定初始弹力系数ki，当绵羊达到第i个装置时，它会往后弹ki步，达到第i+ki个装置，若不存在第i+ki个装置，则绵羊被弹飞。绵羊想知道当它从第i个装置起步时，被弹几次后会被弹飞。为了使得游戏更有趣，Lostmonkey可以修改某个弹力装置的弹力系数，任何时候弹力系数均为正整数。</p>
<h2 id="Input">Input</h2>
<p>第一行包含一个整数n，表示地上有n个装置，装置的编号从0到n-1，</p>
<p>接下来一行有n个正整数，依次为那n个装置的初始弹力系数。</p>
<p>第三行有一个正整数m，</p>
<p>接下来m行每行至少有两个数i、j，若i=1，你要输出从j出发被弹几次后被弹飞，若i=2则还会再输入一个正整数k，表示第j个弹力装置的系数被修改成k。</p>
<h2 id="Output">Output</h2>
<p>对于每个i=1的情况，你都要输出一个需要的步数，占一行。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4<br>
　1 2 1 1						<br>
　3<br>
　1 1<br>
　2 1 1<br>
　1 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>2<br>
　3</p>
<h2 id="HINT">HINT</h2>
<p>对于20%的数据：n,m&lt;=10000;</p>
<p>对于100%的数据：n&lt;=200000,m&lt;=100000.</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定一个位置，走一步可以走到一个指定位置，求走到n以外需要几步，走到的指定位置需要支持修改。</p>
<h2 id="Solution">Solution</h2>
<p>考虑暴力显然不可做，运用分块，维护两个信息：<strong>1.走出当前分块需要几步；2.走出当前分块后到了哪个点。</strong></p>
<p>每次修改更新改点信息以及该块内的点，又因为一个点不一定只影响到该块内直接跳到这个点的点，也有间接关系的可能性存在，直接倒着搜一遍每次在可以跳到的点+1即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">400001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,Q,P;</span><br><span class="line"><span class="keyword">int</span> T,x,y;</span><br><span class="line"><span class="keyword">int</span> num,to;</span><br><span class="line"><span class="keyword">int</span> a[ONE],To[ONE],F[ONE];</span><br><span class="line"><span class="keyword">int</span> go,jishu;</span><br><span class="line"><span class="keyword">int</span> PD[ONE];</span><br><span class="line"><span class="keyword">int</span> l[ONE],r[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> step;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> from;</span><br><span class="line">&#125;C[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=x;</span><br><span class="line">    <span class="keyword">int</span> Ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        Ans+=C[j].step;</span><br><span class="line">        j=C[j].to;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j=x;</span><br><span class="line">    To[x]=x+y;</span><br><span class="line">    <span class="keyword">if</span>(To[x]&gt;n) To[x]=n+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    jishu=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(C[j].from==C[x].from)</span><br><span class="line">    &#123;</span><br><span class="line">        j=To[j];</span><br><span class="line">        jishu++;</span><br><span class="line">    &#125;</span><br><span class="line">    C[x].step=jishu; C[x].to=j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x<span class="number">-1</span>;i&gt;=l[C[x].from];i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y=To[i];</span><br><span class="line">        <span class="keyword">if</span>(C[i].from==C[y].from)</span><br><span class="line">        &#123;</span><br><span class="line">            C[i].to=C[y].to;</span><br><span class="line">            C[i].step=C[y].step+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// freopen(&quot;input.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="comment">// freopen(&quot;input.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    Q=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=<span class="built_in">get</span>(); To[i]=i+a[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(To[i]&gt;n) To[i]=n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!((i<span class="number">-1</span>)%Q))</span><br><span class="line">        &#123;</span><br><span class="line">            num++;</span><br><span class="line">            l[num]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        C[i].from=num; r[num]=i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j=i;</span><br><span class="line">        jishu=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(C[j].from==C[i].from)</span><br><span class="line">        &#123;</span><br><span class="line">            j=To[j];</span><br><span class="line">            jishu++;</span><br><span class="line">        &#125;</span><br><span class="line">        C[i].step=jishu;</span><br><span class="line">        C[i].to=j;</span><br><span class="line">        <span class="keyword">if</span>(C[i].to&gt;n) C[i].to=n+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        P=<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">if</span>(P==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=<span class="built_in">get</span>(); x++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">Query</span>(x));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(P==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=<span class="built_in">get</span>(); x++;</span><br><span class="line">            y=<span class="built_in">get</span>();</span><br><span class="line">            <span class="built_in">Update</span>(x,y);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title>[分治]Norma</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E5%88%86%E6%B2%BB%5DNorma/</url>
    <content><![CDATA[<h1>Norma</h1>
<p>Time Limit: 20 Sec Memory Limit: 64 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528014100.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p>第1行，一个整数N；</p>
<p>第2~n+1行，每行一个整数表示序列a。</p>
<h2 id="Output">Output</h2>
<p>输出答案对10^9取模后的结果。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4<br>
　2<br>
　4<br>
　1<br>
　4</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>109</p>
<h2 id="HINT">HINT</h2>
<p>N &lt;= 500000<br>
　1 &lt;= a_i &lt;= 10^8</p>
<h2 id="Solution">Solution</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528014122.png" alt="img"></p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>, Q = <span class="number">1</span>; <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &lt; <span class="number">48</span> || c &gt; <span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) Q = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res = c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &gt;= <span class="number">48</span> &amp;&amp; c &lt;= <span class="number">57</span>)</span><br><span class="line">        res = res * <span class="number">10</span> + c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">return</span> res * Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> val[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modit</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &lt; <span class="number">0</span>) a += MOD;</span><br><span class="line">    <span class="keyword">if</span>(a &gt;= MOD) a -= MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Min, MinI;</span><br><span class="line">    <span class="keyword">int</span> Max, MaxI;</span><br><span class="line">    <span class="keyword">int</span> MinMax, MinMaxI;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> power <span class="keyword">operator</span> -(power a, power b)</span><br><span class="line">    &#123;</span><br><span class="line">        power c;</span><br><span class="line">        <span class="built_in">Modit</span>(c.Min = a.Min - b.Min),</span><br><span class="line">        <span class="built_in">Modit</span>(c.MinI = a.MinI - b.MinI),</span><br><span class="line">        <span class="built_in">Modit</span>(c.Max = a.Max - b.Max),</span><br><span class="line">        <span class="built_in">Modit</span>(c.MaxI = a.MaxI - b.MaxI),</span><br><span class="line">        <span class="built_in">Modit</span>(c.MinMax = a.MinMax - b.MinMax),</span><br><span class="line">        <span class="built_in">Modit</span>(c.MinMaxI = a.MinMaxI - b.MinMaxI);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;A[ONE];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (s64)(a + b) * (b - a + <span class="number">1</span>) / <span class="number">2</span> % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L == R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Modit</span>(Ans += (s64)val[L] * val[R] % MOD * <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = L + R &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> minn = INF, maxx = -INF;</span><br><span class="line">    A[mid] = (power)&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = mid + <span class="number">1</span>; j &lt;= R; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        minn = <span class="built_in">min</span>(minn, val[j]), maxx = <span class="built_in">max</span>(maxx, val[j]),</span><br><span class="line">        <span class="built_in">Modit</span>(A[j].Min = A[j - <span class="number">1</span>].Min + minn),</span><br><span class="line">        <span class="built_in">Modit</span>(A[j].MinI = A[j - <span class="number">1</span>].MinI + (s64)minn * j % MOD),</span><br><span class="line">        <span class="built_in">Modit</span>(A[j].Max = A[j - <span class="number">1</span>].Max + maxx),</span><br><span class="line">        <span class="built_in">Modit</span>(A[j].MaxI = A[j - <span class="number">1</span>].MaxI + (s64)maxx * j % MOD),</span><br><span class="line">        <span class="built_in">Modit</span>(A[j].MinMax = A[j - <span class="number">1</span>].MinMax + (s64)minn * maxx % MOD),</span><br><span class="line">        <span class="built_in">Modit</span>(A[j].MinMaxI = A[j - <span class="number">1</span>].MinMaxI + (s64)minn * maxx % MOD * j % MOD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    minn = INF, maxx = -INF;</span><br><span class="line">    <span class="keyword">int</span> a = mid, b = mid;</span><br><span class="line">    power del;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = mid; i &gt;= L; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        minn = <span class="built_in">min</span>(minn, val[i]), maxx = <span class="built_in">max</span>(maxx, val[i]);</span><br><span class="line">        <span class="keyword">while</span>(minn &lt;= val[a + <span class="number">1</span>] &amp;&amp; a + <span class="number">1</span> &lt;= R) a++;</span><br><span class="line">        <span class="keyword">while</span>(maxx &gt;= val[b + <span class="number">1</span>] &amp;&amp; b + <span class="number">1</span> &lt;= R) b++;</span><br><span class="line">        <span class="keyword">if</span>(a &lt;= b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Modit</span>(Ans += (s64)maxx * minn % MOD * <span class="built_in">Sum</span>(mid + <span class="number">1</span> - i + <span class="number">1</span>, a - i + <span class="number">1</span>) % MOD);</span><br><span class="line">            del = A[b] - A[a];</span><br><span class="line">            <span class="built_in">Modit</span>(Ans += (s64)maxx * del.MinI % MOD - (s64)maxx * del.Min % MOD * (i - <span class="number">1</span>) % MOD);</span><br><span class="line">            del = A[R] - A[b];</span><br><span class="line">            <span class="built_in">Modit</span>(Ans += (s64)del.MinMaxI - (s64)del.MinMax * (i - <span class="number">1</span>) % MOD);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Modit</span>(Ans += (s64)maxx * minn % MOD * <span class="built_in">Sum</span>(mid + <span class="number">1</span> - i + <span class="number">1</span>, b - i + <span class="number">1</span>) % MOD);</span><br><span class="line">            del = A[a] - A[b];</span><br><span class="line">            <span class="built_in">Modit</span>(Ans += (s64)minn * del.MaxI % MOD - (s64)minn * del.Max % MOD * (i - <span class="number">1</span>) % MOD);</span><br><span class="line">            del = A[R] - A[a];</span><br><span class="line">            <span class="built_in">Modit</span>(Ans += (s64)del.MinMaxI - (s64)del.MinMax * (i - <span class="number">1</span>) % MOD);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Solve</span>(L, mid), <span class="built_in">Solve</span>(mid + <span class="number">1</span>, R);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        val[i] = <span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">Solve</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>分治</category>
      </categories>
      <tags>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>[分治][DP]动态规划</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E5%88%86%E6%B2%BB%5D%5BDP%5D%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h1>动态规划</h1>
<p>Time Limit: 50 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>一开始有n个数，一段区间的价值为这段区间相同的数的对数。<br>
　　我们想把这n个数切成恰好k段区间。之后这n个数的价值为这k段区间的价值和。<br>
　　我们想让最终这n个数的价值和尽可能少。<br>
　　例如6个数1,1,2,2,3,3要切成3段，一个好方法是切成[1],[1,2],[2,3,3]，这样只有第三个区间有1的价值。因此这6个数的价值为1。</p>
<h2 id="Input">Input</h2>
<p>第一行两个数n,k。<br>
　　接下来一行n个数ai表示这n个数。</p>
<h2 id="Output">Output</h2>
<p>一个数表示答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>10 2<br>
　　1 2 1 2 1 2 1 2 1 2</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>8</p>
<h2 id="HINT">HINT</h2>
<p>对于100%的数据1&lt;=n&lt;=100000,1&lt;=k&lt;=min(n,20),1&lt;=ai&lt;=n。</p>
<h2 id="Solution">Solution</h2>
<p>首先，暴力DP非常显然，<strong>f[i][j]</strong> 表示分了 <strong>i</strong> 段，当前做到<strong>第 j 个元素</strong>的最小值。</p>
<p>那么 <strong>f[i][j] = f[i - 1][k] + sum(k + 1, j)</strong>。我们打一个表，发现<strong>决策具有单调性</strong>。</p>
<p>但是显然，对于这道题，我们<strong>不能直接二分转移来的位置</strong>，由于<strong>sum</strong>并不好求。</p>
<p>所以我们可以考虑运用分治。执行<strong>k</strong>次。**Solve(l, r, L, R)**表示 <strong>j∈[l, r]，from∈[L, R]</strong>。</p>
<p>那么我们对于**[l, r]<strong>，考虑</strong>mid<strong>从</strong>[L, R]<strong>中的哪一个转移过来，假设是</strong>MidFrom**。</p>
<p>那么由于决策单调性，所以**[l, mid - 1]<strong>的</strong>决策点<strong>一定在</strong>[L, MidFrom]<strong>，</strong>[mid + 1, r]<strong>的</strong>决策点<strong>一定在</strong>[MidFrom, R]**。</p>
<p><strong>移动两个指针now_l, now_r</strong>，<strong>维护sum</strong>即可。（复杂度我也不会证明呀QWQ）</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> s64 INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>, Q = <span class="number">1</span>; <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &lt; <span class="number">48</span> || c &gt; <span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) Q = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res = c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &gt;= <span class="number">48</span> &amp;&amp; c &lt;= <span class="number">57</span>)</span><br><span class="line">        res = res * <span class="number">10</span> + c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">return</span> res * Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> a[ONE], cnt[ONE];</span><br><span class="line"></span><br><span class="line">s64 record[ONE], f[ONE], value;</span><br><span class="line"><span class="keyword">int</span> now_l, now_r;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Move</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(now_r &lt; r) cnt[a[++now_r]]++, value += cnt[a[now_r]];</span><br><span class="line">    <span class="keyword">while</span>(l &lt; now_l) cnt[a[--now_l]]++, value += cnt[a[now_l]];</span><br><span class="line">    <span class="keyword">while</span>(now_r &gt; r) value -= cnt[a[now_r]], cnt[a[now_r--]]--;</span><br><span class="line">    <span class="keyword">while</span>(l &gt; now_l) value -= cnt[a[now_l]], cnt[a[now_l++]]--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> <span class="comment">//j=l~r, from = L~R</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, MidFrom;</span><br><span class="line">    s64 Ans = INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> from = L; from &lt;= R; from++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(from &gt;= mid) <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">Move</span>(from + <span class="number">1</span>, mid);</span><br><span class="line">        <span class="keyword">if</span>(f[from] + value &lt; Ans)</span><br><span class="line">            Ans = f[from] + value, MidFrom = from;</span><br><span class="line">    &#125;</span><br><span class="line">    record[mid] = Ans;</span><br><span class="line">    <span class="built_in">Solve</span>(l, mid - <span class="number">1</span>, L, MidFrom);</span><br><span class="line">    <span class="built_in">Solve</span>(mid + <span class="number">1</span>, r, MidFrom, R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();    k = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = <span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) f[i] = INF;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cnt[i] = <span class="number">-1</span>;</span><br><span class="line">        now_l = now_r = <span class="number">1</span>; value = <span class="number">0</span>, cnt[a[<span class="number">1</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">Solve</span>(<span class="number">1</span>, n, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            f[i] = record[i], record[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, f[n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>分治</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>[分治]稻草人</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E5%88%86%E6%B2%BB%5D%E7%A8%BB%E8%8D%89%E4%BA%BA/</url>
    <content><![CDATA[<h1>稻草人</h1>
<p>Time Limit: 40 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>JOI村有一片荒地，上面竖着N个稻草人，村民们每年多次在稻草人们的周围举行祭典。</p>
<p>有一次，JOI村的村长听到了稻草人们的启示，计划在荒地中开垦一片田地。和启示中的一样，田地需要满足以下条件：</p>
<p>田地的形状是边平行于坐标轴的长方形；</p>
<p>左下角和右上角各有一个稻草人；</p>
<p>田地的内部(不包括边界)没有稻草人。</p>
<p>给出每个稻草人的坐标，请你求出有多少遵从启示的田地的个数</p>
<h2 id="Input">Input</h2>
<p>第一行一个正整数N，代表稻草人的个数</p>
<p>接下来N行，第i行(1&lt;=i&lt;=N)包含2个由空格分隔的整数Xi和Yi，表示第i个稻草人的坐标</p>
<h2 id="Output">Output</h2>
<p>输出一行一个正整数，代表遵从启示的田地的个数</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4<br>
　0 0<br>
　2 2<br>
　3 4<br>
　4 3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=N&lt;=2*10^5</p>
<p>0&lt;=Xi&lt;=10^9(1&lt;=i&lt;=N), Xi(1&lt;=i&lt;=N)互不相同。</p>
<p>0&lt;=Yi&lt;=10^9(1&lt;=i&lt;=N), Yi(1&lt;=i&lt;=N)互不相同。</p>
<h2 id="Solution">Solution</h2>
<p><strong>O(n^2)做法很显然</strong>，既然这样，我们就使用惯用套路，我们<strong>先对 y 进行</strong>分治，将<strong>上面的点</strong>视为<strong>右上角的点</strong>，<strong>下面的</strong>视为<strong>左下角的点</strong>，统计答案。<br>
　　首先把两部分的点<strong>分别按照 x 升序排序</strong>。<br>
　　然后<strong>枚举上面的每个点</strong>。<br>
　　显然，约束到它拓展的是 <strong>在它左下方最接近的点</strong>。<br>
　　同时，下面的点<strong>最近的右上方点</strong>约束到点的拓展。</p>
<p>那我们对于上面维<strong>护一个 y 递增</strong>的单调栈，对下面<strong>维护一个 y 递减</strong>的<strong>单调栈</strong>。<br>
　　<strong>枚举</strong>到上面的点的时候，<strong>把 x 小于它的</strong>下面的点<strong>加入下面的那个单调栈</strong>，然后二分一下<strong>可行的位置</strong>就可以了。<br>
　　（显然，只有当<strong>下面的x</strong> &gt; <strong>上面单调栈倒数第二个点的 x</strong> 的时候 才可以被加入答案）</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1000005</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>, Q = <span class="number">1</span>; <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &lt; <span class="number">48</span> || c &gt; <span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) Q = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res = c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &gt;= <span class="number">48</span> &amp;&amp; c &lt;= <span class="number">57</span>)</span><br><span class="line">        res = res * <span class="number">10</span> + c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">return</span> res * Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpx</span><span class="params">(<span class="keyword">const</span> point &amp;a, <span class="keyword">const</span> point &amp;b)</span> </span>&#123;<span class="keyword">return</span> a.x &lt; b.x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpy</span><span class="params">(<span class="keyword">const</span> point &amp;a, <span class="keyword">const</span> point &amp;b)</span> </span>&#123;<span class="keyword">return</span> a.y &lt; b.y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Stk_down[ONE], Stk_up[ONE];</span><br><span class="line">s64 Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(a + l, a + r + <span class="number">1</span>, cmpy);</span><br><span class="line">    <span class="built_in">sort</span>(a + l, a + mid + <span class="number">1</span>, cmpx);</span><br><span class="line">    <span class="built_in">sort</span>(a + mid + <span class="number">1</span>, a + r + <span class="number">1</span>, cmpx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> top_up = <span class="number">0</span>, top_down = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> now = l;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt;= r; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(top_up &gt; <span class="number">0</span> &amp;&amp; a[Stk_up[top_up]].y &gt;= a[i].y) top_up--;</span><br><span class="line">        Stk_up[++top_up] = i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(now &lt;= mid &amp;&amp; a[now].x &lt;= a[i].x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(top_down &gt; <span class="number">0</span> &amp;&amp; a[Stk_down[top_down]].y &lt;= a[now].y) top_down--;</span><br><span class="line">            Stk_down[++top_down] = now;</span><br><span class="line">            now++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">1</span>, right = top_down, pos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> lx = top_up - <span class="number">1</span> &gt; <span class="number">0</span> ? a[Stk_up[top_up - <span class="number">1</span>]].x : <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> middle = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[Stk_down[middle]].x &gt;= lx)</span><br><span class="line">                right = middle;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                left = middle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(a[Stk_down[left]].x &gt;= lx) pos = left;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(a[Stk_down[right]].x &gt;= lx) pos = right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pos) Ans += top_down - pos + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Solve</span>(l, mid), <span class="built_in">Solve</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i].x = <span class="built_in">get</span>(), a[i].y = <span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Solve</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>分治</category>
      </categories>
      <tags>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>[分治][树状数组]简单题</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E5%88%86%E6%B2%BB%5D%5B%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%5D%E7%AE%80%E5%8D%95%E9%A2%98/</url>
    <content><![CDATA[<h1>简单题</h1>
<p>Time Limit: 50 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>你有一个N*N的棋盘，每个格子内有一个整数，初始时的时候全部为0，现在需要维护两种操作：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>参数限制</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>1 x y A</td>
<td>1&lt;=x,y&lt;=N，A是正整数</td>
<td>将格子x,y里的数字加上A</td>
</tr>
<tr>
<td>2 x1 y1 x2 y2</td>
<td>1&lt;=x1&lt;= x2&lt;=N 1&lt;=y1&lt;= y2&lt;=N</td>
<td>输出x1 y1 x2 y2这个矩形内的数字和</td>
</tr>
<tr>
<td>3</td>
<td>无</td>
<td>终止程序</td>
</tr>
</tbody>
</table>
<h2 id="Input">Input</h2>
<p>输入文件第一行一个正整数N。</p>
<p>接下来每行一个操作。</p>
<h2 id="Output">Output</h2>
<p>对于每个2操作，输出一个对应的答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4<br>
　1 2 3 3<br>
　2 1 1 3 3<br>
　1 2 2 2<br>
　2 2 2 3 4<br>
　3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3<br>
　5</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=N&lt;=500000,操作数不超过200000个，内存限制20M。</p>
<p>对于100%的数据，操作1中的A不超过2000。</p>
<h2 id="Solution">Solution</h2>
<p>首先把询问<strong>拆成4个</strong>，那么我们就只要维护<strong>一个点左下角权值和</strong>了。</p>
<p>然后对所有操作按照 <strong>x 升序</strong>排序。</p>
<p>对 y 用个树状数组求<strong>前缀和</strong>，（由于 x 升序，所以此时<strong>询问已经相当于对y求前缀和</strong>了）</p>
<p>以<strong>mid</strong>为分界线，考虑<strong>左区间对右区间的影响</strong>。</p>
<p>显然，我们可以<strong>把左区间的修改</strong>执行，然后<strong>执行右区间的询问</strong>。</p>
<p>这样我们就做完了这道题。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">214748340</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>, Q = <span class="number">1</span>; <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &lt; <span class="number">48</span> || c &gt; <span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) Q = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res = c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &gt;= <span class="number">48</span> &amp;&amp; c &lt;= <span class="number">57</span>)</span><br><span class="line">        res = res * <span class="number">10</span> + c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">return</span> res * Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">namespace</span> BIT</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> C[ONE];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;<span class="keyword">return</span> i &amp; -i;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> R, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = R; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">            C[i] += x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = R; i &gt;= <span class="number">1</span>; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">            res += C[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> id, query_num, Ans[ONE];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id, opt, from;</span><br><span class="line">    <span class="keyword">int</span> x, y, val;</span><br><span class="line">&#125;oper[ONE], q[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> power &amp;a, <span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.x != b.x) <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">    <span class="keyword">return</span> a.opt &lt; b.opt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">(<span class="keyword">int</span> x_1, <span class="keyword">int</span> y_1, <span class="keyword">int</span> x_2, <span class="keyword">int</span> y_2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    query_num++;</span><br><span class="line">    oper[++id] = (power)&#123;id, <span class="number">2</span>, query_num, x_2, y_2, <span class="number">1</span>&#125;;</span><br><span class="line">    oper[++id] = (power)&#123;id, <span class="number">2</span>, query_num, x_1 - <span class="number">1</span>, y_1 - <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    oper[++id] = (power)&#123;id, <span class="number">2</span>, query_num, x_1 - <span class="number">1</span>, y_2, <span class="number">-1</span>&#125;;</span><br><span class="line">    oper[++id] = (power)&#123;id, <span class="number">2</span>, query_num, x_2, y_1 - <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(oper[i].opt == <span class="number">1</span> &amp;&amp; oper[i].id &lt;= mid)</span><br><span class="line">            BIT::<span class="built_in">Add</span>(oper[i].y, oper[i].val);</span><br><span class="line">        <span class="keyword">if</span>(oper[i].opt == <span class="number">2</span> &amp;&amp; oper[i].id &gt; mid)</span><br><span class="line">            Ans[oper[i].from] += BIT::<span class="built_in">Query</span>(oper[i].y) * oper[i].val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">        <span class="keyword">if</span>(oper[i].opt == <span class="number">1</span> &amp;&amp; oper[i].id &lt;= mid)</span><br><span class="line">            BIT::<span class="built_in">Add</span>(oper[i].y, -oper[i].val);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tl = l, tr = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">        <span class="keyword">if</span>(oper[i].id &lt;= mid) q[tl++] = oper[i];</span><br><span class="line">    <span class="keyword">else</span> q[tr++] = oper[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">        oper[i] = q[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Solve</span>(l, mid), <span class="built_in">Solve</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> opt, x_1, y_1, x_2, y_2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        opt = <span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">1</span>)</span><br><span class="line">            oper[++id].id = id, oper[id].opt = <span class="number">1</span>,</span><br><span class="line">        oper[id].x = <span class="built_in">get</span>(), oper[id].y = <span class="built_in">get</span>(), oper[id].val = <span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">2</span>)</span><br><span class="line">            x_1 = <span class="built_in">get</span>(), y_1 = <span class="built_in">get</span>(),</span><br><span class="line">        x_2 = <span class="built_in">get</span>(), y_2 = <span class="built_in">get</span>(),</span><br><span class="line">        <span class="built_in">Deal</span>(x_1, y_1, x_2, y_2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(oper + <span class="number">1</span>, oper + id + <span class="number">1</span>, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Solve</span>(<span class="number">1</span>, id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= query_num; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>分治</category>
      </categories>
      <tags>
        <tag>分治</tag>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>[动态点分治]捉迷藏</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E5%8A%A8%E6%80%81%E7%82%B9%E5%88%86%E6%B2%BB%5D%E6%8D%89%E8%BF%B7%E8%97%8F/</url>
    <content><![CDATA[<h1>捉迷藏</h1>
<p>Time Limit: 40 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>捉迷藏 Jiajia和Wind是一对恩爱的夫妻，并且他们有很多孩子。某天，Jiajia、Wind和孩子们决定在家里玩捉迷藏游戏。<br>
　　他们的家很大且构造很奇特，由N个屋子和N-1条双向走廊组成，这N-1条走廊的分布使得任意两个屋子都互相可达。<br>
　　游戏是这样进行的，孩子们负责躲藏，Jiajia负责找，而Wind负责操纵这N个屋子的灯。<br>
　　在起初的时候，所有的灯都没有被打开。<br>
　　每一次，孩子们只会躲藏在没有开灯的房间中，但是为了增加刺激性，孩子们会要求打开某个房间的电灯或者关闭某个房间的电灯。<br>
　　为了评估某一次游戏的复杂性，Jiajia希望知道可能的最远的两个孩子的距离（即最远的两个关灯房间的距离）。<br>
　　我们将以如下形式定义每一种操作：<br>
　　C(hange) i 改变第i房间的照明状态，若原来打开，则关闭；若原来关闭，则打开。<br>
　　G(ame) 开始一次游戏，查询最远的两个关灯房间的距离。</p>
<h2 id="Input">Input</h2>
<p>第一行包含一个整数N，表示房间的个数，房间将被编号为1,2,3…N的整数。<br>
　　接下来N-1行每行两个整数a, b，表示房间a与房间b之间有一条走廊相连。<br>
　　接下来一行包含一个整数Q，表示操作次数。<br>
　　接着Q行，每行一个操作，如上文所示。</p>
<h2 id="Output">Output</h2>
<p>对于每一个操作Game，输出一个非负整数，表示最远的两个关灯房间的距离。若只有一个房间是关着灯的，输出0；若所有房间的灯都开着，输出-1。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>8<br>
　1 2<br>
　2 3<br>
　3 4<br>
　3 5<br>
　3 6<br>
　6 7<br>
　6 8<br>
　7<br>
　G<br>
　C 1<br>
　G<br>
　C 2<br>
　G<br>
　C 1<br>
　G</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>4<br>
　3<br>
　3<br>
　4</p>
<h2 id="HINT">HINT</h2>
<p>对于100%的数据， N ≤100000, M ≤500000。</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定一棵树，有0点或者1点，每次查询最远的两个1点之间的距离，需要支持修改0和1。</p>
<h2 id="Solution">Solution</h2>
<p>我们先观察一下数据，由于n&lt;=10^5，所以O(n^2)的做法不可行。我们先考虑如何静态查询，首先我们第一反应想到了树形DP，然后发现这种方法无法优化。考虑一下有什么方法是log级别的呢？我们想到了点分，静态点分的做法就是每次取出重心，然后查询最深的1点的深度即可，要<strong>如何优化</strong>呢？发现如果点分可以动态实现的话就可以AC了。那么现在确定了算法：<strong>动态点分治</strong>。<br>
　　我们先从点分的角度来剖析一下，点分其实就相当于每次找到重心，处理和重心有关的路径，然后把重心割掉，将树分为多个小块，这样将所有路径上的信息存到了重心上，降低规模处理问题，有效降低复杂度。那么动态点分治就相当于用线段树处理序列问题一样，<strong>在分治的框架上加上了对于每个点的信息维护</strong>，对于每个点用堆来维护信息，这样来实现信息的维护与查询。<br>
　　我们分几步来实现：<br>
　　1. 建立“重心树”：我们发现我们在点分中<strong>重心存着路径的信息</strong>，所以我们只要维护跟重心有关的信息就可以了，考虑到分治过程的性质，所以修改了一个点，只会影响到<strong>这个点作为一个重心时以上的重心</strong>（以下称为“父重心”），所以我们先根据找重心的过程建立一棵**“重心树”<strong>，一个点（作为重心时）隔开后得到的若干棵子树中的每一个重心的父重心就是这个点（这个点称为“子重心”），所以可以证明这棵树的深度是log级别的。每次只需要修改这个点在重心树中到根的路径上的点。<br>
　　2. 构建可删堆：由于我们要维护的是</strong>最长链**，思考静态的时候要维护的就是最大值，那么动态时我们就需要一个数据结构来维护这些最大值，支持更改与删除等操作，我们想到了**“堆”<strong>，由于这个堆是需要支持删除操作的，这里讨论一下怎么删除：对于每个</strong>heap堆<strong>再开一个</strong>del堆**，删除一个点的时候将要删除的值加入到del堆里面，然后调取top的时候如果heap堆和del堆的堆顶是一样的同时pop掉，直到不一样的时候的top就是真正的top了，其余操作类似。<br>
　　3. 维护信息：对于每个点开两个堆维护信息，第一个c堆维护**“这个重心的子树（包括这个重心）到父重心的距离”<strong>（求距离用LCA即可），第二个b堆维护</strong>“这个重心隔开后的几个子树中的最大深度（也就是子重心c堆的堆顶）”<strong>，然后全局开一个A堆维护</strong>“每一个b堆的最大值和次大值”<strong>，那么显然答案就是堆A的top。<br>
　　4. 修改操作：这里讨论一下将1点变为0点的操作（0变为1类似），每次修改一个点显然需要直接影响到c堆，将在重心树中到根位置的中的点的c堆中删除掉这个点的值，就会影响到b堆，然后最终影响到A堆。每次修改</strong>先删除掉堆A的top**，然后在<strong>父重心的b堆中删除掉这个点的c堆的top</strong>，删除掉这个c堆的top，然后再在<strong>父重心的b堆</strong>中加入这个点的c堆的top即可，修改的时候再<strong>维护一下A堆</strong>即可，处理一下细节。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,T;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">int</span> next[ONE*<span class="number">2</span>],first[ONE*<span class="number">2</span>],go[ONE*<span class="number">2</span>],tot;</span><br><span class="line"><span class="keyword">int</span> Dep[ONE],Turnoff[ONE],Light;</span><br><span class="line"><span class="keyword">int</span> fat[ONE];</span><br><span class="line"><span class="keyword">int</span> f[ONE][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;</span><br><span class="line">    next[++tot]=first[v];   first[v]=tot;   go[tot]=u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Heap_deal</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    priority_queue &lt;<span class="keyword">int</span>&gt; heap,delet;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;heap.<span class="built_in">push</span>(x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;delet.<span class="built_in">push</span>(x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!delet.<span class="built_in">empty</span>() &amp;&amp; heap.<span class="built_in">top</span>()==delet.<span class="built_in">top</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            heap.<span class="built_in">pop</span>();</span><br><span class="line">            delet.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Top</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!delet.<span class="built_in">empty</span>() &amp;&amp; heap.<span class="built_in">top</span>()==delet.<span class="built_in">top</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            heap.<span class="built_in">pop</span>();</span><br><span class="line">            delet.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> heap.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">SecondTop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> jilu1=<span class="built_in">Top</span>(); <span class="built_in">Pop</span>();</span><br><span class="line">        <span class="keyword">int</span> jilu2=<span class="built_in">Top</span>(); <span class="built_in">add</span>(jilu1);</span><br><span class="line">        <span class="keyword">return</span> jilu2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Size</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> heap.<span class="built_in">size</span>()-delet.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;A,b[ONE],c[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ADD</span><span class="params">(Heap_deal &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.<span class="built_in">Size</span>()&gt;=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> r1=a.<span class="built_in">Top</span>();</span><br><span class="line">        <span class="keyword">int</span> r2=a.<span class="built_in">SecondTop</span>();</span><br><span class="line">        A.<span class="built_in">add</span>( r1+r2 );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DEL</span><span class="params">(Heap_deal &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.<span class="built_in">Size</span>()&gt;=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> r1=a.<span class="built_in">Top</span>();</span><br><span class="line">        <span class="keyword">int</span> r2=a.<span class="built_in">SecondTop</span>();</span><br><span class="line">        A.<span class="built_in">del</span>( r1+r2 );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> PartLCA</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Deal_first</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Dep[u]=Dep[father]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">19</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[u][i+<span class="number">1</span>]=f[f[u][i]][i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(v==father) <span class="keyword">continue</span>;</span><br><span class="line">            f[v][<span class="number">0</span>]=u;</span><br><span class="line">            <span class="built_in">Deal_first</span>(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Dep[x]&lt;Dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Dep[f[x][i]]&gt;=Dep[y]) x=f[x][i];</span><br><span class="line">            <span class="keyword">if</span>(x==y) <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(f[x][i]!=f[y][i])</span><br><span class="line">            &#123;</span><br><span class="line">                x=f[x][i];</span><br><span class="line">                y=f[y][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dist</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Dep[x]+Dep[y]<span class="number">-2</span>*Dep[<span class="built_in">LCA</span>(x,y)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> PointF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> Min,center,vis_center[ONE];</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> size,maxx;</span><br><span class="line">    &#125;S[ONE];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Getsize</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        S[u].size=<span class="number">1</span>;</span><br><span class="line">        S[u].maxx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(v==father || vis_center[v]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">Getsize</span>(v,u);</span><br><span class="line">            S[u].size+=S[v].size;</span><br><span class="line">            S[u].maxx=<span class="built_in">max</span>(S[u].maxx,S[v].size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Getcenter</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father,<span class="keyword">int</span> total)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        S[u].maxx=<span class="built_in">max</span>(S[u].maxx,total-S[u].size);</span><br><span class="line">        <span class="keyword">if</span>(S[u].maxx&lt;Min)</span><br><span class="line">        &#123;</span><br><span class="line">            Min=S[u].maxx;</span><br><span class="line">            center=u;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(v==father || vis_center[v]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">Getcenter</span>(v,u,total);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add_c</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father,<span class="keyword">int</span> center)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        c[center].<span class="built_in">add</span>(PartLCA::<span class="built_in">dist</span>(u,fat[center]));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(v==father || vis_center[v]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">Add_c</span>(v,u,center);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">New_tree</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> Last)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Min=n;</span><br><span class="line">        <span class="built_in">Getsize</span>(u,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">Getcenter</span>(u,<span class="number">0</span>,S[u].size);</span><br><span class="line">        vis_center[center]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        fat[center]=Last;</span><br><span class="line">        <span class="keyword">if</span>(Last!=<span class="number">0</span>) <span class="built_in">Add_c</span>(center,<span class="number">0</span>,center);</span><br><span class="line">        <span class="keyword">if</span>(c[center].<span class="built_in">Size</span>()) b[Last].<span class="built_in">add</span>(c[center].<span class="built_in">Top</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> root=center;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[center];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(vis_center[v]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">New_tree</span>(v,root);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Control</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Turn_off</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;fat[i];i=fat[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">DEL</span>(b[fat[i]]);</span><br><span class="line">            <span class="keyword">if</span>(c[i].<span class="built_in">Size</span>()) b[fat[i]].<span class="built_in">del</span>(c[i].<span class="built_in">Top</span>());</span><br><span class="line"></span><br><span class="line">            c[i].<span class="built_in">del</span>(PartLCA::<span class="built_in">dist</span>(fat[i],x));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(c[i].<span class="built_in">Size</span>()) b[fat[i]].<span class="built_in">add</span>(c[i].<span class="built_in">Top</span>());</span><br><span class="line">            <span class="built_in">ADD</span>(b[fat[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Turn_on</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;fat[i];i=fat[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">DEL</span>(b[fat[i]]);</span><br><span class="line">            <span class="keyword">if</span>(c[i].<span class="built_in">Size</span>()) b[fat[i]].<span class="built_in">del</span>(c[i].<span class="built_in">Top</span>());</span><br><span class="line"></span><br><span class="line">            c[i].<span class="built_in">add</span>(PartLCA::<span class="built_in">dist</span>(fat[i],x));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(c[i].<span class="built_in">Size</span>()) b[fat[i]].<span class="built_in">add</span>(c[i].<span class="built_in">Top</span>());</span><br><span class="line">            <span class="built_in">ADD</span>(b[fat[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    Light=n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) Turnoff[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Add</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PartLCA::<span class="built_in">Deal_first</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    PointF::<span class="built_in">New_tree</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">ADD</span>(b[i]);</span><br><span class="line"></span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch);</span><br><span class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>]==<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Light==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(Light==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,A.<span class="built_in">Top</span>());</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>]==<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=<span class="built_in">get</span>();</span><br><span class="line">            <span class="keyword">if</span>(Turnoff[x])</span><br><span class="line">            &#123;</span><br><span class="line">                Turnoff[x]=<span class="number">0</span>;</span><br><span class="line">                Light--;</span><br><span class="line">                Control::<span class="built_in">Turn_off</span>(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Turnoff[x]=<span class="number">1</span>;</span><br><span class="line">                Light++;</span><br><span class="line">                Control::<span class="built_in">Turn_on</span>(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>分治</category>
      </categories>
      <tags>
        <tag>点分治</tag>
      </tags>
  </entry>
  <entry>
    <title>[区间DP]合唱队</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E5%8C%BA%E9%97%B4DP%5D%E5%90%88%E5%94%B1%E9%98%9F/</url>
    <content><![CDATA[<h1>合唱队</h1>
<p>Time Limit: 4 Sec Memory Limit: 64 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527191308.jpg" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527191310.jpg" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527191312.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4<br>
　1701 1702 1703 1704</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>8</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527191317.jpg" alt="img"></p>
<h2 id="Main-idea">Main idea</h2>
<p>给定一个元素两两不相等的目标序列，每次按照给定方式将一个元素加入到序列当中，问得到目标序列的方案有几种。（加元素的方式：如果加的这个元素比上一个加入的元素小的话则放在队头，否则放在队尾）。</p>
<h2 id="Solution">Solution</h2>
<p>发现题目要求的是方案数，并且没有什么一眼看过去的规律，不可能是找规律了，那么我们想到了区间DP。<br>
　　由于题目给定的加入元素的方式，我们可以清楚的知道新元素要么加在队头要么加在队尾，所以说在<strong>某种程度上这个序列是连续的</strong>（或者说有特殊的性质），并且对于新加入的元素的位置的影响只跟上一次的加入元素有关。<br>
　　根据这个特殊性质我们想到了区间DP，<strong>令f[l][r][0\1]表示区间l~r中现在加入的元素放在队头\队尾</strong>。<br>
　　那么显然，初值即为f[i][i][0]=1或f[i][i][1]=1，并且如果放在队头的话f[l][r][0]应该从f[l+1][r][0\1]推导过来，继续思考发现从f[l+1][r][0]推导过来的条件是a[l]&lt;a[l+1]，从f[l][r][1]推导过来的条件则应该是a[l]&lt;a[r]，f[l][r][1]情况类似。<br>
　　这样跑一遍区间DP最后答案显然就是 <strong>f[1][n][0]+f[1][n][1]</strong> 了。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">19650827</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[ONE];</span><br><span class="line"><span class="keyword">int</span> f[ONE][ONE][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i][i][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l=n;l&gt;=<span class="number">1</span>;l--)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r=l+<span class="number">1</span>;r&lt;=n;r++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[l][r][<span class="number">0</span>]=( f[l][r][<span class="number">0</span>] + f[l+<span class="number">1</span>][r][<span class="number">0</span>] * (a[l]&lt;a[l+<span class="number">1</span>]) ) % MOD;</span><br><span class="line">            f[l][r][<span class="number">0</span>]=( f[l][r][<span class="number">0</span>] + f[l+<span class="number">1</span>][r][<span class="number">1</span>] * (a[l]&lt;a[r]) ) % MOD;</span><br><span class="line">            f[l][r][<span class="number">1</span>]=( f[l][r][<span class="number">1</span>] + f[l][r<span class="number">-1</span>][<span class="number">0</span>] * (a[r]&gt;a[l]) ) % MOD;</span><br><span class="line">            f[l][r][<span class="number">1</span>]=( f[l][r][<span class="number">1</span>] + f[l][r<span class="number">-1</span>][<span class="number">1</span>] * (a[r]&gt;a[r<span class="number">-1</span>]) ) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(f[<span class="number">1</span>][n][<span class="number">0</span>]+f[<span class="number">1</span>][n][<span class="number">1</span>]) % MOD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>区间DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[博弈论][DP]Game</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E5%8D%9A%E5%BC%88%E8%AE%BA%5D%5BDP%5DGame/</url>
    <content><![CDATA[<h1>Game</h1>
<p>Time Limit: 20 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p>从前有个游戏。游戏分为 k 轮。</p>
<p>给定一个由小写英文字母组成的字符串的集合 S，</p>
<p>在每轮游戏开始时，双方会得到一个空的字符串，</p>
<p>然后两人轮流在该串的末尾添加字符，并且需要保证新的字符串是 S 中某个串的前缀，直到有一方不能操作，则不能操作的一方输掉这一轮。</p>
<p>新的一轮由上一轮输的人先手，最后一轮赢的人获得游戏胜利。</p>
<p>假定双方都采取最优策略，求第一轮先手的一方能否获胜。</p>
<h2 id="Input">Input</h2>
<p>输入包含多组数据。</p>
<p>每组数据的第一行包含两个整数 n,k，分别表示字符串的数量和游戏的轮数。</p>
<p>接下来 n 行，每行一个由小写英文字母组成的字符串。</p>
<h2 id="Output">Output</h2>
<p>对于每组数据输出一行，若先手能获胜输出 HY wins!，否则输出 Teacher wins!</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>2 3<br>
　　a<br>
　　b<br>
　　3 1<br>
　　a<br>
　　b<br>
　　c</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>HY wins!<br>
　　HY wins!</p>
<h2 id="HINT">HINT</h2>
<p>1 ≤ n ≤ 1e5,1 ≤ k ≤ 1e9，保证所有字符串长度不超过 1e5，数据组数不超过 10。</p>
<h2 id="Solution">Solution</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528011659.png" alt="img"></p>
<p>显然Trie上这个DP显然就是为了求：一轮中，先手是否<strong>必胜</strong>或者<strong>必败</strong>。显然，一个点如果可以走向<strong>必败点</strong>那么就可以<strong>必胜</strong>。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> u32;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">char</span> s[ONE];</span><br><span class="line"><span class="keyword">int</span> next[ONE][<span class="number">27</span>], total, root = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> f[ONE], g[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> u = root, n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> c = s[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!next[u][c]) next[u][c] = ++total;</span><br><span class="line">        u = next[u][c];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs_f</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!u) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> PD = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= <span class="number">26</span>; c++) <span class="keyword">if</span>(next[u][c]) &#123;PD = <span class="number">0</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(PD) &#123;g[u] = <span class="number">0</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line">    PD = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= <span class="number">26</span>; c++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Dfs_f</span>(next[u][c]);</span><br><span class="line">        <span class="keyword">if</span>(next[u][c] &amp;&amp; f[next[u][c]] == <span class="number">0</span>) PD = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    f[u] = PD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs_g</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!u) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> PD = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= <span class="number">26</span>; c++) <span class="keyword">if</span>(next[u][c]) &#123;PD = <span class="number">0</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(PD) &#123;g[u] = <span class="number">1</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line">    PD = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= <span class="number">26</span>; c++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Dfs_g</span>(next[u][c]);</span><br><span class="line">        <span class="keyword">if</span>(next[u][c] &amp;&amp; g[next[u][c]] == <span class="number">0</span>) PD = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    g[u] = PD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;k) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">        <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(g));</span><br><span class="line">        <span class="built_in">memset</span>(next, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(next));</span><br><span class="line">        total = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">Insert</span>();</span><br><span class="line">        <span class="built_in">Dfs_f</span>(<span class="number">1</span>);    <span class="built_in">Dfs_g</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(f[<span class="number">1</span>] == <span class="number">1</span> &amp;&amp; g[<span class="number">1</span>] == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;HY wins!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(f[<span class="number">1</span>] == <span class="number">1</span>)</span><br><span class="line">                k % <span class="number">2</span> == <span class="number">1</span> ? <span class="built_in">printf</span>(<span class="string">&quot;HY wins!\n&quot;</span>) : <span class="built_in">printf</span>(<span class="string">&quot;Teacher wins!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Teacher wins!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title>[博弈论]石子游戏</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E5%8D%9A%E5%BC%88%E8%AE%BA%5D%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<h1>石子游戏</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194907.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194909.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p>输出T行，表示每组的答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3<br>
　　1<br>
　　1<br>
　　2<br>
　　1<br>
　　0 0<br>
　　3<br>
　　1 2 2<br>
　　4 4 4 4</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>1<br>
　　0<br>
　　6</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194911.png" alt="img"></p>
<h2 id="Solution">Solution</h2>
<p>这显然是一道博弈论的题目。我们发现这是一个树结构，仔细看了一下，发现这显然是一个<strong>阶梯Nim</strong>的模型。</p>
<p>我们将所有和<strong>同n奇偶的值XOR起来就可以得到</strong>SG。我们先判断一下，若SG=0则显然必败，否则必胜。</p>
<p>然后我们开始计算方案，枚举每一个节点，目标显然就是要<strong>让SG=0</strong>。</p>
<p>由于XOR的消去率，根据题意，可以分 2 种情况分别讨论：（根据SG异或值判断是<strong>加入还是取出</strong>。）</p>
<p>1. <strong>从父亲那加入值</strong>，显然就是需要 ( SG^a[这个点] ) - a[这个点的父亲] &lt;= a[这个点]，这样才可以通过加入若干个值使得SG=0；<br>
　　2. <strong>把值给儿子</strong>，显然需要 (SG^a[这个点]) &lt;= a[这个点]，这样才可以通过拿走若干的值使得SG=0。</p>
<p>然后我们讨论一下<strong>是否为叶子节点</strong>：</p>
<p>1. <strong>非叶节点</strong>，若从父亲那加入值只有1的贡献，把值给儿子（由于有两个儿子）所以贡献为2；<br>
　　2. <strong>叶子节点</strong>，从父亲那加入值或者彻底删去都显然只有1的贡献。</p>
<p>这样就可以求出方案数了。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">10001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">214783640</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> x,num;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">17</span>][<span class="number">65537</span>];</span><br><span class="line"><span class="keyword">int</span> SG,Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    SG=Ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>));j++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i][j]=<span class="built_in">get</span>();</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==n%<span class="number">2</span>)    SG ^= a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(!SG) &#123;<span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>));j++)</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==n%<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i!=n)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>( (SG^a[i][j]) &lt;= a[i][j]) Ans+=<span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">if</span>( (SG^a[i][j]) &gt; a[i][j] &amp;&amp; (SG^a[i][j]) - a[i<span class="number">-1</span>][(j<span class="number">-1</span>)/<span class="number">2</span>+<span class="number">1</span>] &lt;= a[i][j]) Ans+=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i==n)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>( (SG^a[i][j]) &lt;= a[i][j] ) Ans++;</span><br><span class="line">                    <span class="keyword">if</span>( (SG^a[i][j]) &gt; a[i][j] &amp;&amp; (SG^a[i][j]) - a[i<span class="number">-1</span>][(j<span class="number">-1</span>)/<span class="number">2</span>+<span class="number">1</span>] &lt;= a[i][j] ) Ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">        <span class="built_in">Solve</span>(),<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title>[堆]K优解</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E5%A0%86%5DK%E4%BC%98%E8%A7%A3/</url>
    <content><![CDATA[<h1>K优解</h1>
<p>Time Limit: 20 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p>给定n个行数，每行m个。在每行中选出一个数来，求出前 k 小的异或和。</p>
<h2 id="Input">Input</h2>
<p>第一行 3 个正整数 n，m，k。</p>
<p>接下来 n 行，每行 m 个非负整数，第 i 行第 j 个为权值a[i][j]。</p>
<h2 id="Output">Output</h2>
<p>一行一个数表示答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3 2 2<br>
　　11 21<br>
　　9 25<br>
　　17 19</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>2</p>
<h2 id="HINT">HINT</h2>
<p>n*m&lt;=300000，k&lt;=300000，保证m^n&gt;=k，a[i][j]均不超过10^9</p>
<h2 id="Solution">Solution</h2>
<p>先对于每个 i，将<strong>每行的 a[i][1]~a[i][m] 从小到大排序</strong>，再将<strong>行</strong>按照其<strong>元素差值</strong>为<strong>多关键字排序</strong>（共m-1个关键字）。</p>
<p>那么我们知道，最小的方案肯定是所有行<strong>都取第一个</strong>。由于其有一些特殊，我们先抛开这个方案。<br>
　　我们知道，次小的方案是**(2,1,1,1…)<strong>，把这个</strong>状态<strong>加入堆，由</strong>较优方案<strong>扩展</strong>较劣方案**，对于每一个状态，我们记录其<strong>扩展到第几行</strong>，以及<strong>取第几个元素</strong>。</p>
<p>在<strong>已经得到前 k 优的方案</strong>时，当前所有方案中<strong>还未扩展的</strong>最好的方案<strong>x</strong>（其最后扩展位置为 i），就是<strong>第 k+1 优</strong>。</p>
<p>从方案x，我们可以扩展出几个<strong>较劣解</strong>：</p>
<p>1、<strong>x 的第 i 个元素不取m</strong>：将 i 行取的元素增加1（扩展位置为 <strong>i</strong>）</p>
<p>2、<strong>i + 1 &lt;= n</strong>：将 i+1 行取为2（扩展位置为 <strong>i+1</strong>）</p>
<p>3、<strong>x 的第 i 个元素取为2</strong> 且 <strong>i + 1 &lt;= n</strong>：将 i 行取为1，i+1 行取为2（扩展位置为 <strong>i+1</strong>）</p>
<p>由此，每个解都可由唯一的优于它的解扩展得来。</p>
<p>用个<strong>堆</strong>维护一下，每次取出最小的即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">300005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; A[ONE];</span><br><span class="line"><span class="keyword">int</span> id[ONE];</span><br><span class="line">s64 Ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    s64 val;</span><br><span class="line">    <span class="keyword">int</span> pt, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(power a) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.val &lt; val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue &lt;power&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[a][i + <span class="number">1</span>] - A[a][i] &lt; A[b][i + <span class="number">1</span>] - A[b][i]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(A[a][i + <span class="number">1</span>] - A[a][i] &gt; A[b][i + <span class="number">1</span>] - A[b][i]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();    m = <span class="built_in">get</span>();    k = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        A[i].<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            A[i].<span class="built_in">push_back</span>(<span class="built_in">get</span>());</span><br><span class="line">        <span class="built_in">sort</span>(A[i].<span class="built_in">begin</span>(), A[i].<span class="built_in">end</span>());</span><br><span class="line">        id[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(id + <span class="number">1</span>, id + n + <span class="number">1</span>, cmp);</span><br><span class="line"></span><br><span class="line">    s64 res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) res += A[i][<span class="number">1</span>];</span><br><span class="line">    Ans = res;</span><br><span class="line"></span><br><span class="line">    q.<span class="built_in">push</span>((power)&#123;res - A[id[<span class="number">1</span>]][<span class="number">1</span>] + A[id[<span class="number">1</span>]][<span class="number">2</span>], <span class="number">1</span>, <span class="number">2</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        power u = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        Ans ^= u.val;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(u.id + <span class="number">1</span> &lt;= m)</span><br><span class="line">            q.<span class="built_in">push</span>((power)&#123;u.val - A[id[u.pt]][u.id] + A[id[u.pt]][u.id + <span class="number">1</span>], u.pt, u.id + <span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">if</span>(u.pt + <span class="number">1</span> &lt;= n &amp;&amp; <span class="number">2</span> &lt;= m)</span><br><span class="line">            q.<span class="built_in">push</span>((power)&#123;u.val - A[id[u.pt + <span class="number">1</span>]][<span class="number">1</span>] + A[id[u.pt + <span class="number">1</span>]][<span class="number">2</span>], u.pt + <span class="number">1</span>, <span class="number">2</span>&#125;);</span><br><span class="line">        <span class="keyword">if</span>(u.pt + <span class="number">1</span> &lt;= n &amp;&amp; u.id == <span class="number">2</span>)</span><br><span class="line">            q.<span class="built_in">push</span>((power)&#123;u.val - A[id[u.pt]][<span class="number">2</span>] + A[id[u.pt]][<span class="number">1</span>] - A[id[u.pt + <span class="number">1</span>]][<span class="number">1</span>] + A[id[u.pt + <span class="number">1</span>]][<span class="number">2</span>], u.pt + <span class="number">1</span>, <span class="number">2</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>堆</tag>
      </tags>
  </entry>
  <entry>
    <title>[差分约束]糖果</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E5%B7%AE%E5%88%86%E7%BA%A6%E6%9D%9F%5D%E7%B3%96%E6%9E%9C/</url>
    <content><![CDATA[<h1>糖果</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>幼儿园里有N个小朋友，lxhgww老师现在想要给这些小朋友们分配糖果，要求每个小朋友都要分到糖果。但是小朋友们也有嫉妒心，总是会提出一些要求，比如小明不希望小红分到的糖果比他的多，于是在分配糖果的时候，lxhgww需要满足小朋友们的K个要求。幼儿园的糖果总是有限的，lxhgww想知道他至少需要准备多少个糖果，才能使得每个小朋友都能够分到糖果，并且满足小朋友们所有的要求。</p>
<h2 id="Input">Input</h2>
<p>输入的第一行是两个整数N，K。<br>
　　接下来K行，表示这些点需要满足的关系，每行3个数字，X，A，B。<br>
　　如果X=1， 表示第A个小朋友分到的糖果必须和第B个小朋友分到的糖果一样多；<br>
　　如果X=2， 表示第A个小朋友分到的糖果必须少于第B个小朋友分到的糖果；<br>
　　如果X=3， 表示第A个小朋友分到的糖果必须不少于第B个小朋友分到的糖果；<br>
　　如果X=4， 表示第A个小朋友分到的糖果必须多于第B个小朋友分到的糖果；<br>
　　如果X=5， 表示第A个小朋友分到的糖果必须不多于第B个小朋友分到的糖果；</p>
<h2 id="Output">Output</h2>
<p>输出一行，表示lxhgww老师至少需要准备的糖果数，如果不能满足小朋友们的所有要求，就输出-1。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 7<br>
　1 1 2<br>
　2 3 2<br>
　4 4 1<br>
　3 4 5<br>
　5 4 5<br>
　2 3 5<br>
　4 5 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>11</p>
<h2 id="HINT">HINT</h2>
<p>对于30%的数据，保证 N&lt;=100<br>
　　对于100%的数据，保证 N&lt;=100000<br>
　　对于所有的数据，保证 K&lt;=100000，1&lt;=X&lt;=5，1&lt;=A, B&lt;=N</p>
<h2 id="Main-idea">Main idea</h2>
<p>有若干个小朋友分糖果，要求每个人至少分到一颗糖，给出若干个数之间大小或者等于的限制，求最少需要多少个糖果可以满足条件。</p>
<h2 id="Solution">Solution</h2>
<p>发现有若干限制大小，那么我们想到了差分约束系统，在两点之间连一条带权边，根据<strong>限制条件决定边权</strong>。因为要满足所有情况，我们先将所有点入队，跑一遍<strong>最长路</strong>即可求出答案。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">200001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> PD,x,y;</span><br><span class="line"><span class="keyword">int</span> next[ONE],first[ONE],go[ONE],tot;</span><br><span class="line"><span class="keyword">int</span> w[ONE];</span><br><span class="line"><span class="keyword">int</span> dist[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">100001</span>],q[<span class="number">1000001</span>],tou,wei;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Ans;</span><br><span class="line"><span class="keyword">int</span> Take_ring[<span class="number">100001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];    first[u]=tot;    go[tot]=v;    w[tot]=z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PD_same</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(tou&lt;wei)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[++tou];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(dist[v]&lt;dist[u]+w[e])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(++Take_ring[v]&gt;=n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                dist[v]=dist[u]+w[e];</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v]=<span class="number">1</span>;</span><br><span class="line">                    q[++wei]=v;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        PD=<span class="built_in">get</span>();    x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">if</span>(PD==<span class="number">1</span>) <span class="built_in">Add</span>(x,y,<span class="number">0</span>),<span class="built_in">Add</span>(y,x,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(PD==<span class="number">2</span>) <span class="built_in">Add</span>(x,y,<span class="number">1</span>),<span class="built_in">PD_same</span>(x,y);</span><br><span class="line">        <span class="keyword">if</span>(PD==<span class="number">3</span>) <span class="built_in">Add</span>(y,x,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(PD==<span class="number">4</span>) <span class="built_in">Add</span>(y,x,<span class="number">1</span>),<span class="built_in">PD_same</span>(x,y);</span><br><span class="line">        <span class="keyword">if</span>(PD==<span class="number">5</span>) <span class="built_in">Add</span>(x,y,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dist[i]=vis[i]=<span class="number">1</span>;</span><br><span class="line">        q[++wei]=i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">Spfa</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        Ans+=(<span class="keyword">long</span> <span class="keyword">long</span>)dist[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,Ans);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>差分约束</tag>
      </tags>
  </entry>
  <entry>
    <title>[堆][线段树]Young Maids</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E5%A0%86%5D%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5DYoung%20Maids/</url>
    <content><![CDATA[<h1>Young Maids</h1>
<p>Time Limit: 50 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p>给定一个排列，每次选出相邻的两个放在队头，要求字典序最小。</p>
<h2 id="Input">Input</h2>
<p>第一行一个整数n，第二行n个数表示这个排列。</p>
<h2 id="Output">Output</h2>
<p>n个数表示答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>8<br>
　　4 6 3 2 8 5 7 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3 1 2 7 4 6 8 5</p>
<h2 id="HINT">HINT</h2>
<p>n%2=0，2 &lt;= n &lt;= 2e5</p>
<h2 id="Solution">Solution</h2>
<p>倒着考虑。<br>
　　我们维护一个小根堆，堆里面存**[l, r, val]<strong>，表示在</strong>区间[l, r]<strong>中选择两个元素，第一个元素</strong>A<strong>的权值为</strong>val**（保证合法），<strong>以val为第一关键字</strong>。</p>
<p>那么显然，我们每次<strong>选出堆顶进行操作</strong>。</p>
<p>显然，若我们<strong>取走了A,B（pos[A] &lt; pos[B]）</strong>，<strong>[l,r]<strong>就被拆成了 <strong>[l,A-1], [A+1,B-1], [B+1,r]</strong>，我们</strong>要保证每一个区间长度都是偶数</strong>。<br>
　　那么只要有，<strong>pos[A]%2 == pos[l]%2，pos[B]%2 == pos[r]%2</strong>。<br>
　　又由于<strong>我们每次减少两个数</strong>，所以这样<strong>显然可以保证 pos[B]-pos[A]+1 % 2 == 0</strong>。</p>
<p>现在问题就是怎么求出<strong>A、B具体是那两个数</strong>，显然写个线段树维护一下 某段区间内<strong>奇数/偶数位置的min_val和所在的pos</strong>即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>, Q = <span class="number">1</span>; <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &lt; <span class="number">48</span> || c &gt; <span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) Q = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res = c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &gt;= <span class="number">48</span> &amp;&amp; c &lt;= <span class="number">57</span>)</span><br><span class="line">        res = res * <span class="number">10</span> + c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">return</span> res * Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id, val;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(point a, point b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a.val != b.val) <span class="keyword">return</span> a.val &lt; b.val;</span><br><span class="line">        <span class="keyword">return</span> a.id &lt; b.id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">point res;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Seg</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">power</span> &#123;</span>point odd, eve;&#125; Node[ONE * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node[i].odd.val = Node[i].eve.val = INF;</span><br><span class="line">        <span class="keyword">if</span>(l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(l &amp; <span class="number">1</span>) Node[i].odd = (point)&#123;l, a[l]&#125;;</span><br><span class="line">            <span class="keyword">else</span> Node[i].eve = (point)&#123;l, a[l]&#125;;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">Build</span>(i &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">Build</span>(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        Node[i].odd = <span class="built_in">min</span>(Node[i &lt;&lt; <span class="number">1</span>].odd, Node[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].odd);</span><br><span class="line">        Node[i].eve = <span class="built_in">min</span>(Node[i &lt;&lt; <span class="number">1</span>].eve, Node[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].eve);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> opt)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(opt == <span class="number">1</span>) res = <span class="built_in">min</span>(res, Node[i].odd);</span><br><span class="line">            <span class="keyword">else</span> res = <span class="built_in">min</span> (res, Node[i].eve);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= mid) <span class="built_in">Query</span>(i &lt;&lt; <span class="number">1</span>, l, mid, L, R, opt);</span><br><span class="line">        <span class="keyword">if</span>(mid + <span class="number">1</span> &lt;= R) <span class="built_in">Query</span>(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, opt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, val;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(power a) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a.val != val) <span class="keyword">return</span> a.val &lt; val;</span><br><span class="line">        <span class="keyword">return</span> a.l &lt; l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue &lt;power&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function">point <span class="title">Get</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = (point)&#123;n + <span class="number">1</span>, INF&#125;;</span><br><span class="line">    Seg::<span class="built_in">Query</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r, opt);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span>;</span><br><span class="line">    q.<span class="built_in">push</span>((power)&#123;l, r, <span class="built_in">Get</span>(l, r, l % <span class="number">2</span>).val&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = <span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    Seg::<span class="built_in">Build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="built_in">Add</span>(<span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        power u = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        point A = <span class="built_in">Get</span>(u.l, u.r - <span class="number">1</span>, u.l % <span class="number">2</span>);</span><br><span class="line">        point B = <span class="built_in">Get</span>(A.id + <span class="number">1</span>, u.r, u.r % <span class="number">2</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d &quot;</span>, A.val, B.val);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Add</span>(u.l, A.id - <span class="number">1</span>), <span class="built_in">Add</span>(A.id + <span class="number">1</span>, B.id - <span class="number">1</span>), <span class="built_in">Add</span>(B.id + <span class="number">1</span>, u.r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>堆</tag>
      </tags>
  </entry>
  <entry>
    <title>[折半搜索]哈密顿回路</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%8A%98%E5%8D%8A%E6%90%9C%E7%B4%A2%5D%E5%93%88%E5%AF%86%E9%A1%BF%E5%9B%9E%E8%B7%AF/</url>
    <content><![CDATA[<h1>哈密顿回路</h1>
<p>Time Limit: 15 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>给定一张 n个点的边带权的无向完全图，求图中是否存在一条长为L的哈密顿回路。<br>
哈密顿回路：从起点出发经过所有点恰好一次并最终回到起点(起点头尾经过两次)的路径。</p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527200226.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527200228.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4 10<br>
　　0 3 2 1<br>
　　3 0 1 3<br>
　　2 1 0 2<br>
　　1 3 2 0</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>possible</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527200201.png" alt="img"></p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527200203.png" alt="img"></p>
<h2 id="Main-idea">Main idea</h2>
<p>判断能否找到一条长度为L的哈密顿回路。</p>
<h2 id="Solution">Solution</h2>
<p>我们直接使用Meet in middle，记录<strong>M[t][opt]表示以 t 结尾，到的点为 opt 的长度集合</strong>。然后暴力合并即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">230</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Base = <span class="number">10007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> lenA,lenB;</span><br><span class="line">s64 E[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="keyword">int</span> Num[ONE],vis[ONE],a[ONE];</span><br><span class="line">s64 Ans,L;</span><br><span class="line"></span><br><span class="line">vector &lt;s64&gt; M[<span class="number">15</span>][<span class="number">1</span>&lt;&lt;<span class="number">15</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> opt,<span class="keyword">int</span> T,s64 Val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( Val &gt; L) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>( T==lenA || T==lenB ) M[u][opt].<span class="built_in">push_back</span>(Val);</span><br><span class="line">    <span class="keyword">if</span>( T==<span class="built_in">max</span>(lenA,lenB) ) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>; v&lt;=n; v++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now = opt | (<span class="number">1</span>&lt;&lt;v<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(now != opt) <span class="built_in">Dfs</span>(v,now,T+<span class="number">1</span>,Val+E[u][v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    cin&gt;&gt;L;</span><br><span class="line">    lenA = (n+<span class="number">2</span>)/<span class="number">2</span>;        lenB = (n+<span class="number">2</span>)-lenA;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;E[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Dfs</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> All = (<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=All;u++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=n;t++)</span><br><span class="line">            <span class="built_in">sort</span>(M[t][u].<span class="built_in">begin</span>(),M[t][u].<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=All;u++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=n;t++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(! (u&amp;(<span class="number">1</span>&lt;&lt;t<span class="number">-1</span>)) ) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> v = All^u |<span class="number">1</span> | (<span class="number">1</span>&lt;&lt;t<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">int</span> A_size = M[t][u].<span class="built_in">size</span>(), B_size = M[t][v].<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A_size;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                s64 A = M[t][u][i];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(B_size &gt;= <span class="number">0</span> &amp;&amp; M[t][v][B_size] + A &gt; L) B_size--;</span><br><span class="line">                <span class="keyword">if</span>(B_size &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(M[t][v][B_size] + A == L)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;possible&quot;</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>折半搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>[数论]Akai的数学作业</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%95%B0%E8%AE%BA%5DAkai%E7%9A%84%E6%95%B0%E5%AD%A6%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<h1>Akai的数学作业</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>这里是广袤无垠的宇宙这里是一泻千里的银河，这里是独一无二的太阳系，这里是蔚蓝色的地球<br>
　　这里，就是这里，是富饶的中国大陆！<br>
　　这里是神奇的河北大地，这里是美丽的唐山，这里是神话般的唐山一中，这里是Akai曾经的教室<br>
　　黑板上还留有当年Akai做过的数学作业，其实也并不是什么很困难的题目:<br>
　　“<br>
　　　　给出一个一元n次方程：<br>
　　　　a0 + a1x + a    2   x2 +…+ anxn= 0<br>
　　　　求此方程的所有有理数解。<br>
　　”<br>
　　Akai至今还深刻记得当年熬夜奋战求解的时光，他甚至还能记得浪费了多少草稿纸。<br>
　　但是却怎么也想不起来最后的答案是多少了，你能帮助他么？</p>
<h2 id="Input">Input</h2>
<p>第一行一个整数n。第二行n+1个整数，分别代表a0 到 an</p>
<h2 id="Output">Output</h2>
<p>第一行输出一个整数t，表示有理数解的个数</p>
<p>接下来t行，每行表示一个解</p>
<p>解以分数的形式输出，要求分子和分母互质，且分母必须是正整数特殊的，如果这个解是一个整数，那么直接把这个数输出</p>
<p>等价的解只需要输出一次</p>
<p>所有解按照从小到大的顺序输出</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3<br>
　-24 14 29 6</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3<br>
　-4<br>
　-3/2<br>
　2/3</p>
<h2 id="HINT">HINT</h2>
<p>对于30%的数据，n &lt;= 10<br>
　　对于100%的数据，n &lt;= 100，|a i| &lt;= 2*10^7，an ≠ 0</p>
<h2 id="Main-idea">Main idea</h2>
<p>给出一个一元n次方程：A0+A1<em>x+A2</em>x^2+…+An*x^n，求出这个方程的所有有理数解。</p>
<h2 id="Solution">Solution</h2>
<p>这必然是一道数论题。首先我们发现了题目的一个非常重要的特征：求的是<strong>有理数解</strong>。<br>
　　立马想到了分解因式，因为要的是有理数解，所以原方程肯定可以表示成：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527192247.png" alt="img"></p>
<p>x就是q/p。</p>
<p>然后再来思考一下。我们先从最简单的情况开始处理，也就是A0≠0,An≠0的情况。<br>
　　显然可以知道<strong>p一定是An分出来的，q一定是A0分出来的</strong>，那么一定有<strong>p是An的约数，q是A0的约数</strong>，那么这时候所有的情况就应该是</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527192252.png" alt="img"></p>
<p>仔细推一下式子，发现了一个规律：<strong>几个约数相乘的情况所表达出的集合和不考虑相乘情况的集合是一样的</strong>！那么处理就简单了很多。</p>
<p>由于可能有前几项系数=0的情况，所以我们从A0的想法出发，找到第一个系数非0的项将这一项的约数存下来（如果不是A0的话则在答案中加一个0），然后从后往前找找到第一个非0的存下它的约数。然后O(约数个数)^2枚举任意两种情况的q/p放到原式里面判断（答案有可能是负数所以还要检查一下-q/p可不可行）然后在检查的时候发现了一个问题，数字要么精度误差过大要么就是爆出int范围了，我们想到了<strong>通分</strong>，分子分母同乘上p^n，避免了精度问题。</p>
<p>以n=3的举个例子：将原式</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527192255.png" alt="img"></p>
<p>转化为</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527192259.png" alt="img"></p>
<p>然后我们就可以不管分母了，用这样的方法解决了精度问题。那么怎么解决爆int范围的问题呢？我们发现，在每次操作的时候都<strong>对一个质数取模的话错解的几率不是非常大</strong>，那么我们就可以大胆地取模几个质数来判断，如果不放心可以多取模几个。</p>
<p>BearChild发现了一个神奇的质数：<strong>50033</strong>（如果使用这个质数的话是不需要用其余几个质数判断的）。</p>
<p>这样进行累加和是否为0的判断，可行的话将每个答案存下来，然后<strong>sort</strong>一遍输出即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">501</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">50033</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> A[ONE];</span><br><span class="line"><span class="keyword">int</span> divisor[ONE][<span class="number">3</span>],num[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> p[ONE];</span><br><span class="line"><span class="keyword">int</span> q[ONE];</span><br><span class="line"><span class="keyword">int</span> Repeat[ONE];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>)a.l/a.r &lt; (<span class="keyword">double</span>)b.l/b.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r=a%b;</span><br><span class="line">    <span class="keyword">while</span>(r)</span><br><span class="line">    &#123;</span><br><span class="line">        a=b;</span><br><span class="line">        b=r;</span><br><span class="line">        r=a%b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> PD)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!(x%i)) divisor[++num[PD]][PD]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p[<span class="number">0</span>]=q[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p[i]=(<span class="keyword">long</span> <span class="keyword">long</span>)p[i<span class="number">-1</span>]*y % MOD;    q[i]=(<span class="keyword">long</span> <span class="keyword">long</span>)q[i<span class="number">-1</span>]*x % MOD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res=(res+(<span class="keyword">long</span> <span class="keyword">long</span>)p[n-i]*q[i]*A[i]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!res) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) A[i]=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">if</span>(A[<span class="number">0</span>]==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a[++cnt].l=<span class="number">0</span>; a[cnt].r=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Deal</span>(<span class="built_in">abs</span>(A[i]),<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Deal</span>(<span class="built_in">abs</span>(A[i]),<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num[<span class="number">1</span>];i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=num[<span class="number">2</span>];j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x=divisor[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> y=divisor[j][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">gcd</span>(x,y)!=<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Check</span>(x,y))</span><br><span class="line">            &#123;</span><br><span class="line">                a[++cnt].l=x;</span><br><span class="line">                a[cnt].r=y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Check</span>(-x,y))</span><br><span class="line">            &#123;</span><br><span class="line">                a[++cnt].l=-x;</span><br><span class="line">                a[cnt].r=y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+cnt+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i].r==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a[i].l);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d/%d\n&quot;</span>,a[i].l,a[i].r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>[拉格朗日插值]XLkxc</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC%5DXLkxc/</url>
    <content><![CDATA[<h1>XLkxc</h1>
<p>Time Limit: 20 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>给定 k,a,n,d,p<br>
　　f(i)=1^k+2^k+3^k+…+i^k<br>
　　g(x)=f(1)+f(2)+f(3)+…+f(x)<br>
　　求(g(a)+g(a+d)+g(a+2d)+…+g(a+nd))mod p</p>
<h2 id="Input">Input</h2>
<p>第一行数据组数，(保证小于6)<br>
　　以下每行四个整数 k,a,n,d</p>
<h2 id="Output">Output</h2>
<p>每行一个结果。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5<br>
　1 1 1 1<br>
　1 1 1 1<br>
　1 1 1 1<br>
　1 1 1 1<br>
　1 1 1 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>5<br>
　5<br>
　5<br>
　5<br>
　5</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=k&lt;=123<br>
　　0&lt;=a,n,d&lt;=123456789<br>
　　p==1234567891</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定k,a,n,d，求<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527181439.jpg" alt="img"></p>
<h2 id="Solution">Solution</h2>
<p>我们可以令<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527181506.jpg" alt="img"></p>
<p>然后推一波式子，再令<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527181507.jpg" alt="img"></p>
<p>那么显然有<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527181510.jpg" alt="img"></p>
<p>然后我们通过若干次差分，发现g在<strong>差分k+3次时全为0</strong>，那么<strong>g就是一个k+2次多项式</strong>；f在<strong>差分k+5次时全为0</strong>，那么<strong>f就是一个k+4次多项式</strong>。</p>
<p>我们通过拉格朗日插值法插g，得到k+5个f的值，然后再<strong>插值f</strong>就可以得到答案了。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">1001</span>;</span><br><span class="line"><span class="keyword">const</span> s64 MOD=<span class="number">1234567891</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> k,a,n,d;</span><br><span class="line"><span class="keyword">int</span> g[ONE],f[ONE];</span><br><span class="line"><span class="keyword">int</span> inv[ONE],U[ONE],Jc[ONE];</span><br><span class="line"><span class="keyword">int</span> pre[ONE],suc[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quickpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=(s64)res*a%MOD;</span><br><span class="line">        a=(s64)a*a%MOD;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">P</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((k-i)&amp;<span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>+MOD;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> First</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Deal_jc</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Jc[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) Jc[i]=(s64)Jc[i<span class="number">-1</span>]*i%MOD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Deal_inv</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        inv[<span class="number">0</span>]=<span class="number">1</span>;    inv[k]=<span class="built_in">Quickpow</span>(Jc[k],MOD<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--) inv[i]=(s64)inv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Final</span><span class="params">(<span class="keyword">int</span> f[],<span class="keyword">int</span> n,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pre[<span class="number">0</span>]=<span class="number">1</span>;    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) pre[i]=(s64)pre[i<span class="number">-1</span>] * (n-i+MOD) % MOD;</span><br><span class="line">    suc[<span class="number">0</span>]=<span class="number">1</span>;    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) suc[i]=(s64)suc[i<span class="number">-1</span>] * (s64)(n-k+i<span class="number">-1</span>+MOD) % MOD;</span><br><span class="line"></span><br><span class="line">    s64 Ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> Up=   (s64) pre[i<span class="number">-1</span>]*suc[k-i] % MOD * f[i] % MOD;</span><br><span class="line">        <span class="keyword">int</span> Down= (s64) inv[i<span class="number">-1</span>]*inv[k-i] % MOD;</span><br><span class="line"></span><br><span class="line">        Ans=(s64)(Ans + (s64) Up*Down % MOD * <span class="built_in">P</span> (k,i) %MOD) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    First::<span class="built_in">Deal_jc</span>(<span class="number">150</span>);    First::<span class="built_in">Deal_inv</span>(<span class="number">150</span>);</span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        k=<span class="built_in">get</span>();    a=<span class="built_in">get</span>();    n=<span class="built_in">get</span>();    d=<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k+<span class="number">3</span>;i++) g[i]=<span class="built_in">Quickpow</span>(i,k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k+<span class="number">3</span>;i++) g[i]=((s64)g[i<span class="number">-1</span>]+g[i])%MOD;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k+<span class="number">3</span>;i++) g[i]=((s64)g[i<span class="number">-1</span>]+g[i])%MOD;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k+<span class="number">5</span>;i++)</span><br><span class="line">            f[i]=((s64)f[i<span class="number">-1</span>]+<span class="built_in">Final</span>(g,(a+(s64)i*d)%MOD,k+<span class="number">3</span>)) % MOD;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">Final</span>(f,n,k+<span class="number">5</span>)%MOD);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>拉格朗日插值</tag>
      </tags>
  </entry>
  <entry>
    <title>[数论]ZS and The Birthday Paradox</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%95%B0%E8%AE%BA%5DZS%20and%20The%20Birthday%20Paradox/</url>
    <content><![CDATA[<h1>ZS and The Birthday Paradox</h1>
<p>Time Limit: 20 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012559.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012602.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012603.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4 3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>23 128</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012605.png" alt="img"></p>
<h2 id="Solution">Solution</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012607.png" alt="img"></p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e6</span> + <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">s64 n, k;</span><br><span class="line">s64 num = <span class="number">0</span>;</span><br><span class="line">s64 Fz = <span class="number">1</span>, Fm = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> );</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">Quickpow</span><span class="params">(s64 a, s64 b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s64 res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = res * a % MOD;</span><br><span class="line">        a = a * a % MOD;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"></span><br><span class="line">    num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>((<span class="number">1LL</span> &lt;&lt; num) &lt; k) num++;</span><br><span class="line">    <span class="keyword">if</span>(num &gt; n) &#123;<span class="built_in">printf</span>(<span class="string">&quot;1 1&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">    num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(s64 i = k - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">        num += (i &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    s64 a = <span class="built_in">Quickpow</span>(<span class="number">2</span>, n);</span><br><span class="line"></span><br><span class="line">    Fz = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Fz = (s64)Fz * (a - i + MOD) % MOD;</span><br><span class="line">        <span class="keyword">if</span>(Fz == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Fm = <span class="built_in">Quickpow</span>(a, k - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> inv = <span class="built_in">Quickpow</span>(<span class="built_in">Quickpow</span>(<span class="number">2</span>, num), MOD - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    Fz = (s64)Fz * inv % MOD, Fm = (s64)Fm * inv % MOD;</span><br><span class="line">    Fz = (Fm - Fz + MOD) % MOD;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;Fz&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;Fm&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>[数论][矩阵乘法]Floor it</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%95%B0%E8%AE%BA%5D%5B%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%5DFloor%20it/</url>
    <content><![CDATA[<h1>Floor it</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>令 x = (sqrt(5) + 1) / 2，求 floor(x^n) % p。</p>
<h2 id="Input">Input</h2>
<p>一行两个整数 n, p。</p>
<h2 id="Output">Output</h2>
<p>一行表示答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 97</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>11</p>
<h2 id="HINT">HINT</h2>
<p>n &lt;= 1e18, p &lt;= 998244353。</p>
<h2 id="Solution">Solution</h2>
<p>首先这必然是一道数学题。我们令 <strong>x = (1 + sqrt(5)) / 2, y = (1 - sqrt(5)) / 2</strong> 。</p>
<p>那么我们发现， <strong>x 和 y</strong> 分别是  <strong>x^2 - x - 1 = 0</strong> 的两个实数根。那么有 <strong>x^2 = x + 1</strong>。</p>
<p><strong>我们这样操作：</strong></p>
<p><strong>x^2 = x + 1</strong><br>
　　　　<strong>x^2 * x^(n-2) = x * x^(n-2) + x^(n-2)</strong><br>
　　　　<strong>x^n = x^(n-1) + x^(n-2)</strong></p>
<p>令 <strong>An</strong> 表示 <strong>x^n</strong>，<strong>Bn</strong> 表示 <strong>y^n</strong>。那么显然有 <strong>An = An-1 + An-2，Bn = Bn-1 + Bn-2</strong>。</p>
<p>这时候 <strong>(An + Bn) = (An-1 + Bn-2) + (An-2 + Bn-2)</strong>。</p>
<p>我们<strong>代入n = 1，(An + Bn) = 1；n = 2，(An + Bn) = 3</strong>。所以我们可以用矩阵乘法求出 <strong>An + Bn</strong>。</p>
<p>因为答案要求<strong>An</strong>，那么这时候我们只要<strong>消掉 Bn</strong> 即可。显然 <strong>y ≈ -0.618</strong>，那么 <strong>y^n 取值范围</strong>在 <strong>(-1, 0)∪(0, 1)</strong>。</p>
<p>显然<strong>当 n 为偶数时， floor(x^n) = floor(x^n + y^n) - 1</strong>；<strong>n 为奇数时，floor(x^n) = floor(x^n + y^n)</strong>。</p>
<p>这样我们就得到了答案QWQ。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">20005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">70000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">2</span>;</span><br><span class="line">s64 N, MOD;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">friend</span> power <span class="keyword">operator</span> *(power a, power b)</span><br><span class="line">    &#123;</span><br><span class="line">        power c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                c.val[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">                    c.val[i][j] = (c.val[i][j] + (s64)a.val[i][k] * b.val[k][j] % MOD) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Base, A;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;MOD;</span><br><span class="line">    <span class="keyword">if</span>(N == <span class="number">0</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> PD = - (N % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    Base.val[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>, Base.val[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    Base.val[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>, Base.val[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    A.val[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>, A.val[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    N -= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(N &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(N &amp; <span class="number">1</span>) A = A * Base;</span><br><span class="line">        Base = Base * Base;</span><br><span class="line">        N &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, A.val[<span class="number">1</span>][<span class="number">2</span>] + PD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>矩阵乘法</tag>
      </tags>
  </entry>
  <entry>
    <title>[数论]tty的方程math</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%95%B0%E8%AE%BA%5Dtty%E7%9A%84%E6%96%B9%E7%A8%8Bmath/</url>
    <content><![CDATA[<h1>tty的方程math</h1>
<p>Time Limit: 50 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>给定n、m、k、p。</p>
<p>a+b+c=n, a^2+b^2+c^2=m, a^3+b^3+c^3=k。</p>
<p>求a^p+b^p+c^p。</p>
<h2 id="Input">Input</h2>
<p>输入n、m、k、p</p>
<h2 id="Output">Output</h2>
<p>以A/B形式表示答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 7 11 4</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>27/1</p>
<h2 id="HINT">HINT</h2>
<p>0&lt;=n,m,k &lt;=20，0&lt;=p&lt;=10</p>
<h2 id="Solution">Solution</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528014857.png" alt="img"></p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>, Q = <span class="number">1</span>; <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &lt; <span class="number">48</span> || c &gt; <span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) Q = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res = c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &gt;= <span class="number">48</span> &amp;&amp; c &lt;= <span class="number">57</span>)</span><br><span class="line">        res = res * <span class="number">10</span> + c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">return</span> res * Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">gcd</span><span class="params">(s64 a, s64 b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(s64 r = a % b) &#123;a = b; b = r;&#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, p;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    s64 fz, fm;</span><br><span class="line">&#125;Ans[ONE], A, B, C, now;</span><br><span class="line"></span><br><span class="line"><span class="function">power <span class="title">Deal</span><span class="params">(power a, power b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s64 fz = a.fz * b.fm + b.fz * a.fm, fm = a.fm * b.fm;</span><br><span class="line">    <span class="keyword">int</span> p1 = fz &gt; <span class="number">0</span>, p2 = fm &gt; <span class="number">0</span>;</span><br><span class="line">    fz = <span class="built_in">abs</span>(fz), fm = <span class="built_in">abs</span>(fm);</span><br><span class="line">    s64 r = <span class="built_in">gcd</span>(fz, fm);</span><br><span class="line">    <span class="keyword">return</span> (power)&#123;p1 * fz / r, p2 * fm / r&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; p;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="number">0</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;3&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    Ans[<span class="number">1</span>] = (power)&#123;n, <span class="number">1</span>&#125;;</span><br><span class="line">    Ans[<span class="number">2</span>] = (power)&#123;m, <span class="number">1</span>&#125;;</span><br><span class="line">    Ans[<span class="number">3</span>] = (power)&#123;k, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">    A = (power)&#123;n, <span class="number">1</span>&#125;;</span><br><span class="line">    B = (power)&#123;n * n - m, <span class="number">2</span>&#125;;</span><br><span class="line">    C = (power)&#123;<span class="number">2</span> * k + <span class="number">3</span> * n * (n * n - m) - <span class="number">2</span> * n * n * n, <span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= p; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        power now = (power)&#123;A.fz * Ans[i<span class="number">-1</span>].fz, A.fm * Ans[i<span class="number">-1</span>].fm&#125;;</span><br><span class="line">        now = <span class="built_in">Deal</span>(now, (power)&#123;C.fz * Ans[i<span class="number">-3</span>].fz, C.fm * Ans[i<span class="number">-3</span>].fm&#125;);</span><br><span class="line">        now = <span class="built_in">Deal</span>(now, (power)&#123;-B.fz * Ans[i<span class="number">-2</span>].fz, B.fm * Ans[i<span class="number">-2</span>].fm&#125;);</span><br><span class="line"></span><br><span class="line">        Ans[i] = now;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d/%d&quot;</span>, Ans[p].fz, Ans[p].fm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>[数论]不等式</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%95%B0%E8%AE%BA%5D%E4%B8%8D%E7%AD%89%E5%BC%8F/</url>
    <content><![CDATA[<h1>不等式</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>小z热衷于数学。<br>
　今天数学课的内容是解不等式：L&lt;=S<em>x&lt;=R 。小z心想这也太简单了，不禁陷入了深深的思考：假如已知L,R,S,M ，满足L&lt;=(S</em>x) mod M&lt;=R 的最小正整数x该怎么求呢？</p>
<h2 id="Input">Input</h2>
<p>第一行包含一个整数T，表示数据组数，接下来是T行，每行为四个正整数M, S, L, R 。</p>
<h2 id="Output">Output</h2>
<p>对于每组数据，输出满足要求的x值，若不存在，输出-1 。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>1<br>
　　5 4 2 3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>2</p>
<h2 id="HINT">HINT</h2>
<p>30%的数据中保证有解并且答案小于等于10^6；<br>
　另外20%的数据中保证L=R；<br>
　100%的数据中T&lt;=100，M, S, L, R&lt;=10^9。</p>
<h2 id="Solution">Solution</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528010302.png" alt="img"></p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">300005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">s64 M, S, L, R;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">Dfs</span><span class="params">(s64 M, s64 S, s64 L, s64 R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &gt; R || M &lt; L) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    S %= M;</span><br><span class="line">    <span class="keyword">int</span> res = (L - <span class="number">1</span>)/S + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(res * S &lt;= R) <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l = (-R % S + S) % S,  r = (-L % S + S) % S;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="built_in">Dfs</span>(S, M, l , r); <span class="keyword">if</span>(y == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x = (R + M * y) / S;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= S * x - M * y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        M = <span class="built_in">get</span>();    S = <span class="built_in">get</span>();</span><br><span class="line">        L = <span class="built_in">get</span>();    R = <span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">Dfs</span>(M, S, L, <span class="built_in">min</span>(R, M<span class="number">-1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>[整体二分]Dynamic Rankings</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%95%B4%E4%BD%93%E4%BA%8C%E5%88%86%5DDynamic%20Rankings/</url>
    <content><![CDATA[<h1>Dynamic Rankings</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>给定一个含有n个数的序列a[1],a[2],a[3]……a[n]，程序必须回答这样的询问：对于给定的i,j,k，在a[i],a[i+1],a[i+2]……a[j]中第k小的数是多少(1≤k≤j-i+1)，并且，你可以改变一些a[i]的值，改变后，程序还能针对改变后的a继续回答上面的问题。你需要编一个这样的程序，从输入文件中读入序列a，然后读入一系列的指令，包括询问指令和修改指令。对于每一个询问指令，你必须输出正确的回答。</p>
<h2 id="Input">Input</h2>
<p>第一行有两个正整数<br>
　　分别表示序列的长度和指令的个数。第二行有n个数，表示a[1],a[2]……a[n]。<br>
　　接下来的m行描述每条指令，每行的格式是下面两种格式中的一种。<br>
　　Q i j k （i,j,k是数字，1≤i≤j≤n, 1≤k≤j-i+1）表示询问指令，询问a[i]，a[i+1]……a[j]中第k小的数。<br>
　　C i t (1≤i≤n，0≤t≤10^9)表示把a[i]改变成为t。</p>
<h2 id="Output">Output</h2>
<p>对于每一次询问，你都需要输出他的答案，每一个输出占单独的一行。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 3<br>
　3 2 1 4 7<br>
　Q 1 4 3<br>
　C 2 6<br>
　Q 2 5 3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3<br>
　6</p>
<h2 id="HINT">HINT</h2>
<p>m,n≤10000 , 0≤ai≤1e9。</p>
<h2 id="Main-idea">Main idea</h2>
<p>询问区间中第k小的数是多少，需要支持单点修改点的权值。</p>
<h2 id="Solution">Solution</h2>
<p>我们看到这道题，发现对于一个询问应该是可以二分查找答案的，那么我们从整体二分的角度来思考。</p>
<p>我们发现，如果没有修改的话，显然很简单，直接整体二分<strong>将所有询问一起操作</strong>即可。</p>
<p>但是我们有操作，那应该怎么办呢？</p>
<p>我们对于每一次修改，记录一下原来的值，简单来说，就是对于每一次操作，记录一下若<strong>opt=1</strong>，则<strong>表示这个点在这个状态的值</strong>；若<strong>opt=3</strong>，则<strong>表示这是一个询问</strong>，</p>
<p>我们对于<strong>修改</strong>来说，新增一个<strong>opt=2</strong>，<strong>表示在修改之前的值</strong>。也就是说，我们在执行一个区间的操作时，如果发现一个opt=2，那么之前一定有一个一样的值的opt为1，并且其已经对答案造成影响，现在那个元素已经被修改了，就要相应地减去它之前对答案的影响，这样就完成了修改。</p>
<p>然后我们整体二分权值，像<strong>静态查询kth</strong>那样修改一下即可。思路一气呵成 (≧▽≦)/</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">30005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> x,y,k;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> cnt,Num;</span><br><span class="line"><span class="keyword">int</span> a[ONE],record[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> opt,cnt;</span><br><span class="line">    <span class="keyword">int</span> l,r,k;</span><br><span class="line">    <span class="keyword">int</span> pos,value;</span><br><span class="line">    <span class="keyword">int</span> cur;</span><br><span class="line">&#125;oper[ONE],qL[ONE],qR[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Bit</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> value;</span><br><span class="line">    &#125;Node[ONE];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i&amp;-i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> R,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=R;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">            Node[i].value+=x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=R;i&gt;=<span class="number">1</span>;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line">            res+=Node[i].value;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(L==R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">            <span class="keyword">if</span>(oper[i].opt==<span class="number">3</span>)</span><br><span class="line">                Ans[oper[i].cnt] = L;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> M=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(oper[i].opt==<span class="number">1</span> &amp;&amp; oper[i].value&lt;=M)</span><br><span class="line">            Bit::<span class="built_in">Update</span>(oper[i].pos,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(oper[i].opt==<span class="number">2</span> &amp;&amp; oper[i].value&lt;=M)</span><br><span class="line">            Bit::<span class="built_in">Update</span>(oper[i].pos,<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(oper[i].opt==<span class="number">3</span>)</span><br><span class="line">            record[i]=Bit::<span class="built_in">Query</span>(oper[i].r) - Bit::<span class="built_in">Query</span>(oper[i].l<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(oper[i].opt==<span class="number">1</span> &amp;&amp; oper[i].value&lt;=M)</span><br><span class="line">            Bit::<span class="built_in">Update</span>(oper[i].pos,<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(oper[i].opt==<span class="number">2</span> &amp;&amp; oper[i].value&lt;=M)</span><br><span class="line">            Bit::<span class="built_in">Update</span>(oper[i].pos,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l_num=<span class="number">0</span>,r_num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(oper[i].opt!=<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(oper[i].value &lt;= M)</span><br><span class="line">                qL[++l_num]=oper[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                qR[++r_num]=oper[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(oper[i].cur + record[i] &gt;= oper[i].k)</span><br><span class="line">                qL[++l_num]=oper[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                qR[++r_num]=oper[i];</span><br><span class="line">                qR[r_num].cur+=record[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t=l;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l_num;i++) oper[t++]=qL[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r_num;i++) oper[t++]=qR[i];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Solve</span>(l,l+l_num<span class="number">-1</span>,L,M);</span><br><span class="line">    <span class="built_in">Solve</span>(l+l_num,r,M+<span class="number">1</span>,R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=<span class="built_in">get</span>();</span><br><span class="line">        oper[++cnt].opt=<span class="number">1</span>;    oper[cnt].pos=i;    oper[cnt].value=a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch);</span><br><span class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>]==<span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();    k=<span class="built_in">get</span>();</span><br><span class="line">            oper[++cnt].opt=<span class="number">3</span>;    oper[cnt].l=x;    oper[cnt].r=y;    oper[cnt].k=k;</span><br><span class="line">            oper[cnt].cnt=++Num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">            oper[++cnt].opt=<span class="number">2</span>;    oper[cnt].pos=x;    oper[cnt].value=a[x];</span><br><span class="line">            oper[++cnt].opt=<span class="number">1</span>;    oper[cnt].pos=x;    oper[cnt].value=y;</span><br><span class="line">            a[x]=y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Solve</span>(<span class="number">1</span>,cnt,<span class="number">0</span>,INF);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Num;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>分治</category>
      </categories>
      <tags>
        <tag>整体二分</tag>
      </tags>
  </entry>
  <entry>
    <title>[数论]排列计数</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%95%B0%E8%AE%BA%5D%E6%8E%92%E5%88%97%E8%AE%A1%E6%95%B0/</url>
    <content><![CDATA[<h1>排列计数</h1>
<p>Time Limit: 60 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>求有多少种长度为 n 的序列 A，满足以下条件：</p>
<p>1 ~ n 这 n 个数在序列中各出现了一次</p>
<p>若第 i 个数 A[i] 的值为 i，则称 i 是稳定的。序列恰好有 m 个数是稳定的</p>
<p>满足条件的序列可能很多，序列数对 10^9+7 取模。</p>
<h2 id="Input">Input</h2>
<p>第一行一个数 T，表示有 T 组数据。</p>
<p>接下来 T 行，每行两个整数 n、m。</p>
<h2 id="Output">Output</h2>
<p>输出 T 行，每行一个数，表示求出的序列数</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5<br>
　1 0<br>
　1 1<br>
　5 2<br>
　100 50<br>
　10000 5000</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>0<br>
　1<br>
　20<br>
　578028887<br>
　60695423</p>
<h2 id="HINT">HINT</h2>
<p>T=500000，n≤1000000，m≤1000000</p>
<h2 id="Main-idea">Main idea</h2>
<p>求所有排列中恰好有m个 a[i]=i 的个数。</p>
<h2 id="Solution">Solution</h2>
<p>直接运用组合数和错排公式上一波即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,n,m;</span><br><span class="line"><span class="keyword">int</span> fac[ONE], inv[ONE], D[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quickpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = (s64)res * a % MOD;</span><br><span class="line">        a = (s64)a * a % MOD;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_first</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Limit = ONE<span class="number">-3</span>;</span><br><span class="line"></span><br><span class="line">    fac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=Limit; i++)</span><br><span class="line">        fac[i] = (s64)fac[i<span class="number">-1</span>] * i % MOD;</span><br><span class="line"></span><br><span class="line">    inv[Limit] = <span class="built_in">Quickpow</span>(fac[Limit], MOD<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=Limit<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">        inv[i] = (s64)inv[i+<span class="number">1</span>] * (i+<span class="number">1</span>) % MOD;</span><br><span class="line"></span><br><span class="line">    D[<span class="number">0</span>] = D[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>; i&lt;=Limit; i++)</span><br><span class="line">        D[i] = (s64)(i<span class="number">-1</span>) * (D[i<span class="number">-1</span>] + D[i<span class="number">-2</span>]) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (s64)fac[n] * inv[m] % MOD * inv[n-m] % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (s64)<span class="built_in">C</span>(n,m) * D[n-m] % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Deal_first</span>();</span><br><span class="line">    T = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        n = <span class="built_in">get</span>();  m = <span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">Query</span>(n,m));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>[整体二分]Meteors</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%95%B4%E4%BD%93%E4%BA%8C%E5%88%86%5DMeteors/</url>
    <content><![CDATA[<h1>Meteors</h1>
<p>Time Limit: 60 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>这个星球经常会下陨石雨。BIU已经预测了接下来K场陨石雨的情况。<br>
　　BIU的第i个成员国希望能够收集Pi单位的陨石样本。你的任务是判断对于每个国家，它需要在第几次陨石雨之后，才能收集足够的陨石。</p>
<h2 id="Input">Input</h2>
<p>第一行是两个数N,M。<br>
　　第二行有M个数，第i个数Oi表示第i段轨道上有第Oi个国家的太空站。<br>
　　第三行有N个数，第i个数Pi表示第i个国家希望收集的陨石数量。<br>
　　第四行有一个数K，表示BIU预测了接下来的K场陨石雨。<br>
　　接下来K行，每行有三个数Li,Ri,Ai，表示第K场陨石雨的发生地点在从Li顺时针到Ri的区间中（如果Li&lt;=Ri，就是Li,Li+1,…,Ri，否则就是Ri,Ri+1,…,m-1,m,1,…,Li），向区间中的每个太空站提供Ai单位的陨石样本。</p>
<h2 id="Output">Output</h2>
<p>输出N行。第i行的数Wi表示第i个国家在第Wi波陨石雨之后能够收集到足够的陨石样本。如果到第K波结束后仍然收集不到，输出NIE。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3 5<br>
　1 3 2 1 3<br>
　10 5 7<br>
　3<br>
　4 2 4<br>
　1 3 1<br>
　3 5 2</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3<br>
　NIE<br>
　1</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=n,m,k&lt;=3*10^5 , 1&lt;=Ai,Pi&lt;=10^9</p>
<h2 id="Main-idea">Main idea</h2>
<p>每个国家有一个需要价值，一个国家可以控制多个点，定义国家已经获得的价值为每个控制点上的价值和，每次操作可以将一段区间上每个点都加上一个价值，问每个国家在第几个操作时达到了需要价值，若达不到则输出NIE。</p>
<h2 id="Solution">Solution</h2>
<p>我们先从二分层面去考虑，对于一个点来说，可以二分答案来求解，那么我们就可以利用整体二分。</p>
<p>整体二分，就是我们<strong>将所有的询问一起来做</strong>，然后<strong>二分操作</strong>区间L,R，执行L,MID的部分，</p>
<p>然后<strong>判断询问</strong>是否可行，如果可行，将这个询问放到左边区间，否则加上左边的价值再把这个询问放到右区间。然后继续递归操作区间。</p>
<p>对于这道题来说，由于一个国家可以控制多个点，我们用链表来存，然后用Bit来判断是否可行。</p>
<p>这样就解决了这道题(≧▽≦)/。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">300005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> next[ONE],first[ONE],go[ONE],tot;</span><br><span class="line"><span class="keyword">int</span> Ans[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> need;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125;a[ONE],qL[ONE],qR[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">opera</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125;oper[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Bit</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        s64 value;</span><br><span class="line">    &#125;Node[ONE];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i&amp;-i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> R,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=R;i&lt;=m;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">            Node[i].value+=x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">s64 <span class="title">Query</span><span class="params">(<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        s64 res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=R;i&gt;=<span class="number">1</span>;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line">            res+=Node[i].value;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        Bit::<span class="built_in">Update</span>(l,val); Bit::<span class="built_in">Update</span>(m+<span class="number">1</span>,-val);</span><br><span class="line">        Bit::<span class="built_in">Update</span>(<span class="number">1</span>,val); Bit::<span class="built_in">Update</span>(r+<span class="number">1</span>,-val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Bit::<span class="built_in">Update</span>(l,val); Bit::<span class="built_in">Update</span>(r+<span class="number">1</span>,-val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span><span class="comment">//l,r 询问;L,R 操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(L==R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">            Ans[a[i].id] = L;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> M=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=L;i&lt;=M;i++)</span><br><span class="line">        <span class="built_in">Update</span>(oper[i].l, oper[i].r, oper[i].val);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l_num=<span class="number">0</span>,r_num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++) <span class="comment">//判断询问在哪个区间</span></span><br><span class="line">    &#123;</span><br><span class="line">        s64 sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[a[i].id];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=Bit::<span class="built_in">Query</span>(go[e]);</span><br><span class="line">            <span class="keyword">if</span>(sum&gt;=a[i].need) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sum&gt;=a[i].need)</span><br><span class="line">        &#123;</span><br><span class="line">            qL[++l_num]=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            qR[++r_num]=a[i];</span><br><span class="line">            qR[r_num].need-=sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t=l;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l_num;i++) a[t++]=qL[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r_num;i++) a[t++]=qR[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=L;i&lt;=M;i++)</span><br><span class="line">        <span class="built_in">Update</span>(oper[i].l, oper[i].r, -oper[i].val);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Solve</span>(l,l+l_num<span class="number">-1</span>,L,M);</span><br><span class="line">    <span class="built_in">Solve</span>(l+l_num,r,M+<span class="number">1</span>,R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) &#123;x=<span class="built_in">get</span>(); <span class="built_in">Add</span>(x,i);&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i].need=<span class="built_in">get</span>();</span><br><span class="line">        a[i].id=i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    k=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        oper[i].l=<span class="built_in">get</span>();    oper[i].r=<span class="built_in">get</span>();    oper[i].val=<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Solve</span>(<span class="number">1</span>,n,<span class="number">1</span>,k+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Ans[i] &gt; k) <span class="built_in">printf</span>(<span class="string">&quot;NIE&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>分治</category>
      </categories>
      <tags>
        <tag>整体二分</tag>
      </tags>
  </entry>
  <entry>
    <title>[整体二分][树状数组]矩阵乘法</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%95%B4%E4%BD%93%E4%BA%8C%E5%88%86%5D%5B%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%5D%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/</url>
    <content><![CDATA[<h1>矩阵乘法</h1>
<p>Time Limit: 20 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>给你一个N*N的矩阵，不用算矩阵乘法，但是每次询问一个子矩形的第K小数。</p>
<h2 id="Input">Input</h2>
<p>第一行两个数N,Q，表示矩阵大小和询问组数；<br>
　接下来N行N列一共N*N个数，表示这个矩阵；<br>
　再接下来Q行每行5个数描述一个询问：x1,y1,x2,y2,k表示找到以(x1,y1)为左上角、以(x2,y2)为右下角的子矩形中的第K小数。</p>
<h2 id="Output">Output</h2>
<p>对于每组询问输出第K小的数。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>2 2<br>
　2 1<br>
　3 4<br>
　1 2 1 2 1<br>
　1 1 2 2 3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>1<br>
　3</p>
<h2 id="HINT">HINT</h2>
<p>矩阵中数字是10^9以内的非负整数；<br>
　20%的数据：N&lt;=100,Q&lt;=1000；<br>
　　40%的数据：N&lt;=300,Q&lt;=10000；<br>
　60%的数据：N&lt;=400,Q&lt;=30000；<br>
　100%的数据：N&lt;=500,Q&lt;=60000。</p>
<h2 id="Solution">Solution</h2>
<p>由于只有询问，我们可以方便地使用整体二分来求解。</p>
<p>先将原矩阵<strong>以序列形式存下来</strong>，然后按照权值排序，接着我们<strong>二分序列上的位置</strong>来查询，在[l,mid]这一段序列上的点+1，然后像静态查Kth那么判断即可。（用二维树状数组加入权值）。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> QUE = <span class="number">60005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,Q;</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="keyword">int</span> C[ONE][ONE];</span><br><span class="line"><span class="keyword">int</span> Ans[QUE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,val;</span><br><span class="line">&#125;a[ONE*ONE];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> point &amp;a,<span class="keyword">const</span> point &amp;b)</span> </span>&#123;<span class="keyword">return</span> a.val &lt; b.val;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x1,y1,x2,y2;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125;oper[QUE],qL[QUE],qR[QUE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Bit</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x&amp;-x;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=y;j&lt;=n;j+=<span class="built_in">lowbit</span>(j))</span><br><span class="line">                C[i][j] += z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&gt;=<span class="number">1</span>;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=y;j&gt;=<span class="number">1</span>;j-=<span class="built_in">lowbit</span>(j))</span><br><span class="line">                res += C[i][j];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Getans</span><span class="params">(power a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Query</span>(a.x2,a.y2) - <span class="built_in">Query</span>(a.x1<span class="number">-1</span>,a.y2) - <span class="built_in">Query</span>(a.x2,a.y1<span class="number">-1</span>) + <span class="built_in">Query</span>(a.x1<span class="number">-1</span>,a.y1<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span><span class="comment">//位置 询问</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&gt;R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=L;i&lt;=R;i++)</span><br><span class="line">            Ans[oper[i].id] = a[l].val;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=mid;i++)</span><br><span class="line">        Bit::<span class="built_in">Add</span>(a[i].x,a[i].y,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l_num=<span class="number">0</span>,r_num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=L;i&lt;=R;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> record = Bit::<span class="built_in">Getans</span>(oper[i]);</span><br><span class="line">        <span class="keyword">if</span>(record &gt;= oper[i].k)</span><br><span class="line">            qL[++l_num] = oper[i];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            oper[i].k-=record, qR[++r_num] = oper[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=mid;i++)</span><br><span class="line">        Bit::<span class="built_in">Add</span>(a[i].x,a[i].y,<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t=L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l_num;i++) oper[t++] = qL[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r_num;i++) oper[t++] = qR[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Solve</span>(l,mid,L,L+l_num<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">Solve</span>(mid+<span class="number">1</span>,r,L+l_num,R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    Q=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[++tot].val = <span class="built_in">get</span>();</span><br><span class="line">            a[tot].x = i;    a[tot].y = j;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+tot+<span class="number">1</span>,cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        oper[i].x1=<span class="built_in">get</span>();    oper[i].y1=<span class="built_in">get</span>();    oper[i].x2=<span class="built_in">get</span>();    oper[i].y2=<span class="built_in">get</span>();</span><br><span class="line">        oper[i].k=<span class="built_in">get</span>();    oper[i].id=i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Solve</span>(<span class="number">1</span>,tot,<span class="number">1</span>,Q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Q;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>分治</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
        <tag>整体二分</tag>
      </tags>
  </entry>
  <entry>
    <title>[斜率优化][DP]序列分割</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96%5D%5BDP%5D%E5%BA%8F%E5%88%97%E5%88%86%E5%89%B2/</url>
    <content><![CDATA[<h1>序列分割</h1>
<p>Time Limit: 40 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>小H最近迷上了一个分隔序列的游戏。在这个游戏里，小H需要将一个长度为n的非负整数序列分割成k+1个非空的子序列。为了得到k+1个子序列，小H需要重复k次以下的步骤：</p>
<p>1.小H首先选择一个长度超过1的序列（一开始小H只有一个长度为n的序列——也就是一开始得到的整个序列）；</p>
<p>2.选择一个位置，并通过这个位置将这个序列分割成连续的两个非空的新序列。</p>
<p>每次进行上述步骤之后，小H将会得到一定的分数。这个分数为两个新序列中元素和的乘积。小H希望选择一种最佳的分割方式，使得k轮之后，小H的总得分最大。</p>
<h2 id="Input">Input</h2>
<p>输入第一行包含两个整数n，k（k+1≤n）。<br>
　　第二行包含n个非负整数a1，a2，…，an（0≤ai≤10^4），表示一开始小H得到的序列。</p>
<h2 id="Output">Output</h2>
<p>输出第一行包含一个整数，为小H可以得到的最大分数。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>7 3<br>
　4 1 3 4 0 2 3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>108</p>
<p>在样例中，小H可以通过如下3轮操作得到108分：<br>
　　1．开始小H有一个序列(4，1，3，4，0，2，3)。<br>
　　小H选择在第1个数之后的位置将序列分成两部分，并得到4×(1+3+4+0+2+3)=52分。<br>
　　2．这一轮开始时小H有两个序列：(4)，(1，3，4，0，2，3)。<br>
　　小H选择在第3个数字之后的位置将第二个序列分成两部分，并得到(1+3)×(4+0+2+3)=36分。<br>
　　3．这一轮开始时小H有三个序列：(4)，(1，3)，(4，0，2，3)。<br>
　　小H选择在第5个数字之后的位置将第三个序列分成两部分，并得到(4+0)×(2+3)=20分。<br>
　　经过上述三轮操作，小H将会得到四个子序列：(4)，(1，3)，(4，0)，(2，3)并总共得到52+36+20=108分。</p>
<h2 id="HINT">HINT</h2>
<p>2≤n≤100000 , 1≤k≤min(n -1，200)。</p>
<h2 id="Main-idea">Main idea</h2>
<p>将一个序列分成k段，定义权值和为两两段的累加和的乘积，求出最大权值和。</p>
<h2 id="Source">Source</h2>
<p>首先发现n&lt;=10^5,k&lt;=200，我们先想这应该是一道<strong>DP</strong>，然后发现了原题中的操作（每次分为两段然后再分）经过分配是可以转化为题意这样的，这样的话答案就<strong>与分的顺序无关</strong>了。<br>
　　一开始我想到了一个O(n^3*k)的做法，每次分割出i~j段，然后发现由于与顺序无关这个性质，可以转化成每次分割第i个位置， 那么我们得到了状态：f[a][i]表示分割第a次，第a次在第i个位置分的答案。<br>
　　然后立马想到了转移方程：f[a][i]=max(f[a][i],f[a-1][j]+s[j]*(s[i]-s[j])) (其中s[i]表示1~i的和)，这样的话效率是O(n^2*k)，然后我们考虑如何优化。大胆猜测可以使用斜率优化。<br>
　　首先假定k&lt;j，且j的决策更优，那么使得条件成立的式子(以下f[j]表示f[a-1][j])：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527191651.jpg" alt="img"></p>
<p><strong>令x[i]表示f[a-1][i]-s[i]*s[i]，y[i]表示s[i]</strong>，该式子即可表示为：<strong>(x[j]-x[k]) / (y[j]-y[k]) &gt; -s[i]</strong>。<br>
　　然后斜率优化维护一下上凸壳(取max值)即可，效率即为O(n*k)。<br>
　　注意一下内存限制128MB，所以我们将第一维a滚动即可，由于用的是斜率优化维护凸壳，所以我们一开始需要将a[i]=0的去掉否则答案会偏小。</p>
<p><strong>PS：</strong><br>
　　<strong>总结一下斜率优化推式子的精髓：假定k&lt;j且j的决策更优，然后列出不等式，去掉只与i有关的项（这时候可能存在s[j]*s[i]这种项式），然后将不等式移项，使得不等号右边仅有与s[i]有关的项（即与j,k无关），然后根据最大值或者最小值决定维护上凸壳或下凸壳。</strong></p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">100001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,n,m;</span><br><span class="line"><span class="keyword">int</span> a[ONE];</span><br><span class="line"><span class="keyword">int</span> tou,wei;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s[ONE];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[<span class="number">3</span>][ONE];</span><br><span class="line"><span class="keyword">int</span> q[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">slope</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> j,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> xj,xk,yj,yk;</span><br><span class="line">    xj=f[!a][j]-s[j]*s[j];  xk=f[!a][k]-s[k]*s[k];</span><br><span class="line">    yj=s[j];    yk=s[k];</span><br><span class="line">    <span class="keyword">return</span> (xj-xk)/(yj-yk);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> begin=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">if</span>(a[i]) a[++n]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) s[i]=s[i<span class="number">-1</span>]+a[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> A=<span class="number">0</span>,B=<span class="number">1</span>,jishu=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">1</span>;a&lt;=m;a++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(A,B);</span><br><span class="line">        tou=wei=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(tou&lt;wei &amp;&amp; <span class="built_in">slope</span>(B,q[wei],q[wei<span class="number">-1</span>]) &lt; <span class="built_in">slope</span>(B,i,q[wei])) wei--;</span><br><span class="line">            q[++wei]=i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(tou&lt;wei &amp;&amp; <span class="built_in">slope</span>(B,q[tou+<span class="number">1</span>],q[tou]) &gt; -s[i]) tou++;</span><br><span class="line"></span><br><span class="line">            f[B][i]=<span class="built_in">max</span>(f[B][i],f[A][q[tou]] + s[i]*s[q[tou]] - s[q[tou]]*s[q[tou]] );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,f[B][n]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
      </tags>
  </entry>
  <entry>
    <title>[斯坦纳树]修路</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%96%AF%E5%9D%A6%E7%BA%B3%E6%A0%91%5D%E4%BF%AE%E8%B7%AF/</url>
    <content><![CDATA[<h1>修路</h1>
<p>Time Limit: 20 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>村子间的小路年久失修，为了保障村子之间的往来，法珞决定带领大家修路。对于边带权的无向图 G = (V, E)，</p>
<p>请选择一些边，使得1 &lt;= i &lt;= d， i号节点和 n - i + 1 号节点可以通过选中的边连通，最小化选中的所有边</p>
<p>的权值和。</p>
<h2 id="Input">Input</h2>
<p>第一行两个整数 n, m，表示图的点数和边数。接下来的 m行，每行三个整数 ui, vi, wi，表示有一条 ui 与 vi</p>
<p>之间，权值为 wi 的无向边。</p>
<h2 id="Output">Output</h2>
<p>仅一行一个整数表示答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 5 2<br>
　　1 3 4<br>
　　3 5 2<br>
　　2 3 1<br>
　　3 4 4<br>
　　2 4 3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>9</p>
<h2 id="HINT">HINT</h2>
<p>1 &lt;= d &lt;= 4</p>
<p>2d &lt;= n &lt;= 10^4</p>
<p>0 &lt;= m &lt;= 10^4</p>
<p>1 &lt;= ui, vi &lt;= n</p>
<p>1 &lt;= wi &lt;= 1000</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定若干对点，选择若干边，询问满足每对点都连通的最小代价。</p>
<h2 id="Solution">Solution</h2>
<p>发现 d 非常小，所以我们显然可以使用斯坦纳树来求解。</p>
<p>斯坦纳树是用来解决这种问题的：<strong>给定若干关键点，求使得关键点连通的最小代价</strong>。</p>
<p>我们可以<strong>令 f[i][opt] 表示以 i 为根时，关键点连通态为opt的最小代价</strong>。（以二进制表示是否连通）</p>
<p>然后我们就可以用两种方法来更新 f[i][opt]：</p>
<p><strong>1. 设定集合x,y，x∪y=opt且x∩y=∅，那么我们显然就可以将用x,y合并来更新opt，</strong><br>
　　<strong>2. 若 f[j][opt] 中opt = f[i][opt]中opt，那么我们就可以以连边方式合并两个集合，这种合并方式显然可以用最短路实现，使得答案更优。</strong></p>
<p>然后我们就可以求出所有状态的f[i][opt]，接下来再利用DP，求解。</p>
<p>定义<strong>Ans[opt]表示连通态为opt时最小代价</strong>，如果对应点同时连通或不连通则可以更新，枚举所有情况就可以求出答案了。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">20005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,d;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">int</span> a[ONE];</span><br><span class="line"><span class="keyword">int</span> next[ONE],first[ONE],go[ONE],w[ONE],tot;</span><br><span class="line"><span class="keyword">int</span> All,f[ONE/<span class="number">2</span>][<span class="number">258</span>],INF;</span><br><span class="line"><span class="keyword">int</span> q[<span class="number">10000005</span>],vis[ONE],tou,wei;</span><br><span class="line"><span class="keyword">int</span> Ans[<span class="number">258</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];    first[u]=tot;    go[tot]=v;    w[tot]=z;</span><br><span class="line">    next[++tot]=first[v];    first[v]=tot;    go[tot]=u;    w[tot]=z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Steiner</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">63</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));    INF=f[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=d;i++) f[i][<span class="number">1</span>&lt;&lt;num] = <span class="number">0</span>,    num++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n-d+<span class="number">1</span>;i&lt;=n;i++) f[i][<span class="number">1</span>&lt;&lt;num] = <span class="number">0</span>, num++;</span><br><span class="line">        All = (<span class="number">1</span>&lt;&lt;num) - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Spfa</span><span class="params">(<span class="keyword">int</span> opt)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(tou&lt;wei)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u=q[++tou];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> v=go[e];</span><br><span class="line">                <span class="keyword">if</span>(f[v][opt] &gt; f[u][opt] + w[e])</span><br><span class="line">                &#123;</span><br><span class="line">                    f[v][opt] = f[u][opt] + w[e];</span><br><span class="line">                    <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                    &#123;</span><br><span class="line">                        vis[v] = <span class="number">1</span>;</span><br><span class="line">                        q[++wei] = v;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            vis[u] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> opt=<span class="number">0</span>;opt&lt;=All;opt++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> sub=opt;sub;sub=(sub<span class="number">-1</span>) &amp; opt)</span><br><span class="line">                    f[i][opt] = <span class="built_in">min</span>(f[i][opt],f[i][sub]+f[i][opt^sub]);</span><br><span class="line">                <span class="keyword">if</span>(f[i][opt] != INF)</span><br><span class="line">                &#123;</span><br><span class="line">                    q[++wei] = i;</span><br><span class="line">                    vis[i] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Spfa</span>(opt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=(d&lt;&lt;<span class="number">1</span>)<span class="number">-1</span>; i&lt;d; i++,j--)</span><br><span class="line">        <span class="keyword">if</span>( ((opt &amp; (<span class="number">1</span>&lt;&lt;i))== <span class="number">0</span>) !=  ((opt &amp; (<span class="number">1</span>&lt;&lt;j))==<span class="number">0</span>) )</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();    d=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();    z=<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Add</span>(x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Steiner::<span class="built_in">pre</span>();</span><br><span class="line">    Steiner::<span class="built_in">Deal</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(Ans,<span class="number">63</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(Ans));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> opt=<span class="number">0</span>;opt&lt;=All;opt++)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Check</span>(opt))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">                Ans[opt] = <span class="built_in">min</span>(Ans[opt], f[i][opt]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> opt=<span class="number">0</span>;opt&lt;=All;opt++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> sub=opt;sub;sub=(sub<span class="number">-1</span>) &amp; opt)</span><br><span class="line">            Ans[opt] = <span class="built_in">min</span>(Ans[opt], Ans[sub]+Ans[opt^sub]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(Ans[All] == INF) <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans[All]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>斯坦纳树</tag>
      </tags>
  </entry>
  <entry>
    <title>[整体二分]网络管理</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%95%B4%E4%BD%93%E4%BA%8C%E5%88%86%5D%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1>网络管理</h1>
<p>Time Limit: 50 Sec Memory Limit: 162 MB</p>
<h2 id="Description">Description</h2>
<p>M公司是一个非常庞大的跨国公司，在许多国家都设有它的下属分支机构或部门。<br>
　　为了让分布在世界各地的N个部门之间协同工作，公司搭建了一个连接整个公司的通信网络。<br>
　　该网络的结构由N个路由器和N-1条高速光缆组成。<br>
　　每个部门都有一个专属的路由器，部门局域网内的所有机器都联向这个路由器，然后再通过这个通信子网与其他部门进行通信联络。<br>
　　该网络结构保证网络中的任意两个路由器之间都存在一条直接或间接路径以进行通信。<br>
　　高速光缆的数据传输速度非常快，以至于利用光缆传输的延迟时间可以忽略。<br>
　　但是由于路由器老化，在这些路由器上进行数据交换会带来很大的延迟。<br>
　　而两个路由器之间的通信延迟时间则与这两个路由器通信路径上所有路由器中最大的交换延迟时间有关。<br>
　　作为M公司网络部门的一名实习员工，现在要求你编写一个简单的程序来监视公司的网络状况。<br>
　　该程序能够随时更新网络状况的变化信息（路由器数据交换延迟时间的变化），并且根据询问给出两个路由器通信路径上延迟第k大的路由器的延迟时间。<br>
　　你的程序从输入文件中读入N个路由器和N-1条光缆的连接信息，每个路由器初始的数据交换延迟时间Ti，以及Q条询问（或状态改变）的信息。<br>
　　并依次处理这Q条询问信息，它们可能是：<br>
　　　　1. 由于更新了设备，或者设备出现新的故障，使得某个路由器的数据交换延迟时间发生了变化；<br>
　　　　2. 查询某两个路由器a和b之间的路径上延迟第k大的路由器的延迟时间。</p>
<h2 id="Input">Input</h2>
<p>第一行为两个整数N和Q，分别表示路由器总数和询问的总数。<br>
　　第二行有N个整数，第i个数表示编号为i的路由器初始的数据延迟时间Ti。<br>
　　紧接着N-1行，每行包含两个整数x和y，表示有一条光缆连接路由器x和路由器y。<br>
　　紧接着是Q行，每行三个整数k、a、b。<br>
　　如果k=0，则表示路由器a的状态发生了变化，它的数据交换延迟时间由Ta变为b。<br>
　　如果k&gt;0，则表示询问a到b的路径上所经过的所有路由器（包括a和b）中延迟第k大的路由器的延迟时间。</p>
<h2 id="Output">Output</h2>
<p>对于每一个第二种询问（k&gt;0），输出一行。<br>
　　包含一个整数为相应的延迟时间。<br>
　　如果路径上的路由器不足k个，则输出信息“invalid request!”。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 5<br>
　5 1 2 3 4<br>
　3 1<br>
　2 1<br>
　4 3<br>
　5 3<br>
　2 4 5<br>
　0 1 2<br>
　2 2 3<br>
　2 1 4<br>
　3 3 5</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3<br>
　2<br>
　2<br>
　invalid request!</p>
<h2 id="HINT">HINT</h2>
<p>N,Q&lt;=80000，任意一个路由器在任何时刻都满足延迟时间小于10^8。<br>
　　对于所有询问满足0&lt;=K&lt;=N。</p>
<h2 id="Main-idea">Main idea</h2>
<p>求树上两点路径间第k大的树，需要支持单点修改权值。</p>
<h2 id="Solution">Solution</h2>
<p>我们一看到这道题，序列的话其实就是<a href="http://www.cnblogs.com/BearChild/p/6434564.html">BZOJ1901</a>改成求第k大。</p>
<p>我们基于这个思路，从整体二分考虑，然后我们运用树链剖分和线段树。</p>
<p>对于一个点，如果价值&gt;=M的话就把这个点的位置+1权值，然后<strong>线段树区间求和</strong>就可以找出这个询问 在当前执行的L,M中 有几个&gt;=M的数，由于是树结构，所以这个应该运用树链剖分来在线段树上加。</p>
<p>之后跟静态查询Kth一样判断一下贡献，整体二分继续往下分治即可。</p>
<p>这题思路简单，实现稍微有一点细节需要注意，算是一道<strong>经典的数据结构题</strong>。(≧▽≦)/</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">160005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e8</span>+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> x,y,k;</span><br><span class="line"><span class="keyword">int</span> a[ONE];</span><br><span class="line"><span class="keyword">int</span> next[ONE*<span class="number">2</span>],first[ONE],go[ONE*<span class="number">2</span>],tot;</span><br><span class="line"><span class="keyword">int</span> Num,res,cnt;</span><br><span class="line"><span class="keyword">int</span> record[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> cnt,opt,cur;</span><br><span class="line">    <span class="keyword">int</span> pos,value;</span><br><span class="line">    <span class="keyword">int</span> l,r,k;</span><br><span class="line">&#125;oper[ONE*<span class="number">10</span>],qL[ONE*<span class="number">10</span>],qR[ONE*<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> f,son,size,dep;</span><br><span class="line">    <span class="keyword">int</span> top,seg;</span><br><span class="line">&#125;S[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;</span><br><span class="line">    next[++tot]=first[v];   first[v]=tot;   go[tot]=u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Sgt</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> value;</span><br><span class="line">    &#125;Node[ONE*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)</span><br><span class="line">        &#123;</span><br><span class="line">            Node[i].value+=x;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid) <span class="built_in">Update</span>(i&lt;&lt;<span class="number">1</span>,l,mid,L,x);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">Update</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,x);</span><br><span class="line">        Node[i].value=Node[i&lt;&lt;<span class="number">1</span>].value + Node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)</span><br><span class="line">        &#123;</span><br><span class="line">            res+=Node[i].value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid) <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>,l,mid,L,R);</span><br><span class="line">        <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=R) <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Hld</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">First</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        S[<span class="number">1</span>].top=S[<span class="number">0</span>].seg=S[<span class="number">1</span>].seg=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        S[u].dep=S[father].dep+<span class="number">1</span>;</span><br><span class="line">        S[u].f=father;</span><br><span class="line">        S[u].size=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(v==father) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">Dfs1</span>(v,u);</span><br><span class="line">            S[u].size+=S[v].size;</span><br><span class="line">            <span class="keyword">if</span>(S[v].size &gt; S[S[u].son].size) S[u].son=v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(S[u].son)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=S[u].son;</span><br><span class="line">            S[v].top=S[u].top;</span><br><span class="line">            S[v].seg=++S[<span class="number">0</span>].seg;</span><br><span class="line">            <span class="built_in">Dfs2</span>(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(v==father || S[u].son==v) <span class="keyword">continue</span>;</span><br><span class="line">            S[v].top=v;</span><br><span class="line">            S[v].seg=++S[<span class="number">0</span>].seg;</span><br><span class="line">            <span class="built_in">Dfs2</span>(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> Tx=S[x].top,Ty=S[y].top;</span><br><span class="line">        <span class="keyword">while</span>(Tx!=Ty)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(S[Tx].dep &lt; S[Ty].dep)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(x,y);</span><br><span class="line">                <span class="built_in">swap</span>(Tx,Ty);</span><br><span class="line">            &#125;</span><br><span class="line">            Sgt::<span class="built_in">Query</span>(<span class="number">1</span>,<span class="number">1</span>,n,S[Tx].seg,S[x].seg);</span><br><span class="line">            x=S[Tx].f;</span><br><span class="line">            Tx=S[x].top;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(S[x].dep &gt; S[y].dep) <span class="built_in">swap</span>(x,y);</span><br><span class="line">        Sgt::<span class="built_in">Query</span>(<span class="number">1</span>,<span class="number">1</span>,n,S[x].seg,S[y].seg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span><span class="comment">//第k大</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(L==R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">            <span class="keyword">if</span>(oper[i].opt==<span class="number">3</span>)</span><br><span class="line">                Ans[oper[i].cnt] = L<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> M=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(oper[i].opt==<span class="number">1</span> &amp;&amp; oper[i].value&gt;=M)</span><br><span class="line">            Sgt::<span class="built_in">Update</span>(<span class="number">1</span>,<span class="number">1</span>,n,S[oper[i].pos].seg,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(oper[i].opt==<span class="number">2</span> &amp;&amp; oper[i].value&gt;=M)</span><br><span class="line">            Sgt::<span class="built_in">Update</span>(<span class="number">1</span>,<span class="number">1</span>,n,S[oper[i].pos].seg,<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(oper[i].opt==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res=<span class="number">0</span>;</span><br><span class="line">            Hld::<span class="built_in">Solve</span>(oper[i].l,oper[i].r);</span><br><span class="line">            record[i] = res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(oper[i].opt==<span class="number">1</span> &amp;&amp; oper[i].value&gt;=M)</span><br><span class="line">            Sgt::<span class="built_in">Update</span>(<span class="number">1</span>,<span class="number">1</span>,n,S[oper[i].pos].seg,<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(oper[i].opt==<span class="number">2</span> &amp;&amp; oper[i].value&gt;=M)</span><br><span class="line">            Sgt::<span class="built_in">Update</span>(<span class="number">1</span>,<span class="number">1</span>,n,S[oper[i].pos].seg,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l_num=<span class="number">0</span>,r_num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(oper[i].opt!=<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(oper[i].value &gt;= M)</span><br><span class="line">                qR[++r_num]=oper[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                qL[++l_num]=oper[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(oper[i].cur + record[i] &gt;= oper[i].k)</span><br><span class="line">                qR[++r_num]=oper[i];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                qL[++l_num]=oper[i];</span><br><span class="line">                qL[l_num].cur+=record[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t=l;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l_num;i++) oper[t++]=qL[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=r_num;i++) oper[t++]=qR[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Solve</span>(l,l+l_num<span class="number">-1</span>,L,M);</span><br><span class="line">    <span class="built_in">Solve</span>(l+l_num,r,M+<span class="number">1</span>,R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=<span class="built_in">get</span>();</span><br><span class="line">        oper[++cnt].opt=<span class="number">1</span>;  oper[cnt].pos=i;    oper[cnt].value=a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Add</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Hld::<span class="built_in">First</span>();</span><br><span class="line">    Hld::<span class="built_in">Dfs1</span>(<span class="number">1</span>,<span class="number">0</span>); Hld::<span class="built_in">Dfs2</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        k=<span class="built_in">get</span>();    x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            oper[++cnt].opt=<span class="number">2</span>;  oper[cnt].pos=x;    oper[cnt].value=a[x];</span><br><span class="line">            oper[++cnt].opt=<span class="number">1</span>;  oper[cnt].pos=x;    oper[cnt].value=y;</span><br><span class="line">            a[x]=y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            oper[++cnt].opt=<span class="number">3</span>;  oper[cnt].l=x;  oper[cnt].r=y;  oper[cnt].k=k;</span><br><span class="line">            oper[cnt].cnt=++Num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Solve</span>(<span class="number">1</span>,cnt,<span class="number">0</span>,INF);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Ans[i]!=<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans[i]);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;invalid request!&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>分治</category>
      </categories>
      <tags>
        <tag>整体二分</tag>
      </tags>
  </entry>
  <entry>
    <title>[期望DP]Aeroplane chess</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%9C%9F%E6%9C%9BDP%5DAeroplane%20chess/</url>
    <content><![CDATA[<h1>Aeroplane chess</h1>
<p>Time Limit: 1 Sec Memory Limit: 32 MB</p>
<h2 id="Description">Description</h2>
<p>Hzz loves aeroplane  chess very much. The chess map contains N+1 grids labeled from 0 to N.  Hzz starts at grid 0. For each step he throws a dice(a dice have six  faces with equal probability to face up and the numbers on the faces are 1,2,3,4,5,6). When Hzz is at grid i and the dice number is x, he will  moves to grid i+x. Hzz finishes the game when i+x is equal to or greater than N.</p>
<p>There are also M flight lines  on the chess map. The i-th flight line can help Hzz fly from grid Xi to  Yi (0&lt;Xi&lt;Yi&lt;=N) without throwing the dice. If there is another  flight line from Yi, Hzz can take the flight line continuously. It is  granted that there is no two or more flight lines start from the same  grid.</p>
<p>Please help Hzz calculate the expected dice throwing times to finish the game.</p>
<h2 id="Input">Input</h2>
<p>There are multiple test cases.<br>
　　Each test case contains several lines.<br>
　　The first line contains two integers N.<br>
　　Then M lines follow, each line contains two integers Xi,Yi(1≤Xi&lt;Yi≤N).<br>
　　The input end with N=0, M=0.</p>
<h2 id="Output">Output</h2>
<p>For each test case in  the input, you should output a line indicating the expected dice  throwing times. Output should be rounded to 4 digits after decimal  point.</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>2 0<br>
　　8 3<br>
　　2 4<br>
　　4 5<br>
　　7 8<br>
　　0 0</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>1.1667</p>
<p>2.3441</p>
<h2 id="HINT">HINT</h2>
<p>1≤N≤100000, 0≤M≤1000</p>
<h2 id="Main-idea">Main idea</h2>
<p>从0走到n-1，每次以均等概率走1~6步，某些点可以直接跨越到指定点，求走出n所需走的次数的期望。</p>
<h2 id="Solution">Solution</h2>
<p>我们直接使用期望DP求解。令 f[i] 表示到位置 i 的期望，然后直接从后往前递推即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">100001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> x,y,To[ONE];</span><br><span class="line"><span class="keyword">double</span> f[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">if</span>(!n &amp;&amp; !m) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(To,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(To)); <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">        To[x] = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(To[i]) &#123;f[i] = f[To[i]]; <span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">6</span>;j++)</span><br><span class="line">            f[i] += (<span class="keyword">double</span>)<span class="number">1</span>/<span class="number">6</span> * f[<span class="built_in">min</span>(i+j,n)];</span><br><span class="line">        f[i]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.4lf\n&quot;</span>,f[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">        <span class="built_in">Solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>期望DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[期望DP]LOOPS</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%9C%9F%E6%9C%9BDP%5DLOOPS/</url>
    <content><![CDATA[<h1>LOOPS</h1>
<p>Time Limit: 5 Sec Memory Limit: 64 MB</p>
<h2 id="Description">Description</h2>
<p>Akemi Homura is a Mahou Shoujo (Puella Magi/Magical Girl).<br>
　　Homura wants to help her friend Madoka save the world. But because of the plot of the Boss Incubator, she is trapped in a labyrinth called LOOPS.</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527201510.jpg" alt="img"></p>
<p>The planform of the LOOPS is a rectangle of R*C grids. There is a portal in each grid except the exit grid. It costs Homura 2 magic power to use a  portal once. The portal in a grid G(r, c) will send Homura to the grid  below G (grid(r+1, c)), the grid on the right of G (grid(r, c+1)), or  even G itself at respective probability (How evil the Boss Incubator  is)!<br>
　　At the beginning Homura is in the top left corner of the LOOPS  ((1, 1)), and the exit of the labyrinth is in the bottom right corner  ((R, C)). Given the probability of transmissions of each portal, your  task is help poor Homura calculate the EXPECT magic power she need to  escape from the LOOPS.</p>
<h2 id="Input">Input</h2>
<p>The first line contains two integers R and C.</p>
<p>The following R lines, each contains C*3 real numbers, at 2 decimal places. Every three numbers make a group. The first, second and third number of the cth group of line r represent the probability of transportation to  grid (r, c), grid (r, c+1), grid (r+1, c) of the portal in grid (r, c)  respectively. Two groups of numbers are separated by 4 spaces.</p>
<p>It is ensured that the sum of three numbers in each group is 1, and the  second numbers of the rightmost groups are 0 (as there are no grids on  the right of them) while the third numbers of the downmost groups are 0  (as there are no grids below them).</p>
<p>You may ignore the last three numbers of the input data. They are printed just for looking neat.</p>
<p>Terminal at EOF</p>
<h2 id="Output">Output</h2>
<p>A real number at 3 decimal places (round to), representing the expect magic power Homura need to escape from the LOOPS.</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>2 2<br>
　　0.00 0.50 0.50  0.50 0.00 0.50<br>
　　0.50 0.50 0.00  1.00 0.00 0.00</p>
<p>2 2<br>
　　0.00 0.50 0.50  0.50 0.00 0.50<br>
　　0.50 0.50 0.00  1.00 0.00 0.00</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>6.00</p>
<p>6.00</p>
<h2 id="HINT">HINT</h2>
<p>2 &lt;= R, C &lt;= 1000, 答案&lt;=1000000.</p>
<h2 id="Main-idea">Main idea</h2>
<p>每个位置有三种情况：不动、向右走一步、向下走一步。给出了每种情况的概率，执行一次情况会产生2的贡献，询问从 (1,1) 到 (n,m)的贡献的期望。多组数据。</p>
<h2 id="Solution">Solution</h2>
<p>我们运用期望DP求解，我们先<strong>令 f[i][j] 表示从(n,m) 到 (i,j) 的期望</strong>，然后可以轻易地推出一个式子，左右移项一下即可：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527201513.png" alt="img"></p>
<p>得到了这个式子之后我们就可以从 (n,m) 递推到 (1,1) 了。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">double</span> p[ONE][ONE][<span class="number">3</span>],f[ONE][ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf %lf&quot;</span>, &amp;p[i][j][<span class="number">0</span>], &amp;p[i][j][<span class="number">1</span>], &amp;p[i][j][<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        f[n][m] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=<span class="number">1</span>;j--)</span><br><span class="line">                <span class="keyword">if</span>(p[i][j][<span class="number">0</span>]!=<span class="number">1</span> &amp;&amp; (i!=n || j!=m))</span><br><span class="line">                    f[i][j] = (p[i][j][<span class="number">1</span>]*f[i][j+<span class="number">1</span>] + p[i][j][<span class="number">2</span>]*f[i+<span class="number">1</span>][j] + <span class="number">2</span>) / (<span class="number">1</span>-p[i][j][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.3lf\n&quot;</span>,f[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>期望DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[期望DP]Easy</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%9C%9F%E6%9C%9BDP%5DEasy/</url>
    <content><![CDATA[<h1>Easy</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>某一天WJMZBMR在打osu~~~但是他太弱逼了，有些地方完全靠运气:(<br>
　我们来简化一下这个游戏的规则<br>
　有n次点击要做，成功了就是o，失败了就是x，分数是按comb计算的，连续a个comb就有a<em>a分，comb就是极大的连续o。<br>
　比如ooxxxxooooxxx，分数就是2</em>2+4*4=4+16=20。<br>
　Sevenkplus闲的慌就看他打了一盘，有些地方跟运气无关要么是o要么是x，有些地方o或者x各有50%的可能性，用?号来表示。<br>
　比如oo?xx就是一个可能的输入。<br>
　那么WJMZBMR这场osu的期望得分是多少呢？<br>
　比如oo?xx的话，?是o的话就是oooxx =&gt; 9，是x的话就是ooxxx =&gt; 4<br>
　期望自然就是(4+9)/2 =6.5了</p>
<h2 id="Input">Input</h2>
<p>第一行一个整数n，表示点击的个数<br>
　接下来一个字符串，每个字符都是ox？中的一个</p>
<h2 id="Output">Output</h2>
<p>一行一个浮点数表示答案<br>
　四舍五入到小数点后4位<br>
　如果害怕精度跪建议用long double或者extended</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4<br>
　???</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>4.1250</p>
<h2 id="HINT">HINT</h2>
<p>n&lt;=300000</p>
<h2 id="Main-idea">Main idea</h2>
<p>连续的o提供(次数)^2的贡献，x打断连续，?等概率出现o或x，求期望。</p>
<h2 id="Solution">Solution</h2>
<p>直接期望DP即可。连续的话，下一次的贡献就是：x^2-(x-1)^2 = 2x+1。</p>
<p>E[i]表示到现在为止累计的期望，?的话E/2，o的话E+1，x的话清零即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">300005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> ch[ONE];</span><br><span class="line"><span class="keyword">double</span> Ans,E[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch[i] == <span class="string">&#x27;o&#x27;</span>) Ans += <span class="number">2.0</span>*E[i]+<span class="number">1</span>, E[i+<span class="number">1</span>] = E[i] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(ch[i] == <span class="string">&#x27;?&#x27;</span>) Ans += (<span class="number">2.0</span>*E[i]+<span class="number">1</span>)/<span class="number">2.0</span> , E[i+<span class="number">1</span>] = (E[i]+<span class="number">1</span>) / <span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(ch[i] == <span class="string">&#x27;x&#x27;</span>) E[i+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.4lf&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>期望DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[期望DP]Red is good</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%9C%9F%E6%9C%9BDP%5DRed%20is%20good/</url>
    <content><![CDATA[<h1>Red is good</h1>
<p>Time Limit: 10 Sec Memory Limit: 64 MB</p>
<h2 id="Description">Description</h2>
<p>桌面上有R张红牌和B张黑牌，随机打乱顺序后放在桌面上，开始一张一张地翻牌，翻到红牌得到1美元，黑牌则付出1美元。可以随时停止翻牌，在最优策略下平均能得到多少钱。</p>
<h2 id="Input">Input</h2>
<p>一行输入两个数R,B。</p>
<h2 id="Output">Output</h2>
<p>在最优策略下平均能得到多少钱。输出答案时,小数点后第六位后的全部去掉,不要四舍五入。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>4.166666</p>
<h2 id="HINT">HINT</h2>
<p>R,B&lt;=5000</p>
<h2 id="Solution">Solution</h2>
<p>这显然是一道简单的期望DP。我们令 f[i][j] 表示剩下 i 个红牌和 j 个黑牌时的最优答案。那么显然：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528000305.png" alt="img"></p>
<p>其中 i/(i+j) 和 j/(i+j) 表示选择到的概率。</p>
<p>最后由于卡内存，我们滚动一下数组即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">5001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> E6 = <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">double</span> f[<span class="number">2</span>][<span class="number">5001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,A=<span class="number">0</span>; i&lt;=n; i++,A^=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        f[A][<span class="number">0</span>] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=m; j++)</span><br><span class="line">            f[A][j] = <span class="built_in">max</span>(<span class="number">0.0</span>, (<span class="keyword">double</span>)i/(i+j) * (f[A^<span class="number">1</span>][j]+<span class="number">1</span>) + (<span class="keyword">double</span>)j/(i+j) * (f[A][j<span class="number">-1</span>]<span class="number">-1</span>) );</span><br><span class="line">    &#125;</span><br><span class="line">    s64 record = <span class="built_in">floor</span>(f[n&amp;<span class="number">1</span>][m] * E6);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld.%06lld&quot;</span>, record/E6, record%E6);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>期望DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[期望DP]Tree</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%9C%9F%E6%9C%9BDP%5DTree/</url>
    <content><![CDATA[<h1>Tree</h1>
<p>Time Limit: 20 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528011808.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528011810.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528011813.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4 2<br>
　　1 2<br>
　　2 3<br>
　　3 4<br>
　　1 4<br>
　　3 4</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>9<br>
　　5</p>
<h2 id="HINT">HINT</h2>
<p>N &lt;= 100000, Q &lt;= 100000.</p>
<h2 id="Solution">Solution</h2>
<p>首先，这必然是一道期望DP。</p>
<p>由于<strong>E(Σx) = ΣE(x)</strong>。所以我们令 <strong>f[u]</strong> 表示从 <strong>u -&gt; fa</strong> 的<strong>期望步数</strong>，令 <strong>g[u]</strong> 表示从 <strong>fa -&gt; u</strong> 的<strong>期望步数</strong>。显然，求出这两个东西，再求个LCA就解决改题了。</p>
<p><strong>1.</strong> 如何求 <strong>f</strong>：</p>
<p>我们先给出普通的关系：<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528011816.png" alt="img">，</p>
<p>然后我们 <strong>左右两边同乘d</strong>，移项一下即可得到：<strong>f[u] = 1 + Σ(1 + f[x])</strong>。</p>
<p>这个方程<strong>表示</strong>什么呢？<strong>1/d</strong>的概率<strong>直接走到fa</strong>，<strong>花1步走到其它点，然后再回来</strong>。</p>
<p><strong>2.</strong> 如何求 <strong>g</strong>：</p>
<p>我们先给出普通的关系：<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528011821.png" alt="img">，</p>
<p>然后我们 左右两边同乘d，移项一下即可得到：<strong>g[u] = 1 + (1 + g[fa]) + Σ(1 + f[x])</strong>。注意，如果 <strong>u = root</strong>，则不<strong>应该有(1 + g[fa])</strong>，因为其<strong>没有fa</strong>。</p>
<p>这个方程<strong>表示</strong>什么呢？<strong>1/d</strong>的概率<strong>直接走到u</strong>，<strong>花1步走到fa的fa，然后走回fa，再下去到u</strong>；<strong>花1步走到fa的其它儿子，然后再上来，再到u</strong>。</p>
<p>这样得到<strong>f、g</strong>以后，<strong>DFS</strong>求一下和，树链剖分求一个<strong>LCA</strong>，直接输出答案即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> u32;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, Q;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">int</span> next[ONE], first[ONE], go[ONE], tot;</span><br><span class="line"><span class="keyword">int</span> f[ONE], g[ONE];</span><br><span class="line"><span class="keyword">int</span> sum_f[ONE], sum_g[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot] = first[u];    first[u] = tot;    go[tot] = v;</span><br><span class="line">    next[++tot] = first[v];    first[v] = tot;    go[tot] = u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> tree</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> son[ONE], size[ONE], top[ONE], fa[ONE], Dep[ONE];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        size[u] = <span class="number">1</span>;</span><br><span class="line">        fa[u] = father;</span><br><span class="line">        Dep[u] = Dep[father] + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e = first[u]; e; e = next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = go[e];</span><br><span class="line">            <span class="keyword">if</span>(v == father) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs1</span>(v, u);</span><br><span class="line">            size[u] += v;</span><br><span class="line">            <span class="keyword">if</span>(size[son[u]] &lt; size[v]) son[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">int</span> v = son[u])</span><br><span class="line">            top[v] = top[u], <span class="built_in">dfs2</span>(v, u);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e = first[u]; e; e = next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = go[e];</span><br><span class="line">            <span class="keyword">if</span>(v == father || v == son[u]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs2</span>(top[v] = v, u);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(top[u] != top[v])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> &amp;x = Dep[top[u]] &gt; Dep[top[v]] ? u : v;</span><br><span class="line">            x = fa[top[x]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Dep[u] &lt; Dep[v] ? u : v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_f</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e = first[u]; e; e = next[e])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = go[e];</span><br><span class="line">        <span class="keyword">if</span>(v == father) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs_f</span>(v, u);</span><br><span class="line">        f[u] = (f[u] + f[v] + <span class="number">1</span>) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs_g</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e = first[u]; e; e = next[e])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = go[e];</span><br><span class="line">        <span class="keyword">if</span>(v == father) <span class="keyword">continue</span>;</span><br><span class="line">        res = (res + <span class="number">1</span> + f[v]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e = first[u]; e; e = next[e])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = go[e];</span><br><span class="line">        <span class="keyword">if</span>(v == father) <span class="keyword">continue</span>;</span><br><span class="line">        g[v] = <span class="number">1</span> + (res - <span class="number">1</span> - f[v] + MOD) % MOD;</span><br><span class="line">        <span class="keyword">if</span>(u != <span class="number">1</span>) g[v] = (g[v] + <span class="number">1</span> + g[u]) % MOD;</span><br><span class="line">        <span class="built_in">dfs_g</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum_g[u] = (sum_g[father] + g[u]) % MOD;</span><br><span class="line">    sum_f[u] = (sum_f[father] + f[u]) % MOD;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e = first[u]; e; e = next[e])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = go[e];</span><br><span class="line">        <span class="keyword">if</span>(v == father) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">Dfs</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dist</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> LCA = tree::<span class="built_in">LCA</span>(u, v), res = <span class="number">0</span>;</span><br><span class="line">    res = ((s64)res + sum_f[u] - sum_f[LCA] + MOD) % MOD;</span><br><span class="line">    res = ((s64)res + sum_g[v] - sum_g[LCA] + MOD) % MOD;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();    Q = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="built_in">get</span>();    y = <span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Add</span>(x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tree::top[<span class="number">1</span>] = <span class="number">1</span>, tree::<span class="built_in">dfs1</span>(<span class="number">1</span>, <span class="number">0</span>), tree::<span class="built_in">dfs2</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">dfs_f</span>(<span class="number">1</span>, <span class="number">0</span>), <span class="built_in">dfs_g</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">Dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(Q--)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="built_in">get</span>();    y = <span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">dist</span>(x, y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>期望DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[期望DP]亚瑟王</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%9C%9F%E6%9C%9BDP%5D%E4%BA%9A%E7%91%9F%E7%8E%8B/</url>
    <content><![CDATA[<h1>亚瑟王</h1>
<p>Time Limit: 20 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p>小 K 不慎被 LL 邪教洗脑了，洗脑程度深到他甚至想要从亚瑟王邪教中脱坑。<br>
　　他决定，在脱坑之前，最后再来打一盘亚瑟王。既然是最后一战，就一定要打得漂亮。<br>
　　众所周知，亚瑟王是一个看脸的游戏，技能的发动都是看概率的。<br>
　　作为一个非洲人，同时作为一个前 OIer，小 K 自然是希望最大化造成伤害的期望值。<br>
　　但他已经多年没写过代码，连 Spaly都敲不对了，因此，希望你能帮帮小 K，让他感受一下当欧洲人是怎样的体验。<br>
　　本题中我们将考虑游戏的一个简化版模型。<br>
　　玩家有一套卡牌，共 n张。游戏时，玩家将 n 张卡牌排列成某种顺序，排列后将卡牌按从前往后依次编号为 1~n。<br>
　　本题中，顺序已经确定，即为输入的顺序。<br>
　　每张卡牌都有一个技能。<br>
　　第 i 张卡牌的技能发动概率为 pi，如果成功发动，则会对敌方造成di点伤害。也只有通过发动技能，卡牌才能对敌方造成伤害。<br>
　　基于现实因素以及小K非洲血统的考虑，pi不会为 0，也不会为 1，即 0 &lt; pi &lt; 1。<br>
　　一局游戏一共有 r 轮。<br>
　　在每一轮中，系统将从第一张卡牌开始，按照顺序依次考虑每张卡牌。<br>
　　在一轮中，对于依次考虑的每一张卡牌：<br>
　　1 如果这张卡牌在这一局游戏中已经发动过技能，则<br>
　　　　1.1 如果这张卡牌不是最后一张，则跳过之（考虑下一张卡牌）；<br>
　　否则（是最后一张），结束这一轮游戏。<br>
　　2 否则（这张卡牌在这一局游戏中没有发动过技能），设这张卡牌为第 i 张<br>
　　　　2.1 将其以 pi的概率发动技能。<br>
　　　　2.2 如果技能发动，则对敌方造成 di点伤害，并结束这一轮。<br>
　　　　2.3 如果这张卡牌已经是最后一张（即 i 等于n），则结束这一轮；<br>
　　否则，考虑下一张卡牌。<br>
　　请帮助小 K 求出这一套卡牌在一局游戏中能造成的伤害的期望值。</p>
<h2 id="Input">Input</h2>
<p>输入文件的第一行包含一个整数 T，代表测试数据组数。<br>
　　接下来一共 T 组数据。<br>
　　每组数据的第一行包含两个用空格分开的整数 n和r，分别代表卡牌的张数和游戏的轮数。<br>
　　接下来 n 行，每行包含一个实数和一个整数，由空格隔开，描述一张卡牌。<br>
　　第 i 行的两个数为 pi和 di，分别代表第 i 张卡牌技能发动的概率（实数）和技能发动造成的伤害（整数）。<br>
　　保证 pi最多包含 4位小数，且为一个合法的概率。</p>
<h2 id="Output">Output</h2>
<p>对于每组数据，输出一行，包含一个实数，为这套卡牌在这一局游戏中造成的伤害的期望值。<br>
　　对于每一行输出，只有当你的输出和标准答案的相对误差不超过10^-8时——即|a-o|/a&lt;=10-8时(其中a是标准答案，o是输出)，你的输出才会被判为正确。<br>
　　建议输出10位小数。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>1<br>
　3 2<br>
　0.5000 2<br>
　0.3000 3<br>
　0.9000 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3.2660250000</p>
<p>一共有 13 种可能的情况：</p>
<p>1.  第一轮中，第 1张卡牌发动技能；第二轮中，第 2张卡牌发动技能；<br>
　　概率为 0.15，伤害为5。<br>
　　2.  第一轮中，第 1张卡牌发动技能；第二轮中，第 3张卡牌发动技能；<br>
　　概率为 0.315，伤害为3。<br>
　　3.  第一轮中，第 1张卡牌发动技能；第二轮不发动技能；<br>
　　概率为 0.035，伤害为2。<br>
　　4.  第一轮中，第 2张卡牌发动技能；第二轮中，第 1张卡牌发动技能；<br>
　　概率为 0.075，伤害为5。<br>
　　5.  第一轮中，第 2张卡牌发动技能；第二轮中，第 3张卡牌发动技能；<br>
　　概率为 0.0675，伤害为4。<br>
　　6.  第一轮中，第 2张卡牌发动技能；第二轮不发动技能；<br>
　　概率为 0.0075，伤害为3。<br>
　　7.  第一轮中，第 3张卡牌发动技能；第二轮中，第 1张卡牌发动技能；<br>
　　概率为 0.1575，伤害为3。<br>
　　8.  第一轮中，第 3张卡牌发动技能；第二轮中，第 2张卡牌发动技能；<br>
　　概率为 0.04725，伤害为4。<br>
　　9.  第一轮中，第 3张卡牌发动技能；第二轮不发动技能；<br>
　　概率为 0.11025，伤害为1。<br>
　　10.  第一轮不发动技能；第二轮中，第 1张卡牌发动技能；<br>
　　概率为 0.0175，伤害为2。<br>
　　11.  第一轮不发动技能；第二轮中，第 2张卡牌发动技能；<br>
　　概率为 0.00525，伤害为3。<br>
　　12.  第一轮不发动技能；第二轮中，第 3张卡牌发动技能；<br>
　　概率为 0.011025，伤害为1。<br>
　　13.  第一轮不发动技能；第二轮亦不发动技能；<br>
　　概率为 0.001225，伤害为0。<br>
　　　　造成伤害的期望值为概率与对应伤害乘积之和，为 3.266025。</p>
<h2 id="HINT">HINT</h2>
<p>对于所有测试数据， 1 &lt;= T &lt;= 444， 1 &lt;= n &lt;= 220， 0 &lt;= r &lt;= 132， 0 &lt; pi &lt; 1， 0 &lt;= di &lt;= 1000。</p>
<p>除非备注中有特殊说明，数据中 pi与di均为随机生成。</p>
<p>请注意可能存在的实数精度问题，并采取适当措施。</p>
<h2 id="Main-idea">Main idea</h2>
<p>有n个人，r轮游戏，每次从左到右依次进行操作，第i个人有p[i]的概率被选中，被选中了则产生d[i]贡献，结束该轮，询问期望贡献和。</p>
<h2 id="Solution">Solution</h2>
<p>期望DP题，转换思想，把所有的机会一起操作。</p>
<p><strong>f[i][j]表示到第i个人得到了j个机会的概率</strong>，显然，如果i得到j个机会那么i-1也至少得到了j个机会。</p>
<p>如果i-1没有用机会，那么f[i][j]+=f[i-1][j]×p(i-1一个机会都没用)，如果i-1用了机会，那么这轮就停止了，f[i][j]+=f[i-1][j+1]×p(i-1至少用了一个机会)，因为事实上也只会算一个用掉的机会，所以是不会使得答案错误的。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">221</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n,r;</span><br><span class="line"><span class="keyword">double</span> p[ONE];</span><br><span class="line"><span class="keyword">int</span> d[ONE];</span><br><span class="line"><span class="keyword">double</span> f[ONE][ONE];</span><br><span class="line"><span class="keyword">double</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Quick</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> res=<span class="number">1.00</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a;</span><br><span class="line">        a=a*a;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        Ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">        n=<span class="built_in">get</span>();    r=<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;p[i]);</span><br><span class="line">            d[i]=<span class="built_in">get</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        f[<span class="number">0</span>][r]=<span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=r;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                f[i][j]+= f[i<span class="number">-1</span>][j] * <span class="built_in">Quick</span>(<span class="number">1</span>-p[i<span class="number">-1</span>],j);</span><br><span class="line">                f[i][j]+= f[i<span class="number">-1</span>][j+<span class="number">1</span>] * (<span class="number">1</span> - <span class="built_in">Quick</span>(<span class="number">1</span>-p[i<span class="number">-1</span>],j+<span class="number">1</span>));</span><br><span class="line">                Ans+=f[i][j]*(<span class="number">1</span> - <span class="built_in">Quick</span>(<span class="number">1</span>-p[i],j))*d[i];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>,Ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>期望DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[期望DP]守卫者的挑战</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%9C%9F%E6%9C%9BDP%5D%E5%AE%88%E5%8D%AB%E8%80%85%E7%9A%84%E6%8C%91%E6%88%98/</url>
    <content><![CDATA[<h1>守卫者的挑战</h1>
<p>Time Limit: 2 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>打开了黑魔法师Vani的大门，队员们在迷宫般的路上漫无目的地搜寻着关押applepi的监狱的所在地。突然，眼前一道亮光闪过。“我，Nizem，是黑魔法圣殿的守卫者。如果你能通过我的挑战，那么你可以带走黑魔法圣殿的地图……”瞬间，队员们被传送到了一个擂台上，最初身边有一个容量为K的包包。<br>
　擂台赛一共有N项挑战，各项挑战依次进行。第i项挑战有一个属性ai，如果ai&gt;=0，表示这次挑战成功后可以再获得一个容量为ai的包包；如果ai=-1，则表示这次挑战成功后可以得到一个大小为1 的地图残片。地图残片必须装在包包里才能带出擂台，包包没有必要全部装满，但是队员们必须把  【获得的所有的】地图残片都带走（没有得到的不用考虑，只需要完成所有N项挑战后背包容量足够容纳地图残片即可），才能拼出完整的地图。并且他们至少要挑战成功L次才能离开擂台。<br>
　队员们一筹莫展之时，善良的守卫者Nizem帮忙预估出了每项挑战成功的概率，其中第i项挑战成功的概率为pi%。现在，请你帮忙预测一下，队员们能够带上他们获得的地图残片离开擂台的概率。</p>
<h2 id="Input">Input</h2>
<p>第一行三个整数N,L,K。<br>
　第二行N个实数，第i个实数pi表示第i项挑战成功的百分比。<br>
　第三行N个整数，第i个整数ai表示第i项挑战的属性值.</p>
<h2 id="Output">Output</h2>
<p>一个整数，表示所求概率，四舍五入保留6 位小数。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 1 2<br>
　36 44 13 83 63<br>
　-1 2 -1 2 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>0.980387</p>
<h2 id="HINT">HINT</h2>
<p>0&lt;=K&lt;=2000，0&lt;=N&lt;=200，-1&lt;=ai&lt;=1000，0&lt;=L&lt;=N，0&lt;=pi&lt;=100。</p>
<h2 id="Main-idea">Main idea</h2>
<p>挑战成功第 i 次会获得一个 ai 的贡献，挑战成功的概率是 pi，初始已经有K的贡献，问至少挑战成功 L 次且贡献&gt;=0 的概率。</p>
<h2 id="Solution">Solution</h2>
<p>简单的期望DP，由于n只有200，显然我们直接令 f[i][j][k] 表示 前 i 个挑战，胜利了 j 次，当前贡献为 k 的概率即可，然后转移一下。</p>
<p>由于贡献最小只可能是-1，所以 k&gt;=n 的时候剩下的贡献必然都&gt;=0，所以我们上限调整为n即可，中间可能有负数，+200来实现储存。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">205</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,Limit,K;</span><br><span class="line"><span class="keyword">int</span> a[ONE];</span><br><span class="line"><span class="keyword">float</span> p[ONE],Ans;</span><br><span class="line"><span class="keyword">float</span> f[ONE][ONE][ONE*<span class="number">2</span>]; <span class="comment">//i times j win k bag</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">min</span>(x,n) + <span class="number">200</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    Limit=<span class="built_in">get</span>();    K=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)    <span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;p[i]), p[i]/=<span class="number">100.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)    a[i]=<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>][<span class="built_in">id</span>(K)] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n<span class="number">-1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=i; j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=-i; k&lt;=n; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                f[i+<span class="number">1</span>][j][<span class="built_in">id</span>(k)] += f[i][j][<span class="built_in">id</span>(k)] * (<span class="number">1.0</span>-p[i+<span class="number">1</span>]); <span class="comment">// fail</span></span><br><span class="line">                f[i+<span class="number">1</span>][j+<span class="number">1</span>][<span class="built_in">id</span>(k+a[i+<span class="number">1</span>])] += f[i][j][<span class="built_in">id</span>(k)] * p[i+<span class="number">1</span>]; <span class="comment">// win</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=Limit; j&lt;=n; j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="built_in">id</span>(<span class="number">0</span>); k&lt;=<span class="built_in">id</span>(n); k++)</span><br><span class="line">            Ans += f[n][j][k];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.6f&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>期望DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[期望DP]换教室</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%9C%9F%E6%9C%9BDP%5D%E6%8D%A2%E6%95%99%E5%AE%A4/</url>
    <content><![CDATA[<h1>换教室</h1>
<p>Time Limit: 20 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528004623.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p>第一行四个整数n,m,v,e。n表示这个学期内的时间段的数量;m表示牛牛最多可以申请更换多少节课程的教室;</p>
<p>v表示牛牛学校里教室的数量;e表示牛牛的学校里道路的数量。</p>
<p>第二行n个正整数,第i(1≤i≤n)个正整数表示c,即第i个时间段牛牛被安排上课的教室;保证1≤ci≤v。</p>
<p>第三行n个正整数,第i(1≤i≤n)个正整数表示di,即第i个时间段另一间上同样课程的教室;保证1≤di≤v。</p>
<p>第四行n个实数,第i(1≤i≤n)个实数表示ki,即牛牛申请在第i个时间段更换教室获得通过的概率。保证0≤ki≤1。</p>
<p>接下来e行,每行三个正整数aj,bj,wj,表示有一条双向道路连接教室aj,bj,通过这条道路需要耗费的体力值是Wj;</p>
<p>保证通过学校里的道路,从任何一间教室出发,都能到达其他所有的教室。</p>
<p>保证输入的实数最多包含3位小数。</p>
<h2 id="Output">Output</h2>
<p>输出一行,包含一个实数,四舎五入精确到小数点后恰好2位,表示答案。你的</p>
<p>输出必须和标准输出完全一样才算正确。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3 2 3 3<br>
　2 1 2<br>
　1 2 1<br>
　0.8 0.2 0.5<br>
　1 2 5<br>
　1 3 3<br>
　2 3 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>2.80</p>
<h2 id="HINT">HINT</h2>
<p>1≤aj,bj≤v, 1≤wj≤100。</p>
<p>1≤n≤2000, 0≤m≤2000, 1≤v≤300, 0≤e≤90000。</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定n个 原本教室ci 和 替换教室di，可以申请m次换课，如果 i 换课了则可以在di上课，否则在ci上课，每个教室之间有距离，求期望最小距离。</p>
<h2 id="Solution">Solution</h2>
<p>很简单的期望DP，我们<strong>令 f[i][j][0\1] 表示 到了第 i 个状态，已经换了 j 次课，这次换不换课</strong>，然后分<strong>四种情况</strong>讨论一下即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Road(a,b) (double)w[a][b]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> tense(a,b) a = a&lt;b ? a:b;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,v,e;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">int</span> c[ONE],d[ONE];</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">301</span>][<span class="number">301</span>];</span><br><span class="line"><span class="keyword">double</span> f[ONE][ONE][<span class="number">2</span>],k[ONE];</span><br><span class="line"><span class="keyword">double</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;    </span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> ) </span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>; </span><br><span class="line">    res=c<span class="number">-48</span>;     </span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )    </span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;    </span><br><span class="line">    <span class="keyword">return</span> res*Q;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyed</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=v; k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=v; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=v; j++)</span><br><span class="line">                <span class="built_in">tense</span>(w[i][j], w[i][k] + w[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Eap10</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Road</span>( c[i],c[i+<span class="number">1</span>] ) * (<span class="number">1</span>-k[i]) + <span class="built_in">Road</span>( d[i],c[i+<span class="number">1</span>] ) * k[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Eap01</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Road</span>( c[i],c[i+<span class="number">1</span>] ) * (<span class="number">1</span>-k[i+<span class="number">1</span>]) + <span class="built_in">Road</span>( c[i],d[i+<span class="number">1</span>] ) * k[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Eap11</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line">        <span class="built_in">Road</span>( c[i], c[i+<span class="number">1</span>] ) * (<span class="number">1</span>-k[i]) * (<span class="number">1</span>-k[i+<span class="number">1</span>]) </span><br><span class="line">        + <span class="built_in">Road</span>( c[i], d[i+<span class="number">1</span>] ) * (<span class="number">1</span>-k[i]) * k[i+<span class="number">1</span>]</span><br><span class="line">        + <span class="built_in">Road</span>( d[i], c[i+<span class="number">1</span>] ) * k[i] * (<span class="number">1</span>-k[i+<span class="number">1</span>])</span><br><span class="line">        + <span class="built_in">Road</span>( d[i], d[i+<span class="number">1</span>] ) * k[i] * k[i+<span class="number">1</span>]; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DisApply</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(j&gt;=<span class="number">0</span>) f[i+<span class="number">1</span>][j][<span class="number">0</span>] = <span class="built_in">tense</span>(f[i+<span class="number">1</span>][j][<span class="number">0</span>], f[i][j][<span class="number">0</span>] + <span class="built_in">Road</span>( c[i],c[i+<span class="number">1</span>] ) );</span><br><span class="line">    <span class="keyword">if</span>(j&gt;=<span class="number">1</span>) f[i+<span class="number">1</span>][j][<span class="number">0</span>] = <span class="built_in">tense</span>(f[i+<span class="number">1</span>][j][<span class="number">0</span>], f[i][j][<span class="number">1</span>] + <span class="built_in">Eap10</span>(i) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Apply</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;=<span class="number">1</span>) f[i+<span class="number">1</span>][j][<span class="number">1</span>] = <span class="built_in">tense</span>(f[i+<span class="number">1</span>][j][<span class="number">1</span>], f[i][j<span class="number">-1</span>][<span class="number">0</span>] + <span class="built_in">Eap01</span>(i) );</span><br><span class="line">    <span class="keyword">if</span>(j&gt;=<span class="number">2</span>) f[i+<span class="number">1</span>][j][<span class="number">1</span>] = <span class="built_in">tense</span>(f[i+<span class="number">1</span>][j][<span class="number">1</span>], f[i][j<span class="number">-1</span>][<span class="number">1</span>] + <span class="built_in">Eap11</span>(i) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    n = <span class="built_in">get</span>();  m = <span class="built_in">get</span>();  v = <span class="built_in">get</span>();  e = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) c[i] = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) d[i] = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;k[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(w, <span class="number">1</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(w));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=v; i++) w[i][i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=e; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="built_in">get</span>();  y = <span class="built_in">get</span>();  z = <span class="built_in">get</span>();</span><br><span class="line">        w[x][y] = <span class="built_in">min</span>(w[x][y], z);</span><br><span class="line">        w[y][x] = <span class="built_in">min</span>(w[y][x], z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Floyed</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=m; j++)</span><br><span class="line">            f[i][j][<span class="number">0</span>] = f[i][j][<span class="number">1</span>] = INF;</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = f[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n<span class="number">-1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=m; j++)</span><br><span class="line">            <span class="built_in">DisApply</span>(i,j), <span class="built_in">Apply</span>(i,j);</span><br><span class="line"></span><br><span class="line">    Ans = INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=m; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">tense</span>(Ans, f[n][j][<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">tense</span>(Ans, f[n][j][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>期望DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[构造]Summer Reading</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%9E%84%E9%80%A0%5DSummer%20Reading/</url>
    <content><![CDATA[<h1>Summer Reading</h1>
<p>Time Limit: 20 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012715.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012719.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012721.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>7<br>
　　0 1 0 0 0 3 0</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3<br>
　　1 1 2 2 3 3 3</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012724.png" alt="img"></p>
<h2 id="Solution">Solution</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012726.png" alt="img"></p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[ONE];</span><br><span class="line"><span class="keyword">int</span> vis[ONE], ans[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val, times;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(power a, power b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a.val != b.val) <span class="keyword">return</span> a.val &lt; b.val;</span><br><span class="line">        <span class="keyword">return</span> a.times &lt; b.times;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;low[ONE], up[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> );</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_first</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    low[<span class="number">1</span>] = up[<span class="number">1</span>] = (power)&#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        low[i] = low[i - <span class="number">1</span>], up[i] = up[i - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(++low[i].times &gt; <span class="number">5</span>) low[i] = (power)&#123;low[i].val + <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(++up[i].times &gt; <span class="number">2</span>) up[i] = (power)&#123;up[i].val + <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(a[i] != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(low[i].val &gt; a[i] || up[i].val &lt; a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            low[i] = <span class="built_in">max</span>(low[i], (power)&#123;a[i], <span class="number">1</span>&#125;);</span><br><span class="line">            up[i] = <span class="built_in">min</span>(up[i], (power)&#123;a[i], <span class="number">5</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(low[i].val &gt; up[i].val) &#123;<span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">1</span>] &gt; <span class="number">1</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">    <span class="built_in">Deal_first</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> val = up[n].val - (up[n].times == <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(low[n].val &gt; val) &#123;<span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        val = <span class="built_in">min</span>(val, up[i].val);</span><br><span class="line">        val -= vis[val] == <span class="number">5</span>;</span><br><span class="line">        ans[i] = val, vis[val]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ans[<span class="number">1</span>] &lt;= <span class="number">0</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[n]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, ans[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>[构造]Tautonym Puzzle</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%9E%84%E9%80%A0%5DTautonym%20Puzzle/</url>
    <content><![CDATA[<h1>Tautonym Puzzle</h1>
<p>Time Limit: 50 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>定义一个序列贡献为1，当且仅当这个序列 由两个相同的串拼接而成，比如123123。</p>
<p>请构造一个序列，使得它子序列的贡献和为n。</p>
<p>要求序列长度&lt;=200，权值&lt;=100.</p>
<h2 id="Input">Input</h2>
<p>一行一个n。</p>
<h2 id="Output">Output</h2>
<p>第一行为长度len，表示你构造出的序列长度。</p>
<p>第二行为你构造出的序列。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>7</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>4<br>
　　1 1 1 1</p>
<h2 id="HINT">HINT</h2>
<p>n &lt;= 1e12</p>
<h2 id="Solution">Solution</h2>
<p>构造题到<strong>恰好为n</strong>的。一般有两种方法：<br>
　　　　<strong>1. 可以构造出2^n，并且每部分互不影响；</strong><br>
　　　　<strong>2. 有方法添加若干元素使得原有答案*2或+1。</strong></p>
<p><strong>我们先考虑第一种方法。</strong><br>
　　显然我们<strong>把 n 化为二进制</strong>。并且发现<strong>连续 x 个相同的数提供的贡献为2^(x-1)-1</strong>，并且<strong>若干个连续的不影响</strong>。<br>
　　这样 <strong>s</strong> 需要<strong>1+2+……+log2(n)+(log2(n) * 2)（用于补1）</strong>，极限是<strong>900</strong>。不能满足条件。</p>
<p><strong>我们再考虑第二种方法。</strong><br>
　　s&lt;=200，权值&lt;=100。长度有5 * log2(n)可用，权值有2 * log2(n)可用。<br>
　　先考虑这样一个问题：<br>
　　　　<strong>&lt;p1,p2,…,pk&gt;<strong>已经是一个</strong>排列</strong>了，我们在后面加上**&lt;1,2,…,k&gt;<strong>之后的</strong>贡献是多少**。<br>
　　显然，此时贡献为：<strong>&lt;p1,p2,…,pk&gt;的上升序列的个数</strong>。<br>
　　那么我们把问题转化为：<strong>构造一个上升序列个数为n的排列</strong>。</p>
<p>假设我们原来的排列**&lt;p1,p2,…,pk&gt;<strong>已经</strong>x<strong>个上升序列了，现在填入</strong>k+1**。</p>
<p>显然，<strong>在前面填一个k+1</strong>贡献会变为：<strong>x+1</strong>。完成了**+1<strong>部分。<br>
　　显然，<strong>在最后填一个k+1</strong>贡献会变为：<strong>x*2+1</strong>，这里</strong>多了一个+1**。怎么办呢？</p>
<p>显然一开始是0，<strong>经过3次操作</strong>：<strong>0*2+1=1，1*2+1=3，3*2+1=7</strong>；<br>
　　假设一开始是1，<strong>经过3次操作</strong>：<strong>1*2=2，2*2=4，4*2=8</strong>。</p>
<p>发现我们如果<strong>将初值1</strong>的话，<strong>我们每次x*=2</strong>，<strong>最后再-1</strong>和原来的效果是一样的。这样就完成了*<strong>2</strong>部分。</p>
<p>最后用一个递归即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>, Q = <span class="number">1</span>; <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &lt; <span class="number">48</span> || c &gt; <span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) Q = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res = c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &gt;= <span class="number">48</span> &amp;&amp; c &lt;= <span class="number">57</span>)</span><br><span class="line">        res = res * <span class="number">10</span> + c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">return</span> res * Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s64 n;</span><br><span class="line"><span class="keyword">int</span> now;</span><br><span class="line">deque &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(s64 n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(n &amp; <span class="number">1</span>) <span class="built_in">Solve</span>(n - <span class="number">1</span>), q.<span class="built_in">push_front</span>(++now);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">Solve</span>(n / <span class="number">2</span>), q.<span class="built_in">push_back</span>(++now);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">Solve</span>(++n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, now &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, q.<span class="built_in">front</span>()), q.<span class="built_in">pop_front</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= now; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>[树状数组]上帝造题的七分钟</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%5D%E4%B8%8A%E5%B8%9D%E9%80%A0%E9%A2%98%E7%9A%84%E4%B8%83%E5%88%86%E9%92%9F/</url>
    <content><![CDATA[<h1>上帝造题的七分钟</h1>
<p>Time Limit: 20 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>“第一分钟，X说，要有矩阵，于是便有了一个里面写满了0的n×m矩阵。<br>
　　第二分钟，L说，要能修改，于是便有了将左上角为(a,b)，右下角为(c,d)的一个矩形区域内的全部数字加上一个值的操作。<br>
　　第三分钟，k说，要能查询，于是便有了求给定矩形区域内的全部数字和的操作。<br>
　　第四分钟，彩虹喵说，要基于二叉树的数据结构，于是便有了数据范围。<br>
　　第五分钟，和雪说，要有耐心，于是便有了时间限制。<br>
　　第六分钟，吃钢琴男说，要省点事，于是便有了保证运算过程中及最终结果均不超过32位有符号整数类型的表示范围的限制。<br>
　　第七分钟，这道题终于造完了，然而，造题的神牛们再也不想写这道题的程序了。”<br>
　　    ——《上帝造裸题的七分钟》<br>
　　所以这个神圣的任务就交给你了。</p>
<h2 id="Input">Input</h2>
<p>输入数据的第一行为X n m，代表矩阵大小为n×m。<br>
　　从输入数据的第二行开始到文件尾的每一行会出现以下两种操作：<br>
　　　　L a b c d delta —— 代表将(a,b),(c,d)为顶点的矩形区域内的所有数字加上delta。<br>
　　　　k a b c d　　 —— 代表求(a,b),(c,d)为顶点的矩形区域内所有数字的和。<br>
　　请注意，k为小写。</p>
<h2 id="Output">Output</h2>
<p>对于每个操作，输出一个答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>X 4 4<br>
　L 1 1 3 3 2<br>
　L 2 2 4 4 1<br>
　k 2 2 3 3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>12</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=n,m&lt;=2048, |delta|&lt;=500, 操作数&lt;=200000.</p>
<h2 id="Main-idea">Main idea</h2>
<p>维护一个数据结构，支持矩阵加减一个数，矩阵求和。</p>
<h2 id="Solution">Solution</h2>
<p>我们运用二维树状数组。</p>
<p>直接维护显然不行，我们令 A[i][j] 表示 (i,j) 到 (n,m) 的矩阵加的东西，然后推一下式子：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527201300.png" alt="img"></p>
<p>那么再维护一个 A[i][j]*i, A[i][j]*j, A[i][j]<em>i</em>j，即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">2050</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> x_1,y_1,x_2,y_2,z;</span><br><span class="line"><span class="keyword">char</span> c[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Bit</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> C[ONE][ONE];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x&amp;-x;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=y;j&lt;=m;j+=<span class="built_in">lowbit</span>(j))</span><br><span class="line">                C[i][j] += z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x;i&gt;=<span class="number">1</span>;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=y;j&gt;=<span class="number">1</span>;j-=<span class="built_in">lowbit</span>(j))</span><br><span class="line">                res += C[i][j];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;A,Ai,Aj,Aij;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A.<span class="built_in">Add</span>(x,y,z);    Ai.<span class="built_in">Add</span>(x,y,z*x);    Aj.<span class="built_in">Add</span>(x,y,z*y);    Aij.<span class="built_in">Add</span>(x,y,z*x*y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.<span class="built_in">Query</span>(x,y)*(x*y+x+y+<span class="number">1</span>) - Ai.<span class="built_in">Query</span>(x,y)*(y+<span class="number">1</span>) - Aj.<span class="built_in">Query</span>(x,y)*(x+<span class="number">1</span>) + Aij.<span class="built_in">Query</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;X %d %d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;c)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x_1, &amp;y_1, &amp;x_2, &amp;y_2);</span><br><span class="line">        <span class="keyword">if</span>(c[<span class="number">0</span>]==<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;z);</span><br><span class="line">            <span class="built_in">Add</span>(x_1,y_1,z);    <span class="built_in">Add</span>(x_2+<span class="number">1</span>,y_1,-z);    <span class="built_in">Add</span>(x_1,y_2+<span class="number">1</span>,-z);    <span class="built_in">Add</span>(x_2+<span class="number">1</span>,y_2+<span class="number">1</span>,z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">Get</span>(x_2,y_2) - <span class="built_in">Get</span>(x_1<span class="number">-1</span>,y_2) - <span class="built_in">Get</span>(x_2,y_1<span class="number">-1</span>) + <span class="built_in">Get</span>(x_1<span class="number">-1</span>,y_1<span class="number">-1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>[树状数组]异色弧</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%5D%E5%BC%82%E8%89%B2%E5%BC%A7/</url>
    <content><![CDATA[<h1>异色弧</h1>
<p>Time Limit: 20 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527195133.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527195135.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p>仅一行一个整数表示答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>8<br>
　　1 2 3 1 2 3 2 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>8</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527195137.png" alt="img"></p>
<h2 id="Main-idea">Main idea</h2>
<p>给定若干个点，每个点有一个颜色，颜色一样的可以组成一个区间，询问有几个交。</p>
<h2 id="Solution">Solution</h2>
<p>BearChild只会70分的做法，记录N表示区间个数，效率为O(Nlog(N))。这里介绍一下。</p>
<p>我们基于<strong>将所有区间提取出来计算</strong>，可以用一个vector存一下记录相同颜色的，然后相同颜色的任意组合即可组成可行的区间。</p>
<p>首先我们考虑容斥：<strong>颜色不同的相交个数 = 不考虑颜色的总相交个数 - 颜色相同的相交个数</strong>。然后我们分段来解：</p>
<p><strong>1. 不考虑颜色的总相交个数：</strong><br>
　　　　我们考虑带log的算法，先将所有区间按照右端点（细节：若相同则将左端点大的放在前面，保证不会算入答案）排序，然后顺序往后做，每次用树状数组在区间<strong>左端点+1</strong>，<strong>区间(右端点-1)处-1</strong>（细节：右端点-1处是为了处理前一个的右端点=这一个的左端点情况），然后每次只要<strong>查询(左端点-1)的前缀和</strong>，显然就是在这个区间前和这个区间的交的个数。这样我们就可以计算出总相交个数了。</p>
<p><strong>2.颜色相同的相交个数：</strong><br>
　　　　我们考虑如何计算颜色相同的相交个数，设a表示一个颜色的个数，显然个数就是：<strong>C(a,4)</strong>。也就是任意4个相同颜色点可以组成一个交。</p>
<p>然后我们相减一下，就可以得到答案啦。注意一下细节。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; q[ONE];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> A[ONE];</span><br><span class="line"><span class="keyword">int</span> cnt,Ans;</span><br><span class="line"><span class="keyword">int</span> Max,vis[ONE];</span><br><span class="line"><span class="keyword">int</span> Jc[ONE],inv[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">&#125;a[<span class="number">20000001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.r == b.r) <span class="keyword">return</span> a.l &gt; b.l;</span><br><span class="line">    <span class="keyword">return</span> a.r &lt; b.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Moit</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;MOD) a+=MOD;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;MOD) a-=MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> D</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Quickpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=(s64)res*a%MOD;</span><br><span class="line">            a=(s64)a*a%MOD;</span><br><span class="line">            b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Deal_Jc</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Jc[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) Jc[i] = (s64)Jc[i<span class="number">-1</span>]*i%MOD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Deal_inv</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        inv[<span class="number">0</span>]=<span class="number">1</span>;    inv[k] = <span class="built_in">Quickpow</span>(Jc[k],MOD<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--) inv[i] = (s64)inv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">Deal_Jc</span>(k);    <span class="built_in">Deal_inv</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (s64)Jc[n]*inv[m]%MOD*inv[n-m]%MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Bit</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> C[ONE];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> R,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=R;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">            C[i]+=x, <span class="built_in">Moit</span>(C[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=R;i&gt;=<span class="number">1</span>;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line">            res+=C[i], <span class="built_in">Moit</span>(res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    D::<span class="built_in">pre</span>(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        A[i]=<span class="built_in">get</span>();</span><br><span class="line">        q[A[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">        Max=<span class="built_in">max</span>(Max,A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=Max;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!q[k].<span class="built_in">size</span>()) <span class="keyword">continue</span>;</span><br><span class="line">        Ans-=<span class="built_in">C</span>(q[k].<span class="built_in">size</span>(),<span class="number">4</span>);    <span class="built_in">Moit</span>(Ans);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt; q[k].<span class="built_in">size</span>();i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt; q[k].<span class="built_in">size</span>();j++)</span><br><span class="line">                a[++cnt].l=q[k][i], a[cnt].r=q[k][j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+cnt+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Ans += Bit::<span class="built_in">Query</span>(a[i].l<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">Moit</span>(Ans);</span><br><span class="line">        Bit::<span class="built_in">Add</span>(a[i].l,<span class="number">1</span>), Bit::<span class="built_in">Add</span>(a[i].r<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title>[概率DP]开锁</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%A6%82%E7%8E%87DP%5D%E5%BC%80%E9%94%81/</url>
    <content><![CDATA[<h1>开锁</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>A君有n个盒子，每个盒子被一把锁锁着，每个盒子内都有一把钥匙。</p>
<p>对于每个盒子而言有且仅有一把钥匙能打开锁着它的锁，而打开它后便能拿着放置在这个盒子内的钥匙去开启其他盒子。<br>
现在A君打算随机选择k个盒子并用魔法将它们打开，并用所得到的钥匙去尝试开启其他所有的盒子(开启一个盒子后，新得到的钥匙还能继续尝试使用)。<br>
A君想知道：最终他能打开所有盒子的概率是多少，请你帮助他。</p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194201.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194204.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4<br>
　　5 1<br>
　　2 5 4 3 1<br>
　　5 2<br>
　　2 5 4 3 1<br>
　　5 3<br>
　　2 5 4 3 1<br>
　　5 4<br>
　　2 5 4 3 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>0.000000000<br>
　　0.600000000<br>
　　0.900000000<br>
　　1.000000000</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194206.png" alt="img"></p>
<h2 id="Main-idea">Main idea</h2>
<p>一个宝箱内有一个可以开启别的宝箱的钥匙，可以选择k个宝箱，询问能开启所有宝箱的概率。</p>
<h2 id="Solution">Solution</h2>
<p>我们一看就知道这是一道概率DP的题目。</p>
<p>我们发现，每个宝箱有一个对应的钥匙，那么显然若干个宝箱会<strong>构成一个环</strong>，只要开了一个环中的一个宝箱就可以开启这个环。</p>
<p>那么我们要求的就是：<strong>在n个数中选k次，已知每个环的大小，选中环中的一个元素即视为选中了这个环，问每个环都被至少选了一次的概率。</strong></p>
<p>显然直接记概率不好计算，于是我们可以算出可行的方案数。</p>
<p>我们先求出每个环的大小，然后令 f[i][j] 表示前 i 个环选了 j 个元素的方案数，那么显然可以枚举这一个环中选了几个，那么显然有：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194210.png" alt="img"></p>
<p>然后我们最后用 <strong>f[num][k] / 总方案数 C(n,k</strong>) 即可。注意要用double来存，否则数字不够大。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">310</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,n,k;</span><br><span class="line"><span class="keyword">int</span> a[ONE],vis[ONE],cnt;</span><br><span class="line"><span class="keyword">int</span> ring[ONE],num;</span><br><span class="line"><span class="keyword">int</span> record;</span><br><span class="line"><span class="keyword">double</span> C[ONE][ONE];</span><br><span class="line"><span class="keyword">double</span> f[ONE][ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    k=<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=<span class="built_in">get</span>(),vis[i]=<span class="number">0</span>;</span><br><span class="line">    num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> x=i;</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;;)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[x]=<span class="number">1</span>; x=a[x]; cnt++;</span><br><span class="line">            <span class="keyword">if</span>(x==i) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ring[++num]=cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>; record=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        record+=ring[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=record;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=ring[i] &amp;&amp; x&lt;=j;x++)</span><br><span class="line">            &#123;</span><br><span class="line">                f[i][j] += f[i<span class="number">-1</span>][j-x] * C[ring[i]][x];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;(<span class="keyword">double</span>)f[num][k]/C[n][k]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">300</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">300</span>;j++)</span><br><span class="line">            C[i][j]=C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">        <span class="built_in">Solve</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>概率DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[模拟退火]吊打xxx</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%5D%E5%90%8A%E6%89%93xxx/</url>
    <content><![CDATA[<h1>吊打XXX</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>gty又虐了一场比赛，被虐的蒟蒻们决定吊打gty。<br>
　　gty见大势不好机智的分出了n个分身，但还是被人多势众的蒟蒻抓住了。<br>
　　蒟蒻们将n个gty吊在n根绳子上，每根绳子穿过天台的一个洞。这n根绳子有一个公共的绳结x。<br>
　　吊好gty后蒟蒻们发现由于每个gty重力不同，绳结x在移动。<br>
　　蒟蒻wangxz脑洞大开的决定计算出x最后停留处的坐标，由于他太弱了决定向你求助。<br>
　　不计摩擦，不计能量损失，由于gty足够矮所以不会掉到地上。</p>
<h2 id="Input">Input</h2>
<p>输入第一行为一个正整数n，表示gty的数目。<br>
　　接下来n行,每行三个整数xi，yi，wi，表示第i个gty的横坐标，纵坐标和重力。<br>
　　对于20%的数据，gty排列成一条直线。</p>
<h2 id="Output">Output</h2>
<p>输出1行两个浮点数（保留到小数点后3位），表示最终x的横、纵坐标。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3<br>
　0 0 1<br>
　0 2 1<br>
　1 1 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>0.577 1.000</p>
<h2 id="HINT">HINT</h2>
<p>对于50%的数据，1&lt;=n&lt;=1000。<br>
　　对于100%的数据，1&lt;=n&lt;=10000,-100000&lt;=xi,yi&lt;=100000</p>
<h2 id="Main-idea">Main idea</h2>
<p>求一个坐标，使得整个坐标到其余点的dist*val最小。</p>
<h2 id="Solution">Solution</h2>
<p>我们看到这种数据，显然使用模拟退火即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">10005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> Ans_min = <span class="number">1.0</span>*<span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">double</span> T;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    <span class="keyword">double</span> val;</span><br><span class="line">&#125;a[ONE],Now,Ans,A;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">(power a,power b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>( (a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Judge</span><span class="params">(power Now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        res+= a[i].val * <span class="built_in">dist</span>(Now,a[i]);</span><br><span class="line">    <span class="keyword">if</span>(res &lt; Ans_min) Ans_min = res, Ans = Now;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Random</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> (<span class="keyword">double</span>)<span class="built_in">rand</span>()/RAND_MAX;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SA</span><span class="params">(<span class="keyword">double</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Now = Ans;</span><br><span class="line">    <span class="keyword">while</span>(T &gt; <span class="number">0.001</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        A.x = Now.x + T*(<span class="built_in">Random</span>() * <span class="number">2</span> <span class="number">-1</span>);</span><br><span class="line">        A.y = Now.y + T*(<span class="built_in">Random</span>() * <span class="number">2</span> <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">double</span> dE = <span class="built_in">Judge</span>(Now) - <span class="built_in">Judge</span>(A);</span><br><span class="line">        <span class="keyword">if</span>(dE &gt; <span class="number">0</span> || <span class="built_in">Random</span>() &lt;= <span class="built_in">exp</span>(dE/T))</span><br><span class="line">            Now = A;</span><br><span class="line">        T *= <span class="number">0.98</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">1000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        A.x = Ans.x + T*(<span class="built_in">Random</span>() * <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">        A.y = Ans.y + T*(<span class="built_in">Random</span>() * <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">Judge</span>(A);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i].x=<span class="built_in">get</span>();   a[i].y=<span class="built_in">get</span>();   a[i].val=<span class="built_in">get</span>();</span><br><span class="line">        Ans.x += a[i].x;    Ans.y += a[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    Ans.x/=n;   Ans.y/=n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SA</span>(<span class="number">1000001</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.3lf %.3lf&quot;</span>,Ans.x,Ans.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>模拟退火</tag>
      </tags>
  </entry>
  <entry>
    <title>[模拟退火]宅男小C</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%5D%E5%AE%85%E7%94%B7%E5%B0%8FC/</url>
    <content><![CDATA[<h1>宅男小C</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>众所周知，小C是个宅男，所以他的每天的食物要靠外卖来解决。小C现在有M元钱，他想知道这些钱他最多可以吃多少天。</p>
<p>餐厅提供N种食物，每种食物有两个属性，单价<strong>Pi</strong>和保质期<strong>Si</strong>，表示小C需要花<strong>Pi</strong>元才能买到足够一天吃的这种食物，并且需要在送到<strong>Si</strong>天内吃完，否则食物会变质，就不能吃了，若<strong>Si</strong>为0则意味着必须在送到当天吃完。另外，每次送餐需要额外<strong>F</strong>元送餐费。</p>
<h2 id="Input">Input</h2>
<p>每个测试点包含多组测试数据；</p>
<p>每个测试数据第一行三个整数M,F,N，如题目描述中所述；</p>
<p>以下N行，每行两个整数，分别表示<strong>Pi和*<em>Si。*</em></strong></p>
<h2 id="Output">Output</h2>
<p>对于每个测试数据输出一行，表示最多可以吃的天数。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>32 5 2<br>
　5 0<br>
　10 2<br>
　10 10 1<br>
　10 10<br>
　10 1 1<br>
　1 5</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3<br>
　　0<br>
　　8</p>
<h2 id="HINT">HINT</h2>
<p>对于40%的数据，M,Si &lt;= 2*10^6；<br>
　对于100%的数据，1 ≤ N ≤ 200，M, Si&lt;= 10^18，1 ≤ T ≤ 50，1 ≤ F ≤ M，1 ≤ Pi ≤ M。</p>
<h2 id="Main-idea">Main idea</h2>
<p>每种食物有一个花费和一个保质期，在保质期内食用可以多活一天，每次购买可以买多个食物，买一次会耗费一些钱，问最多能活几天。</p>
<h2 id="Solution">Solution</h2>
<p>我们先从简单的做法入手，如果<strong>确定了购买次数</strong>，能求出最多活几天吗？答案是显然可以的。我们运用贪心：首先，若存在某种<strong>价格又贵保质期又短</strong>的食物显然是没有用的，我们sort一遍直接删去，然后我们可以得到一个<strong>价格上升且保质期上升</strong>的序列。我们基于这里开始贪心：我们先从便宜的食物入手，显然每次都是从这种食物吃起，仅存在两种不购买便宜的情况：<strong>1.保质期过了;2.钱不够满足所有次数了</strong>。如果保质期过了，我们就选择下一个食物，如果钱不够满足所有次数了，那就能买几次买几次，记录一下答案，退出。</p>
<p>我们解决了<strong>确定购买次数最多活几天</strong>之后，再仔细思考：由于购买会花钱，那么我们大胆猜测<strong>购买次数和活的天数有一定的规律</strong>，我们画了几张图之后，发现其比例<strong>大致单峰</strong>，如下图所示：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527200032.png" alt="img"></p>
<p>我们发现，显然<strong>中间有一段波动</strong>，那么就不能使用三分法了。那怎么办呢？但是我们再发现：<strong>函数最后波动段非常短</strong>！显然在随机范围内可行，那么显然我们可以使用随机化算法！这里我们运用模拟退火。直接模拟退火<strong>随机一个购买次数</strong>，然后Judge更新即可。</p>
<p>随机化算法是坠吼的！(≧▽≦)/</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">10005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">s64 A,Now,Ans;</span><br><span class="line">s64 Total,F;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    s64 cost;</span><br><span class="line">    s64 days;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.cost == b.cost) <span class="keyword">return</span> a.days &gt; b.days;</span><br><span class="line">    <span class="keyword">return</span> a.cost &lt; b.cost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);    s64 d=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> m=n;    n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">if</span>(a[i].days &gt; d)</span><br><span class="line">            a[++n]=a[i], d=a[i].days;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">Judge</span><span class="params">(s64 times)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(times&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    s64 Money = Total - times * F;</span><br><span class="line">    s64 res = <span class="number">0</span>, num, day = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num = <span class="built_in">min</span>(Money / a[i].cost / times, a[i].days - day + <span class="number">1</span>);</span><br><span class="line">        Money -= num * a[i].cost * times;</span><br><span class="line">        day += num; res += times * num;</span><br><span class="line">        <span class="keyword">if</span>(day &lt;= a[i].days)</span><br><span class="line">        &#123;</span><br><span class="line">            num = Money / a[i].cost;</span><br><span class="line">            res += num;</span><br><span class="line">            Ans = <span class="built_in">max</span>(Ans, res);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Ans = <span class="built_in">max</span>(Ans, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Random</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">rand</span>()/(<span class="keyword">double</span>)RAND_MAX;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SA</span><span class="params">(<span class="keyword">double</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(T &gt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        A = Now + (s64)(T * (<span class="built_in">Random</span>()*<span class="number">2</span><span class="number">-1</span>)) ;</span><br><span class="line">        <span class="keyword">if</span>(A&lt;=<span class="number">0</span>) A = T*<span class="built_in">Random</span>();</span><br><span class="line">        s64 dE = <span class="built_in">Judge</span>(A) - <span class="built_in">Judge</span>(Now);</span><br><span class="line">        <span class="keyword">if</span>(dE &gt; <span class="number">0</span>)</span><br><span class="line">            Now = A;</span><br><span class="line">        T *= <span class="number">0.93</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>,&amp;a[i].cost,&amp;a[i].days);</span><br><span class="line">    <span class="built_in">pre</span>();</span><br><span class="line">    Ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">SA</span>(Total / F + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %d&quot;</span>,&amp;Total,&amp;F,&amp;n) != EOF)</span><br><span class="line">        <span class="built_in">Solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>模拟退火</tag>
      </tags>
  </entry>
  <entry>
    <title>[模拟退火]咏叹</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%5D%E5%92%8F%E5%8F%B9/</url>
    <content><![CDATA[<h1>咏叹</h1>
<p>Time Limit: 100 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>有n根木棍，第i根长度为ai。你要贴着墙围出一个矩形区域，木棍围成的矩形边缘必须平行或垂直于墙，且又一边必须利用墙。你可以把至多1根木棍劈成两根(不一定要在整数位置)。最大化矩形面积。</p>
<h2 id="Input">Input</h2>
<p>包含多组数据。每组数据第一行一个整数n，第二行n个整数ai。</p>
<h2 id="Output">Output</h2>
<p>输出面积最大的矩形与墙壁平行的那条边的长度(显然是一个整数)，若有多个最优解输出与墙壁平行的那条边最长的。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3<br>
3 3 3<br>
4<br>
4 4 4 4</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>6<br>
　　8</p>
<h2 id="HINT">HINT</h2>
<p>对于10%的数据，n=2。<br>
　　对于30%的数据，n&lt;=15。<br>
　　对于50%的数据，n&lt;=32。<br>
　　对于另外20%的数据，ai&lt;=100。<br>
　　对于100%的数据，2&lt;=n&lt;=40，1&lt;=ai&lt;=10^9，数据不超过10组。</p>
<h2 id="Solution">Solution</h2>
<p>首先，必然是<strong>全部木棍都用上的时候最优</strong>，对于n=2的时候，显然就是<strong>分三种情况</strong>讨论一下就好了。</p>
<p>然后我们<strong>从n=2的情况拓展</strong>。发现，其实可以把多个木棍并在一起，使其变为n=2的情况，然后讨论。那么现在<strong>答案只和两段的长度</strong>有关了。</p>
<p>但是直接暴力搜索是O(2^40)的，显然不行，我们考虑<strong>分为两部分</strong>来搜索，搜索前n/2个，和后n/2个，表示选不选得到的价值，现在效率是O(2*2^20)。</p>
<p>然后怎么得到答案呢？显然：如果我们设宽为x，则长为tot-2x(tot为总长)，那么这是一个<strong>二次函数</strong>，必然有峰值。</p>
<p>所以我们大胆猜测，我们<strong>确定了一半，另外一半使得其答案最优的话也可能满足有峰值的性质</strong>。</p>
<p>然后我们固定一半，另一半运用模拟退火求解即可！</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">2100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">45</span>],top1,top2;</span><br><span class="line">s64 Stk1[ONE],Stk2[ONE];</span><br><span class="line">s64 Square, Ans, tot, RE;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">Get</span><span class="params">(s64 width,s64 length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s64 res = length * width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(res &gt; Square || (res==Square &amp;&amp; length&gt;Ans))</span><br><span class="line">        Square = res, Ans = length;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">Check</span><span class="params">(s64 A,s64 B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A &gt; B) <span class="built_in">swap</span>(A,B);</span><br><span class="line">    s64 res = <span class="number">0</span>;</span><br><span class="line">    res = <span class="built_in">max</span>(res,<span class="built_in">Get</span>(A, B-A));</span><br><span class="line">    res = <span class="built_in">max</span>(res,<span class="built_in">Get</span>(A/<span class="number">2</span>,B));</span><br><span class="line">    res = <span class="built_in">max</span>(res,<span class="built_in">Get</span>(B/<span class="number">2</span>,A));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs1</span><span class="params">(s64 val,<span class="keyword">int</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T&gt;n/<span class="number">2</span>) &#123;Stk1[++top1] = val; <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="built_in">Dfs1</span>(val,T+<span class="number">1</span>);    <span class="built_in">Dfs1</span>(val+a[T],T+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs2</span><span class="params">(s64 val,<span class="keyword">int</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T&gt;n) &#123;Stk2[++top2] = val; <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="built_in">Dfs2</span>(val,T+<span class="number">1</span>);    <span class="built_in">Dfs2</span>(val+a[T],T+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">Judge</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Check</span>(Stk1[j] + Stk2[i],tot - Stk1[j] -Stk2[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Random</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> (<span class="keyword">double</span>)<span class="built_in">rand</span>()/RAND_MAX;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Now = top2/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">double</span> Temper = top2/<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">while</span>(Temper &gt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> A = Now + (<span class="keyword">int</span>)Temper * (<span class="built_in">Random</span>()*<span class="number">2.0</span><span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(A&lt;=<span class="number">0</span>) A = (<span class="keyword">int</span>)Temper * <span class="built_in">Random</span>() + <span class="number">1</span>;</span><br><span class="line">        s64 dE = <span class="built_in">Judge</span>(A,id) - <span class="built_in">Judge</span>(Now,id);</span><br><span class="line">        <span class="keyword">if</span>(dE &gt; <span class="number">0</span> || <span class="built_in">Random</span>()&lt;=<span class="built_in">exp</span>(dE))</span><br><span class="line">            Now = A;</span><br><span class="line">        <span class="keyword">if</span>(Temper &gt; top2 / <span class="number">2</span>) Temper *= <span class="number">0.1</span>;</span><br><span class="line">        Temper *= <span class="number">0.75</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Judge</span>(Now<span class="number">-1</span>,id);    <span class="built_in">Judge</span>(Now+<span class="number">1</span>,id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top1 = top2 = tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=<span class="built_in">get</span>(),a[i]*=<span class="number">2</span>,tot += a[i];</span><br><span class="line">    <span class="built_in">Dfs1</span>(<span class="number">0</span>,<span class="number">1</span>);        <span class="built_in">sort</span>(Stk1+<span class="number">1</span>,Stk1+top1+<span class="number">1</span>);    top1 = <span class="built_in">unique</span>(Stk1+<span class="number">1</span>,Stk1+top1+<span class="number">1</span>)-Stk1<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">Dfs2</span>(<span class="number">0</span>,n/<span class="number">2</span>+<span class="number">1</span>);    <span class="built_in">sort</span>(Stk2+<span class="number">1</span>,Stk2+top2+<span class="number">1</span>);    top2 = <span class="built_in">unique</span>(Stk2+<span class="number">1</span>,Stk2+top2+<span class="number">1</span>)-Stk2<span class="number">-1</span>;</span><br><span class="line">    Ans = Square = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=top1;i++)</span><br><span class="line">        <span class="built_in">Deal</span>(i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,Ans/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(s64 A,s64 B,<span class="keyword">int</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Check</span>(A,B);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Dfs</span>(A+a[T],B,T+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Dfs</span>(A,B+a[T],T+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Ans = Square = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=<span class="built_in">get</span>(),a[i]*=<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">Dfs</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,Ans/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">25</span>) <span class="built_in">Solve1</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">Solve2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>模拟退火</tag>
      </tags>
  </entry>
  <entry>
    <title>[模拟退火]小Y的地铁</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%5D%E5%B0%8FY%E7%9A%84%E5%9C%B0%E9%93%81/</url>
    <content><![CDATA[<h1>小Y的地铁</h1>
<p>Time Limit: 50 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528015000.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528015003.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p>对于每组输入数据，输出一行一个整数，表示除掉这 n 个换乘站之外，最少有几个换乘站。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4<br>
　　4<br>
　　1 2 1 2<br>
　　8<br>
　　1 2 3 4 1 2 3 4<br>
　　5<br>
　　5 4 3 3 5<br>
　　8<br>
　　1 2 3 4 1 3 2 4</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>0<br>
　　0<br>
　　0<br>
　　1</p>
<h2 id="HINT">HINT</h2>
<p>n &lt;= 44</p>
<h2 id="Solution">Solution</h2>
<p>首先，答案显然<strong>只和几个区域的连通状态</strong>有关，那么我们可以写出<strong>四种本质不同的方案</strong>。（即下图中被线分开的六块）。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528015006.png" alt="img"></p>
<p>我们可以考虑，对于一条线，其他线（显然仅有 <strong>部分相交</strong> 与 <strong>完全相交</strong> 两种）造成的贡献。打出表来，上图是<strong>不会造成交点的线段种类</strong>。</p>
<p>既然知道了这个，我们的复杂度显然可以做到 <strong>O(4 ^ (n / 2))</strong>。还是不足以通过，怎么办呢？</p>
<p>模拟退火大法好！</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>, Q = <span class="number">1</span>; <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &lt; <span class="number">48</span> || c &gt; <span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) Q = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res = c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &gt;= <span class="number">48</span> &amp;&amp; c &lt;= <span class="number">57</span>)</span><br><span class="line">        res = res * <span class="number">10</span> + c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">return</span> res * Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, num;</span><br><span class="line"><span class="keyword">int</span> pos[ONE], val[ONE];</span><br><span class="line"><span class="keyword">int</span> vis[ONE], a[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans = INF;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span> &#123;</span><span class="keyword">int</span> l, r;&#125; A[ONE];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x[ONE][ONE], y[ONE][ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_first</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x[<span class="number">1</span>][<span class="number">2</span>] = x[<span class="number">1</span>][<span class="number">4</span>] = x[<span class="number">1</span>][<span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line">    x[<span class="number">2</span>][<span class="number">1</span>] = x[<span class="number">2</span>][<span class="number">3</span>] = x[<span class="number">2</span>][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">    x[<span class="number">3</span>][<span class="number">1</span>] = x[<span class="number">3</span>][<span class="number">3</span>] = x[<span class="number">3</span>][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">    x[<span class="number">4</span>][<span class="number">2</span>] = x[<span class="number">4</span>][<span class="number">4</span>] = x[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) y[i][<span class="number">1</span>] = y[i][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Now;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Judge</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = Now;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = pos, j = pos + <span class="number">1</span>; j &lt;= num; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i].r &lt; A[j].l) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(A[i].r &lt; A[j].r) res -= !x[a[i]][a[j]];</span><br><span class="line">        <span class="keyword">if</span>(A[j].r &lt; A[i].r) res -= !y[a[i]][a[j]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j = pos; i &lt; pos; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i].r &lt; A[j].l) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(A[i].r &lt; A[j].r) res -= !x[a[i]][a[j]];</span><br><span class="line">        <span class="keyword">if</span>(A[j].r &lt; A[i].r) res -= !y[a[i]][a[j]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a[pos] = type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = pos, j = pos + <span class="number">1</span>; j &lt;= num; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i].r &lt; A[j].l) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(A[i].r &lt; A[j].r) res += !x[a[i]][a[j]];</span><br><span class="line">        <span class="keyword">if</span>(A[j].r &lt; A[i].r) res += !y[a[i]][a[j]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, j = pos; i &lt; pos; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(A[i].r &lt; A[j].l) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(A[i].r &lt; A[j].r) res += !x[a[i]][a[j]];</span><br><span class="line">        <span class="keyword">if</span>(A[j].r &lt; A[i].r) res += !y[a[i]][a[j]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Now = res, Ans = <span class="built_in">min</span>(Ans, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Random</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> (<span class="keyword">double</span>)<span class="built_in">rand</span>() / RAND_MAX;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">double</span> T = num * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(T &gt;= <span class="number">0.01</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="built_in">rand</span>() % num + <span class="number">1</span>, type = <span class="built_in">rand</span>() % <span class="number">4</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ori = Now, ori_type = a[pos];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> dE = <span class="built_in">Judge</span>(pos, type) - ori;</span><br><span class="line">        <span class="keyword">if</span>(dE &lt;= <span class="number">0</span> || <span class="built_in">Random</span>() &lt;= <span class="built_in">exp</span>(-dE / T)) a[pos] = type;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">Judge</span>(pos, ori_type);</span><br><span class="line"></span><br><span class="line">        T *= <span class="number">0.9993</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Ans = INF;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = <span class="built_in">get</span>(), pos[a[i]] = vis[a[i]] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        <span class="keyword">if</span>(!pos[a[i]]) pos[a[i]] = i;</span><br><span class="line"></span><br><span class="line">    num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span>(!vis[a[i]] &amp;&amp; pos[a[i]] != i)</span><br><span class="line">            A[++num] = (power)&#123;i, pos[a[i]]&#125;, vis[a[i]] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">        a[i] = <span class="built_in">rand</span>() % <span class="number">4</span> + <span class="number">1</span>;</span><br><span class="line">    Ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= num; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i].r &lt; A[j].l) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(A[i].r &lt; A[j].r) Ans += !x[a[i]][a[j]];</span><br><span class="line">            <span class="keyword">if</span>(A[j].r &lt; A[i].r) Ans += !y[a[i]][a[j]];</span><br><span class="line">        &#125;</span><br><span class="line">    Now = Ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">        <span class="built_in">SA</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Deal_first</span>();</span><br><span class="line">    <span class="keyword">int</span> T = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">        <span class="built_in">Deal</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>模拟退火</tag>
      </tags>
  </entry>
  <entry>
    <title>[模拟退火]瞭望塔</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%5D%E7%9E%AD%E6%9C%9B%E5%A1%94/</url>
    <content><![CDATA[<h1>瞭望塔</h1>
<p>Time Limit: 10 Sec Memory Limit: 162 MB</p>
<h2 id="Description">Description</h2>
<p>致力于建设全国示范和谐小村庄的H村村长dadzhi，决定在村中建立一个瞭望塔，以此加强村中的治安。</p>
<p>我们将H村抽象为一维的轮廓。如下图所示 我们可以用一条山的上方轮廓折线(x1, y1), (x2, y2), …. (xn, yn)来描述H村的形状，这里x1 &lt; x2 &lt; …&lt; xn。</p>
<p>瞭望塔可以建造在[x1, xn]间的任意位置, 但必须满足从瞭望塔的顶端可以看到H村的任意位置。</p>
<p>可见在不同的位置建造瞭望塔，所需要建造的高度是不同的。</p>
<p>为了节省开支，dadzhi村长希望建造的塔高度尽可能小。请你写一个程序，帮助dadzhi村长计算塔的最小高度。</p>
<h2 id="Input">Input</h2>
<p>第一行包含一个整数n，表示轮廓折线的节点数目。接下来第一行n个整数, 为x1 ~ xn. 第三行n个整数，为y1 ~ yn。</p>
<h2 id="Output">Output</h2>
<p>仅包含一个实数，为塔的最小高度，精确到小数点后三位。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4<br>
　10 20 49 59<br>
　0 10 10 0</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>14.500</p>
<h2 id="HINT">HINT</h2>
<p>N ≤ 300，输入坐标绝对值不超过106，注意考虑实数误差带来的问题。</p>
<h2 id="Solution">Solution</h2>
<p>首先，如果我们<strong>确定了一个点</strong>的话，显然是可以<strong>Check</strong>的。</p>
<p>对于 <strong>每一个点连向这个点</strong> 的<strong>连线</strong> 必须是要<strong>逆时针方向</strong>的。</p>
<p>那么<strong>如果有一个横坐标</strong>了，我们就可以二分答案了。怎么确定这个横坐标呢？</p>
<p>乍一看，数据这么小：当然是模拟退火啦！上一波退火美滋滋。٩(๑&gt;◡&lt;๑)۶</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> from, to;</span><br><span class="line"><span class="keyword">double</span> Ans = <span class="number">1e20</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PD</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(a - b) &lt;= eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Gety</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">PD</span>(a[i<span class="number">-1</span>].x, x) &lt;= <span class="number">0</span> &amp;&amp; <span class="built_in">PD</span>(x, a[i].x) &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> k = (a[i].y - a[i<span class="number">-1</span>].y) / (a[i].x - a[i<span class="number">-1</span>].x);</span><br><span class="line">            <span class="keyword">double</span> b = a[i<span class="number">-1</span>].y;</span><br><span class="line">            <span class="keyword">return</span> k * (x - a[i<span class="number">-1</span>].x) + b;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cross</span><span class="params">(power a, power b, power c)</span> </span>&#123;<span class="keyword">return</span> (a.x - c.x) * (b.y - c.y) - (b.x - c.x) * (a.y - c.y);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Check</span><span class="params">(power A)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">PD</span>(<span class="built_in">Cross</span>(a[i<span class="number">-1</span>], a[i], A), <span class="number">0</span>) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Judge</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> l = <span class="number">0</span>, r = <span class="number">1e10</span>, res;</span><br><span class="line">    <span class="keyword">double</span> y = <span class="built_in">Gety</span>(x);</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r - <span class="number">0.0001</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Check</span>( (power)&#123;x, y + mid&#125; )) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Check</span>( (power)&#123;x, y + l&#125; )) res = l; <span class="keyword">else</span> res = r;</span><br><span class="line">    Ans = <span class="built_in">min</span>(Ans, res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Random</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> (<span class="built_in">rand</span>()%<span class="number">1000</span>) / <span class="number">1000.00</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SA</span><span class="params">(<span class="keyword">double</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> Now = (from + to) / <span class="number">2</span>, A;</span><br><span class="line">    <span class="built_in">Judge</span>(Now);</span><br><span class="line">    <span class="keyword">while</span>(T &gt;= <span class="number">0.0001</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        A = Now + T * (<span class="built_in">Random</span>() * <span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(!(from &lt;= A &amp;&amp; A &lt;= to)) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">double</span> dE = <span class="built_in">Judge</span>(Now) - <span class="built_in">Judge</span>(A);</span><br><span class="line">        <span class="keyword">if</span>(dE &gt; <span class="number">0</span> || <span class="built_in">Random</span>() &lt;= <span class="built_in">exp</span>(dE / T))</span><br><span class="line">            Now = A;</span><br><span class="line">        T *= <span class="number">0.993</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">double</span> i = <span class="number">-1</span>; i &lt;= <span class="number">1</span>; i += <span class="number">0.001</span>)</span><br><span class="line">        <span class="built_in">Judge</span>(Now + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a[i].x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a[i].y);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    from = a[<span class="number">1</span>].x;  to = a[n].x;</span><br><span class="line">    <span class="built_in">SA</span>(to - from);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.3lf&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>模拟退火</tag>
      </tags>
  </entry>
  <entry>
    <title>[欧拉函数]Uria</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0%5DUria/</url>
    <content><![CDATA[<h1>Uria</h1>
<p>Time Limit: 20 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p>从前有个正整数 n。</p>
<p>对于一个正整数对 (a,b)，如果满足 a + b ≤ n 且 a + b 是 a * b 的因子，则成为神奇的数对。</p>
<p>求神奇的数对的个数。</p>
<h2 id="Input">Input</h2>
<p>一行一个正整数 n。</p>
<h2 id="Output">Output</h2>
<p>一行一个整数表示答案，保证不会超过 64 位有符号整数类型的范围。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>21</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>11</p>
<h2 id="HINT">HINT</h2>
<p>n ≤ 1e14</p>
<h2 id="Solution">Solution</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528011608.png" alt="img"></p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> u32;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> u32 MOD = <span class="number">20000116</span>;</span><br><span class="line"></span><br><span class="line">s64 n, Q;</span><br><span class="line">s64 Ans;</span><br><span class="line"><span class="keyword">bool</span> isp[ONE];</span><br><span class="line">s64 phi[ONE], prime[ONE], p_num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Get_phi</span><span class="params">(<span class="keyword">int</span> MaxN)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= MaxN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isp[i])</span><br><span class="line">            prime[++p_num] = i, phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= p_num &amp;&amp; i * prime[j] &lt;= MaxN; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            isp[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                phi[i * prime[j]] = phi[i] * prime[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            phi[i * prime[j]] = phi[i] * phi[prime[j]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;    Q = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="built_in">Get_phi</span>(Q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= Q; i++)</span><br><span class="line">        Ans += (n / i / i) * phi[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>欧拉函数</tag>
      </tags>
  </entry>
  <entry>
    <title>[欧拉函数]外星人</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0%5D%E5%A4%96%E6%98%9F%E4%BA%BA/</url>
    <content><![CDATA[<h1>外星人</h1>
<p>Time Limit: 3 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527191940.gif" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527191936.gif" alt="img"></p>
<h2 id="Output">Output</h2>
<p>输出test行，每行一个整数，表示答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>1<br>
　2<br>
　2 2<br>
　3 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527191944.gif" alt="img"></p>
<h2 id="HINT">HINT</h2>
<p>Test&lt;=50 Pi&lt;=10^5,1&lt;=Q1&lt;=10^9</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定一个数，用Πp[i]^q<a href="p%3C=10%5E5,q%3C=10%5E9">i</a>的形式表示，问最少需要对这个数字x进行几次x=Φ(x)操作使得x=1。</p>
<h2 id="Solution">Solution</h2>
<p>这显然是一道数论题。<br>
　　首先想到了只有Φ(2)=1，所以最后答案必然需要转成带2的形式，我们先考虑一个数字，由欧拉函数的推导公式<strong>Φ(Πp[i]^q[i])=Π(p[i]-1)*p[i]^(q[i]-1)<strong>可以发现每次求Φ会消去一个质因数2，并且产生若干个2（产生的2是有上限的）。<br>
　　这句话是什么意思呢？<br>
　　我们举个例子：讨论一个偶数180=2^2 * 3^2 * 5，Φ(180)=2^1 * (3-1)*3 * (5-1)=48，这里产生了3个2，消去了1个2。<br>
　　所以我们</strong>只要求出产生了几个2即可</strong>（由于除了Φ(2)以外的数都是偶数，所以任意奇数只要经过一遍求Φ就可以变为偶数来处理，次数+1），因为每次只能消去一个1，所以答案就应该是这个数分解出的2的个数。<br>
　　知道欧拉函数是一个<strong>积性函数</strong>，并且我们现在求的显然是一个完全积性函数，由于这个性质，求分解出几个2可以使用线性筛来实现，对于每一项p[i]^q[i]分解出的个数就是(p[i]分解出的个数*q[i])，答案就是<strong>Σ(每一项分解出的个数)</strong>。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">100001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> f[ONE],p[ONE],tot,phi[ONE];</span><br><span class="line"><span class="keyword">int</span> x,y,m,PD;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Get_f</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!f[i])</span><br><span class="line">        &#123;</span><br><span class="line">            p[++tot]=i;</span><br><span class="line">            phi[i]=phi[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i*p[j]&gt;n) <span class="keyword">break</span>;</span><br><span class="line">            f[i*p[j]]=<span class="number">1</span>;</span><br><span class="line">            phi[i*p[j]]=phi[i]+phi[p[j]];</span><br><span class="line">            <span class="keyword">if</span>(i%p[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Get_f</span>(ONE<span class="number">-1</span>);</span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        m=<span class="built_in">get</span>();</span><br><span class="line">        Ans=PD=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">            Ans+=(<span class="keyword">long</span> <span class="keyword">long</span>)phi[x]*y;</span><br><span class="line">            <span class="keyword">if</span>(!PD &amp;&amp; x==<span class="number">2</span>) PD=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,Ans+(!PD));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>欧拉函数</tag>
      </tags>
  </entry>
  <entry>
    <title>[欧拉函数]点组计数</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0%5D%E7%82%B9%E7%BB%84%E8%AE%A1%E6%95%B0/</url>
    <content><![CDATA[<h1>点组计数</h1>
<p>Time Limit: 20 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>平面上摆放着一个n<em>m的点阵（下图所示是一个3</em>4的点阵）。Curimit想知道有多少三点组(a，b，c)满足以a，b，c三点共线。这里a，b，c是不同的3个点，其顺序无关紧要。(即(a，b，c)和(b，c，a)被认为是相同的）。由于答案很大，故你只需要输出答案对1，000，000，007的余数就可以了。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528001627.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p>有且仅有一行，两个用空格隔开的整数n和m。</p>
<h2 id="Output">Output</h2>
<p>有且仅有一行，一个整数，表示三点组的数目对1，000，000，007的余数。（1，000。000。007是质数）</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3  4</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>2 0</p>
<h2 id="HINT">HINT</h2>
<p>对于100%的数据，1&lt; =N．m&lt; =50000</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定一个点阵，问有多少组三点共线。</p>
<h2 id="Solution">Solution</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528001635.png" alt="img"></p>
<p>其实我也不知道原式怎么来的，我可能只会推式子啊？QAQ</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">50005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Ny6 = <span class="number">166666668</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">bool</span> isp[ONE];</span><br><span class="line"><span class="keyword">int</span> prime[ONE],p_num;</span><br><span class="line"><span class="keyword">int</span> phi[ONE];</span><br><span class="line">s64 Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Getphi</span><span class="params">(<span class="keyword">int</span> MaxN)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=MaxN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isp[i])</span><br><span class="line">            prime[++p_num] = i, phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=p_num, i*prime[j]&lt;=MaxN; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            isp[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                phi[i * prime[j]] = (s64)phi[i] * prime[j] % MOD;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            phi[i * prime[j]] = (s64)phi[i] * phi[prime[j]] % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">Get</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> num)</span> </span>&#123;<span class="keyword">return</span> (s64)(a+b) * num / <span class="number">2</span> %MOD; &#125;</span><br><span class="line"><span class="function">s64 <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;<span class="keyword">return</span> ((s64)n*(n<span class="number">-1</span>)/<span class="number">2</span>%MOD) * ((s64)m*(m<span class="number">-1</span>)/<span class="number">2</span>%MOD) % MOD;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = (s64)n * (n<span class="number">-1</span>) % MOD * (n<span class="number">-2</span>) % MOD;</span><br><span class="line">    <span class="keyword">return</span> (s64) res * Ny6 % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Getphi</span>(ONE<span class="number">-1</span>);</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m) <span class="built_in">swap</span>(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">1</span>; d&lt;=n; d++)</span><br><span class="line">    &#123;</span><br><span class="line">        Ans += phi[d] * <span class="built_in">Get</span>(n-d,n-(n/d)*d,n/d) % MOD *<span class="built_in">Get</span>(m-d,m-(m/d)*d,m/d) % MOD;</span><br><span class="line">        Ans %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Ans = (Ans - <span class="built_in">Sum</span>(n,m) + MOD) % MOD;</span><br><span class="line">    Ans = Ans*<span class="number">2</span>%MOD + (s64)<span class="built_in">C</span>(n)*m%MOD + (s64)<span class="built_in">C</span>(m)*n%MOD;</span><br><span class="line">    Ans %= MOD;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>欧拉函数</tag>
      </tags>
  </entry>
  <entry>
    <title>[欧拉定理]上帝与集合的正确用法</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86%5D%E4%B8%8A%E5%B8%9D%E4%B8%8E%E9%9B%86%E5%90%88%E7%9A%84%E6%AD%A3%E7%A1%AE%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h1>上帝与集合的正确用法</h1>
<p>Time Limit: 5 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528005353.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p>第一行一个T，接下来T行，每行一个正整数p，代表你需要取模的值。</p>
<h2 id="Output">Output</h2>
<p>T行，每行一个正整数，为答案对p取模后的值。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3<br>
　2<br>
　3<br>
　6</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>0<br>
　1<br>
　4</p>
<h2 id="HINT">HINT</h2>
<p>对于100%的数据，T&lt;=1000，p&lt;=10^7</p>
<h2 id="Solution">Solution</h2>
<p>我们运用欧拉定理：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528005400.png" alt="img"></p>
<p>然后还有一个定理：一个数在执行log次操作后，值不会改变。</p>
<p>然后就可以直接求了。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">500005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,x;</span><br><span class="line"><span class="keyword">int</span> phi[ONE],pn;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quickpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> MOD)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = (s64)res * a % MOD;</span><br><span class="line">        a = (s64)a * a % MOD;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Getphi</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i*i&lt;=n; i++)</span><br><span class="line">        <span class="keyword">if</span>(n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res = res/i*(i<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">while</span>(n % i == <span class="number">0</span>) n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(n != <span class="number">1</span>) res = res/n*(n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Deal</span><span class="params">(<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pn = <span class="number">0</span>;    phi[<span class="number">0</span>] = p;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="number">1</span>) phi[++pn] = p = <span class="built_in">Getphi</span>(p);</span><br><span class="line">    phi[++pn] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=pn; i&gt;=<span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a &gt;= phi[i]) a = a%phi[i] + phi[i];</span><br><span class="line">        a = (s64)<span class="built_in">Quickpow</span>(<span class="number">2</span>, a, phi[i<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(!a) a = phi[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a % phi[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">Deal</span>(x));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>欧拉定理</tag>
      </tags>
  </entry>
  <entry>
    <title>[点分治]Tree</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%82%B9%E5%88%86%E6%B2%BB%5DTree/</url>
    <content><![CDATA[<h1>Tree</h1>
<p>Time Limit: 10 Sec Memory Limit: 64 MB</p>
<h2 id="Description">Description</h2>
<p>给你一棵TREE，以及这棵树上边的距离，问有多少对点它们两者间的距离小于等于K。</p>
<h2 id="Input">Input</h2>
<p>第一行一个n，接下来n-1行边描述管道，按照题目中写的输入，接下来是一个k。</p>
<h2 id="Output">Output</h2>
<p>仅包括一个整数，表示有多少对点之间的距离小于等于k。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>7<br>
　1 6 13<br>
　6 3 9<br>
　3 5 7<br>
　4 1 3<br>
　2 4 20<br>
　4 7 2<br>
　10</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>5</p>
<h2 id="HINT">HINT</h2>
<p>n&lt;=40000</p>
<h2 id="Solution">Solution</h2>
<p>树上路径统计问题，运用点分。<br>
　　每次处理与重心相关的路径，发现如果直接处理两点之间比较困难，我们想到了将所有点加入一个数组，用指针判断加起来&lt;=K的个数，这样的话不<strong>一定全是简单路径</strong>，但是我们只要减去每个子树中这样操作的条数就一定只剩下简单路径了。<br>
　　<strong>点分大概的步骤：</strong><br>
　　<strong>1.找出重心；</strong><br>
　　<strong>2.计算经过该重心的路径相关需要求的；</strong><br>
　　<strong>3.去掉重心对于每棵子树继续做以上过程。</strong></p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">80001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,K;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">int</span> next[ONE],first[ONE],go[ONE],w[ONE],tot;</span><br><span class="line"><span class="keyword">int</span> center_vis[ONE];</span><br><span class="line"><span class="keyword">int</span> Max,dist[ONE],num;</span><br><span class="line"><span class="keyword">int</span> d[ONE];</span><br><span class="line"><span class="keyword">int</span> center,Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;  w[tot]=z;</span><br><span class="line">    next[++tot]=first[v];   first[v]=tot;   go[tot]=u;  w[tot]=z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> PointF</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> maxx,size;</span><br><span class="line">    &#125;S[ONE];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Getsize</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        S[u].size=<span class="number">1</span>;</span><br><span class="line">        S[u].maxx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(v==father || center_vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">Getsize</span>(v,u);</span><br><span class="line">            S[u].size+=S[v].size;</span><br><span class="line">            S[u].maxx=<span class="built_in">max</span>(S[u].maxx,S[v].size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Getcenter</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father,<span class="keyword">int</span> total)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        S[u].maxx=<span class="built_in">max</span>(S[u].maxx,total-S[u].size);</span><br><span class="line">        <span class="keyword">if</span>(Max&gt;S[u].maxx)</span><br><span class="line">        &#123;</span><br><span class="line">            Max=S[u].maxx;</span><br><span class="line">            center=u;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(v==father || center_vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">Getcenter</span>(v,u,total);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Getdist</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father,<span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        dist[++num]=value;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(v==father || center_vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">Getdist</span>(v,u,value+w[e]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        num=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Getdist</span>(u,<span class="number">0</span>,value);</span><br><span class="line">        <span class="built_in">sort</span>(dist+<span class="number">1</span>,dist+num+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=num;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(dist[l]+dist[r]&gt;K &amp;&amp; l&lt;r) r--;</span><br><span class="line">            res+=r-l;</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Max=n;</span><br><span class="line">        <span class="built_in">Getsize</span>(u,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        center=u;</span><br><span class="line">        <span class="built_in">Getcenter</span>(u,<span class="number">0</span>,S[u].size);</span><br><span class="line">        center_vis[center]=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        Ans+=<span class="built_in">Calc</span>(center,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[center];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(center_vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">            Ans-=<span class="built_in">Calc</span>(v,w[e]);</span><br><span class="line">            <span class="built_in">Dfs</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();    z=<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Add</span>(x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    K=<span class="built_in">get</span>();</span><br><span class="line">    PointF::<span class="built_in">Dfs</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>分治</category>
      </categories>
      <tags>
        <tag>点分治</tag>
      </tags>
  </entry>
  <entry>
    <title>[点分治]采蘑菇</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%82%B9%E5%88%86%E6%B2%BB%5D%E9%87%87%E8%98%91%E8%8F%87/</url>
    <content><![CDATA[<h1>采蘑菇</h1>
<p>Time Limit: 20 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527195008.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527195015.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527195017.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5<br>
　　1 2 3 2 3<br>
　　1 2<br>
　　1 3<br>
　　2 4<br>
　　2 5</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>10<br>
　　9<br>
　　12<br>
　　9<br>
　　11</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527195019.png" alt="img"></p>
<h2 id="Main-idea">Main idea</h2>
<p>询问从以每个点为起始点时，各条路径上的颜色种类的和。</p>
<h2 id="Solution">Solution</h2>
<p>我们看到题目，立马想到了O(n^2)的做法，然后从这个做法研究一下本质，我们确定了可以以点分治作为框架。</p>
<p>我们<strong>先用点分治来确定一个center(重心)</strong>。然后计算跟这个center有关的路径。设现在要统计的是经过center，对x提供贡献的路径。</p>
<p>我们先记录一个记录<strong>Sum[x]表示1~i-1子树中 颜色x 第一次出现的位置的那个点 的子树和</strong>，然后我们就利用这个Sum来解题。</p>
<p>我们显然可以分两种情况来讨论：</p>
<p><strong>（1）统计center-&gt;x出现颜色的贡献</strong>：<br>
　　　　显然，这时候，对于center-&gt;x这一段，直接像O(n^2)做法那样<strong>记录一个color表示到目前为止出现的颜色个数</strong>，然后加一下即可。再记录一个record表示当前可有的贡献和，一旦出现过一个颜色，那么这个颜色在1~i-1子树上出现第一次以下的点，对于x就不再提供贡献了，record减去Sum[这个颜色]，然后这样深搜往下计算即可。</p>
<p><strong>（2）统计center-&gt;x没出现过的颜色的贡献</strong>：<br>
　　　　显然，对于center-&gt;x上没出现过的颜色，直接往下深搜，一开始为record为**(All - Sum[center])**，一旦出现了一个颜色，record则减去这个Sum。同样表示不再提供贡献即可。</p>
<p>我们这样做就<strong>可以求出每个子树前缀对于其的贡献了，倒着再做一边即可求出全部的贡献</strong>。统计x的时候，顺便统计一下center。可以满足效率，成功AC这道题。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">600005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">214783640</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,x,y;</span><br><span class="line"><span class="keyword">int</span> Val[ONE];</span><br><span class="line"><span class="keyword">int</span> next[ONE],first[ONE],go[ONE],tot;</span><br><span class="line"><span class="keyword">int</span> vis[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans[ONE],Sum[ONE];</span><br><span class="line"><span class="keyword">int</span> All;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];    first[u]=tot;    go[tot]=v;</span><br><span class="line">    next[++tot]=first[v];    first[v]=tot;    go[tot]=u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Point</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> center;</span><br><span class="line">    <span class="keyword">int</span> Stack[ONE],top;</span><br><span class="line">    <span class="keyword">int</span> total,Max,center_vis[ONE];</span><br><span class="line">    <span class="keyword">int</span> num,V[ONE];</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> size,maxx;</span><br><span class="line">    &#125;S[ONE];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Getsize</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        S[u].size=<span class="number">1</span>;</span><br><span class="line">        S[u].maxx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(v==father || center_vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">Getsize</span>(v,u);</span><br><span class="line">            S[u].size += S[v].size;</span><br><span class="line">            S[u].maxx = <span class="built_in">max</span>(S[u].maxx,S[v].size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Getcenter</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father,<span class="keyword">int</span> total)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        S[u].maxx = <span class="built_in">max</span>(S[u].maxx,total-S[u].size);</span><br><span class="line">        <span class="keyword">if</span>(S[u].maxx &lt; Max)</span><br><span class="line">        &#123;</span><br><span class="line">            Max = S[u].maxx;</span><br><span class="line">            center = u;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(v==father || center_vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">Getcenter</span>(v,u,total);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Ad_sum</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[Val[u]])</span><br><span class="line">        &#123;</span><br><span class="line">            Stack[++top] = Val[u];</span><br><span class="line">            All += S[u].size;    Sum[Val[u]] += S[u].size;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[Val[u]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(v==father || center_vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">Ad_sum</span>(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">        vis[Val[u]]--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Calc_in</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father,<span class="keyword">int</span> center,<span class="keyword">int</span> Size,<span class="keyword">int</span> f_time,<span class="keyword">int</span> record)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[Val[u]]) f_time++, record += Size, record -= Sum[Val[u]];</span><br><span class="line">        Ans[u] += record;    Ans[center]+=f_time;</span><br><span class="line">        Ans[u] += f_time;    vis[Val[u]] ++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(v==father || center_vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">Calc_in</span>(v,u,center,Size,f_time,record);</span><br><span class="line">        &#125;</span><br><span class="line">        vis[Val[u]] --;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Calc_not</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father,<span class="keyword">int</span> record)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[Val[u]]) record -= Sum[ Val[u] ];</span><br><span class="line">        Ans[u] += record;    vis[Val[u]] ++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(v==father || center_vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">Calc_not</span>(v,u,record);</span><br><span class="line">        &#125;</span><br><span class="line">        vis[Val[u]] --;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Max = n;</span><br><span class="line">        <span class="built_in">Getsize</span>(u,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">Getcenter</span>(u,<span class="number">0</span>,S[u].size);</span><br><span class="line">        <span class="built_in">Getsize</span>(center,<span class="number">0</span>);</span><br><span class="line">        center_vis[center] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">0</span>; <span class="keyword">for</span>(<span class="keyword">int</span> e=first[center];e;e=next[e]) <span class="keyword">if</span>(!center_vis[go[e]]) V[++num]=go[e];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=V[i];</span><br><span class="line">            <span class="keyword">int</span> Size = S[center].size - S[v].size - <span class="number">1</span>;</span><br><span class="line">            vis[Val[center]] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">Calc_in</span>(v,center,center, Size,<span class="number">1</span>,All - Sum[Val[center]] + Size);</span><br><span class="line">            vis[Val[center]] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">Ad_sum</span>(v,center);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(top) Sum[Stack[top--]]=<span class="number">0</span>;    All=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=num;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=V[i];</span><br><span class="line">            vis[Val[center]] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">Calc_not</span>(v,center, All-Sum[Val[center]]);</span><br><span class="line">            vis[Val[center]] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">Ad_sum</span>(v,center);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(top) Sum[Stack[top--]]=<span class="number">0</span>;    All=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[center];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(center_vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">Dfs</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)    Val[i]=<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Add</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Point:: <span class="built_in">Dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Ans[i]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>分治</category>
      </categories>
      <tags>
        <tag>点分治</tag>
      </tags>
  </entry>
  <entry>
    <title>[状压DP]Bill的挑战</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%8A%B6%E5%8E%8BDP%5DBill%E7%9A%84%E6%8C%91%E6%88%98/</url>
    <content><![CDATA[<h1>Bill的挑战</h1>
<p>Time Limit: 4 Sec Memory Limit: 64 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012050.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p>第一行：一个整数T，表示数据的个数。</p>
<p>对于每组数据：</p>
<p>第一行：两个整数，N和K（含义如题目表述）。</p>
<p>接下来N行：每行一个字符串。</p>
<h2 id="Output">Output</h2>
<p>T行，每行一个整数表示答案</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>1<br>
　　2 1<br>
　　a?<br>
　　?b</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>50</p>
<h2 id="HINT">HINT</h2>
<p>T ≤ 5，M ≤ 15，字符串长度≤ 50。</p>
<h2 id="Solution">Solution</h2>
<p>我们运用状压DP，令 <strong>g[i][c]</strong> 表示<strong>第 i 位</strong>，用 <strong>字符c</strong> 来<strong>匹配可行的串的集合</strong>。</p>
<p>然后显然就可以<strong>DP</strong>啦！<strong>f[i][opt]</strong> 表示<strong>做到了第 i 位</strong>，<strong>匹配集合为opt</strong>的方案数。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">4e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000003</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, T;</span><br><span class="line"><span class="keyword">int</span> g[<span class="number">52</span>][<span class="number">52</span>], f[<span class="number">52</span>][<span class="number">32769</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">25</span>][<span class="number">52</span>];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(g, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(g));</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    n = <span class="built_in">get</span>();  m = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s[i] + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s[<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= <span class="number">26</span>; c++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                <span class="keyword">if</span>(s[j][i] == <span class="string">&#x27;?&#x27;</span> || s[j][i] == c + <span class="string">&#x27;a&#x27;</span> - <span class="number">1</span>)</span><br><span class="line">                    g[i][c] |= <span class="number">1</span> &lt;&lt; j - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> total = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>;</span><br><span class="line">    f[<span class="number">1</span>][total] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> opt = <span class="number">0</span>; opt &lt;= total; opt++)</span><br><span class="line">            <span class="keyword">if</span>(f[i][opt])</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= <span class="number">26</span>; c++)</span><br><span class="line">                    (f[i + <span class="number">1</span>][opt &amp; g[i][c]] += f[i][opt]) %= MOD;</span><br><span class="line"></span><br><span class="line">    Ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> opt = <span class="number">0</span>; opt &lt;= total; opt++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span>(opt &amp; (<span class="number">1</span> &lt;&lt; j - <span class="number">1</span>)) num++;</span><br><span class="line">        <span class="keyword">if</span>(num == m) Ans = (Ans + f[len + <span class="number">1</span>][opt]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">        <span class="built_in">Deal</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>状压DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[状压DP][区间DP]字符合并</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%8A%B6%E5%8E%8BDP%5D%5B%E5%8C%BA%E9%97%B4DP%5D%E5%AD%97%E7%AC%A6%E5%90%88%E5%B9%B6/</url>
    <content><![CDATA[<h1>字符合并</h1>
<p>Time Limit: 20 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>有一个长度为 n 的 01 串，你可以每次将相邻的 k 个字符合并，得到一个新的字符并获得一定分数。</p>
<p>得到的新字符和分数由这 k 个字符确定。你需要求出你能获得的最大分数。</p>
<h2 id="Input">Input</h2>
<p>第一行两个整数n，k。接下来一行长度为n的01串，表示初始串。</p>
<p>接下来2^k行，每行一个字符ci和一个整数wi，</p>
<p>ci表示长度为k的01串连成二进制后按从小到大顺序得到的第i种合并方案得到的新字符,</p>
<p>wi表示对应的第i种方案对应获得的分数。</p>
<h2 id="Output">Output</h2>
<p>输出一个整数表示答案</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3 2<br>
　101<br>
　1 10<br>
　1 10<br>
　0 20<br>
　1 30</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>40</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=n&lt;=300 ,0&lt;=ci&lt;=1, wi&gt;=1, k&lt;=8</p>
<h2 id="Solution">Solution</h2>
<p>我们显然考虑区间DP，再状态压缩一下，<strong>f[l][r][opt]<strong>表示</strong>[l, r]<strong>合成了</strong>opt</strong>的<strong>最大价值</strong>。</p>
<p>如果一个<strong>区间长度为len</strong>的话，最后合完会长度会变为<strong>len % (k - 1)</strong>。</p>
<p>转移的本质是<strong>把长度为k的区间</strong>变成<strong>0/1</strong>，分情况处理。</p>
<p>先枚举每一个断点<strong>pos</strong>，表示我们要把**[pos, r]<strong>合成一个</strong>0/1**，那么就要<strong>保证(r - pos + 1) % (k - 1) = 1</strong>，否则我们DP的时候，会把<strong>000</strong>看做是<strong>0</strong>一样转移，导致<strong>不能合成为一个0/1</strong>的合成了。</p>
<p>若<strong>len % (k -1) = 1</strong>，则合成完会剩下一个数，我们判断一下**[l, r]<strong>能否</strong>合成一个opt<strong>的状态，若可以，则</strong>f[l][r][c[opt]] = max(f[l][r][opt] + val[opt])<strong>。注意要</strong>先拿一个变量记录下来**，不能直接更新，否则会出现<strong>0状态更新了1</strong>，然后<strong>1又用0更新了</strong>的情况，导致答案过大。</p>
<p>最后答案显然就是<strong>max(f[1][n][opt])</strong>。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> total;</span><br><span class="line"><span class="keyword">int</span> a[ONE];</span><br><span class="line"><span class="keyword">char</span> s[ONE];</span><br><span class="line"><span class="keyword">int</span> c[ONE], val[ONE];</span><br><span class="line">s64 f[ONE][ONE][ONE];</span><br><span class="line">s64 Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();  k = <span class="built_in">get</span>(); total = (<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> opt = <span class="number">0</span>; opt &lt;= total; opt++)</span><br><span class="line">                f[i][j][opt] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = s[i] - <span class="string">&#x27;0&#x27;</span>, f[i][i][a[i]] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= total; i++)</span><br><span class="line">        c[i] = <span class="built_in">get</span>(), val[i] = <span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l = n; l &gt;= <span class="number">1</span>; l--)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r = l; r &lt;= n; r++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(l == r) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> pos = r - <span class="number">1</span>; pos &gt;= l; pos -= k - <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> opt = <span class="number">0</span>; opt &lt;= total; opt++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(f[l][pos][opt] == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(f[pos + <span class="number">1</span>][r][<span class="number">0</span>] != <span class="number">-1</span> &amp;&amp; (opt &lt;&lt; <span class="number">1</span>) &lt;= total)</span><br><span class="line">                        f[l][r][opt &lt;&lt; <span class="number">1</span>] = <span class="built_in">max</span>(f[l][r][opt &lt;&lt; <span class="number">1</span>], f[l][pos][opt] + f[pos + <span class="number">1</span>][r][<span class="number">0</span>]);</span><br><span class="line">                    <span class="keyword">if</span>(f[pos + <span class="number">1</span>][r][<span class="number">1</span>] != <span class="number">-1</span> &amp;&amp; (opt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>) &lt;= total)</span><br><span class="line">                        f[l][r][opt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] = <span class="built_in">max</span>(f[l][r][opt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], f[l][pos][opt] + f[pos + <span class="number">1</span>][r][<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>((r - l + <span class="number">1</span>) % (k - <span class="number">1</span>) == <span class="number">1</span> || k == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                s64 A = <span class="number">-1</span>, B = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> opt = <span class="number">0</span>; opt &lt;= total; opt++)</span><br><span class="line">                    <span class="keyword">if</span>(f[l][r][opt] != <span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(c[opt] == <span class="number">0</span>) A = <span class="built_in">max</span>(A, f[l][r][opt] + val[opt]);</span><br><span class="line">                        <span class="keyword">if</span>(c[opt] == <span class="number">1</span>) B = <span class="built_in">max</span>(B, f[l][r][opt] + val[opt]);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                f[l][r][<span class="number">0</span>] = <span class="built_in">max</span>(f[l][r][<span class="number">0</span>], A);</span><br><span class="line">                f[l][r][<span class="number">1</span>] = <span class="built_in">max</span>(f[l][r][<span class="number">1</span>], B);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> opt = <span class="number">0</span>; opt &lt;= total; opt++)</span><br><span class="line">        Ans = <span class="built_in">max</span>(Ans, f[<span class="number">1</span>][n][opt]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, Ans);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>区间DP</tag>
        <tag>状压DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[状压DP]排列</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%8A%B6%E5%8E%8BDP%5D%E6%8E%92%E5%88%97/</url>
    <content><![CDATA[<h1>排列</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>给一个数字串s和正整数d, 统计s有多少种不同的排列能被d整除（可以有前导0）。</p>
<p>例如123434有90种排列能被2整除，其中末位为2的有30种，末位为4的有60种。</p>
<h2 id="Input">Input</h2>
<p>输入第一行是一个整数T，表示测试数据的个数，以下每行一组s和d，中间用空格隔开。</p>
<h2 id="Output">Output</h2>
<p>每个数据仅一行，表示能被d整除的排列的个数。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>7<br>
　　000 1<br>
　　001 1<br>
　　1234567890 1<br>
　　123434 2<br>
　　1234 7<br>
　　12345 17<br>
　　12345678 29</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>1<br>
　　3<br>
　　3628800<br>
　　90<br>
　　3<br>
　　6<br>
　　1398</p>
<h2 id="HINT">HINT</h2>
<p>s的长度不超过10, 1&lt;=d&lt;=1000, 1&lt;=T&lt;=15</p>
<h2 id="Solution">Solution</h2>
<p>我们运用状压DP，<strong>令 f[j][opt] 表示当前余数为 j，状态为opt的方案</strong>。</p>
<p>状态记录的是：<strong>各个数字被用了几次。</strong></p>
<p>那么我们就可以状压了。先<strong>DFS</strong>出每个状态，记sum[k]表示后缀积，那么显然 从 <strong>opt</strong> 转移到 <strong>第k个数字多用一次的状态</strong> 就是 <strong>opt + sum[k + 1]</strong>。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">20005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T, n, m;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> vis[ONE], Num[<span class="number">20</span>], sum[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1005</span>][<span class="number">20005</span>];</span><br><span class="line"><span class="keyword">int</span> Sta[ONE][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span> ch[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> ) </span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>; </span><br><span class="line">    res=c<span class="number">-48</span>;     </span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;    </span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T &gt; <span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">            Sta[num][i] = vis[i];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Num[T]; i++)</span><br><span class="line">        vis[T] = i, <span class="built_in">Dfs</span>(T + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    <span class="built_in">memset</span>(Num, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(Num));</span><br><span class="line">    <span class="built_in">memset</span>(sum, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(sum));</span><br><span class="line">    num = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ch + <span class="number">1</span>);    m = <span class="built_in">get</span>();</span><br><span class="line">    n = <span class="built_in">strlen</span>(ch + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) Num[ch[i] - <span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">    sum[<span class="number">10</span>] = <span class="number">1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">9</span>; i &gt;= <span class="number">0</span>; i--) sum[i] = sum[i + <span class="number">1</span>] * (Num[i] + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Dfs</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> opt = <span class="number">1</span>; opt &lt;= num; opt++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">            <span class="keyword">if</span>(f[j][opt])</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">9</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(Sta[opt][k] &gt;= Num[k]) <span class="keyword">continue</span>; </span><br><span class="line">                    <span class="keyword">int</span> to = opt + sum[k + <span class="number">1</span>];</span><br><span class="line">                    f[(j * <span class="number">10</span> + k) % m][to] += f[j][opt];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[<span class="number">0</span>][num]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">        <span class="built_in">Deal</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>状压DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[状压DP]矩阵填数</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%8A%B6%E5%8E%8BDP%5D%E7%9F%A9%E9%98%B5%E5%A1%AB%E6%95%B0/</url>
    <content><![CDATA[<h1>矩阵填数</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>给定一个 h*w 的矩阵,矩阵的行编号从上到下依次为 1…h，列编号从左到右依次1…w。</p>
<p>在这个矩阵中你需要在每个格子中填入 1…m 中的某个数。</p>
<p>给这个矩阵填数的时候有一些限制，给定 n 个该矩阵的子矩阵,以及该子矩阵的最大值 v，要求你所填的方案满足该子矩阵的最大值为 v。</p>
<p>现在,你的任务是求出有多少种填数的方案满足 n 个限制。</p>
<p>两种方案是不一样的当且仅当两个方案至少存在一个格子上有不同的数。</p>
<p>由于答案可能很大，你只需要输出答案对 1,000,000,007 的取模即可。</p>
<h2 id="Input">Input</h2>
<p>输入数据的第一行为一个数 T，表示数据组数。</p>
<p>对于每组数据，第一行为四个数 h,w,m,n。</p>
<p>接下来 n 行，每一行描述一个子矩阵的最大值 v。</p>
<p>每行为五个整数 x1,y1,x2,y2,v，表示一个左上角为(x1,y1),右下角为(x2,y2)的子矩阵的最大值为 v 。</p>
<h2 id="Output">Output</h2>
<p>对于每组数据输出一行，表示填数方案 mod 1,000,000,007 后的值。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>2<br>
　3 3 2 2<br>
　1 1 2 2 2<br>
　2 2 3 3 1<br>
　4 4 4 4<br>
　1 1 2 3 3<br>
　2 3 4 4 2<br>
　2 1 4 3 2<br>
　1 2 3 4 4</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>28<br>
　76475</p>
<h2 id="HINT">HINT</h2>
<p>T≤5, 1≤h,w,m≤10000, 1≤v≤m, 1≤n≤10</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定一个矩阵，要求若干个子矩阵中最大值必须为Val，询问方案数。</p>
<h2 id="Solution">Solution</h2>
<p>显然我们想到了状压DP，令 <strong>f[i][j]</strong> 表示做到了<strong>第i个块状态为j的方案，j表示哪些块满足限制</strong>。</p>
<p>由于<strong>子矩阵****限制</strong>可能会<strong>重叠</strong>，所以我们先预处理，<strong>将矩阵分为若干个小块</strong>，<strong>每个小块中仅有一个</strong>限制条件（显然就是所有覆盖条件中最小的一个）。</p>
<p>然后我们记 <strong>Val</strong> 表示<strong>这一块里面的限制值</strong>，<strong>Num</strong> 表示<strong>这一块的个数</strong>，然后我们再记个 <strong>op</strong> 表示覆<strong>盖哪些块的限制值为Val</strong>。</p>
<p>之后用<strong>状压DP</strong>，考虑<strong>第 i 块是否取限制值</strong>，<strong>取</strong>则方案数为 <strong>(Val - 1) ^ Num</strong>，<strong>不取</strong>则方案数为 <strong>Val ^ Num - (Val - 1) ^ Num</strong>。</p>
<p>当<strong>取限制值时</strong>，把<strong>对应方案数</strong>转移到 <strong>f[i + 1][j | op[i + 1]]</strong>，<strong>否则</strong>转移到 <strong>f[i + 1][j]</strong>。最后答案就是 <strong>f[cnt][all]</strong> 了。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">505</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> h,w,m,n,all;</span><br><span class="line"><span class="keyword">int</span> qx[ONE],x_num,qy[ONE],y_num;</span><br><span class="line"><span class="keyword">int</span> Num[ONE],Val[ONE],op[ONE],cnt;</span><br><span class="line"><span class="keyword">int</span> f[ONE][<span class="number">3001</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x1,y1;</span><br><span class="line">    <span class="keyword">int</span> x2,y2;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">Quick</span><span class="params">(s64 a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s64 res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=res*a%MOD;</span><br><span class="line">        a=(s64)a*a%MOD;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_first</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(qx+<span class="number">1</span>,qx+x_num+<span class="number">1</span>);  x_num=<span class="built_in">unique</span>(qx+<span class="number">1</span>,qx+x_num+<span class="number">1</span>)-qx<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">sort</span>(qy+<span class="number">1</span>,qy+y_num+<span class="number">1</span>);  y_num=<span class="built_in">unique</span>(qy+<span class="number">1</span>,qy+y_num+<span class="number">1</span>)-qy<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=x_num;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=y_num;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> lenx=qx[i]-qx[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">int</span> leny=qy[j]-qy[j<span class="number">-1</span>];</span><br><span class="line">            Num[++cnt]=lenx*leny;   Val[cnt]=m; op[cnt]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;=n;l++)</span><br><span class="line">                <span class="keyword">if</span>(a[l].x1&lt;=qx[i<span class="number">-1</span>] &amp;&amp; qx[i]&lt;=a[l].x2 &amp;&amp; a[l].y1&lt;=qy[j<span class="number">-1</span>] &amp;&amp; qy[j]&lt;=a[l].y2)</span><br><span class="line">                    Val[cnt]=<span class="built_in">min</span>(Val[cnt],a[l].val);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;=n;l++)</span><br><span class="line">                <span class="keyword">if</span>(a[l].val==Val[cnt])</span><br><span class="line">                    <span class="keyword">if</span>(a[l].x1&lt;=qx[i<span class="number">-1</span>] &amp;&amp; qx[i]&lt;=a[l].x2 &amp;&amp; a[l].y1&lt;=qy[j<span class="number">-1</span>] &amp;&amp; qy[j]&lt;=a[l].y2)</span><br><span class="line">                        op[cnt]|=(<span class="number">1</span>&lt;&lt;l<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(f));</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=cnt<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> opt=<span class="number">0</span>;opt&lt;=all;opt++)</span><br><span class="line">            <span class="keyword">if</span>(f[i][opt])</span><br><span class="line">            &#123;</span><br><span class="line">                f[i+<span class="number">1</span>][opt|op[i+<span class="number">1</span>]] = (f[i+<span class="number">1</span>][opt|op[i+<span class="number">1</span>]] + (s64)f[i][opt]*(s64)(<span class="built_in">Quick</span>(Val[i+<span class="number">1</span>],Num[i+<span class="number">1</span>]) - <span class="built_in">Quick</span>(Val[i+<span class="number">1</span>]<span class="number">-1</span>,Num[i+<span class="number">1</span>]) + MOD) % MOD) % MOD;</span><br><span class="line">                f[i+<span class="number">1</span>][opt] = (f[i+<span class="number">1</span>][opt] + (s64)f[i][opt]*<span class="built_in">Quick</span>(Val[i+<span class="number">1</span>]<span class="number">-1</span>,Num[i+<span class="number">1</span>]) % MOD) % MOD;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        h=<span class="built_in">get</span>();    w=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();    n=<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">        all=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line">        x_num=y_num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i].x1=<span class="built_in">get</span>();  a[i].y1=<span class="built_in">get</span>();  a[i].x2=<span class="built_in">get</span>();  a[i].y2=<span class="built_in">get</span>();</span><br><span class="line">            a[i].x1--;  a[i].y1--;</span><br><span class="line">            a[i].val=<span class="built_in">get</span>();</span><br><span class="line">            qx[++x_num]=a[i].x1;    qx[++x_num]=a[i].x2;</span><br><span class="line">            qy[++y_num]=a[i].y1;    qy[++y_num]=a[i].y2;</span><br><span class="line">        &#125;</span><br><span class="line">        qx[++x_num]=<span class="number">0</span>;  qx[++x_num]=h;</span><br><span class="line">        qy[++y_num]=<span class="number">0</span>;  qy[++y_num]=w;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Deal_first</span>();</span><br><span class="line">        <span class="built_in">Deal</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,f[cnt][all]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>状压DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[矩阵乘法][DP]序列计数</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%5D%5BDP%5D%E5%BA%8F%E5%88%97%E8%AE%A1%E6%95%B0/</url>
    <content><![CDATA[<h1>序列计数</h1>
<p>Time Limit: 30 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>Alice想要得到一个长度为n的序列，序列中的数都是不超过m的正整数，而且这n个数的和是p的倍数。Alice还希望，这n个数中，至少有一个数是质数。Alice想知道，有多少个序列满足她的要求。</p>
<h2 id="Input">Input</h2>
<p>一行三个数，n,m,p。</p>
<h2 id="Output">Output</h2>
<p>一行一个数，满足Alice的要求的序列数量，答案对20170408取模。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3 5 3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>33</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=n&lt;=10^9,1&lt;=m&lt;=2×10^7,1&lt;=p&lt;=100</p>
<h2 id="Solution">Solution</h2>
<p>先考虑容斥，用<strong>Ans=全部的方案数 - 一个质数都没有的方案</strong>，那么我们首先想到了一个暴力DP，<strong>令 f[i][j] 表示选了前 i 个数，%p时余数为 j 的方案数</strong>。那么显然 %p 同余的可以分为一类，那么就可以用矩阵乘法来优化这个DP了。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxM = <span class="number">2e7</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">20170408</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,p;</span><br><span class="line"><span class="keyword">int</span> prime[<span class="number">1300005</span>],p_num;</span><br><span class="line"><span class="keyword">int</span> Record[ONE][<span class="number">2</span>],a[ONE][ONE],b[ONE][ONE];</span><br><span class="line"><span class="keyword">bool</span> isp[MaxM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Getp</span><span class="params">(<span class="keyword">int</span> MaxN)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    isp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=MaxN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isp[i])</span><br><span class="line">            prime[++p_num] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=p_num, i*prime[j]&lt;=MaxN; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            isp[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mul</span><span class="params">(<span class="keyword">int</span> a[ONE][ONE],<span class="keyword">int</span> b[ONE][ONE],<span class="keyword">int</span> ans[ONE][ONE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> record[ONE][ONE];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;p;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            record[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;p;k++)</span><br><span class="line">                record[i][j] = (s64)(record[i][j] + (s64)a[i][k]*b[k][j] % MOD) %MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;p;j++)</span><br><span class="line">            ans[i][j] = record[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Quickpow</span><span class="params">(<span class="keyword">int</span> a[ONE][ONE],<span class="keyword">int</span> b[ONE][ONE],<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t&amp;<span class="number">1</span>) <span class="built_in">Mul</span>(a,b,a);</span><br><span class="line">        <span class="built_in">Mul</span>(b,b,b);</span><br><span class="line">        t&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> PD)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(a));</span><br><span class="line">    <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(b));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;p;j++)</span><br><span class="line">            b[i][j] = Record[((i-j)%p+p)%p][PD];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)</span><br><span class="line">        a[i][i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Quickpow</span>(a,b,n);</span><br><span class="line">    <span class="keyword">return</span> a[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();    p=<span class="built_in">get</span>();    <span class="built_in">Getp</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = i%p;</span><br><span class="line">        Record[x][<span class="number">0</span>]++;</span><br><span class="line">        <span class="keyword">if</span>(isp[i]) Record[x][<span class="number">1</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,(<span class="built_in">Solve</span>(<span class="number">0</span>)-<span class="built_in">Solve</span>(<span class="number">1</span>)+MOD) % MOD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>矩阵乘法</tag>
      </tags>
  </entry>
  <entry>
    <title>[生成树计数]小Z的房间</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%94%9F%E6%88%90%E6%A0%91%E8%AE%A1%E6%95%B0%5D%E5%B0%8FZ%E7%9A%84%E6%88%BF%E9%97%B4/</url>
    <content><![CDATA[<h1>小Z的房间</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>你突然有了一个大房子，房子里面有一些房间。事实上，你的房子可以看做是一个包含n*m个格子的格状矩形，每个格子是一个房间或者是一个柱子。在一开始的时候，相邻的格子之间都有墙隔着。<br>
　　你想要打通一些相邻房间的墙，使得所有房间能够互相到达。在此过程中，你不能把房子给打穿，或者打通柱子（以及柱子旁边的墙）。同时，你不希望在房子中有小偷的时候会很难抓，所以你希望任意两个房间之间都只有一条通路。现在，你希望统计一共有多少种可行的方案。</p>
<h2 id="Input">Input</h2>
<p>第一行两个数分别表示n和m。<br>
　　接下来n行，每行m个字符，每个字符都会是’.’或者’<em>’，其中’.’代表房间，’</em>’代表柱子。</p>
<h2 id="Output">Output</h2>
<p>一行一个整数，表示合法的方案数 Mod 10^9</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3 3<br>
　…<br>
　…<br>
　.*.</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>15</p>
<h2 id="HINT">HINT</h2>
<p>n,m&lt;=9</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定n*m的矩形，由0和1构成，每个相邻的0点可连边，询问有几种连边方案使得0点两两相通且路径唯一。</p>
<h2 id="Solution">Solution</h2>
<p>显然想到了题目要求求的就是<strong>生成树计数</strong>。我们运用Matrix-Tree定理，求出根据Matrix-Tree定理得到的行列式的值即可。关于行列式有如下三条性质，根据②③两条性质，<strong>类似高斯消元一样处理</strong>就可以得到行列式的值，该值即为最终答案。</p>
<p><strong>PS(重点)：</strong></p>
<p>(1) Matrix-Tree定理：Kirchhoff矩阵去掉任意一行和任意一列得到的行列式的值=生成树计数，其中Kirchhoff矩阵=“度数矩阵”-“邻接矩阵”。（为了方便处理，通常去掉Kirchhoff矩阵的第n行与第n列）</p>
<p>(2) 行列式的性质：<br>
　　① 行列式的值等于只有对角线不为0时对角线的乘积;<br>
　　② 交换行列式的其中任意两行之后(行列式的值)<em>-1;<br>
　　③ 用行列式的一行减去[另一行</em>(一个系数)]，行列式的值不变。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">2005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> ch[ONE];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[ONE][ONE];</span><br><span class="line"><span class="keyword">int</span> Bian[ONE][ONE],tot;</span><br><span class="line"><span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">HLS_value</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> PD=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> Ans=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> Now=<span class="number">1</span>;Now&lt;=n;Now++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=Now+<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> A=a[Now][Now],B=a[i][Now];</span><br><span class="line">            <span class="keyword">while</span>(B!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> t=A/B;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=Now;j&lt;=n;j++) a[Now][j]=(<span class="keyword">long</span> <span class="keyword">long</span>)(a[Now][j]-(<span class="keyword">long</span> <span class="keyword">long</span>)t*a[i][j]%MOD+MOD) % MOD;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=Now;j&lt;=n;j++) <span class="built_in">swap</span>(a[Now][j],a[i][j]);</span><br><span class="line">                A%=B; <span class="built_in">swap</span>(A,B); PD=-PD;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!a[Now][Now]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        Ans=Ans*a[Now][Now]%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (PD*Ans+MOD) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="keyword">if</span>(ch[j]==<span class="string">&#x27;.&#x27;</span>) Bian[i][j]=++tot;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="keyword">if</span>(Bian[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">3</span>;k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> x=i+dx[k],y=j+dy[k],u=Bian[i][j],v=Bian[x][y];</span><br><span class="line">                    <span class="keyword">if</span>(!v) <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(x&lt;<span class="number">1</span> || x&gt;n || y&lt;<span class="number">1</span> || y&gt;m)<span class="keyword">continue</span>;</span><br><span class="line">                    a[v][v]=(a[v][v]+<span class="number">1</span>) % MOD;</span><br><span class="line">                    a[u][v]=(a[u][v]<span class="number">-1</span>+MOD) % MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,<span class="built_in">HLS_value</span>(tot<span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>生成树计数</tag>
      </tags>
  </entry>
  <entry>
    <title>[矩阵乘法][DP]组合数问题</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%5D%5BDP%5D%E7%BB%84%E5%90%88%E6%95%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1>组合数问题</h1>
<p>Time Limit: 10 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528003816.jpg" alt="img"></p>
<h2 id="Input">Input</h2>
<p>第一行有四个整数 n, p, k, r，所有整数含义见问题描述。</p>
<h2 id="Output">Output</h2>
<p>一行一个整数代表答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>2 10007 2 0</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>8</p>
<h2 id="HINT">HINT</h2>
<p>1 ≤ n ≤ 10^9, 0 ≤ r &lt; k ≤ 50, 2 ≤ p ≤ 2^30 − 1</p>
<h2 id="Solution">Solution</h2>
<p>首先，不难发现，题目的本质是：<strong>从n*k个中选模k等于r个的方案数</strong>，那么轻易地写出了暴力DP：<strong>f[i][j]=f[i-1][j]+f[i-1][(j-1+k)%k]</strong>。</p>
<p>然后套个矩阵乘法优化一下即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,MOD,num,r;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> s64 <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s64 res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>; </span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>) </span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    s64 v[ONE][ONE];</span><br><span class="line">    <span class="keyword">friend</span> Matrix <span class="keyword">operator</span> *(Matrix a,Matrix b)</span><br><span class="line">    &#123;</span><br><span class="line">        Matrix record;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                record.v[i][j]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;num;k++)</span><br><span class="line">                    record.v[i][j] = (s64)(record.v[i][j] + a.v[i][k]*b.v[k][j] % MOD) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> record;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Matrix B,Ans;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">Quickpow</span><span class="params">(Matrix a,s64 b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++) res.v[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res = res*a;</span><br><span class="line">        a = a*a;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    MOD=<span class="built_in">get</span>();    num=<span class="built_in">get</span>();    r=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        B.v[i][i]++;</span><br><span class="line">        B.v[((i<span class="number">-1</span>)%num+num)%num][i]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Ans = <span class="built_in">Quickpow</span>(B, (s64)n*num);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;Ans.v[<span class="number">0</span>][r];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>矩阵乘法</tag>
      </tags>
  </entry>
  <entry>
    <title>[矩阵乘法][DP]数学作业</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95%5D%5BDP%5D%E6%95%B0%E5%AD%A6%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<h1>数学作业</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p><img src="F:%5CData%5Cimg%5C1109445-20170225112439351-1777709443.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p>输入文件只有一行为用空格隔开的两个正整数N和M。</p>
<h2 id="Output">Output</h2>
<p>输出仅包含一个非负整数，表示Concatenate(1~N) MOD M的值。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>12345678910 1000000000</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>345678910</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=N&lt;=10^8 , 1&lt;=M&lt;=10^9</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定一个n,m，创造一个数字顺序连接1~n，输出这个数对m取模的值。</p>
<h2 id="Solution">Solution</h2>
<p>n&lt;=10^18，排除找规律的可能性，立马想到了用矩阵乘法优化DP，令f[i]表示1~i的值，那么：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527191559.jpg" alt="img"></p>
<p>然后我们只要推出矩阵即可，轻松想到了：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527191601.jpg" alt="img"></p>
<p>然后<strong>分段矩乘</strong>得到答案。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,MOD;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[ONE][ONE],b[ONE][ONE];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Index;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mul</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a[ONE][ONE],<span class="keyword">long</span> <span class="keyword">long</span> b[ONE][ONE],<span class="keyword">long</span> <span class="keyword">long</span> ans[ONE][ONE])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> jilu[ONE][ONE];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            jilu[i][j]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)</span><br><span class="line">                jilu[i][j]=(jilu[i][j] + a[i][k]*b[k][j]%MOD) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">            ans[i][j]=jilu[i][j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Matrix</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a[ONE][ONE],<span class="keyword">long</span> <span class="keyword">long</span> b[ONE][ONE],<span class="keyword">long</span> <span class="keyword">long</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t&amp;<span class="number">1</span>) <span class="built_in">Mul</span>(a,b,a);</span><br><span class="line">        <span class="built_in">Mul</span>(b,b,b);</span><br><span class="line">        t&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;MOD;</span><br><span class="line">    a[<span class="number">1</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> len=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        len*=<span class="number">10</span>;</span><br><span class="line">        <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(b));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">                b[i][j]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        b[<span class="number">1</span>][<span class="number">1</span>]=len % MOD;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(len&lt;=n) Index=len-len/<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">else</span> Index=n-len/<span class="number">10</span>+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">Matrix</span>(a,b,Index);</span><br><span class="line">        <span class="keyword">if</span>(len&gt;n) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,a[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>矩阵乘法</tag>
      </tags>
  </entry>
  <entry>
    <title>[线性基]元素</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BA%BF%E6%80%A7%E5%9F%BA%5D%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h1>元素</h1>
<p>Time Limit: 20 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>相传，在远古时期，位于西方大陆的 Magic Land 上，人们已经掌握了用魔法矿石炼制法杖的技术。<br>
　　那时人们就认识到，一个法杖的法力取决于使用的矿石。<br>
　　一般地，矿石越多则法力越强，但物极必反：有时，人们为了获取更强的法力而使用了很多矿石，却在炼制过程中发现魔法矿石全部消失了，从而无法炼制出法杖，这个现象被称为“魔法抵消”。<br>
　　特别地，如果在炼制过程中使用超过一块同一种矿石，那么一定会发生“魔法抵消”。<br>
　　后来，随着人们认知水平的提高，这个现象得到了很好的解释。<br>
　　经过了大量的实验后，著名法师 Dmitri 发现：如果给现在发现的每一种矿石进行合理的编号（编号为正整数，称为该矿石的元素序号），那么，一个矿石组合会产生“魔法抵消”当且仅当存在一个非空子集，那些矿石的元素序号按位异或起来为零。<br>
　　并且人们有了测定魔力的有效途径，已经知道了：合成出来的法杖的魔力等于每一种矿石的法力之和。人们已经测定了现今发现的所有矿石的法力值，并且通过实验推算出每一种矿石的元素序号。<br>
现在，给定你以上的矿石信息，请你来计算一下当时可以炼制出的法杖最多有多大的魔力。</p>
<h2 id="Input">Input</h2>
<p>第一行包含一个正整数N，表示矿石的种类数。<br>
　　接下来 N行，每行两个正整数Numberi 和 Magici，表示这种矿石的元素序号和魔力值。</p>
<h2 id="Output">Output</h2>
<p>仅有一行，一个整数：最大的魔力值</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3<br>
　　1 10<br>
　　2 20<br>
　　3 30</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>50</p>
<p>explain:<br>
　　由于有“魔法抵消”这一事实，每一种矿石最多使用一块。<br>
　　如果使用全部三种矿石，由于三者的元素序号异或起来：1 xor 2 xor 3 = 0 ，<br>
　　则会发生魔法抵消，得不到法杖。<br>
　　可以发现，最佳方案是选择后两种矿石，法力为 20+30=50。</p>
<h2 id="HINT">HINT</h2>
<p>对于全部的数据：N ≤ 1000，Numberi ≤ 10^18，Magici ≤ 10^4。</p>
<h2 id="Main-idea">Main idea</h2>
<p>给出若干元素带两个属性a,b，求出添加若干个元素使得b最大（可加入的条件是加入的任意元素（不限制个数）XOR起来不为0）。</p>
<h2 id="Solution">Solution</h2>
<p>考虑<strong>贪心</strong>，从最大到最小加入肯定最优，发现线性基的性质内含**“无法表示出0”**，所以可以使用线性基处理。（线性基是可以用内部元素XOR出来答案和原来的相当的结构）。</p>
<p>加入方式：判断i的这一位是否为1，如果为1，判断线性基中这一位是否已经有<strong>匹配元</strong>，如果没有则将i当做这一位的匹配元，停止判断，Ans+=b[i]。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">64</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Link[<span class="number">65</span>];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.b&gt;b.b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i].a);</span><br><span class="line">        a[i].b=<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> pos=len;pos&gt;=<span class="number">1</span>;pos--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( ((a[i].a&gt;&gt;(pos<span class="number">-1</span>))&amp;<span class="number">1</span>) )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!Link[pos])</span><br><span class="line">                &#123;</span><br><span class="line">                    Link[pos]=a[i].a;</span><br><span class="line">                    Ans+=a[i].b;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> a[i].a^=Link[pos];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线性基</tag>
      </tags>
  </entry>
  <entry>
    <title>[线性基]最大割</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BA%BF%E6%80%A7%E5%9F%BA%5D%E6%9C%80%E5%A4%A7%E5%89%B2/</url>
    <content><![CDATA[<h1>最大割</h1>
<p>Time Limit: 15 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>考虑一张n个点的边带权无向图，点从1~ n编号。</p>
<p>对于图中的任意一个点集(可以为空集或是全集)，称所有那些恰好有一个端点在这个点集中的边所组成的边集为割。</p>
<p>我们再定义一个割的权值为:这个割中所含的所有边边权的异或和。<br>
现在初始时给定一张n个点的空图，接下来会有若干次加(无向)边操作，每次加边后请你求出当前图中权值最大的割的权值。</p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194403.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194405.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3 6<br>
　　1 2 1<br>
　　1 2 1<br>
　　3 3 111<br>
　　1 3 101101<br>
　　1 2 1011<br>
　　2 3 111011</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>1<br>
　　0<br>
　　0<br>
　　101101<br>
　　101101<br>
　　110000</p>
<h2 id="HINT">HINT</h2>
<p>l = log2(w)</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194408.png" alt="img"></p>
<h2 id="Solution">Solution</h2>
<p>首先我们发现，由于<strong>XOR满足消去律</strong>，那么我们定义一个新点的点权为该点所有连边的XOR和，那么<strong>任意点XOR起来得到的值正是割的值</strong>，所以这样操作之后问题就转化为了：任取几个点，求XOR出的最大值，支持点权修改。</p>
<p>那么我们现在显然得到了做法：线性基，并且我们需要维护一个可修改的线性基。</p>
<p>线性基的加入方法：<strong>1.从大到小加入，如果这一位没有匹配元则加入当前值当作匹配元，退出；2.如果这一位有匹配元了就XOR完向后继续执行操作，若值=0则退出</strong>。</p>
<p>线性基的最值方法：<strong>用一个初值为0的Ans串，从大到小贪心，如果这一位有匹配元并且Ans串该位为0则XOR，继续向后</strong>。</p>
<p>线性基的维护方法：我们另外<strong>记录一个record表示这个基是由哪些值XOR出来的</strong>，比如我们要消去b，然后我们就用一个 <strong>有bXOR出来且主元最小</strong> 的基来消去其它含b的基中的b，其中主元定义为最高位的1，我们让最高位的1最小，这样往上消去的时候依然可以满足XOR出来可以满足线性基的条件性质。然后我们扫一遍，如果含有这个b则XOR一下，并且record要XOR那个基的record，这样才可以<strong>保证record的记录不漏</strong>。</p>
<p>这道题就是先删除，然后再加入，每次询问求最值即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">2001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> L = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,n,x,y;</span><br><span class="line"><span class="keyword">int</span> PD;</span><br><span class="line"><span class="keyword">char</span> s[ONE];</span><br><span class="line"><span class="keyword">int</span> Link[ONE];</span><br><span class="line"></span><br><span class="line">bitset &lt;L&gt; record[ONE],A[ONE];</span><br><span class="line">bitset &lt;L&gt; Ans,P;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_first</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    P.<span class="built_in">reset</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">        P[L-len+i] = s[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> pos=<span class="number">1</span>;pos&lt;=L;pos++)</span><br><span class="line">        <span class="keyword">if</span>(A[k][pos])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!Link[pos])</span><br><span class="line">            &#123;</span><br><span class="line">                Link[pos] = k;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                A[k] ^= A[Link[pos]];</span><br><span class="line">                record[k] ^= record[Link[pos]];</span><br><span class="line">                <span class="keyword">if</span>(!A[k].<span class="built_in">any</span>()) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(record[i][x] &amp;&amp; !A[i].<span class="built_in">any</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            k=i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=L;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Link[i] &amp;&amp; record[Link[i]][x])</span><br><span class="line">            &#123;</span><br><span class="line">                k = Link[i];</span><br><span class="line">                Link[i] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=k &amp;&amp; record[i][x])</span><br><span class="line">        &#123;</span><br><span class="line">            A[i] ^= A[k];</span><br><span class="line">            record[i] ^= record[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    A[k] ^= P; <span class="built_in">Add</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) record[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Deal_first</span>();</span><br><span class="line">        <span class="built_in">Update</span>(x);    <span class="built_in">Update</span>(y);</span><br><span class="line"></span><br><span class="line">        Ans.<span class="built_in">reset</span>(); PD=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=L;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Link[i] &amp;&amp; !Ans[i]) Ans ^= A[Link[i]];</span><br><span class="line">            <span class="keyword">if</span>(Ans[i]) PD=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(PD) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans[i]?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!PD) <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线性基</tag>
      </tags>
  </entry>
  <entry>
    <title>[线段树]Vladik and Entertaining Flags</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5DVladik%20and%20Entertaining%20Flags/</url>
    <content><![CDATA[<h1>Vladik and Entertaining Flags</h1>
<p>Time Limit: 20 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p>n * m的矩形，每个格子上有一个数字代表颜色。</p>
<p>q次询问，询问[l, r]有几个连通块，若颜色相同并且连通则属于同一个连通块。</p>
<h2 id="Input">Input</h2>
<p>输入第一行n,m,q。<br>
　　然后一个n*m的矩形。<br>
　　之后q行，每行两个整数l，r。</p>
<h2 id="Output">Output</h2>
<p>输出q行，对于每个询问输出答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4 5 4<br>
　　1 1 1 1 1<br>
　　1 2 2 3 3<br>
　　1 1 1 2 5<br>
　　4 4 5 5 5<br>
　　1 5<br>
　　2 5<br>
　　1 2<br>
　　4 5</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>6<br>
　　7<br>
　　3<br>
　　4</p>
<h2 id="HINT">HINT</h2>
<p>1 ≤ n ≤ 10, 1 ≤ m, q ≤ 1e5， 1 ≤ l ≤ r ≤ m</p>
<h2 id="Solution">Solution</h2>
<p>我们运用线段树，线段树一个节点<strong>i</strong>维护这个点表示的**[L, R]**。</p>
<p>具体维护<strong>Li列~Ri列</strong>的<strong>连通块个数</strong>，<strong>Li列连通信息</strong>，<strong>Ri列连通信息</strong>，<strong>Li列编号</strong>，<strong>Ri列编号</strong>。</p>
<p>连通信息指的是<strong>n个点的连通关系</strong>，用一个**[10]**存下来即可。</p>
<p>我们现在考虑如何<strong>合并</strong>两个区间。</p>
<p>合并的时候，我们先<strong>cnt = 两个区间cnt之和</strong>，然后考虑<strong>左区间的右端</strong>信息 以及 <strong>右区间的左端</strong>信息。</p>
<p>如果有两个<strong>相同的值属于不同连通块</strong>，就<strong>把它们连通起来</strong>，修改一下信息，然后<strong>cnt–</strong>。显然用并查集处理连通即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>, Q = <span class="number">1</span>; <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &lt; <span class="number">48</span> || c &gt; <span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) Q = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res = c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &gt;= <span class="number">48</span> &amp;&amp; c &lt;= <span class="number">57</span>)</span><br><span class="line">        res = res * <span class="number">10</span> + c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">return</span> res * Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, Q;</span><br><span class="line"><span class="keyword">int</span> col[<span class="number">11</span>][ONE];</span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fat[ONE], total = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fat[x] == x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> fat[x] = <span class="built_in">Find</span>(fat[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Un</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f1 = <span class="built_in">Find</span>(x), f2 = <span class="built_in">Find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(f1 != f2) <span class="keyword">return</span> fat[f1] = f2, <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> l[<span class="number">11</span>], lid;</span><br><span class="line">    <span class="keyword">int</span> r[<span class="number">11</span>], rid;</span><br><span class="line">    <span class="keyword">friend</span> power <span class="keyword">operator</span> +(power a, power b)</span><br><span class="line">    &#123;</span><br><span class="line">        power c;</span><br><span class="line">        c.val = a.val + b.val;</span><br><span class="line">        c.lid = a.lid, c.rid = b.rid;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            fat[a.l[i]] = a.l[i], fat[a.r[i]] = a.r[i],</span><br><span class="line">        fat[b.l[i]] = b.l[i], fat[b.r[i]] = b.r[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="keyword">if</span>(col[i][a.rid] == col[i][b.lid])</span><br><span class="line">                c.val -= <span class="built_in">Un</span>(a.r[i], b.l[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            c.l[i] = <span class="built_in">Find</span>(a.l[i]), c.r[i] = <span class="built_in">Find</span>(b.r[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Node[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        Node[i].lid = Node[i].rid = l;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="keyword">if</span>(col[j - <span class="number">1</span>][l] != col[j][l])</span><br><span class="line">                Node[i].l[j] = Node[i].r[j] = ++total, Node[i].val++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            Node[i].l[j] = Node[i].r[j] = Node[i].l[j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Build</span>(i &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">Build</span>(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    Node[i] = Node[i &lt;&lt; <span class="number">1</span>] + Node[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">power <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> Node[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(!(mid + <span class="number">1</span> &lt;= R)) <span class="keyword">return</span> <span class="built_in">Query</span>(i &lt;&lt; <span class="number">1</span>, l, mid, L, R);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!(L &lt;= mid)) <span class="keyword">return</span> <span class="built_in">Query</span>(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">Query</span>(i &lt;&lt; <span class="number">1</span>, l, mid, L, R) + <span class="built_in">Query</span>(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L ,R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();    m = <span class="built_in">get</span>();    Q = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            col[i][j] = <span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">Build</span>(<span class="number">1</span>, <span class="number">1</span>, m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(Q--)</span><br><span class="line">    &#123;</span><br><span class="line">        l = <span class="built_in">get</span>(), r = <span class="built_in">get</span>();</span><br><span class="line">        power res = <span class="built_in">Query</span>(<span class="number">1</span>, <span class="number">1</span>, m, l, r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res.val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[线段树]Melancholy</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5DMelancholy/</url>
    <content><![CDATA[<h1>Melancholy</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>DX3906星系，Melancholy星上，我在勘测这里的地质情况。<br>
　　我把这些天来已探测到的区域分为N组，并用二元组(D,V)对每一组进行标记：其中D为区域的相对距离，V为内部地质元素的相对丰富程度<br>
　　在我的日程安排表上有Q项指派的计划。<br>
　　每项计划的形式是类似的，都是“对相对距离D在[L,R]之间的区域进行进一步的勘测，并在其中有次序地挑出K块区域的样本进行研究。”采集这K块的样品 后，接下来在实验中，它们的研究价值即为这K块区域地质相对丰富程度V的乘积。<br>
　　我对这Q项计划都进行了评估：一项计划的评估值P为所有可能选取情况的研究价值之和。<br>
　　但是由于仪器的原因，在一次勘测中，这其中V最小的区域永远不会被选取。<br>
　　现在我只想知道这Q项计划的评估值对2^32取模后的值，特殊地，如果没有K块区域可供选择， 评估值为0。</p>
<h2 id="Input">Input</h2>
<p>第一行给出两个整数，区域数N与计划数Q。<br>
　　第二行给出N个整数，代表每一块区域的相对距离D。<br>
　　第三行给出N个整数，代表每一块区域的内部地质元素的相对丰富程度V。<br>
　　接下来的Q行，每一行3个整数，代表相对距离的限制L,R，以及选取的块数K。</p>
<h2 id="Output">Output</h2>
<p>输出包括Q行，每一行一个整数，代表这项计划的评估值对2^32取模后的值。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 3<br>
　　5 4 7 2 6<br>
　　1 4 5 3 2<br>
　　6 7 1<br>
　　2 6 2<br>
　　1 8 3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>5<br>
　　52<br>
　　924</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528013423.png" alt="img"></p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528013429.png" alt="img"></p>
<h2 id="Main-idea">Main idea</h2>
<p>查询D在[L, R]中的元素，去掉最小的L值之后，任意k几个相乘的和。</p>
<h2 id="Solution">Solution</h2>
<p>首先，我们可以<strong>按照D排序</strong>一下，然后调出<strong>D在[L,R]<strong>的元素，显然是</strong>连续的一段</strong>。</p>
<p>然后我们再记录一下<strong>最小值L，以及最小值L所在的位置</strong>。这样在线段树上区间查询一下，就可以得到<strong>最小值的pos</strong>。</p>
<p>那么我们就将询问化成了，查询<strong>两个区间</strong>的信息并且<strong>合并</strong>。</p>
<p>问题在于如何<strong>合并</strong>。</p>
<p>我们对于线段树上的每个节点，记录一下<strong>val[i]<strong>表示选了</strong>i</strong>个<strong>乘起来的和</strong>。</p>
<p>那么两个区间<strong>合并</strong>起来时，<strong>val[i] = ΣA.val[j] * B.val[i - j]</strong>，根据<strong>乘法分配律</strong>可以看出。</p>
<p>比如我们<strong>左区间选了2个</strong>的答案形如：<strong>x1·x2 + y1·y2</strong>，<strong>右区间选了1个</strong>的答案形如：<strong>z1 + z2</strong>。</p>
<p>那么<strong>合并之后的区间 选了3个</strong>答案形如：<strong>x1·x2·z1 + x1·x2·z2 + y1·y2·z2+ y1·y2·z2</strong>，显然就是两个<strong>乘起来</strong>，并且<strong>不漏状态</strong>。</p>
<p>这样就可以得到答案啦。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> u32;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> u32 INF = <span class="number">4294967295u</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, Q;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u32 d, v;</span><br><span class="line">&#125;a[ONE], L, R;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> point &amp;a, <span class="keyword">const</span> point &amp;b)</span> </span>&#123;<span class="keyword">return</span> a.d &lt; b.d;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u32 val[<span class="number">7</span>];</span><br><span class="line">    <span class="keyword">friend</span> power <span class="keyword">operator</span> +(power a, power b)</span><br><span class="line">    &#123;</span><br><span class="line">        power c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) c.val[i] = a.val[i] + b.val[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">                c.val[i] += a.val[j] * b.val[i - j];</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Node[ONE], A[<span class="number">3</span>], Ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Min</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    u32 val, pos;</span><br><span class="line">    <span class="keyword">friend</span> Min <span class="keyword">operator</span> +(Min a, Min b)</span><br><span class="line">    &#123;</span><br><span class="line">        Min c = (Min)&#123;INF, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(a.val &lt; c.val) c = a;</span><br><span class="line">        <span class="keyword">if</span>(b.val &lt; c.val) c = b;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Val[ONE], res_min;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Seg</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Val[i] = (Min)&#123;INF, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">6</span>; j++) Node[i].val[j] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            Node[i].val[<span class="number">1</span>] = a[l].v;</span><br><span class="line">            Val[i] = (Min)&#123;a[l].v, l&#125;;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">Build</span>(i &lt;&lt; <span class="number">1</span>, l, mid); <span class="built_in">Build</span>(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        Node[i] = Node[i &lt;&lt; <span class="number">1</span>] + Node[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">        Val[i] = Val[i &lt;&lt; <span class="number">1</span>] + Val[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L &gt; R) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">        &#123;</span><br><span class="line">            res_min = res_min + Val[i];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= mid) <span class="built_in">Find</span>(i &lt;&lt; <span class="number">1</span>, l, mid, L, R);</span><br><span class="line">        <span class="keyword">if</span>(mid + <span class="number">1</span> &lt;= R) <span class="built_in">Find</span>(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> opt)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L &gt; R) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">        &#123;</span><br><span class="line">            A[opt] = A[opt] + Node[i];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= mid) <span class="built_in">Query</span>(i &lt;&lt; <span class="number">1</span>, l, mid, L, R, opt);</span><br><span class="line">        <span class="keyword">if</span>(mid + <span class="number">1</span> &lt;= R) <span class="built_in">Query</span>(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, opt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Left = <span class="built_in">lower_bound</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, L, cmp) - a;</span><br><span class="line">    <span class="keyword">int</span> Right = <span class="built_in">upper_bound</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, R, cmp) - a - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Left &gt;= Right) &#123;<span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>); <span class="keyword">return</span>;&#125;</span><br><span class="line"></span><br><span class="line">    res_min = (Min)&#123;INF, <span class="number">0</span>&#125;;</span><br><span class="line">    Seg::<span class="built_in">Find</span>(<span class="number">1</span>, <span class="number">1</span>, n, Left, Right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) A[<span class="number">1</span>].val[i] = A[<span class="number">2</span>].val[i] = <span class="number">0</span>;</span><br><span class="line">    Seg::<span class="built_in">Query</span>(<span class="number">1</span>, <span class="number">1</span>, n, Left, res_min.pos - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    Seg::<span class="built_in">Query</span>(<span class="number">1</span>, <span class="number">1</span>, n, res_min.pos + <span class="number">1</span>, Right, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    Ans = A[<span class="number">1</span>] + A[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(u32 i = <span class="number">1</span>; i &lt;= k; i++) Ans.val[k] *= i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%u\n&quot;</span>, Ans.val[k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();    Q = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i].d = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i].v = <span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, cmp);</span><br><span class="line"></span><br><span class="line">    Seg::<span class="built_in">Build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(Q--)</span><br><span class="line">    &#123;</span><br><span class="line">        L.d = <span class="built_in">get</span>(), R.d = <span class="built_in">get</span>(), k = <span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Deal</span>(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[线段树]Weed</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5DWeed/</url>
    <content><![CDATA[<h1>Weed</h1>
<p>Time Limit: 20 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p>从前有个栈，一开始是空的。<br>
　　你写下了 m 个操作，每个操作形如 k v :<br>
　　　　若 k = 0，代表往栈顶加入一个数 v<br>
　　　　若 k = 1，则代表从栈顶弹出 v 个数，如果栈中的元素少于 v 个，则全部弹出。<br>
　　接着你又进行了 q 次修改，每次你会选择一个操作，并且修改它的两个参数。<br>
　　在每次修改后，你都要求出如果依次执行这些操作，最后栈中剩下的元素之和。</p>
<h2 id="Input">Input</h2>
<p>第一行两个正整数 m,q，分别表示操作数和修改次数。<br>
　　接下来 m 行，每行两个整数 k,v，代表一个操作。<br>
　　接下来 q 行，每行三个正整数 c,k,v，表示将第 c 个操作的参数修改为 k 和 v。</p>
<h2 id="Output">Output</h2>
<p>输出 q 行，每行一个整数，代表依次执行所有操作后栈中剩下的元素之和。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 2<br>
　　0 3<br>
　　0 2<br>
　　0 3<br>
　　1 1<br>
　　0 5<br>
　　1 0 3<br>
　　1 0 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>10<br>
　　8</p>
<h2 id="HINT">HINT</h2>
<p>m,q ≤ 2×1e5, v ≤ 1e4</p>
<h2 id="Solution">Solution</h2>
<p>首先，我们可以把一个操作拆成：<strong>先删除若干个数，然后加入若干个数</strong>。</p>
<p>那么我们可以用线段树来维护，一个节点记录：<strong>删除del个数</strong>，<strong>加入add个数</strong>，<strong>这add个数的和是val</strong>。</p>
<p>那么我们只需要支持<strong>单点修改</strong>，答案显然就是<strong>Node[1].val</strong>。问题在于怎么<strong>合并两个节点</strong>的信息。</p>
<p>我们分情况讨论，记录左儿子为<strong>L</strong>，右儿子为<strong>R</strong>。显然信息形如：<strong>----+++ / -----+++</strong>。讨论一下 <strong>R.del</strong> 与 <strong>L.add</strong> 的关系：</p>
<p><strong>1.</strong> 显然当 <strong>L.add &lt;= R.del</strong> 的时候， del 即为 <strong>L.del + R剩余的del</strong> ，add 即为 <strong>R.add</strong>，val 即为 <strong>R.val</strong>；</p>
<p><strong>2.</strong> 否则，当 <strong>L.add &gt; R.del</strong> 的时候，难点在于 <strong>L 剩下多少 val</strong>，只要讨论出了这个问题，就解决了该题。</p>
<p>我们令函数 <strong>Query(i, k)</strong> 表示 <strong>删除</strong>了<strong>节点 i</strong> 的 <strong>后 k 个值</strong>，剩下的 <strong>val</strong>。那么显然这个也只要分类讨论即可：</p>
<p><strong>1.</strong> <strong>k = R.add</strong>，返回 <strong>i.val - R.val</strong> 即可，比较显然；</p>
<p><strong>2.</strong> <strong>k &lt; R.add</strong>，显然我们需要<strong>继续往 R 递归</strong>，返回 <strong>i.val - R.val + Query(R, k)</strong>；</p>
<p><strong>3.</strong> <strong>k &gt; R.add</strong>，显然我们需要<strong>往 L 递归</strong>，显然 <strong>k 先减去 R.add</strong>，又因为<strong>存在R.del这一段</strong>，所以 <strong>L 的后面几个</strong>是<strong>被删除</strong>的，要<strong>多查几个</strong>，所以返回 <strong>Query(L, k - R.add + R.del)</strong>。</p>
<p>然后我们写个<strong>线段树</strong>，就解决了这道题啦QWQ。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m, T;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> opt, val;</span><br><span class="line">&#125;oper[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> add, del, val;</span><br><span class="line">&#125;Node[ONE * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> L = i &lt;&lt; <span class="number">1</span>, R = i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k == Node[R].add) <span class="keyword">return</span> Node[i].val - Node[R].val;</span><br><span class="line">    <span class="keyword">if</span>(k &lt; Node[R].add) <span class="keyword">return</span> Node[i].val - Node[R].val + <span class="built_in">Query</span>(R, k);</span><br><span class="line">    <span class="keyword">if</span>(k &gt; Node[R].add) <span class="keyword">return</span> <span class="built_in">Query</span>(L, k - Node[R].add + Node[R].del);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">power <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    power c = (power)&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(Node[L].add &lt;= Node[R].del)</span><br><span class="line">        c.del = Node[L].del + Node[R].del - Node[L].add,</span><br><span class="line">    c.add = Node[R].add, c.val = Node[R].val;</span><br><span class="line">    <span class="keyword">if</span>(Node[L].add &gt; Node[R].del)</span><br><span class="line">    &#123;</span><br><span class="line">        c.del = Node[L].del;</span><br><span class="line">        c.add = Node[L].add - Node[R].del + Node[R].add;</span><br><span class="line">        c.val = <span class="built_in">Query</span>(L, Node[R].del) + Node[R].val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(oper[l].opt == <span class="number">0</span>) Node[i] = (power)&#123;<span class="number">1</span>, <span class="number">0</span>, oper[l].val&#125;;</span><br><span class="line">        <span class="keyword">else</span> Node[i] = (power)&#123;<span class="number">0</span>, oper[l].val, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Build</span>(i &lt;&lt; <span class="number">1</span>, l, mid); <span class="built_in">Build</span>(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    Node[i] = <span class="built_in">Merge</span>(i &lt;&lt; <span class="number">1</span>, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= L)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(oper[l].opt == <span class="number">0</span>) Node[i] = (power)&#123;<span class="number">1</span>, <span class="number">0</span>, oper[l].val&#125;;</span><br><span class="line">        <span class="keyword">else</span> Node[i] = (power)&#123;<span class="number">0</span>, oper[l].val, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid) <span class="built_in">Update</span>(i &lt;&lt; <span class="number">1</span>, l, mid, L);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">Update</span>(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L);</span><br><span class="line">    Node[i] = <span class="built_in">Merge</span>(i &lt;&lt; <span class="number">1</span>, i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m = <span class="built_in">get</span>();    T = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        oper[i].opt = <span class="built_in">get</span>(), oper[i].val = <span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">Build</span>(<span class="number">1</span>, <span class="number">1</span>, m);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> id = <span class="built_in">get</span>();</span><br><span class="line">        oper[id].opt = <span class="built_in">get</span>();    oper[id].val = <span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Update</span>(<span class="number">1</span>, <span class="number">1</span>, m, id);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Node[<span class="number">1</span>].val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[线段树]Wide Swap</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5DWide%20Swap/</url>
    <content><![CDATA[<h1>Wide Swap</h1>
<p>Time Limit: 50 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528014608.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528014610.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528014612.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>8 3<br>
　　4 5 7 8 3 1 2 6</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>1<br>
　　2<br>
　　6<br>
　　7<br>
　　5<br>
　　3<br>
　　4<br>
　　8</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528014614.png" alt="img"></p>
<h2 id="Solution">Solution</h2>
<p>首先，直接做难度系数较高，<strong>假设原序列为a</strong>，我们<strong>考虑设一个p</strong>，<strong>p[a_i] = i</strong>，即将题目中的<strong>权值与下标调换</strong>。</p>
<p>那么显然，要<strong>令a字典序最小</strong>，只要<strong>让p字典序最小即可</strong>。因为**“权值小的尽量前”<strong>与</strong>“前面的权值尽量小”**是一个意思。</p>
<p>现在操作转化为：<strong>相邻元素</strong>且<strong>权值差&gt;=k</strong>的可以换顺序。</p>
<p>考虑一个暴力怎么做，显然是 <strong>i</strong> 与<strong>后面的所有 j 比</strong>，如果 <strong>abs(p_i - p_j) &lt; k</strong>，则 <strong>i</strong> <strong>和 j 的相对顺序就确定了</strong>， 连一条 <strong>p_i -&gt; p_j</strong> 的边。</p>
<p>连边之后跑一边拓扑即可。</p>
<p>显然<strong>复杂度在于连边</strong>，因为这样暴力会有很多<strong>无用边</strong>。比如<strong>A-&gt;B, B-&gt;C, A-&gt;C</strong>，这条<strong>A-&gt;C显然无用</strong>。</p>
<p>我们考虑如何删掉 A-&gt;C 这种边。</p>
<p><strong>倒着加入</strong>，显然 <strong>p_i 连向 (p_i-k, p_i)∪(p_i, p_i+k)</strong>。我们只需要<strong>分别连向两个区间中下标最小的那一个</strong>即可。用线段树维护一下<strong>区间最小值</strong>。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> next nxt</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>, Q = <span class="number">1</span>; <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &lt; <span class="number">48</span> || c &gt; <span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) Q = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res = c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &gt;= <span class="number">48</span> &amp;&amp; c &lt;= <span class="number">57</span>)</span><br><span class="line">        res = res * <span class="number">10</span> + c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">return</span> res * Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> A[ONE], p[ONE];</span><br><span class="line"><span class="keyword">int</span> next[ONE], first[ONE], go[ONE], Input[ONE], tot;</span><br><span class="line">priority_queue &lt;<span class="keyword">int</span>, vector &lt;<span class="keyword">int</span>&gt;, greater &lt;<span class="keyword">int</span>&gt; &gt; q;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res = INF;</span><br><span class="line"><span class="keyword">namespace</span> Seg</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">power</span> &#123;</span><span class="keyword">int</span> val;&#125; Node[ONE * <span class="number">4</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node[i].val = INF;</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">Build</span>(i &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">Build</span>(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= L)</span><br><span class="line">        &#123;</span><br><span class="line">            Node[i].val = x;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= mid) <span class="built_in">Update</span>(i &lt;&lt; <span class="number">1</span>, l, mid, L, x);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">Update</span>(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L, x);</span><br><span class="line">        Node[i].val = <span class="built_in">min</span>(Node[i &lt;&lt; <span class="number">1</span>].val, Node[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L &gt; R) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">        &#123;</span><br><span class="line">            res = <span class="built_in">min</span>(res, Node[i].val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= mid) <span class="built_in">Query</span>(i &lt;&lt; <span class="number">1</span>, l, mid, L, R);</span><br><span class="line">        <span class="keyword">if</span>(mid + <span class="number">1</span> &lt;= R) <span class="built_in">Query</span>(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Input[v]++, next[++tot] = first[u], first[u] = tot, go[tot] = v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span>(!Input[i]) q.<span class="built_in">push</span>(i);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.<span class="built_in">top</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        A[u] = ++now;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e = first[u]; e; e = next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = go[e];</span><br><span class="line">            <span class="keyword">if</span>(--Input[v] == <span class="number">0</span>) q.<span class="built_in">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, A[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>(), k = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) p[<span class="built_in">get</span>()] = i;</span><br><span class="line"></span><br><span class="line">    Seg::<span class="built_in">Build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        res = INF, Seg::<span class="built_in">Query</span>(<span class="number">1</span>, <span class="number">1</span>, n, p[i] + <span class="number">1</span>, <span class="built_in">min</span>(p[i] + k - <span class="number">1</span>, n));</span><br><span class="line">        <span class="keyword">if</span>(res != INF) <span class="built_in">Add</span>(p[i], p[res]);</span><br><span class="line"></span><br><span class="line">        res = INF, Seg::<span class="built_in">Query</span>(<span class="number">1</span>, <span class="number">1</span>, n, <span class="built_in">max</span>(<span class="number">1</span>, p[i] - k + <span class="number">1</span>), p[i] - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(res != INF) <span class="built_in">Add</span>(p[i], p[res]);</span><br><span class="line"></span><br><span class="line">        Seg::<span class="built_in">Update</span>(<span class="number">1</span>, <span class="number">1</span>, n, p[i], i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Deal</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[线段树][DP]划分序列</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5D%5BDP%5D%E5%88%92%E5%88%86%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<h1>划分序列</h1>
<p>Time Limit: 20 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>给定一个长度为n的序列A;，现在要求把这个序列分成恰好K段(每一段是一个连续子序列，且每个元素恰好属于一段)，并且每段至少有一个元素，使得和最大的那一段的和最小。<br>
请你求出这个最小值。</p>
<h2 id="Input">Input</h2>
<p>第一行两个正整数n,K，意义见题目描述。接下来一行n个整数表示序列Ai</p>
<h2 id="Output">Output</h2>
<p>仅一行一个整数表示答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>9 4<br>
　　1 1 1 3 2 2 1 3 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>5</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527195820.png" alt="img"></p>
<h2 id="Main-idea">Main idea</h2>
<p>将序列分为若干段，使得和最大的那一段最小，值可以为负。</p>
<h2 id="Source">Source</h2>
<p>首先，显然都想到了二分答案。</p>
<p>我们先把都为正数或负数的情况写了：Ai&gt;=0的时候求出<strong>最小的划分段数x</strong>，若x&lt;=K则表示当前答案可行；Ai&lt;=0的时候求出<strong>最大的划分段数x</strong>，若x&gt;=K则表示当前答案可行。然后再打了暴力，接着我们对拍一下，惊讶地发现了一个规律：<strong>若最小划分段数为L，最大划分段数为R，当L&lt;=K&lt;=R时则可以更新</strong>。</p>
<p>然后我们用DP来求L和R，也就是：若一段的和满足&lt;=mid，则可以分为一段。</p>
<p>然后我们发现，可以用线段树优化寻找1~i-1中的最小值或最大值，这样判断就可以满足效率了。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">5e4</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,block;</span><br><span class="line"><span class="keyword">int</span> L,R;</span><br><span class="line"><span class="keyword">int</span> x,sum[ONE],s[ONE];</span><br><span class="line"><span class="keyword">int</span> li[ONE],li_num;</span><br><span class="line"><span class="keyword">int</span> f_min[ONE],f_max[ONE];</span><br><span class="line"><span class="keyword">int</span> res_min,res_max;</span><br><span class="line"><span class="keyword">int</span> Zero;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Seg</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> minn;</span><br><span class="line">        <span class="keyword">int</span> maxx;</span><br><span class="line">    &#125;Node[ONE];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node[i].minn = INF;</span><br><span class="line">        Node[i].maxx = -INF;</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">Build</span>(i&lt;&lt;<span class="number">1</span>,l,mid);    <span class="built_in">Build</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> x,<span class="keyword">int</span> PD)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l==r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!PD) Node[i].minn = x;</span><br><span class="line">            <span class="keyword">else</span> Node[i].maxx = x;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid) <span class="built_in">Update</span>(i&lt;&lt;<span class="number">1</span>,l,mid,L,x,PD);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">Update</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,x,PD);</span><br><span class="line">        Node[i].minn = <span class="built_in">min</span>(Node[i&lt;&lt;<span class="number">1</span>].minn, Node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].minn);</span><br><span class="line">        Node[i].maxx = <span class="built_in">max</span>(Node[i&lt;&lt;<span class="number">1</span>].maxx, Node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].maxx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)</span><br><span class="line">        &#123;</span><br><span class="line">            res_min=<span class="built_in">min</span>(res_min, Node[i].minn);</span><br><span class="line">            res_max=<span class="built_in">max</span>(res_max, Node[i].maxx);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid) <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>,l,mid,L,R);</span><br><span class="line">        <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=R) <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Seg::<span class="built_in">Build</span>(<span class="number">1</span>,<span class="number">1</span>,li_num);</span><br><span class="line">    Seg::<span class="built_in">Update</span>(<span class="number">1</span>,<span class="number">1</span>,li_num, Zero,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    Seg::<span class="built_in">Update</span>(<span class="number">1</span>,<span class="number">1</span>,li_num, Zero,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> pos = <span class="built_in">lower_bound</span>(li+<span class="number">1</span>,li+li_num+<span class="number">1</span>,sum[i] - mid) - li;</span><br><span class="line">        res_min = INF;    res_max = -INF;    Seg::<span class="built_in">Query</span>(<span class="number">1</span>,<span class="number">1</span>,li_num, <span class="number">1</span>,pos);</span><br><span class="line">        f_min[i] = res_min + <span class="number">1</span>;</span><br><span class="line">        f_max[i] = res_max + <span class="number">1</span>;</span><br><span class="line">        Seg::<span class="built_in">Update</span>(<span class="number">1</span>,<span class="number">1</span>,li_num, s[i],f_min[i],<span class="number">0</span>);</span><br><span class="line">        Seg::<span class="built_in">Update</span>(<span class="number">1</span>,<span class="number">1</span>,li_num, s[i],f_max[i],<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (f_min[n]&lt;=block &amp;&amp; block&lt;=f_max[n]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    block=<span class="built_in">get</span>();</span><br><span class="line">    li[++li_num] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();</span><br><span class="line">        li[++li_num] = sum[i] = sum[i<span class="number">-1</span>] + x;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span>) L+=x; <span class="keyword">else</span> R+=x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(li+<span class="number">1</span>,li+li_num+<span class="number">1</span>);</span><br><span class="line">    li_num = <span class="built_in">unique</span>(li+<span class="number">1</span>,li+li_num+<span class="number">1</span>) - li - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        s[i]=<span class="built_in">lower_bound</span>(li+<span class="number">1</span>,li+li_num+<span class="number">1</span>, sum[i]) - li;</span><br><span class="line">    Zero = <span class="built_in">lower_bound</span>(li+<span class="number">1</span>,li+li_num+<span class="number">1</span>, <span class="number">0</span>) - li;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(L &lt; R - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Check</span>(mid)) R = mid;</span><br><span class="line">        <span class="keyword">else</span> L = mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Check</span>(L)) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,L);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,R);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[线段树][DP]阅读</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5D%5BDP%5D%E9%98%85%E8%AF%BB/</url>
    <content><![CDATA[<h1>阅读</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>A君喜欢阅读，现在他准备读一本书，他会从第K页开始看，然后看到第M页。<br>
书中的内容并不一定都让A君愉悦，或者说，A君更喜欢看书中的精华。更具体地，书中有N页能让A君感到愉悦，阅读第T页可以获得B;的愉悦度。<br>
由于书的页数实在太多，因此A君会选择跳着看，但是他一次最多跳D页(两页页码差不大于D)，然后阅读跳到的那一页的内容，每次翻页他将会丧失A的愉悦度。<br>
现在A君想知道他阅读完这本书，能得到的愉悦度之和最大能是多少。</p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527193752.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527193756.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>0 10 4 10 2<br>
　　3 10<br>
　　8 5</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>-20</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527193758.png" alt="img"></p>
<h2 id="Main-idea">Main idea</h2>
<p>从K走向M，路上有n个收益点，表示到了pos位置可以增加val的收益，每次最多可以走D步，走一次损耗A。求最大收益。</p>
<h2 id="Solution">Solution</h2>
<p>这题必然是一道DP，我们层层深入来思考。</p>
<p>先从20%考虑：首先我们一下子就想到了暴力DP，<strong>令f[i]表示到了第i个收益点的最大收益</strong>，显然对于每个收益点我们可以O(n)往前枚举每种情况，两个收益点间到达的方法必然是每次都跳D步，最后补上一段，那么步数就是<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527193802.png" alt="img">，这样做就是O(n^2)的算法。</p>
<p>再考虑另外30%：我们发现，我们可以将pos%D同余的放在一个集合，因为这样的话两点之间到达必然是一直跳D步的，那么显然在同一个集合里的点<strong>最后一个点对后面的点贡献更优</strong>。由于这时候D&lt;=100，我们先预处理，然后新增点的时候枚举D更新即可。</p>
<p>考虑100%的做法：我们<strong>将前面两种方法结合</strong>起来，我们发现<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527193809.png" alt="img">，由于中间这个步数是一个上取整的东西，不好维护，于是我们可以把它拆成<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527193811.png" alt="img">，这个东西具体是+0还是+1我们可以举例子来思考。发现根据余数有关：当<strong>pos[j]%D&lt;pos[i]%D的时候+1，否则+0</strong>。然后我们就可以用一个线段树来优化这个DP。对于叶子节点 i 维护 pos%D=i 的最值，这里的最值指的是上述式子中仅仅与 j 有关的一项，因为后面的val[i]以及其它项是都要加的，所以可以不管。然后我们再往线段树里面每次加入f[i]，这样显然就是<strong>区间查询最值、单点修改</strong>的一个线段树结构。效率O(nlogn)</p>
<p>这里还有一个技巧就是：<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527193814.png" alt="img">所以我们维护线段树权值的时候<strong>可以不用管pos</strong>，最后对于答案加减操作即可。</p>
<p>这样我们就解决了这道题(≧▽≦)/。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> s64 INF=<span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> K,M,D,A,n;</span><br><span class="line">s64 F,res;</span><br><span class="line"><span class="keyword">int</span> pos[ONE],val[ONE];</span><br><span class="line"><span class="keyword">int</span> Mod;</span><br><span class="line"><span class="keyword">int</span> li[ONE],Num;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    s64 maxx;</span><br><span class="line">&#125;Node[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node[i].maxx = -INF;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Build</span>(i&lt;&lt;<span class="number">1</span>,l,mid);    <span class="built_in">Build</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,s64 x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        Node[i].maxx = <span class="built_in">max</span>(Node[i].maxx,x);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) <span class="built_in">Update</span>(i&lt;&lt;<span class="number">1</span>,l,mid,L,x);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">Update</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,x);</span><br><span class="line">    Node[i].maxx = <span class="built_in">max</span>(Node[i&lt;&lt;<span class="number">1</span>].maxx , Node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].maxx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &gt; R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)</span><br><span class="line">    &#123;</span><br><span class="line">        res=<span class="built_in">max</span>(res,Node[i].maxx);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>,l,mid,L,R);</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=R) <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    K=<span class="built_in">get</span>();    M=<span class="built_in">get</span>();    D=<span class="built_in">get</span>();    A=<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        pos[i]=<span class="built_in">get</span>(),    val[i]=<span class="built_in">get</span>();</span><br><span class="line">    pos[<span class="number">0</span>]=K;    pos[++n]=M;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)  li[++Num]=pos[i] % D;</span><br><span class="line">    <span class="built_in">sort</span>(li+<span class="number">1</span>,li+Num+<span class="number">1</span>);    Num=<span class="built_in">unique</span>(li+<span class="number">1</span>,li+Num+<span class="number">1</span>) - li <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Build</span>(<span class="number">1</span>,<span class="number">1</span>,Num);</span><br><span class="line">    Mod = <span class="built_in">lower_bound</span>(li+<span class="number">1</span>,li+Num+<span class="number">1</span>, K%D) - li;</span><br><span class="line">    <span class="built_in">Update</span>(<span class="number">1</span>,<span class="number">1</span>,Num,Mod,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        F = -INF;</span><br><span class="line">        Mod = <span class="built_in">lower_bound</span>(li+<span class="number">1</span>,li+Num+<span class="number">1</span>, pos[i]%D) - li;</span><br><span class="line"></span><br><span class="line">        res=-INF;    <span class="built_in">Query</span>(<span class="number">1</span>,<span class="number">1</span>,Num,<span class="number">1</span>,Mod<span class="number">-1</span>);    F=<span class="built_in">max</span>(F, res - A + val[i] );</span><br><span class="line">        res=-INF;    <span class="built_in">Query</span>(<span class="number">1</span>,<span class="number">1</span>,Num,Mod,Num);    F=<span class="built_in">max</span>(F, res + val[i]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Update</span>(<span class="number">1</span>,<span class="number">1</span>,Num, Mod,F);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%I64d&quot;</span>,F + (s64)A*(K/D) - (s64)A*(M/D));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[线段树]乒乓游戏</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5D%E4%B9%92%E4%B9%93%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<h1>乒乓游戏</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527192759.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527192802.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527192803.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5<br>
　　1 1 5<br>
　　1 5 11<br>
　　2 1 2<br>
　　1 2 9<br>
　　2 1 2</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>NO<br>
　　YES</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527192806.png" alt="img"></p>
<h2 id="Main-idea">Main idea</h2>
<p>如果一个区间的端点在区间内，则这个区间可以走到那个区间，询问一个区间能否到另一个区间。</p>
<h2 id="Source">Source</h2>
<p>首先我们立马想到了：<strong>如果两个区间严格有交集，那么这两个区间所能到达的区间集合是一样的</strong>。那么如果两个区间严格有交集的话我们就可以把它们合并起来，这里运用并查集。</p>
<p>这样处理完之后，剩下的区间只有两种情况：<strong>包含</strong>或者<strong>相离</strong>。那么查询的时候显然只要判断两个区间指向的大区间的情况即可。</p>
<p>我们要怎么合并呢？显然就是在线段树上进行操作，对于线段树上的每个节点开个vector，存下<strong>严格包含</strong>这个节点表示的[l,r]的<strong>区间的编号</strong>，那么我们加入新区间的时候，只要把左右端点在线段树上往下走，如果遇到这个线段树上的节点上的vector有东西，就记录几个区间的最小左端点以及最大右端点，把这几个区间的父亲都指向这个新区间，再删除掉这几个区间即可。然后合并完之后，把得到的新区间再放到各个点的vector进去。</p>
<p>最后，由于这题区间端点权比较大，所以要先离散化。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">100005</span>*<span class="number">8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e9</span>+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> Num,cnt;</span><br><span class="line"></span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; Node[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,opt;</span><br><span class="line">&#125;a[ONE],interval[ONE];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Q[ONE],li_num;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LISAN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos,val;</span><br><span class="line">&#125;Li[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> LI</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i].opt!=<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        Num++;</span><br><span class="line">        Li[++li_num].val = a[i].l;    Li[li_num].pos = li_num;</span><br><span class="line">        Li[++li_num].val = a[i].r;    Li[li_num].pos = li_num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> LISAN &amp;a,<span class="keyword">const</span> LISAN &amp;b)</span> </span>&#123;<span class="keyword">return</span> a.val &lt; b.val;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Lisan</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(Li+<span class="number">1</span>, Li+li_num+<span class="number">1</span>, cmp);</span><br><span class="line"></span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        Li[<span class="number">0</span>].val=-INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=li_num;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Li[i].val!=Li[i<span class="number">-1</span>].val) ++cnt;</span><br><span class="line">            Q[Li[i].pos]=cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        Num=cnt;</span><br><span class="line"></span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(a[i].opt==<span class="number">1</span>)</span><br><span class="line">                a[i].l=Q[++cnt], a[i].r=Q[++cnt];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fat[ONE];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fat[x]==x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> fat[x]=<span class="built_in">Find</span>(fat[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Seg</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Node[i].<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;Node[i].<span class="built_in">size</span>(); j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> id=Node[i][j];</span><br><span class="line">                fat[ <span class="built_in">Find</span>(id) ] = cnt;</span><br><span class="line">                interval[cnt].l = <span class="built_in">min</span>(interval[cnt].l, interval[id].l);</span><br><span class="line">                interval[cnt].r = <span class="built_in">max</span>(interval[cnt].r, interval[id].r);</span><br><span class="line">            &#125;</span><br><span class="line">            Node[i].<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= mid) <span class="built_in">Delete</span>(i&lt;&lt;<span class="number">1</span>, l, mid, L);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">Delete</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, L);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L&gt;R) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)</span><br><span class="line">        &#123;</span><br><span class="line">            Node[i].<span class="built_in">push_back</span>(cnt);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid) <span class="built_in">Update</span>(i&lt;&lt;<span class="number">1</span>,l,mid,L,R);</span><br><span class="line">        <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=R) <span class="built_in">Update</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">P_edge</span><span class="params">(power a,power b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( (b.l&lt;a.l &amp;&amp; a.l&lt;b.r) || (b.l&lt;a.r &amp;&amp; a.r&lt;b.r)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i].opt=<span class="built_in">get</span>();</span><br><span class="line">        a[i].l=<span class="built_in">get</span>();    a[i].r=<span class="built_in">get</span>();</span><br><span class="line">        LI::<span class="built_in">add</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Num;i++) fat[i]=i;</span><br><span class="line"></span><br><span class="line">    LI::<span class="built_in">Lisan</span>();</span><br><span class="line"></span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i].opt==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            interval[++cnt] = a[i];</span><br><span class="line">            Seg::<span class="built_in">Delete</span>(<span class="number">1</span>,<span class="number">1</span>,Num, a[i].l);</span><br><span class="line">            Seg::<span class="built_in">Delete</span>(<span class="number">1</span>,<span class="number">1</span>,Num, a[i].r);</span><br><span class="line">            Seg::<span class="built_in">Update</span>(<span class="number">1</span>,<span class="number">1</span>,Num, interval[cnt].l+<span class="number">1</span>,interval[cnt].r<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x=<span class="built_in">Find</span>(a[i].l), y=<span class="built_in">Find</span>(a[i].r);</span><br><span class="line">            <span class="keyword">if</span>(x==y || <span class="built_in">P_edge</span>(interval[x] , interval[y]))</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[线段树][欧拉定理]相逢是问候</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5D%5B%E6%AC%A7%E6%8B%89%E5%AE%9A%E7%90%86%5D%E7%9B%B8%E9%80%A2%E6%98%AF%E9%97%AE%E5%80%99/</url>
    <content><![CDATA[<h1>相逢是问候</h1>
<p>Time Limit: 40 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p>Informatikverbindetdichundmich.</p>
<p>信息将你我连结。B君希望以维护一个长度为n的数组，这个数组的下标为从1到n的正整数。一共有m个操作，可以</p>
<p>分为两种：0 l r表示将第l个到第r个数（al,al+1,…,ar）中的每一个数ai替换为c^ai，即c的ai次方，其中c是</p>
<p>输入的一个常数，也就是执行赋值ai=c^ai1 l r求第l个到第r个数的和，也就是输出：sigma(ai),l&lt;=i&lt;=rai因为</p>
<p>这个结果可能会很大，所以你只需要输出结果mod p的值即可。</p>
<h2 id="Input">Input</h2>
<p>第一行有三个整数n,m,p,c，所有整数含义见问题描述。</p>
<p>接下来一行n个整数，表示a数组的初始值。</p>
<p>接下来m行，每行三个整数，其中第一个整数表示了操作的类型。</p>
<p>如果是0的话，表示这是一个修改操作，操作的参数为l,r。</p>
<p>如果是1的话，表示这是一个询问操作，操作的参数为l,r。</p>
<h2 id="Output">Output</h2>
<p>对于每个询问操作，输出一行，包括一个整数表示答案mod p的值。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4 4 7 2<br>
　1 2 3 4<br>
　0 1 4<br>
　1 2 4<br>
　0 1 4<br>
　1 1 3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>0<br>
　3</p>
<h2 id="HINT">HINT</h2>
<p>1 ≤ n ≤ 50000, 1 ≤ m ≤ 50000, 1 ≤ p ≤ 100000000, 0 &lt; c &lt;p, 0 ≤ ai &lt; p</p>
<h2 id="Solution">Solution</h2>
<p>首先，我们运用欧拉定理：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528005122.png" alt="img"></p>
<p>然后还有一个定理：一个数在执行log次操作后，值不会改变。</p>
<p>于是乎，我们可以运用线段树，<strong>暴力修改</strong>每一个值，如果值都不变了则不修改。</p>
<p>然后我们再考虑一下，怎么修改这个值：<br>
　　已知<strong>a(原值)<strong>和</strong>times(修改次数)</strong>，我们考虑每一次%什么，<br>
　　　　考虑每一次b的模数。<br>
　　　　首先如果<strong>b%phi§</strong>，意味着<strong>a^b</strong>在**%p<strong>下同余。<br>
　　　　如果这一次</strong>b%phi(phi§)<strong>，意味着</strong>a^b<strong>在</strong>phi§<strong>下同余，<br>
　　　　同时也意味着下一次在</strong>%phi§<strong>意义下。<br>
　　　　我们要让答案最后是在</strong>%p<strong>意义下的，那么显然每次</strong>b%phi[times-1]<strong>。<br>
　　再带上快速幂，那么这样效率就是</strong>O(nlog^3(n))**的。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">500005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,p,C;</span><br><span class="line"><span class="keyword">int</span> opt,x,y;</span><br><span class="line"><span class="keyword">int</span> a[ONE],phi[ONE],p_num;</span><br><span class="line"><span class="keyword">int</span> MOD;</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">int</span> cnt;</span><br><span class="line">&#125;Node[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;    </span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> ) </span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>; </span><br><span class="line">    res=c<span class="number">-48</span>;     </span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )    </span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;    </span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Getphi</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i*i&lt;=n; i++)</span><br><span class="line">        <span class="keyword">if</span>(n % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res = res/i*(i<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">while</span>(n % i == <span class="number">0</span>) n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(n != <span class="number">1</span>) res = res/n*(n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quickpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> MOD)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = (s64)res * a % MOD;</span><br><span class="line">        a = (s64)a * a % MOD;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        Node[i].value = a[l] % MOD;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Build</span>(i&lt;&lt;<span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">Build</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    Node[i].value = (Node[i&lt;&lt;<span class="number">1</span>].value + Node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].value) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> times)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=times; i&gt;=<span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a &gt;= phi[i]) a = a%phi[i] + phi[i]; </span><br><span class="line">        a = <span class="built_in">Quickpow</span>(C, a, phi[i<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(!a) a = phi[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Node[i].cnt &gt;= p_num) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        Node[i].value = <span class="built_in">Calc</span>(a[l], ++Node[i].cnt);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid) <span class="built_in">Update</span>(i&lt;&lt;<span class="number">1</span>, l, mid, L, R);</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span> &lt;= R) <span class="built_in">Update</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, L, R);</span><br><span class="line"></span><br><span class="line">    Node[i].value = (Node[i&lt;&lt;<span class="number">1</span>].value + Node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].value) % MOD;</span><br><span class="line">    Node[i].cnt = <span class="built_in">min</span>(Node[i&lt;&lt;<span class="number">1</span>].cnt, Node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)</span><br><span class="line">    &#123;</span><br><span class="line">        res = (res + Node[i].value) % MOD;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid) <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>, l, mid, L, R);</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span> &lt;= R) <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, L, R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();    m = <span class="built_in">get</span>();    p = <span class="built_in">get</span>();    C = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) a[i] = <span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    MOD = phi[<span class="number">0</span>] = p;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="number">1</span>) phi[++p_num] = p = <span class="built_in">Getphi</span>(p);</span><br><span class="line">    phi[++p_num] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        opt = <span class="built_in">get</span>();</span><br><span class="line">        x = <span class="built_in">get</span>();    y = <span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">if</span>(!opt) <span class="built_in">Update</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, y);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            res = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">Query</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>欧拉定理</tag>
      </tags>
  </entry>
  <entry>
    <title>[线段树]交错和查询</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5D%E4%BA%A4%E9%94%99%E5%92%8C%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h1>交错和查询</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>无限循环数字串S由长度为n的循环节s构成。设s为12345(n=5)，则数字串S为123451234512345…<br>
　　设Si为S的第i位数字，在上面的例子中，S1=1，S2=2，S6=1。<br>
　　设S的一个子串S[l,r]的交错和为sum(l,r)：<br>
　　sum(l,r) = Sl - S1+1 + Sl+2- Sl+3 + … + (-1)r-lSr<br>
　　如sum(2,7) = 2 - 3 + 4 - 5 + 1 - 2 = -3<br>
　　现给定循环节s，要求支持两种操作：<br>
　　1 pos digit：修改循环节s上的某一位，即将spos改为digit。<br>
　　2 l r：求S[l,r]内所有子串的交错和的和，即输出ans对10^9+7的模。</p>
<h2 id="Input">Input</h2>
<p>第一行一个整数n，表示循环节s的长度。<br>
　　第二行一个长度为n的数字串，表示循环节s。<br>
　　第三行一个整数m，表示操作次数。<br>
　　以下m行，每行3个整数。<br>
　　若第一个数为1，表示是修改操作1 pos digit。<br>
　　若第一个数为2，表示是询问操作2 l r。</p>
<h2 id="Output">Output</h2>
<p>对于每个询问操作输出一行，表示答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5<br>
　　12345<br>
　　5<br>
　　2 1 5<br>
　　2 6 10<br>
　　1 3 5<br>
　　2 1 5<br>
　　2 1 6</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>19<br>
　　19<br>
　　25<br>
　　36</p>
<h2 id="HINT">HINT</h2>
<p>对于10%的数据点，n, m &lt;= 50；<br>
　　对于20%的数据点，n, m &lt;=1000；<br>
　　对于40%的数据点，1 &lt;= l&lt;= r &lt;= n；<br>
　　对于100%的数据点，n, m &lt;=200000；1 &lt;= l &lt;= r &lt;= 1018；1 &lt;= pos &lt;= n；0 &lt;= digit &lt;= 9；</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定两种操作：1.修改循环节上的某一位；2.询问[l,r]的所有子串和。</p>
<h2 id="Solution">Solution</h2>
<p>首先轻易地找到了规律，发现对于区间[l,r]，<strong>只有奇数位置上的值会对答案产生影响</strong>，并且：<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527190517.jpg" alt="img">，然后我们拆开式子得到：<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527190519.jpg" alt="img">。现在考虑如何用一个数据结构来维护这个Ans，这里采用线段树。</p>
<p>我们分几步来实现：</p>
<p><strong>第一步：</strong><br>
　　我们先考虑l,r在一个循环节内的情况。显然对于线段树上的每个节点维护五个信息：len, odd.val, odd.val_i, eve.val, eve.val_i分别表示<strong>区间长度、奇数位置的和、奇数位置*i的和、偶数位置的和、偶数位置*i的和</strong>，那么我们上传合并线段树的时候判断一下区间长度的奇偶即可。举个例子：比如现在左区间长度为3，要更新奇数位置的值，就是左区间的奇数位置和 加上 右区间的偶数位置和，我们重载运算符判断一下即可。这样操作我们就可以得到Σai以及Σai*i。</p>
<p><strong>第二步：</strong><br>
　　<strong>(1)</strong>  我们再来考虑一下l,r不在一个循环节内的情况。显然我们可以将区间<strong>拆成三部分：左段、中段、右段</strong>，其中中段是包含所有的1-n的<strong>整体</strong>，而左段和右段则是**~n或者1~的一部分**。</p>
<p><strong>(2)</strong>  然后我们显然可以很轻易地通过计算一下x,y的间隔块数以及若干信息来算出Σai。</p>
<p><strong>(3)</strong>  那么式子后面的<strong>Σai*i</strong>怎么办呢？我们发现：我们将序列分为若干段，显然<strong>每一段增加的值</strong>是一样的，那么我们就可以将Σai<em>i(这里的i是实际位置)拆成：Σai</em>i (在一个循环节中的位置) + Σai*(所在块数-1)*n。</p>
<p><strong>(4)</strong>  然后我们<strong>中段块数一定不为1</strong>，要怎么办呢？举个例子，比如循环节长度为10，我们要求2~4段的Σ，那么显然就是Σai<em>n</em>(i+1+2)，惊讶地发现中间的一个等差数列，那么我们要<strong>乘的就是一个等差数列的和</strong>了。</p>
<p><strong>(5)</strong>  然后三段中到底是<strong>统计奇数位置的和</strong>还是<strong>统计偶数位置的和</strong>呢？发现较难处理，于是我们可以<strong>将原序列*2（拓展一倍）</strong>，发现如果x是奇数，那么就加上左段的奇数位置，中段右段的奇数位置，否则加上左段的奇数位置，以及中段右段的偶数位置。</p>
<p>这样我们就解决了问题，具体问题还是参见代码啦。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">200001</span>;</span><br><span class="line"><span class="keyword">const</span> s64 Niyu=<span class="number">5e8</span>+<span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,T;</span><br><span class="line"><span class="keyword">int</span> a[ONE*<span class="number">2</span>];</span><br><span class="line"><span class="keyword">char</span> ch[ONE];</span><br><span class="line"><span class="keyword">int</span> Q;</span><br><span class="line">s64 x,y;</span><br><span class="line">s64 x_orig,y_orig,x_bloc,y_bloc,diff;</span><br><span class="line">s64 A,A_i;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        s64 val,val_i;</span><br><span class="line">        <span class="keyword">friend</span> point <span class="keyword">operator</span> +(point a,point b)</span><br><span class="line">        &#123;</span><br><span class="line">            a.val=(a.val + b.val)%MOD;</span><br><span class="line">            a.val_i=(a.val_i + b.val_i) % MOD;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;odd,eve;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> power <span class="keyword">operator</span> +(power a,power b)</span><br><span class="line">    &#123;</span><br><span class="line">        power c;</span><br><span class="line">        c.len = a.len+b.len;</span><br><span class="line">        <span class="keyword">if</span>(a.len%<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            c.odd = a.odd+b.eve;</span><br><span class="line">            c.eve = a.eve+b.odd;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            c.odd = a.odd+b.odd;</span><br><span class="line">            c.eve = a.eve+b.eve;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Node[ONE*<span class="number">10</span>],ZERO;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s64 res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        Node[i].len = <span class="number">1</span>;</span><br><span class="line">        Node[i].odd.val = a[l];</span><br><span class="line">        Node[i].odd.val_i = a[l]*l % MOD;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">Build</span>(i*<span class="number">2</span>,l,mid); <span class="built_in">Build</span>(i*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line"></span><br><span class="line">    Node[i] = Node[i*<span class="number">2</span>] + Node[i*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L==l &amp;&amp; l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        Node[i].odd.val = x;</span><br><span class="line">        Node[i].odd.val_i = x*l % MOD;</span><br><span class="line">        Node[i].eve.val = Node[i].eve.val_i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) <span class="built_in">Update</span>(i*<span class="number">2</span>,l,mid,L,x);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">Update</span>(i*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,L,x);</span><br><span class="line"></span><br><span class="line">    Node[i] = Node[i*<span class="number">2</span>] + Node[i*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">power <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&gt;R) <span class="keyword">return</span> ZERO;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R) <span class="keyword">return</span> Node[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(R&lt;=mid) <span class="keyword">return</span> <span class="built_in">Query</span>(i*<span class="number">2</span>,l,mid,L,R);</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=L) <span class="keyword">return</span> <span class="built_in">Query</span>(i*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Query</span>(i*<span class="number">2</span>,l,mid,L,R) + <span class="built_in">Query</span>(i*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">HE</span><span class="params">(s64 a,s64 b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a--;    b--;</span><br><span class="line">    <span class="keyword">if</span>(a==b) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    s64 x=(b-a+<span class="number">1</span>) % MOD;</span><br><span class="line">    <span class="keyword">return</span> (s64)(a+b)%MOD*x%MOD * Niyu % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ZERO.len=<span class="number">1</span>; ZERO.odd.val=ZERO.odd.val_i=ZERO.eve.val=ZERO.eve.val_i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=ch[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i+n]=a[i];</span><br><span class="line">    n*=<span class="number">2</span>;    <span class="built_in">Build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        Q=<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">if</span>(Q==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">            <span class="built_in">Update</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y);</span><br><span class="line">            <span class="built_in">Update</span>(<span class="number">1</span>,<span class="number">1</span>,n,x+n/<span class="number">2</span>,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">            x_orig=(x<span class="number">-1</span>)%n+<span class="number">1</span>;    y_orig=(y<span class="number">-1</span>)%n+<span class="number">1</span>;</span><br><span class="line">            x_bloc=(x<span class="number">-1</span>)/n+<span class="number">1</span>;    y_bloc=(y<span class="number">-1</span>)/n+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            diff = y_bloc-x_bloc<span class="number">-1</span>;    diff%=MOD;</span><br><span class="line">            <span class="keyword">if</span>(diff!=<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(x%<span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    power res_l = <span class="built_in">Query</span>(<span class="number">1</span>,<span class="number">1</span>,n, x_orig,n);</span><br><span class="line">                    power res_r = <span class="built_in">Query</span>(<span class="number">1</span>,<span class="number">1</span>,n, <span class="number">1</span>,y_orig);</span><br><span class="line">                    power res_mid = <span class="built_in">Query</span>(<span class="number">1</span>,<span class="number">1</span>,n, <span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line">                    A =( res_l.odd.val + res_r.odd.val + res_mid.odd.val * diff % MOD ) % MOD;</span><br><span class="line">                    A_i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                    A_i += (res_l.odd.val_i + (s64)res_l.odd.val * (x_bloc<span class="number">-1</span>)%MOD * n % MOD)%MOD; A_i%=MOD;</span><br><span class="line">                    A_i += (res_r.odd.val_i + (s64)res_r.odd.val * (y_bloc<span class="number">-1</span>)%MOD * n % MOD)%MOD; A_i%=MOD;</span><br><span class="line"></span><br><span class="line">                    A_i += (diff*res_mid.odd.val_i%MOD + (s64)res_mid.odd.val * n % MOD * <span class="built_in">HE</span>(x_bloc+<span class="number">1</span>,y_bloc<span class="number">-1</span>)%MOD)%MOD;</span><br><span class="line">                    A_i%=MOD;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    power res_l = <span class="built_in">Query</span>(<span class="number">1</span>,<span class="number">1</span>,n, x_orig,n);</span><br><span class="line">                    power res_r = <span class="built_in">Query</span>(<span class="number">1</span>,<span class="number">1</span>,n, <span class="number">2</span>,y_orig);</span><br><span class="line">                    power res_mid = <span class="built_in">Query</span>(<span class="number">1</span>,<span class="number">1</span>,n, <span class="number">2</span>,n);</span><br><span class="line"></span><br><span class="line">                    A =( res_l.odd.val + res_r.odd.val + res_mid.odd.val * diff % MOD ) % MOD;</span><br><span class="line">                    A_i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                    A_i += (res_l.odd.val_i + (s64)res_l.odd.val * (x_bloc<span class="number">-1</span>)%MOD * n % MOD)%MOD; A_i%=MOD;</span><br><span class="line">                    A_i += (res_r.odd.val_i + (s64)res_r.odd.val * (y_bloc<span class="number">-1</span>)%MOD * n % MOD)%MOD; A_i%=MOD;</span><br><span class="line"></span><br><span class="line">                    A_i += (diff*res_mid.odd.val_i%MOD + (s64)res_mid.odd.val * n % MOD * <span class="built_in">HE</span>(x_bloc+<span class="number">1</span>,y_bloc<span class="number">-1</span>)%MOD)%MOD;</span><br><span class="line">                    A_i%=MOD;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                power res = <span class="built_in">Query</span>(<span class="number">1</span>,<span class="number">1</span>,n, x_orig,y_orig);</span><br><span class="line">                A = res.odd.val;</span><br><span class="line">                A_i=<span class="number">0</span>;</span><br><span class="line">                A_i += (s64)(res.odd.val_i + A * (x_bloc<span class="number">-1</span>)%MOD * n % MOD) % MOD; A_i%=MOD;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, (s64)(A * (y%MOD+<span class="number">1</span>) % MOD - A_i + MOD) % MOD);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[线段树]区间</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5D%E5%8C%BA%E9%97%B4/</url>
    <content><![CDATA[<h1>区间</h1>
<p>Time Limit: 60 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>在数轴上有 n个闭区间 [l1,r1],[l2,r2],…,[ln,rn]。现在要从中选出 m 个区间，使得这 m个区间共同包含至少一个位置。换句话说，就是使得存在一个 x，使得对于每一个被选中的区间 [li,ri]，都有 li≤x≤ri。</p>
<p>对于一个合法的选取方案，它的花费为被选中的最长区间长度减去被选中的最短区间长度。区间 [li,ri] 的长度定义为 ri−li，即等于它的右端点的值减去左端点的值。</p>
<p>求所有合法方案中最小的花费。如果不存在合法的方案，输出 −1。</p>
<h2 id="Input">Input</h2>
<p>第一行包含两个正整数 n,m用空格隔开，意义如上文所述。保证 1≤m≤n</p>
<p>接下来 n行，每行表示一个区间，包含用空格隔开的两个整数 li 和 ri 为该区间的左右端点。</p>
<h2 id="Output">Output</h2>
<p>只有一行，包含一个正整数，即最小花费。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>6 3<br>
　3 5<br>
　1 2<br>
　3 4<br>
　2 2<br>
　1 5<br>
　1 4</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>2</p>
<h2 id="HINT">HINT</h2>
<p>N&lt;=500000,M&lt;=200000,0≤li≤ri≤10^9</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定若干个区间，取出m个若这m个包含同一个位置则可以统计值，值为这m个中的最大区间长度减去最小区间长度，输出最小值。</p>
<h2 id="Solution">Solution</h2>
<p>发现答案为<strong>最大区间长度</strong>减去<strong>最小区间长度</strong>，显然可以先按照长度排序，然后枚举左端点（即最小区间长度），中间小于最大区间长度的区间的加入 只会使得更可能满足条件 而不会影响答案，所以我们用r表示当前加入到了右端点r这个位置，<strong>r显然递增</strong>，则可以用r一直往后推到满足条件了更新答案，用线段树维护区间+1。因为l[i]与r[i]长度较大，但是发现非常长的长度是不会影响是否可以统计的（因为满足统计的条件只要符合<strong>个数&gt;=m</strong>即可），所以我们可以对l和r离散化。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">1000001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> Ans,res;</span><br><span class="line"><span class="keyword">int</span> num,cnt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lisan</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">&#125;Q[ONE*<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">int</span> add;</span><br><span class="line">&#125;Node[ONE*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> point &amp;a,<span class="keyword">const</span> point &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.value&lt;b.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rule</span><span class="params">(<span class="keyword">const</span> lisan &amp;a,<span class="keyword">const</span> lisan &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.value&lt;b.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Node[i].add)</span><br><span class="line">    &#123;</span><br><span class="line">        Node[i*<span class="number">2</span>].add+=Node[i].add;</span><br><span class="line">        Node[i*<span class="number">2</span>+<span class="number">1</span>].add+=Node[i].add;</span><br><span class="line">        Node[i*<span class="number">2</span>].value+=Node[i].add;</span><br><span class="line">        Node[i*<span class="number">2</span>+<span class="number">1</span>].value+=Node[i].add;</span><br><span class="line">        Node[i].add=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)</span><br><span class="line">    &#123;</span><br><span class="line">        Node[i].add+=x;</span><br><span class="line">        Node[i].value+=x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) <span class="built_in">Update</span>(i*<span class="number">2</span>,l,mid,L,R,x);</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=R) <span class="built_in">Update</span>(i*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R,x);</span><br><span class="line">    Node[i].value=<span class="built_in">max</span>(Node[i*<span class="number">2</span>].value,Node[i*<span class="number">2</span>+<span class="number">1</span>].value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Getlisan</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Q[++num].value=a[i].l; Q[num].pos=num;</span><br><span class="line">        Q[++num].value=a[i].r; Q[num].pos=num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(Q+<span class="number">1</span>,Q+num+<span class="number">1</span>,rule);</span><br><span class="line">    Q[<span class="number">0</span>].value=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Q[i].value!=Q[i<span class="number">-1</span>].value) cnt++;</span><br><span class="line">        <span class="keyword">int</span> x=(Q[i].pos+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(Q[i].pos % <span class="number">2</span>) a[x].l=cnt;</span><br><span class="line">        <span class="keyword">else</span> a[x].r=cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,cmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i].l=<span class="built_in">get</span>();    a[i].r=<span class="built_in">get</span>();</span><br><span class="line">        a[i].l++;    a[i].r++;</span><br><span class="line">        a[i].value=a[i].r-a[i].l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Getlisan</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">    Ans=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(;;)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Node[<span class="number">1</span>].value&gt;=m || (r+<span class="number">1</span>)&gt;n) <span class="keyword">break</span>;</span><br><span class="line">            r++;</span><br><span class="line">            <span class="built_in">Update</span>(<span class="number">1</span>,<span class="number">1</span>,cnt,a[r].l,a[r].r,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Node[<span class="number">1</span>].value&gt;=m)</span><br><span class="line">            Ans=<span class="built_in">min</span>(Ans,a[r].value-a[i].value);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Update</span>(<span class="number">1</span>,<span class="number">1</span>,cnt,a[i].l,a[i].r,<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(Ans==INF) <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[线段树]排序</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5D%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1>排序</h1>
<p>Time Limit: 60 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>在2016年，佳媛姐姐喜欢上了数字序列。</p>
<p>因而他经常研究关于序列的一些奇奇怪怪的问题，现在他在研究一个难题，需要你来帮助他。</p>
<p>这个难题是这样子的：</p>
<p>给出一个1到n的全排列，现在对这个全排列序列进行m次局部排序，排序分为两种：</p>
<p>1: (0,l,r)表示将区间[l,r]的数字升序排序</p>
<p>2: (1,l,r)表示将区间[l,r]的数字降序排序</p>
<p>最后询问第q位置上的数字。</p>
<h2 id="Input">Input</h2>
<p>输入数据的第一行为两个整数n和m。</p>
<p>n表示序列的长度，m表示局部排序的次数。</p>
<p>第二行为n个整数，表示1到n的一个全排列。</p>
<p>接下来输入m行，每一行有三个整数op, l, r,</p>
<p>op为0代表升序排序，op为1代表降序排序, l, r 表示排序的区间。</p>
<p>最后输入一个整数q，q表示排序完之后询问的位置。</p>
<h2 id="Output">Output</h2>
<p>输出数据仅有一行，一个整数，表示按照顺序将全部的部分排序结束后第q位置上的数字。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>6 3<br>
　1 6 2 5 3 4<br>
　0 1 4<br>
　1 3 6<br>
　0 2 4<br>
　3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>5</p>
<h2 id="HINT">HINT</h2>
<p>1 &lt;= n &lt;= 10^5，1 &lt;= m &lt;= 10^5, 1 &lt;= q &lt;= n。</p>
<h2 id="Solution">Solution</h2>
<p>我们先考虑<strong>如果权值很小</strong>的话怎么做，显然可以<strong>对每个权值</strong>开一个线段树维护在哪些位置出现过。</p>
<p>那么排序显然就是<strong>覆盖连续的一段</strong>。只要知道某一区间<strong>有几个这个权值</strong>即可。</p>
<p>但是这样显然是过不了的，于是我们考虑二分答案，把<strong>val &gt;= mid</strong>的设为<strong>1</strong>，其余的设为<strong>0</strong>。</p>
<p>这样就<strong>把权值变成了0/1</strong>，那么显然我们按照以上操作，如果<strong>Q位置上是1</strong>说明<strong>mid&lt;=Ans</strong>，<strong>还可以更大一点</strong>，<strong>否则说明mid&gt;Ans</strong>。</p>
<p>只要支持<strong>区间求和</strong>以及<strong>区间覆盖0/1</strong>即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">400005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>, Q = <span class="number">1</span>; <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &lt; <span class="number">48</span> || c &gt; <span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) Q = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res = c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c = <span class="built_in">getchar</span>()) &gt;= <span class="number">48</span> &amp;&amp; c &lt;= <span class="number">57</span>)</span><br><span class="line">        res = res * <span class="number">10</span> + c - <span class="number">48</span>;</span><br><span class="line">    <span class="keyword">return</span> res * Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, Q;</span><br><span class="line"><span class="keyword">int</span> a[ONE];</span><br><span class="line"><span class="keyword">int</span> res, now;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">int</span> val, tag;</span><br><span class="line">    &#125;Node[ONE];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node[i].tag = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">Build</span>(i &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">        <span class="built_in">Build</span>(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(Node[i].tag != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Node[i &lt;&lt; <span class="number">1</span>].tag = Node[i].tag;</span><br><span class="line">            Node[i &lt;&lt; <span class="number">1</span>].val = Node[i].tag * (mid - l + <span class="number">1</span>);</span><br><span class="line">            Node[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].tag = Node[i].tag;</span><br><span class="line">            Node[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].val = Node[i].tag * (r - (mid + <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">            Node[i].tag = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L &gt; R) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">        &#123;</span><br><span class="line">            Node[i].tag = x;</span><br><span class="line">            Node[i].val = x * (r - l + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushdown</span>(i, l, r);</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= mid) <span class="built_in">Update</span>(i &lt;&lt; <span class="number">1</span>, l, mid, L, R, x);</span><br><span class="line">        <span class="keyword">if</span>(mid + <span class="number">1</span> &lt;= R) <span class="built_in">Update</span>(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, x);</span><br><span class="line">        Node[i].val = Node[i &lt;&lt; <span class="number">1</span>].val + Node[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(L &gt; R) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">        &#123;</span><br><span class="line">            res += Node[i].val;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushdown</span>(i, l, r);</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(L &lt;= mid) <span class="built_in">Query</span>(i &lt;&lt; <span class="number">1</span>, l, mid, L, R);</span><br><span class="line">        <span class="keyword">if</span>(mid + <span class="number">1</span> &lt;= R) <span class="built_in">Query</span>(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;C[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">operate</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, x;</span><br><span class="line">&#125;oper[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modify</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> Left, <span class="keyword">int</span> Right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res = <span class="number">0</span>;</span><br><span class="line">    C[id].<span class="built_in">Query</span>(<span class="number">1</span>, <span class="number">1</span>, n, Left, Right);</span><br><span class="line">    C[id].<span class="built_in">Update</span>(<span class="number">1</span>, <span class="number">1</span>, n, Left, Right, <span class="number">0</span>);</span><br><span class="line">    C[id].<span class="built_in">Update</span>(<span class="number">1</span>, <span class="number">1</span>, n, now, now + res - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    now += res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; i++)</span><br><span class="line">        C[i].Node[<span class="number">1</span>].tag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        C[a[i] &gt;= mid].<span class="built_in">Update</span>(<span class="number">1</span>, <span class="number">1</span>, n, i, i, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        now = oper[i].l;</span><br><span class="line">        <span class="keyword">if</span>(oper[i].x == <span class="number">0</span>) <span class="keyword">for</span>(<span class="keyword">int</span> id = <span class="number">0</span>; id &lt;= <span class="number">1</span>; id++) <span class="built_in">Modify</span>(id, oper[i].l, oper[i].r);</span><br><span class="line">        <span class="keyword">if</span>(oper[i].x == <span class="number">1</span>) <span class="keyword">for</span>(<span class="keyword">int</span> id = <span class="number">1</span>; id &gt;= <span class="number">0</span>; id--) <span class="built_in">Modify</span>(id, oper[i].l, oper[i].r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = <span class="number">0</span>, C[<span class="number">1</span>].<span class="built_in">Query</span>(<span class="number">1</span>, <span class="number">1</span>, n, Q, Q);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();  m = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        a[i] = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        oper[i].x = <span class="built_in">get</span>(), oper[i].l = <span class="built_in">get</span>(), oper[i].r = <span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    Q = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r - <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Check</span>(r)) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, r);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[线段树]我也不知道题目名字是什么</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5D%E6%88%91%E4%B9%9F%E4%B8%8D%E7%9F%A5%E9%81%93%E9%A2%98%E7%9B%AE%E5%90%8D%E5%AD%97%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<h1>我也不知道题目名字是什么</h1>
<p>Time Limit: 10 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p>给定一个序列A[i]，每次询问l,r，求[l,r]内最长子串，使得该子串为不上升子串或不下降子串</p>
<h2 id="Input">Input</h2>
<p>第一行n，表示A数组有多少元素<br>
　接下来一行为n个整数A[i]<br>
　接下来一个整数Q，表示询问数量<br>
　接下来Q行，每行2个整数l，r</p>
<h2 id="Output">Output</h2>
<p>对于每个询问，求[l,r]内最长子串，使得该子串为不上升子串或不下降子串</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>9<br>
　1 2 3 4 5 6 5 4 3<br>
　5<br>
　1 6<br>
　1 7<br>
　2 7<br>
　1 9<br>
　5 9</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>6<br>
　6<br>
　5<br>
　6<br>
　4</p>
<h2 id="HINT">HINT</h2>
<p>N,Q&lt;=50000</p>
<h2 id="Solution">Solution</h2>
<p>直接上线段树，记录一下<strong>一个区间内：左边最长，右边最长，整体最优</strong>。再分一下<strong>不下降</strong>和<strong>不上升</strong>即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">500005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,Q;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">int</span> a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> Lval, Rval;</span><br><span class="line">    <span class="keyword">int</span> Lup,Ldn, Rup,Rdn;</span><br><span class="line">    <span class="keyword">int</span> Maxup, Maxdn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> power <span class="keyword">operator</span> +(power a, power b)</span><br><span class="line">    &#123;</span><br><span class="line">        power A;</span><br><span class="line">        A.len = a.len + b.len;</span><br><span class="line">        A.Lval = a.Lval;    A.Rval = b.Rval;</span><br><span class="line"></span><br><span class="line">        A.Lup = a.Lup;    <span class="keyword">if</span>(a.Lup == a.len &amp;&amp; a.Rval &lt;= b.Lval) A.Lup += b.Lup;</span><br><span class="line">        A.Ldn = a.Ldn;    <span class="keyword">if</span>(a.Ldn == a.len &amp;&amp; a.Rval &gt;= b.Lval) A.Ldn += b.Ldn;</span><br><span class="line"></span><br><span class="line">        A.Rup = b.Rup;    <span class="keyword">if</span>(b.Rup == b.len &amp;&amp; a.Rval &lt;= b.Lval) A.Rup += a.Rup;</span><br><span class="line">        A.Rdn = b.Rdn;    <span class="keyword">if</span>(b.Rdn == b.len &amp;&amp; a.Rval &gt;= b.Lval) A.Rdn += a.Rdn;</span><br><span class="line"></span><br><span class="line">        A.Maxup = <span class="built_in">max</span>(a.Maxup, b.Maxup);</span><br><span class="line">        A.Maxdn = <span class="built_in">max</span>(a.Maxdn, b.Maxdn);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(a.Rval &lt;= b.Lval) A.Maxup = <span class="built_in">max</span>(A.Maxup, a.Rup+b.Lup);</span><br><span class="line">        <span class="keyword">if</span>(a.Rval &gt;= b.Lval) A.Maxdn = <span class="built_in">max</span>(A.Maxdn, a.Rdn+b.Ldn);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;Node[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        Node[i].Lval = Node[i].Rval = a[l];</span><br><span class="line">        Node[i].len = <span class="number">1</span>;</span><br><span class="line">        Node[i].Lup = Node[i].Rup = Node[i].Ldn = Node[i].Rdn = <span class="number">1</span>;</span><br><span class="line">        Node[i].Maxup = Node[i].Maxdn = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Build</span>(i&lt;&lt;<span class="number">1</span>, l,mid);    <span class="built_in">Build</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>,r);</span><br><span class="line">    Node[i] = Node[i&lt;&lt;<span class="number">1</span>] + Node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">power <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L==l &amp;&amp; r==R) <span class="keyword">return</span> Node[i];</span><br><span class="line">    <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span> &gt; R) <span class="keyword">return</span> <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>, l,mid,L,R);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(L &gt; mid) <span class="keyword">return</span> <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>, l,mid,L,mid) + <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) a[i] = <span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">Build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line">    Q = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(Q--)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="built_in">get</span>();    y = <span class="built_in">get</span>();</span><br><span class="line">        power res = <span class="built_in">Query</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">max</span>(res.Maxup, res.Maxdn) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[线段树]数据结构C</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84C/</url>
    <content><![CDATA[<h1>数据结构C</h1>
<p>Time Limit: 20 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012248.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012246.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012243.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012239.png" alt="img"></p>
<h2 id="Sample-Output">Sample Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012234.png" alt="img"></p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012230.png" alt="img"></p>
<h2 id="Solution">Solution</h2>
<p>首先，D操作为<strong>删除</strong>操作<strong>显然不可做</strong>，又发现这道题可以<strong>离线处理</strong>，那么我们考虑<strong>倒着来</strong>，维护<strong>加入</strong>操作。</p>
<p>那么这时候，D操作就变为了<strong>合并操作</strong>，那么这时候我们只需要维护一个：可以支持<strong>单点修改</strong>、<strong>查询第 k 大</strong>、<strong>信息可合并</strong>的数据结构即可。</p>
<p>显然构建若干棵权值线段树即可！对于<strong>每个联通块</strong>维护一棵线段树，用并查集判断两点是否在一个块内。</p>
<p>这时候，D操作显然<strong>判断</strong>一下<strong>两点是否在一个联通块</strong>内，不在则<strong>合并</strong>两棵线段树；Q操作就是<strong>查询第 k 大</strong>，在<strong>树上二分</strong>即可；C操作就是<strong>原来值个数-1</strong>，<strong>新加入值个数+1</strong>。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2e6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Base = <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> opt, x, val;</span><br><span class="line"><span class="keyword">int</span> Val[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Ans[<span class="number">300005</span>], ans_num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fat[<span class="number">100005</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Num = <span class="number">0</span>, del[<span class="number">100005</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span> &#123;</span><span class="keyword">int</span> opt, x, val;&#125; oper[ONE];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span><span class="keyword">int</span> x, y;&#125; a[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> root;</span><br><span class="line">    <span class="keyword">int</span> left, right;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125;Node[ONE * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fat[x] == x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> fat[x] = <span class="built_in">Find</span>(fat[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Un</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f1 = <span class="built_in">Find</span>(x), f2 = <span class="built_in">Find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(f1 != f2) fat[f1] = f2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> &amp;i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> Val, <span class="keyword">int</span> opt)</span> <span class="comment">//pos = Val , + opt</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!i) i = ++total;</span><br><span class="line"></span><br><span class="line">    Node[i].val = Node[i].val + opt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(Val &lt;= mid) <span class="built_in">Update</span>(Node[i].left, l, mid, Val, opt);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">Update</span>(Node[i].right, mid + <span class="number">1</span>, r, Val, opt);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> x)</span> <span class="comment">//y merge to x</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">0</span> || y == <span class="number">0</span>) <span class="keyword">return</span> x + y;</span><br><span class="line"></span><br><span class="line">    Node[x].val += Node[y].val;</span><br><span class="line">    Node[x].left =  <span class="built_in">Merge</span>(Node[x].left, Node[y].left);</span><br><span class="line">    Node[x].right = <span class="built_in">Merge</span>(Node[x].right, Node[y].right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> <span class="comment">//k da</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, Val = Node[ Node[i].right ].val;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(k &gt; Val)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Query</span>(Node[i].left, l, mid, k - Val);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Query</span>(Node[i].right, mid + <span class="number">1</span>, r, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_first</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        fat[i] = i, Node[i].root = ++total;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        <span class="keyword">if</span>(del[i] != <span class="number">1</span>) <span class="built_in">Un</span>(a[i].x, a[i].y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">Update</span>(Node[<span class="built_in">Find</span>(i)].root, <span class="number">0</span>, INF, Val[i], <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="built_in">Find</span>(x), y = <span class="built_in">Find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(x == y) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">Merge</span>(Node[x].root, Node[y].root);</span><br><span class="line">    fat[x] = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_query</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    root = <span class="built_in">Find</span>(root);</span><br><span class="line">    <span class="keyword">if</span>(Node[root].val &lt; k) &#123;Ans[++ans_num] = <span class="number">0</span> + Base; <span class="keyword">return</span>;&#125;</span><br><span class="line">    Ans[++ans_num] = <span class="built_in">Query</span>(Node[root].root, <span class="number">0</span>, INF, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_change</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">//x is point, y is need val</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root = <span class="built_in">Find</span>(x);</span><br><span class="line">    <span class="built_in">Update</span>(Node[root].root, <span class="number">0</span>, INF, Val[x], <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">Update</span>(Node[root].root, <span class="number">0</span>, INF, y, <span class="number">1</span>);</span><br><span class="line">    Val[x] = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();    m = <span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) Val[i] = <span class="built_in">get</span>() + Base;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        a[i].x = <span class="built_in">get</span>(), a[i].y = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s);</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;E&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">            x = <span class="built_in">get</span>(), del[x] = <span class="number">1</span>, oper[++Num] = (power)&#123;<span class="number">1</span>, x, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">            x = <span class="built_in">get</span>(), val = <span class="built_in">get</span>(), oper[++Num] = (power)&#123;<span class="number">2</span>, x, val&#125;;</span><br><span class="line">        <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">            x = <span class="built_in">get</span>(), val = <span class="built_in">get</span>(), oper[++Num] = (power)&#123;<span class="number">3</span>, x, Val[x]&#125;, Val[x] = val + Base;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Deal_first</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = Num; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(oper[i].opt == <span class="number">1</span>) <span class="built_in">Deal_add</span>(a[ oper[i].x ].x, a[ oper[i].x ].y);</span><br><span class="line">        <span class="keyword">if</span>(oper[i].opt == <span class="number">2</span>) <span class="built_in">Deal_query</span>(oper[i].x, oper[i].val);</span><br><span class="line">        <span class="keyword">if</span>(oper[i].opt == <span class="number">3</span>) <span class="built_in">Deal_change</span>(oper[i].x, oper[i].val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = ans_num; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Ans[i] - Base);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[线段树]相关分析</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5D%E7%9B%B8%E5%85%B3%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1>相关分析</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>Frank对天文学非常感兴趣，他经常用望远镜看星星，同时记录下它们的信息，比如亮度、颜色等等，进而估算出星星的距离，半径等等。</p>
<p>Frank不仅喜欢观测，还喜欢分析观测到的数据。他经常分析两个参数之间（比如亮度和半径）是否存在某种关系。</p>
<p>现在Frank要分析参数X与Y之间的关系。</p>
<p>他有n组观测数据，第i组观测数据记录了x_i和y_i。</p>
<p>他需要一下几种操作</p>
<p>1 L,R：用直线拟合第L组到底R组观测数据。</p>
<p>用xx表示这些观测数据中x的平均数，用yy表示这些观测数据中y的平均数，即</p>
<p>xx=Σx_i/(R-L+1)(L&lt;=i&lt;=R)</p>
<p>yy=Σy_i/(R-L+1)(L&lt;=i&lt;=R)</p>
<p>如果直线方程是y=ax+b，那么a应当这样计算：</p>
<p>a=(Σ(x_i-xx)(y_i-yy))/(Σ(x_i-xx)(x_i-xx)) (L&lt;=i&lt;=R)</p>
<p>你需要帮助Frank计算a。</p>
<p>2 L,R,S,T：</p>
<p>Frank发现测量数据第L组到底R组数据有误差，对每个i满足L &lt;= i &lt;= R，x_i需要加上S，y_i需要加上T。</p>
<p>3 L,R,S,T：</p>
<p>Frank发现第L组到第R组数据需要修改，对于每个i满足L &lt;= i &lt;= R，x_i需要修改为(S+i)，y_i需要修改为(T+i)。</p>
<h2 id="Input">Input</h2>
<p>第一行两个数n,m，表示观测数据组数和操作次数。</p>
<p>接下来一行n个数，第i个数是x_i。</p>
<p>接下来一行n个数，第i个数是y_i。</p>
<p>接下来m行，表示操作，格式见题目描述。</p>
<p>保证1操作不会出现分母为0的情况。</p>
<h2 id="Output">Output</h2>
<p>对于每个1操作，输出一行，表示直线斜率a。</p>
<p>选手输出与标准输出的绝对误差不超过10^-5即为正确。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3 5<br>
　1 2 3<br>
　1 2 3<br>
　1 1 3<br>
　2 2 3 -3 2<br>
　1 1 2<br>
　3 1 2 2 1<br>
　1 1 3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>1.0000000000<br>
　-1.5000000000<br>
　-0.6153846154</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=n,m&lt;=10^5,0&lt;=|S|,|T|,|x_i|,|y_i|&lt;=10^5</p>
<h2 id="Main-idea">Main idea</h2>
<p>维护一个线性回归方程，需要支持区间加，区间覆盖等差数列。</p>
<h2 id="Solution">Solution</h2>
<p>我们先化一个式子：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528002658.png" alt="img"></p>
<p>然后就只要运用线段树维护 <strong>Σx Σy Σxx Σxy</strong> 就可以了。</p>
<p>每一个具体怎么维护的话，就是把式子列出来，暴力展开一下看一下其中的关联即可，并不难（BearChild懒得写啦！）。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,P;</span><br><span class="line"><span class="keyword">int</span> L,R,S,T;</span><br><span class="line"><span class="keyword">double</span> Sumsq[ONE];</span><br><span class="line"><span class="keyword">double</span> Vx[ONE],Vy[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> sumx,sumy,sumxx,sumxy;</span><br><span class="line">    <span class="keyword">double</span> addx,addy;</span><br><span class="line">    <span class="keyword">double</span> covx,covy;</span><br><span class="line">    <span class="keyword">bool</span> cov;</span><br><span class="line">&#125;Node[ONE*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ans</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y,xx,xy;</span><br><span class="line">&#125;res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Covers</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">double</span> S,<span class="keyword">double</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">double</span> len = r-l+<span class="number">1</span>;    <span class="keyword">double</span> sum = (l+r)*len/<span class="number">2</span>;</span><br><span class="line">    Node[i].addx = Node[i].addy = <span class="number">0</span>;</span><br><span class="line">    Node[i].covx = S;    Node[i].covy = T;</span><br><span class="line">    Node[i].cov = <span class="number">1</span>;</span><br><span class="line">    Node[i].sumxx = S*S*len + sum*S + sum*S + Sumsq[r] - Sumsq[l<span class="number">-1</span>];</span><br><span class="line">    Node[i].sumxy = S*T*len + sum*S + sum*T + Sumsq[r] - Sumsq[l<span class="number">-1</span>];</span><br><span class="line">    Node[i].sumx = (S+l + S+r)*len / <span class="number">2</span>;</span><br><span class="line">    Node[i].sumy = (T+l + T+r)*len / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PC</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Node[i].cov)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">Covers</span>(i&lt;&lt;<span class="number">1</span>,l,mid, Node[i].covx,Node[i].covy);</span><br><span class="line">        <span class="built_in">Covers</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r, Node[i].covx,Node[i].covy);</span><br><span class="line">        Node[i].cov = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">double</span> S,<span class="keyword">double</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">PC</span>(i,l,r);</span><br><span class="line">    <span class="keyword">double</span> len = r-l+<span class="number">1</span>;</span><br><span class="line">    Node[i].addx += S;    Node[i].addy += T;</span><br><span class="line">    Node[i].sumxx += <span class="number">2</span>*S*Node[i].sumx + S*S*len;</span><br><span class="line">    Node[i].sumxy += S*Node[i].sumy + T*Node[i].sumx + S*T*len;</span><br><span class="line">    Node[i].sumx += S*len;    Node[i].sumy += T*len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PU</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Node[i].addx || Node[i].addy)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">Update</span>(i&lt;&lt;<span class="number">1</span>,l,mid, Node[i].addx,Node[i].addy);</span><br><span class="line">        <span class="built_in">Update</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r, Node[i].addx,Node[i].addy);</span><br><span class="line">        Node[i].addx = Node[i].addy = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">PU</span>(i,l,r);    <span class="built_in">PC</span>(i,l,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Renew</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = i&lt;&lt;<span class="number">1</span>, b = i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">    Node[i].sumx = Node[a].sumx + Node[b].sumx;</span><br><span class="line">    Node[i].sumy = Node[a].sumy + Node[b].sumy;</span><br><span class="line">    Node[i].sumxx = Node[a].sumxx + Node[b].sumxx;</span><br><span class="line">    Node[i].sumxy = Node[a].sumxy + Node[b].sumxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        Node[i].sumx = Vx[l];</span><br><span class="line">        Node[i].sumy = Vy[l];</span><br><span class="line">        Node[i].sumxx = (<span class="keyword">double</span>)Vx[l] * Vx[l];</span><br><span class="line">        Node[i].sumxy = (<span class="keyword">double</span>)Vx[l] * Vy[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Build</span>(i&lt;&lt;<span class="number">1</span>,l,mid);    <span class="built_in">Build</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">Renew</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cov</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">double</span> S,<span class="keyword">double</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Covers</span>(i,l,r,S,T);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pushdown</span>(i,l,r);</span><br><span class="line">    <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) <span class="built_in">Cov</span>(i&lt;&lt;<span class="number">1</span>,l,mid,L,R,S,T);</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=R) <span class="built_in">Cov</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R,S,T);</span><br><span class="line">    <span class="built_in">Renew</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">double</span> S,<span class="keyword">double</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Update</span>(i,l,r,S,T);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pushdown</span>(i,l,r);</span><br><span class="line">    <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) <span class="built_in">Add</span>(i&lt;&lt;<span class="number">1</span>,l,mid,L,R,S,T);</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=R) <span class="built_in">Add</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R,S,T);</span><br><span class="line">    <span class="built_in">Renew</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l &amp;&amp; r&lt;=R)</span><br><span class="line">    &#123;</span><br><span class="line">        res.x += Node[i].sumx; res.y += Node[i].sumy;</span><br><span class="line">        res.xx += Node[i].sumxx; res.xy += Node[i].sumxy;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pushdown</span>(i,l,r);</span><br><span class="line">    <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>,l,mid,L,R);</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=R) <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ONE<span class="number">-1</span>;i++) Sumsq[i] = Sumsq[i<span class="number">-1</span>] + (<span class="keyword">double</span>)i*i;</span><br><span class="line"></span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)    Vx[i]=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)    Vy[i]=<span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">Build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        P = <span class="built_in">get</span>();    L = <span class="built_in">get</span>();    R = <span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">if</span>(P == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res.x = res.y = res.xx = res.xy = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">Query</span>(<span class="number">1</span>,<span class="number">1</span>,n,L,R);</span><br><span class="line">            <span class="keyword">double</span> len = R-L+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">double</span> Avex = res.x / len;</span><br><span class="line">            <span class="keyword">double</span> Avey = res.y / len;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.6lf\n&quot;</span>, (res.xy - len * Avex * Avey) / (res.xx - len*Avex*Avex));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            S = <span class="built_in">get</span>();    T = <span class="built_in">get</span>();</span><br><span class="line">            <span class="keyword">if</span>(P == <span class="number">2</span>) <span class="built_in">Add</span>(<span class="number">1</span>,<span class="number">1</span>,n, L,R,S,T);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">Cov</span>(<span class="number">1</span>,<span class="number">1</span>,n, L,R,S,T);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[组合数]魔法</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BB%84%E5%90%88%E6%95%B0%5D%E9%AD%94%E6%B3%95/</url>
    <content><![CDATA[<h1>魔法</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527195518.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527195522.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p>仅一行一个整数表示答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4 10<br>
　　7 2 8 5</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>2</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527195516.png" alt="img"></p>
<h2 id="Solution">Solution</h2>
<p>我们找一下规律，显然发现是就是<strong>Σa[i]*C(n-1,i-1)</strong>。然后问题主要就转化为了怎么快速求组合数C(n,i)在模一个非质数情况下的值。</p>
<p>首先我们先确定一个式子：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527195526.png" alt="img"></p>
<p>然后我们立马想到了一个暴力分解质因数的方法。就是记录所有的(n-i+1)和(i)的质因数，然后用<strong>上面的质因数个数减去下面的质因数个数</strong>，剩下的乘起来，就不用求取模了。</p>
<p>但是我们发现，这样显然会TLE，我们考虑如何<strong>优化</strong>。优化的话显然就是要找到一个办法不把多的质因数都彻底分解出来。我们来继续思考：</p>
<p>我们可以<strong>先求出模数的质因数</strong>，再对于(n-i+1)和(i)分解质因数。这时候<strong>如果质因数和模数的质因数</strong>一样，由于不互质没有逆元，就把它记录下来，等下用快速幂乘起来就行了。那么这时候<strong>其余的质因数就可以直接求逆元</strong>了，由于模数不是质数，我们运用这个公式：（phi暴力求即可）</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527195530.png" alt="img"></p>
<p>这样做的话，由于模数的质因数是个数有限的，拆解其余数可以减少很多部分，那么效率就可以得到保证啦。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max = <span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1000005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,x,MOD;</span><br><span class="line"><span class="keyword">int</span> a[ONE];</span><br><span class="line"><span class="keyword">int</span> f[Max],p[Max],p_num;</span><br><span class="line"><span class="keyword">int</span> Num[Max];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quickpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res=(s64)res*a%MOD;</span><br><span class="line">        a=(s64)a*a%MOD;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_prime</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=x;i++)</span><br><span class="line">        <span class="keyword">if</span>(!(x%i))</span><br><span class="line">        &#123;</span><br><span class="line">            p[++p_num]=i;</span><br><span class="line">            <span class="keyword">while</span>(!(x%i)) x/=i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">1</span>) p[++p_num]=x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;<span class="keyword">int</span> r=a%b; <span class="keyword">while</span>(r) &#123;a=b;b=r;r=a%b;&#125; <span class="keyword">return</span> b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">phi</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">int</span> res=<span class="number">0</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;x;i++)<span class="keyword">if</span>(<span class="built_in">gcd</span>(i,x)==<span class="number">1</span>) res++;<span class="keyword">return</span> res;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x || x==<span class="number">1</span>) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p_num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(!(x%p[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            x/=p[i];</span><br><span class="line">            Num[p[i]]+=P;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    MOD=<span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">Deal_prime</span>(MOD);</span><br><span class="line">    <span class="keyword">int</span> Phi = <span class="built_in">phi</span>(MOD);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> C=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> record=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();</span><br><span class="line">        Ans = (Ans+ (s64)record * x % MOD) % MOD;</span><br><span class="line">        <span class="keyword">if</span>(i==n) <span class="keyword">break</span>;</span><br><span class="line">        C = (s64)C * <span class="built_in">Add</span>(n-i,<span class="number">1</span>) % MOD * <span class="built_in">Quickpow</span>(<span class="built_in">Add</span>(i,<span class="number">-1</span>),Phi<span class="number">-1</span>) % MOD;</span><br><span class="line">        record=C;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=p_num;j++)</span><br><span class="line">            record= (s64)record * <span class="built_in">Quickpow</span>(p[j],Num[p[j]]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>组合数</tag>
      </tags>
  </entry>
  <entry>
    <title>[网络流]String Problem</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BD%91%E7%BB%9C%E6%B5%81%5DString%20Problem/</url>
    <content><![CDATA[<h1>String Problem</h1>
<p>Time Limit: 10 Sec Memory Limit: 64 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527201103.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527201106.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527201108.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>1<br>
　　3<br>
　　135<br>
　　1 2<br>
　　1 2<br>
　　1 2<br>
　　1 2<br>
　　1 2<br>
　　1 2<br>
　　1 2<br>
　　1 2<br>
　　1 2<br>
　　1 2<br>
　　0 0 3<br>
　　1 0 0<br>
　　4 0 0</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527201110.png" alt="img"></p>
<h2 id="Solution">Solution</h2>
<p><strong>官方题解：</strong></p>
<p>首先将点分为3类</p>
<p><strong>第一类：<strong>Pij 表示第i个点和第j个点组合的点，那么Pij的权值等于w[i][j]+w[j][i]（表示</strong>得到的价值</strong>）</p>
<p><strong>第二类：<strong>原串中的n个点每个点拆出一个点，第i个点权值为 –a[s[i]] （表示</strong>需要的花费</strong>）</p>
<p>**第三类：**对于10种字符拆出10个点，每个点的权值为 -(b[x]-a[x])</p>
<p>那么我们可以得到一个关系图  ，对于第一类中的点Pij，如果想要选择Pij，你就必须要选中第二类中的点i和j，对于第二类中的点如果你想选中第i个点，其对应的字符s[i]，那么就必须选中第三类中s[i] 对应的点，因为每个种类的点第一次选中时花费是b[s[i]]，而第二类中花费都是a[s[i]],一定要补上b[s[i]]-a[s[i]]，而且<strong>只需要补上一次</strong>。</p>
<p>得到上面的关系图后然后就是普通的<strong>最大权闭合子图</strong>问题,直接求解即可。</p>
<p>然后我们得到了若干关系，直接建边跑一边网络流即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> POI = <span class="number">6005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Q,n;</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> Val[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> next[ONE],first[POI],go[ONE],w[ONE],tot;</span><br><span class="line"><span class="keyword">int</span> Dep[POI],q[ONE],E[POI],tou,wei;</span><br><span class="line"><span class="keyword">int</span> part1,part2,part3;</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">&#125;a[<span class="number">15</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;  w[tot]=z;</span><br><span class="line">    next[++tot]=first[v];   first[v]=tot;   go[tot]=u;  w[tot]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Dep,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(Dep));</span><br><span class="line">    tou=<span class="number">0</span>;  wei=<span class="number">1</span>;</span><br><span class="line">    q[<span class="number">1</span>]=S; Dep[S]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=S;i&lt;=T;i++) E[i]=first[i];</span><br><span class="line">    <span class="keyword">while</span>(tou&lt;wei)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[++tou];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(Dep[v] || !w[e]) <span class="keyword">continue</span>;</span><br><span class="line">            Dep[v]=Dep[u]+<span class="number">1</span>;</span><br><span class="line">            q[++wei]=v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (Dep[T]&gt;<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> Limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==T || !Limit) <span class="keyword">return</span> Limit;</span><br><span class="line">    <span class="keyword">int</span> from=<span class="number">0</span>,f;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> &amp;e=E[u];e;e=next[e])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=go[e];</span><br><span class="line">        <span class="keyword">if</span>(Dep[v]!=Dep[u]+<span class="number">1</span> || !w[e]) <span class="keyword">continue</span>;</span><br><span class="line">        f=<span class="built_in">Dfs</span>(v,<span class="built_in">min</span>(Limit,w[e]));</span><br><span class="line">        w[e]-=f;</span><br><span class="line">        w[((e<span class="number">-1</span>)^<span class="number">1</span>)+<span class="number">1</span>]+=f;</span><br><span class="line">        Limit-=f;</span><br><span class="line">        from+=f;</span><br><span class="line">        <span class="keyword">if</span>(!Limit) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> from;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Ans = tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(first,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(first));</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        a[i].a=<span class="built_in">get</span>(), a[i].b=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            Val[i][j]=<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    part1 = n*(n<span class="number">-1</span>)/<span class="number">2</span>;    part2 = n;    part3 = <span class="number">10</span>;</span><br><span class="line">    S=<span class="number">0</span>;    T= part1 + part2 + part3 +<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            num ++;    Ans += Val[i][j]+Val[j][i];</span><br><span class="line">            <span class="built_in">Add</span>(S,num, Val[i][j]+Val[j][i]);</span><br><span class="line">            <span class="built_in">Add</span>(num,part1+i, INF);</span><br><span class="line">            <span class="built_in">Add</span>(num,part1+j, INF);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Add</span>(part1+i,T, a[s[i]-<span class="string">&#x27;0&#x27;</span>].a);</span><br><span class="line">        <span class="built_in">Add</span>(part1+i,part1+part2+s[i]-<span class="string">&#x27;0&#x27;</span>+<span class="number">1</span>, INF);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        <span class="built_in">Add</span>(part1+part2+i+<span class="number">1</span>,T, a[i].b-a[i].a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>()) Ans-=<span class="built_in">Dfs</span>(S,INF);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Q=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(Q--)</span><br><span class="line">        <span class="built_in">Solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>[组合数]看电影</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BB%84%E5%90%88%E6%95%B0%5D%E7%9C%8B%E7%94%B5%E5%BD%B1/</url>
    <content><![CDATA[<h1>看电影</h1>
<p>Time Limit: 10 Sec Memory Limit: 259 MB</p>
<h2 id="Description">Description</h2>
<p>到了难得的假期，小白班上组织大家去看电影。但由于假期里看电影的人太多，很难做到让全班看上同一场电影，最后大家在一个偏僻的小胡同里找到了一家电影院。但这家电影院分配座位的方式很特殊，具体方式如下： 1. 电影院的座位共有K个，并被标号为1…K，每个人买完票后会被随机指定一个座位，具体来说是从1…K中等可能的随机选取一个正整数，设其为L。  2. 如果编号L的座位是空位，则这个座位就分配给此人，否则将L加一，继续前面的步骤。 3.  如果在第二步中不存在编号L的座位，则该人只能站着看电影，即所谓的站票。小白班上共有N人（包括小白自己），作为数学爱好者，小白想知道全班都能够有座位的概率是多少。</p>
<h2 id="Input">Input</h2>
<p>输入文件第一行有且只有一个正整数T，表示测试数据的组数。 第2～T+1行，每行两个正整数N,K，用单个空格隔开，其含义同题目描述。</p>
<h2 id="Output">Output</h2>
<p>输出文件共包含T行。第i行应包含两个用空格隔开的整数A,B，表示输入文件中的第i组数据的答案为A/B。（注意，这里要求将答案化为既约分数）</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>​      　　3<br>
​     　　1 1<br>
​     　　2 1<br>
​     　　2 2</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>1 1<br>
　　0 1<br>
　　3 4</p>
<h2 id="HINT">HINT</h2>
<p>对于100%的数据 T&lt;=50,N,K&lt;=200</p>
<h2 id="Main-idea">Main idea</h2>
<p>有n个人，k个位置，询问按照以下坐法使得所有人都有位置坐的概率是多少。（坐法：每个人随机一个位置，如果这个位置有人那一直就往后坐，如果后面都有人了则不可行）</p>
<h2 id="Source">Source</h2>
<p>运用组合数学，首先我们知道n个人k个位置的<strong>总方案数是k^n</strong>，然后我们考虑一下怎么求出可行的方案，发现直接做的话无解与有解的两个情况不好考虑，怎么办呢？</p>
<p>我们发现可以考虑一下<strong>多加一个空位置使其构成一个环</strong>，那么这时候<strong>每个位置都必定是有解的</strong>，<strong>方案数就是(k+1)^n</strong>。再考虑如何删掉重复的情况，由于我们加入了一个位置，那么除去经过这个位置的情况显然是<strong>方案数/(k+1)</strong>，那么<strong>现在方案数就是(k+1)^n/(k+1)</strong>，然后乘上有几个空位置即可。最后答案就是：<strong>( (k+1)^n/(k+1)*(k+1-n) ) / (k^n)</strong>。</p>
<p>我们发现这个现在求出来的方案数比较大，但是又看见了n,k&lt;=200，想到了<strong>数字n的质因数和n^k的质因数是一样的</strong>（所以这时候质因数肯定都是200以内的质数），所以我们乘的时候直接质因数分解，然后两个数字的质因数去重，最后用一个高精度乘起来输出即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">201</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">int</span> prime[ONE],cnt;</span><br><span class="line"><span class="keyword">int</span> p[ONE][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> record,x;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num[<span class="number">10001</span>],len;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,num[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> power <span class="keyword">operator</span> *(power a,power b)</span><br><span class="line">    &#123;</span><br><span class="line">        power c;</span><br><span class="line">        c.len=a.len+b.len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c.len;i++) c.num[i]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a.len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            x=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b.len;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                c.num[i+j<span class="number">-1</span>]=c.num[i+j<span class="number">-1</span>] + x + a.num[i]*b.num[j];</span><br><span class="line">                x=c.num[i+j<span class="number">-1</span>]/<span class="number">10</span>;</span><br><span class="line">                c.num[i+j<span class="number">-1</span>]%=<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            c.num[i+b.len]=x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(c.len&gt;<span class="number">1</span> &amp;&amp; !c.num[c.len]) c.len--;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;kd[<span class="number">3</span>],pass;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dealwith</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=pass.len;i++) pass.num[i]=<span class="number">0</span>;</span><br><span class="line">    pass.len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        pass.num[++pass.len]=x%<span class="number">10</span>;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PD</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;x;i++)</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Chai</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> PD)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!(x%prime[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            p[prime[i]][PD]++;</span><br><span class="line">            x=<span class="built_in">Chai</span>(x/prime[i],PD);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Deal</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> m,<span class="keyword">int</span> PD)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    record=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        record*=x;</span><br><span class="line">        record=<span class="built_in">Chai</span>(record,PD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(PD==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        record*=(x-m<span class="number">-1</span>);</span><br><span class="line">        record=<span class="built_in">Chai</span>(record,PD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p[record][PD]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">200</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">PD</span>(i)) prime[++cnt]=i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        n=<span class="built_in">get</span>();    k=<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">if</span>(n&gt;k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;0 1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(p));</span><br><span class="line">        <span class="built_in">Deal</span>(k+<span class="number">1</span>,n<span class="number">-1</span>,<span class="number">1</span>);    <span class="built_in">Deal</span>(k,n,<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">200</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x=<span class="built_in">min</span>(p[i][<span class="number">1</span>],p[i][<span class="number">2</span>]);</span><br><span class="line">            p[i][<span class="number">1</span>]-=x; p[i][<span class="number">2</span>]-=x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        kd[<span class="number">1</span>].len=kd[<span class="number">2</span>].len=<span class="number">1</span>;</span><br><span class="line">        kd[<span class="number">1</span>].num[<span class="number">1</span>]=kd[<span class="number">2</span>].num[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dealwith</span>(prime[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=<span class="number">2</span>;t++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=p[prime[i]][t];j++)</span><br><span class="line">                    kd[t]=kd[t]*pass;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        kd[<span class="number">1</span>].<span class="built_in">print</span>(); <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        kd[<span class="number">2</span>].<span class="built_in">print</span>(); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>组合数</tag>
      </tags>
  </entry>
  <entry>
    <title>[网络流]tower</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BD%91%E7%BB%9C%E6%B5%81%5Dtower/</url>
    <content><![CDATA[<h1>tower</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>Nick近在玩一款很好玩的游戏，游戏规则是这样的：<br>
有一个n*m的地图，地图上的每一个位置要么是空地，要么是炮塔，要么是一些BETA狗，Nick需要操纵炮塔攻击BETA狗们。<br>
攻击方法是：对于每个炮塔，游戏系统已经给出它可以瞄准的方向(上下左右其中一个），Nick需要选择它的攻击位置，每一个炮塔只能够攻击一个位置，炮塔只能够向着它的瞄准方向上的某个位置发动攻击，当然炮塔也可以不进行攻击。炮塔威力强大，它可以且仅可以消灭目标位置上所有的BETA狗。出于安全考虑，游戏系统已经保证不存在一个炮塔能够瞄准另外一个炮塔，即对于任意一个炮塔，它所有可能的攻击位置上不存在另外一个炮塔。而且，如果把炮塔的起点和终点称为炮弹的运行轨迹，那么系统不允许两条轨迹相交f包括起点和终点）。现在，选定目标位置以后，每一个炮塔同时开炮，你要告诉Nick，他最多可以干掉多少BETA狗。</p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194732.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p>一行一个整数表示答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4 5<br>
　　0 0 -2 0 0<br>
　　-4 0 5 4 0<br>
　　0 -4 3 0 6<br>
　　9 0 0 -1 0</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>12</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194734.png" alt="img"></p>
<h2 id="Main-idea">Main idea</h2>
<p>给定若干固定方向的炮台，以及若干位置的敌人，炮台可以杀掉对应方向上从该位置到底的其中一个位置的敌人，要求炮台位置和消灭的敌人位置连线，连线不能有重叠，询问最多能消灭几个敌人。</p>
<h2 id="Solution">Solution</h2>
<p>我们发现，相交的连线其实就是<strong>给出了炮台之间的路径</strong>。我们来处理如何解决无可走路径的问题，显然想到了最小割。</p>
<p><strong>横向炮台或纵向炮台之间是没有影响的</strong>。所以显然可以构建一张二分图。</p>
<p>那么我们如何确定容量呢？我们可以令<strong>一条 (u-&gt;v) 的割边表示选择了u这个点</strong>。方便处理连边上下或左右攻击的炮台，连边方向应该一致。然后我们连边时先找到一条<strong>可攻击位置上的最大贡献</strong>，设最大贡献为Max，然后连边时<strong>容量用Max-val</strong>，就表示它会损失这么多的价值。注意到这样连边的话，<strong>在最边界上的点是没有连边的</strong>。但是<strong>并不会影响答案</strong>，为什么呢？我们这么考虑：<strong>如果我们选择了最边界的点，那么这个位置的敌人数必然是最多的</strong>，如果不是最多的话（也就是说还有其它点人数更多）显然连到边界不可能是最优的，因为连边界就<strong>可能阻断了更多其它炮台攻击方案的可能性</strong>。这就表示了，若选择边界，则必然边界贡献最多，那么<strong>如果连边了，容量也应该是0</strong>，综上所述不会影响答案。</p>
<p>我们这样连完了边，但发现还是会有一些问题。如果出现这种情况，就会有一些Bug：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194737.png" alt="img"></p>
<p>这样就会影响了答案。怎么处理呢？我们发现问题只能涉及一行一列，只要<strong>令路径只能“拐一次弯”<strong>就可以解决。所以我们可以再</strong>将点拆为横向点和纵向点</strong>，横向点向纵向点连INF的边，纵向点没有边连向横向点即可。</p>
<p>这样的话复杂度就是<strong>O(maxflow(n×m,n×m))</strong>，成功了解决了问题！(≧▽≦)/</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">100001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">214783640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">101</span>][<span class="number">101</span>],Max;</span><br><span class="line"><span class="keyword">int</span> next[ONE],first[ONE],go[ONE],w[ONE],tot;</span><br><span class="line"><span class="keyword">int</span> q[<span class="number">10000001</span>],Dep[ONE],E[ONE],tou,wei;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> id(i,j) (i-1)*m+j</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];    first[u]=tot;    go[tot]=v;    w[tot]=z;</span><br><span class="line">    next[++tot]=first[v];    first[v]=tot;    go[tot]=u;    w[tot]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Dep,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(Dep));</span><br><span class="line">    tou=<span class="number">0</span>;    wei=<span class="number">1</span>;</span><br><span class="line">    q[<span class="number">1</span>]=S;    Dep[S]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=S;u&lt;=T;u++) E[u]=first[u];</span><br><span class="line">    <span class="keyword">while</span>(tou &lt; wei)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[++tou];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(Dep[v] || !w[e]) <span class="keyword">continue</span>;</span><br><span class="line">            Dep[v] = Dep[u] + <span class="number">1</span>;</span><br><span class="line">            q[++wei] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Dep[T] &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> Limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==T || !Limit) <span class="keyword">return</span> Limit;</span><br><span class="line">    <span class="keyword">int</span> flow=<span class="number">0</span>,f;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> &amp;e=E[u]; e; e=next[e])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=go[e];</span><br><span class="line">        <span class="keyword">if</span>(Dep[v]!=Dep[u]+<span class="number">1</span> || !w[e]) <span class="keyword">continue</span>;</span><br><span class="line">        f=<span class="built_in">Dfs</span>(v,<span class="built_in">min</span>(w[e],Limit));</span><br><span class="line">        w[e] -= f;</span><br><span class="line">        w[((e<span class="number">-1</span>)^<span class="number">1</span>)+<span class="number">1</span>] += f;</span><br><span class="line">        Limit -= f;</span><br><span class="line">        flow += f;</span><br><span class="line">        <span class="keyword">if</span> (!Limit) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i][j] = <span class="built_in">get</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> PD=n*m;</span><br><span class="line">    S=<span class="number">0</span>;    T=<span class="number">2</span>*PD+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Max = a[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">Add</span>(S,<span class="built_in">id</span>(i,j),INF);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=i<span class="number">-1</span>;k&gt;=<span class="number">1</span>;k--) Max = <span class="built_in">max</span>(Max, a[k][j]);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&gt;=<span class="number">1</span>+<span class="number">1</span>;k--) <span class="built_in">Add</span>(<span class="built_in">id</span>(k,j), <span class="built_in">id</span>(k<span class="number">-1</span>,j), Max-a[k][j]);</span><br><span class="line">                Ans += Max;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span>(a[i][j] == <span class="number">-2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Max = a[i][j] = <span class="number">0</span>;</span><br><span class="line">                    <span class="built_in">Add</span>(S,<span class="built_in">id</span>(i,j),INF);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=i+<span class="number">1</span>;k&lt;=n;k++)    Max = <span class="built_in">max</span>(Max, a[k][j]);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=n<span class="number">-1</span>;k++) <span class="built_in">Add</span>(<span class="built_in">id</span>(k,j), <span class="built_in">id</span>(k+<span class="number">1</span>,j), Max-a[k][j]);</span><br><span class="line">                    Ans += Max;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span>(a[i][j] == <span class="number">-3</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Max = a[i][j] = <span class="number">0</span>;</span><br><span class="line">                    <span class="built_in">Add</span>(<span class="built_in">id</span>(i,j)+PD,T,INF);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=j<span class="number">-1</span>;k&gt;=<span class="number">1</span>;k--) Max = <span class="built_in">max</span>(Max, a[i][k]);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&gt;=<span class="number">1</span>+<span class="number">1</span>;k--) <span class="built_in">Add</span>(<span class="built_in">id</span>(i,k<span class="number">-1</span>)+PD, <span class="built_in">id</span>(i,k)+PD, Max-a[i][k]);</span><br><span class="line">                    Ans += Max;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span>(a[i][j] == <span class="number">-4</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Max = a[i][j] = <span class="number">0</span>;</span><br><span class="line">                    <span class="built_in">Add</span>(<span class="built_in">id</span>(i,j)+PD,T,INF);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;=m;k++) Max = <span class="built_in">max</span>(Max, a[i][k]);</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;=m<span class="number">-1</span>;k++) <span class="built_in">Add</span>(<span class="built_in">id</span>(i,k+<span class="number">1</span>)+PD, <span class="built_in">id</span>(i,k)+PD, Max-a[i][k]);</span><br><span class="line">                    Ans += Max;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">Add</span>(<span class="built_in">id</span>(i,j), <span class="built_in">id</span>(i,j)+PD, INF);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>()) Ans-=<span class="built_in">Dfs</span>(S,INF);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>[线段树]算术天才⑨与等差数列</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BA%BF%E6%AE%B5%E6%A0%91%5D%E7%AE%97%E6%9C%AF%E5%A4%A9%E6%89%8D%E2%91%A8%E4%B8%8E%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97/</url>
    <content><![CDATA[<h1>算术天才⑨与等差数列</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>算术天才⑨非常喜欢和等差数列玩耍。<br>
　有一天，他给了你一个长度为n的序列，其中第i个数为a[i]。<br>
　他想考考你，每次他会给出询问l,r,k，问区间[l,r]内的数从小到大排序后能否形成公差为k的等差数列。<br>
　当然，他还会不断修改其中的某一项。<br>
　为了不被他鄙视，你必须要快速并正确地回答完所有问题。<br>
　注意：只有一个数的数列也是等差数列。</p>
<h2 id="Input">Input</h2>
<p>第一行包含两个正整数n,m，分别表示序列的长度和操作的次数。<br>
　第二行包含n个整数，依次表示序列中的每个数a[i]。<br>
　接下来m行，每行一开始为一个数op，<br>
　若op=1，则接下来两个整数x,y，表示把a[x]修改为y。<br>
　若op=2，则接下来三个整数l,r,k，表示一个询问。<br>
　在本题中，x,y,l,r,k都是经过加密的，都需要异或你之前输出的Yes的个数来进行解密。</p>
<h2 id="Output">Output</h2>
<p>输出若干行，对于每个询问，如果可以形成等差数列，那么输出Yes，否则输出No。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 3<br>
　1 3 2 5 6<br>
　2 1 5 1<br>
　1 5 4<br>
　2 1 5 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>No<br>
　Yes</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=n,m&lt;=300000, 0&lt;=a[i]&lt;=10^9, 1&lt;=x&lt;=n，0&lt;=y&lt;=10^9, 1&lt;=l&lt;=r&lt;=n, 0&lt;=k&lt;=10^9</p>
<h2 id="Solution">Solution</h2>
<p>显然，如果可以组成等差数列，首项必定是<strong>区间最小值</strong>。这样我们就知道了要求的等差数列的<strong>首项</strong>和<strong>公差</strong>。</p>
<p>一个首先的想法就是：我们判断一下<strong>区间和</strong>是否等于<strong>所要求的等差数列的和</strong>。</p>
<p>但是这样显然是不够的，那么怎么办呢？我们试想：能否求出所要求的<strong>等差数列的平方和</strong>？</p>
<p>显然<strong>公差为 1 的时候</strong>用<strong>平方和公式</strong>计算，<strong>剩下公差不是 1 的时候</strong>我们轻易<strong>推一下式子</strong>即可。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528010447.png" alt="img"></p>
<p>那么我们只要用线段树维护一下：<strong>区间最小值、区间和、区间平方和</strong>即可，资磁<strong>单点修改</strong>。</p>
<p>正确性不会证明啊，但是满足的概率应该挺大的吧qwq</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">500005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, T;</span><br><span class="line">s64 a[ONE];</span><br><span class="line"><span class="keyword">int</span> opt, x, y, d;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    s64 sumx, sumxx, minx;</span><br><span class="line">&#125;Node[ONE * <span class="number">4</span>], res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Renew</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = i&lt;&lt;<span class="number">1</span>, b = i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">    Node[i].sumx = Node[a].sumx + Node[b].sumx;</span><br><span class="line">    Node[i].sumxx = Node[a].sumxx + Node[b].sumxx;</span><br><span class="line">    Node[i].minx = <span class="built_in">min</span>(Node[a].minx, Node[b].minx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node[i].minx = INF;</span><br><span class="line">    <span class="keyword">if</span>(l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        Node[i].minx = a[l];</span><br><span class="line">        Node[i].sumx = a[l];</span><br><span class="line">        Node[i].sumxx = a[l] * a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Build</span>(i&lt;&lt;<span class="number">1</span>, l, mid);  <span class="built_in">Build</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">Renew</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, s64 x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(L == l &amp;&amp; l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        Node[i].minx = x;</span><br><span class="line">        Node[i].sumx = x;</span><br><span class="line">        Node[i].sumxx = x * x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid) <span class="built_in">Update</span>(i&lt;&lt;<span class="number">1</span>, l, mid, L, x);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">Update</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, L, x);</span><br><span class="line">    <span class="built_in">Renew</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class="line">    &#123;</span><br><span class="line">        res.minx = <span class="built_in">min</span>(res.minx, Node[i].minx);</span><br><span class="line">        res.sumx += Node[i].sumx;</span><br><span class="line">        res.sumxx += Node[i].sumxx;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L &lt;= mid) <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>, l, mid, L, R);</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span> &lt;= R) <span class="built_in">Query</span>(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, L, R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">Calc_sumx</span><span class="params">(s64 a0, s64 n, s64 d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s64 an = a0 + (n<span class="number">-1</span>) * d;</span><br><span class="line">    <span class="keyword">return</span> (a0 + an) * n / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">Calc_sumxx</span><span class="params">(s64 a0, s64 n, s64 d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s64 item1 = n * a0 * a0;</span><br><span class="line">    s64 item2 = <span class="number">2</span> * a0 * d * n * (n<span class="number">-1</span>) / <span class="number">2</span>;</span><br><span class="line">    s64 item3 = d * d * (n * (n+<span class="number">1</span>) * (<span class="number">2</span>*n+<span class="number">1</span>) / <span class="number">6</span> - n*n);</span><br><span class="line">    <span class="keyword">return</span> item1 + item2 + item3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();  T = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        a[i] = <span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">Build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        opt = <span class="built_in">get</span>();</span><br><span class="line">        x = <span class="built_in">get</span>() ^ num;    y = <span class="built_in">get</span>() ^ num;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Update</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, y);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            d = <span class="built_in">get</span>() ^ num;</span><br><span class="line">            res.minx = INF;</span><br><span class="line">            res.sumx = res.sumxx = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">Query</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, y);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(res.sumx == <span class="built_in">Calc_sumx</span>(res.minx, y-x+<span class="number">1</span>, d))</span><br><span class="line">                <span class="keyword">if</span>(res.sumxx == <span class="built_in">Calc_sumxx</span>(res.minx, y-x+<span class="number">1</span>, d))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">                    num++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>[网络流]方格取数</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BD%91%E7%BB%9C%E6%B5%81%5D%E6%96%B9%E6%A0%BC%E5%8F%96%E6%95%B0/</url>
    <content><![CDATA[<h1>方格取数</h1>
<p>Time Limit: 5 Sec Memory Limit: 64 MB</p>
<h2 id="Description">Description</h2>
<p>在一个n*n的方格里，每个格子里都有一个正整数。从中取出若干数，使得任意两个取出的数所在格子没有公共边，且取出的数的总和尽量大。</p>
<h2 id="Input">Input</h2>
<p>第一行一个数n；接下来n行每行n个数描述一个方阵</p>
<h2 id="Output">Output</h2>
<p>仅一个数，即最大和</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>2<br>
　1 2<br>
　3 5</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>6</p>
<h2 id="HINT">HINT</h2>
<p>n&lt;=30</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定一个矩阵，取了一个点就不能取上下左右的点了，求能取出的最大价值。</p>
<h2 id="Solution">Solution</h2>
<p>求的显然是最大权独立集，<strong>最大权独立集=总权-最小权覆盖集</strong>，对于最小权覆盖集我们用最小割来解。</p>
<p>由于取了一个点，不能取上下左右的点，即i±1 or j±1，那么显然是一个二分图，根据奇偶分类。</p>
<p>然后就是一个最小割的模型，我们左边的点向上下左右的点连边，<strong>容量为INF</strong>(必然不是割)，然后跑最大流即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">1001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> TWO=<span class="number">100001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res,tou,wei,S,T;</span><br><span class="line"><span class="keyword">int</span> Dep[ONE],q[TWO],ans;</span><br><span class="line"><span class="keyword">int</span> a[ONE][ONE],PD[ONE][ONE],BI[ONE][ONE];</span><br><span class="line"><span class="keyword">int</span> next[TWO],first[TWO],go[TWO],w[TWO];</span><br><span class="line"><span class="keyword">int</span> E[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;  w[tot]=z;</span><br><span class="line">    next[++tot]=first[v];   first[v]=tot;   go[tot]=u;  w[tot]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Dep,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(Dep));</span><br><span class="line">    q[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    tou=<span class="number">0</span>;  wei=<span class="number">1</span>;  Dep[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">0</span>;u&lt;=n*n;u++) E[u]=first[u];</span><br><span class="line">    <span class="keyword">while</span>(tou&lt;wei)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[++tou];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(Dep[v] || !w[e])<span class="keyword">continue</span>;</span><br><span class="line">            Dep[v]=Dep[u]+<span class="number">1</span>;</span><br><span class="line">            q[++wei]=v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (Dep[T]&gt;<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> Limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==T || !Limit) <span class="keyword">return</span> Limit;</span><br><span class="line">    <span class="keyword">int</span> flow=<span class="number">0</span>,f;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> &amp;e=E[u];e;e=next[e])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=go[e];</span><br><span class="line">        <span class="keyword">if</span>(Dep[v]!=Dep[u]+<span class="number">1</span> || !w[e]) <span class="keyword">continue</span>;</span><br><span class="line">        f=<span class="built_in">Dfs</span>(v,<span class="built_in">min</span>(Limit,w[e]));</span><br><span class="line">        w[e]-=f;</span><br><span class="line">        w[e^<span class="number">1</span>]+=f;</span><br><span class="line">        Limit-=f;</span><br><span class="line">        flow+=f;</span><br><span class="line">        <span class="keyword">if</span>(!Limit)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(BI[i<span class="number">-1</span>][j])  <span class="built_in">Add</span>(BI[i][j],BI[i<span class="number">-1</span>][j],INF);</span><br><span class="line">    <span class="keyword">if</span>(BI[i][j<span class="number">-1</span>])  <span class="built_in">Add</span>(BI[i][j],BI[i][j<span class="number">-1</span>],INF);</span><br><span class="line">    <span class="keyword">if</span>(BI[i+<span class="number">1</span>][j])  <span class="built_in">Add</span>(BI[i][j],BI[i+<span class="number">1</span>][j],INF);</span><br><span class="line">    <span class="keyword">if</span>(BI[i][j+<span class="number">1</span>])  <span class="built_in">Add</span>(BI[i][j],BI[i][j+<span class="number">1</span>],INF);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i][j]=<span class="built_in">get</span>();</span><br><span class="line">            ans+=a[i][j];</span><br><span class="line">            <span class="keyword">if</span>( i%<span class="number">2</span>!=j%<span class="number">2</span> ) PD[i][j]=<span class="number">1</span>;</span><br><span class="line">            BI[i][j]=++tot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    S=<span class="number">0</span>;    T=n*n+<span class="number">1</span>;    tot=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(PD[i][j]) <span class="built_in">Add</span>(S,BI[i][j],a[i][j]);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">Add</span>(BI[i][j],T,a[i][j]);</span><br><span class="line">            <span class="keyword">if</span>(PD[i][j])    <span class="built_in">Build</span>(i,j);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>())</span><br><span class="line">        res+=<span class="built_in">Dfs</span>(<span class="number">0</span>,INF);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans-res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>[网络流]人员雇佣</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BD%91%E7%BB%9C%E6%B5%81%5D%E4%BA%BA%E5%91%98%E9%9B%87%E4%BD%A3/</url>
    <content><![CDATA[<h1>人员雇佣</h1>
<p>Time Limit: 20 Sec Memory Limit: 259 MB</p>
<h2 id="Description">Description</h2>
<p>作为一个富有经营头脑的富翁，小L决定从本国最优秀的经理中雇佣一些来经营自己的公司。这些经理相互之间合作有一个贡献指数,（我们用Ei,j表示i经理对j经理的了解程度），即当经理i和经理j同时被雇佣时，经理i会对经理j做出贡献，使得所赚得的利润增加Ei,j。当然，雇佣每一个经理都需要花费一定的金钱Ai，对于一些经理可能他做出的贡献不值得他的花费，那么作为一个聪明的人，小L当然不会雇佣他。  然而，那些没有被雇佣的人会被竞争对手所雇佣，这个时候那些人会对你雇佣的经理的工作造成影响，使得所赚得的利润减少Ei,j（注意：这里的Ei,j与上面的Ei,j 是同一个）。 作为一个效率优先的人，小L想雇佣一些人使得净利润最大。你可以帮助小L解决这个问题吗？</p>
<h2 id="Input">Input</h2>
<p>第一行有一个整数N&lt;=1000表示经理的个数 第二行有N个整数Ai表示雇佣每个经理需要花费的金钱 接下来的N行中一行包含N个数，表示Ei,j，即经理i对经理j的了解程度。（输入满足Ei,j=Ej,i）</p>
<h2 id="Output">Output</h2>
<p>第一行包含一个整数，即所求出的最大值。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>​    　　3<br>
​    　　3 5 100<br>
​    　　0 6 1<br>
​    　　6 0 2<br>
​    　　1 2 0</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>​    　　1</p>
<h2 id="HINT">HINT</h2>
<p>20%的数据中 N&lt;=10<br>
　　50%的数据中 N&lt;=100<br>
　　100%的数据中 N&lt;=1000 , Ei,j&lt;=maxlongint , Ai&lt;=maxlongint</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定若干关系，选择一个人需要固定的费用，对于i,j，选择了其中一个则损失E[i][j]，两个都选了则获得2*E[i][j]，问能获得的最大价值。</p>
<h2 id="Solution">Solution</h2>
<p>显然就是一个最小割的模型，我们直接套用论文里面的模型即可。</p>
<p>针对于这道题，我们对于代价建图，用Ans=总和-最小代价即可。</p>
<p>对于第i个点，如果选了，会损失a[i]，连边**(S,i,a[i])<strong>：表示选了它之后的代价；如果不选，会损失ΣE[i][j]，所以连边</strong>(i,T,ΣE[i][j])**，表示不选的损失。</p>
<p>然后对于一对点i,j，连边**(i,j,2*E[i][j])**，表示如果不选i,选了j的话，本来i中选j的利益得不到，又要损失j对i的影响为E[i][j]，一共损失了2*E[i][j]。</p>
<p>然后求一下最小割即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">5000005</span>;</span><br><span class="line"><span class="keyword">const</span> s64 INF=<span class="number">21474836400000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,x;</span><br><span class="line">s64 res;</span><br><span class="line"><span class="keyword">int</span> tou,wei,S,T;</span><br><span class="line"><span class="keyword">int</span> Dep[ONE],q[<span class="number">1000001</span>],E[ONE];</span><br><span class="line"><span class="keyword">int</span> next[ONE],first[ONE],go[ONE],tot;</span><br><span class="line">s64 w[ONE];</span><br><span class="line">s64 Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,s64 z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;  w[tot]=z;</span><br><span class="line">    next[++tot]=first[v];   first[v]=tot;   go[tot]=u;  w[tot]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Dep,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(Dep));</span><br><span class="line">    tou=<span class="number">0</span>;  wei=<span class="number">1</span>;</span><br><span class="line">    q[<span class="number">1</span>]=S; Dep[S]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=S;i&lt;=T;i++) E[i]=first[i];</span><br><span class="line">    <span class="keyword">while</span>(tou&lt;wei)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[++tou];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(Dep[v] || !w[e]) <span class="keyword">continue</span>;</span><br><span class="line">            Dep[v]=Dep[u]+<span class="number">1</span>;</span><br><span class="line">            q[++wei]=v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (Dep[T]&gt;<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u,s64 Limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==T || !Limit) <span class="keyword">return</span> Limit;</span><br><span class="line">    s64 from=<span class="number">0</span>,f;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> &amp;e=E[u];e;e=next[e])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=go[e];</span><br><span class="line">        <span class="keyword">if</span>(Dep[v]!=Dep[u]+<span class="number">1</span> || !w[e]) <span class="keyword">continue</span>;</span><br><span class="line">        f=<span class="built_in">Dfs</span>(v,<span class="built_in">min</span>(Limit,w[e]));</span><br><span class="line">        w[e]-=f;</span><br><span class="line">        w[((e<span class="number">-1</span>)^<span class="number">1</span>)+<span class="number">1</span>]+=f;</span><br><span class="line">        Limit-=f;</span><br><span class="line">        from+=f;</span><br><span class="line">        <span class="keyword">if</span>(!Limit) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> from;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    S=<span class="number">0</span>;    T=n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Add</span>(S,i,x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            x=<span class="built_in">get</span>();</span><br><span class="line">            res+=x; Ans+=x;</span><br><span class="line">            <span class="built_in">Add</span>(i,j,<span class="number">2</span>*x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Add</span>(i,T,res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>()) Ans-=<span class="built_in">Dfs</span>(S,INF);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,Ans);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>[网络流]能量魔方</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BD%91%E7%BB%9C%E6%B5%81%5D%E8%83%BD%E9%87%8F%E9%AD%94%E6%96%B9/</url>
    <content><![CDATA[<h1>能量魔方</h1>
<p>Time Limit: 10 Sec Memory Limit: 64 MB</p>
<h2 id="Description">Description</h2>
<p>小C 有一个能量魔方，这个魔方可神奇了，只要按照特定方式，放入不同的 能量水晶，就可以产生巨大的能量。 能量魔方是一个 N<em>N</em>N 的立方体，一共用 N3 个空格可以填充能量水晶。 能量水晶有两种： ·一种是正能量水晶(Positive) ·一种是负能量水晶(Negative)  当这个魔方被填满后，就会依据填充的能量水晶间的关系产生巨大能量。对 于相邻两(相邻就是拥有同一个面)的两个格子，如果这两个格子填充的是一正一  负两种水晶，就会产生一单位的能量。而整个魔方的总能量，就是这些产生的能 量的总和。 现在，小 C  已经在魔方中填充了一些水晶，还有一些位置空着。他想知道， 如果剩下的空格可以随意填充，那么在最优情况下，这个魔方可以产生多少能量。</p>
<h2 id="Input">Input</h2>
<p>第一行包含一个数N，表示魔方的大小。 接下来 N2 行，每行N个字符，每个字符有三种可能： P：表示此方格已经填充了正能量水晶； N：表示此方格已经填充了负能量水晶；  ?：表示此方格待填充。 上述 N*N 行，第(i-1)<em>N+1~i</em>N 行描述了立方体第 i 层从前到后，从左到右的 状态。且每 N  行间，都有一空行分隔。</p>
<h2 id="Output">Output</h2>
<p>仅包含一行一个数，表示魔方最多能产生的能量</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>2<br>
　P?<br>
　??</p>
<p>??<br>
　N?</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>9</p>
<p>explain：<br>
　　PN<br>
　　NP<br>
　　<br>
　　NP<br>
　　NN</p>
<h2 id="HINT">HINT</h2>
<p>n&lt;=40</p>
<h2 id="Main-idea">Main idea</h2>
<p>给出一个n<em>n</em>n的矩阵，其中每一个方块可以涂两种颜色，相邻的两个方块如果涂上的颜色不同，就会产生能量。已知了一些方块的颜色，询问最多可以的最多能量。</p>
<h2 id="Solution">Solution</h2>
<p>发现n&lt;=40，大胆猜测是个网络流。思考过后，发现直接求不好连边，那么我们考虑求出最小损耗，然后用(总收益)-(最小损耗)。</p>
<p>由于相邻的才对答案有贡献，所以我们想到了<strong>黑白染色</strong>，将所有点划分为两类，那么显然将相邻的点都连一条双向边，权值为1。然后我们考虑如何处理已经规定的点，这时候可以令S集表示1，令T集表示0，将白点的1连向T权值为INF，将S连向黑点的1权值为INF，这样就可以表示不可选了，点权为0则相反。然后跑一遍最小割，计算即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ID(x,y,z) ((z-1)*n*n + (x-1)*n + y)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">70001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> TWO=<span class="number">1000001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1073741820</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,S,T;</span><br><span class="line"><span class="keyword">char</span> ch[ONE],c;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">45</span>][<span class="number">45</span>][<span class="number">45</span>];</span><br><span class="line"><span class="keyword">int</span> next[TWO],first[TWO],go[TWO],w[TWO],tot;</span><br><span class="line"><span class="keyword">int</span> q[<span class="number">2000001</span>],tou,wei;</span><br><span class="line"><span class="keyword">int</span> Dep[ONE],E[TWO];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;  w[tot]=z;</span><br><span class="line">    next[++tot]=first[v];   first[v]=tot;   go[tot]=u;  w[tot]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Double_Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Add</span>(u,v,z);</span><br><span class="line">    <span class="built_in">Add</span>(v,u,z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PD</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x+y+z)%<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Dep,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(Dep));</span><br><span class="line">    tou=<span class="number">0</span>;  wei=<span class="number">1</span>;  Dep[<span class="number">0</span>]=<span class="number">1</span>; q[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">0</span>;u&lt;=T<span class="number">-1</span>;u++) E[u]=first[u];</span><br><span class="line">    <span class="keyword">while</span>(tou&lt;wei)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[++tou];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(Dep[v] || !w[e]) <span class="keyword">continue</span>;</span><br><span class="line">            Dep[v]=Dep[u]+<span class="number">1</span>;</span><br><span class="line">            q[++wei]=v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Dep[T]&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> Limit)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u==T || !Limit) <span class="keyword">return</span> Limit;</span><br><span class="line">    <span class="keyword">int</span> flow=<span class="number">0</span>,f;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> &amp;e=E[u];e;e=next[e])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=go[e];</span><br><span class="line">        <span class="keyword">if</span>(Dep[v]!=Dep[u]+<span class="number">1</span> || !w[e]) <span class="keyword">continue</span>;</span><br><span class="line">        f=<span class="built_in">Dfs</span>(v,<span class="built_in">min</span>(Limit,w[e]));</span><br><span class="line">        w[e]-=f;</span><br><span class="line">        w[((e<span class="number">-1</span>)^<span class="number">1</span>)+<span class="number">1</span>]+=f;</span><br><span class="line">        Limit-=f;</span><br><span class="line">        flow+=f;</span><br><span class="line">        <span class="keyword">if</span>(!Limit) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    S=<span class="number">0</span>;    T=n*n*n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> z=<span class="number">1</span>;z&lt;=n;z++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=n;x++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">1</span>;y&lt;=n;y++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(ch[y]==<span class="string">&#x27;?&#x27;</span>) a[x][y][z]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(ch[y]==<span class="string">&#x27;P&#x27;</span>) a[x][y][z]=<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(ch[y]==<span class="string">&#x27;N&#x27;</span>) a[x][y][z]=<span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> z=<span class="number">1</span>;z&lt;=n;z++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=n;x++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">1</span>;y&lt;=n;y++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[x+<span class="number">1</span>][y][z]) <span class="built_in">Double_Add</span>(<span class="built_in">ID</span>(x,y,z),<span class="built_in">ID</span>(x+<span class="number">1</span>,y,z),<span class="number">1</span>),Ans++;</span><br><span class="line">                <span class="keyword">if</span>(a[x][y+<span class="number">1</span>][z]) <span class="built_in">Double_Add</span>(<span class="built_in">ID</span>(x,y,z),<span class="built_in">ID</span>(x,y+<span class="number">1</span>,z),<span class="number">1</span>),Ans++;</span><br><span class="line">                <span class="keyword">if</span>(a[x][y][z+<span class="number">1</span>]) <span class="built_in">Double_Add</span>(<span class="built_in">ID</span>(x,y,z),<span class="built_in">ID</span>(x,y,z+<span class="number">1</span>),<span class="number">1</span>),Ans++;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(a[x][y][z]==<span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">PD</span>(x,y,z)) <span class="built_in">Add</span>(S,<span class="built_in">ID</span>(x,y,z),INF);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">Add</span>(<span class="built_in">ID</span>(x,y,z),T,INF);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(a[x][y][z]==<span class="number">3</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">PD</span>(x,y,z)) <span class="built_in">Add</span>(<span class="built_in">ID</span>(x,y,z),T,INF);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">Add</span>(S,<span class="built_in">ID</span>(x,y,z),INF);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        Ans-=<span class="built_in">Dfs</span>(S,INF);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title>[置换]置换</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E7%BD%AE%E6%8D%A2%5D%E7%BD%AE%E6%8D%A2/</url>
    <content><![CDATA[<h1>置换</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>定义一个置换Р的平方Q为对[1,2,3,… ,n-1,n]做两次该置换得到的排列，即 $Q_i = P_{P_i} $</p>
<p>现在已知一个置换的平方，求该置换。</p>
<h2 id="Input">Input</h2>
<p>第一行一个整数n表示排列长度。</p>
<p>第二行n个整数表示所求置换的平方。</p>
<h2 id="Output">Output</h2>
<p>若有解则输出一行n个数表示原置换(输出任意一个)，否则输出-1</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4<br>
　　2 1 4 3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3 4 2 1</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=n&lt;=10^6</p>
<h2 id="Main-idea">Main idea</h2>
<p>已知一个置换置换自己得到的序列，求这个置换。</p>
<h2 id="Solution">Solution</h2>
<p>显然是置换题。首先我们正向考虑，考虑一下一个置换置换自己会发生怎样的结果。</p>
<p>然后我们一波画图发现：<strong>如果一个轮换的长度是奇数，那么这个环所有点连边向后移一位；如果一个轮换的长度数偶数，那么就会拆解成两个长度一样的新轮换。</strong></p>
<p>然后我们倒着来想，考虑如何合并。显然现在的<strong>轮换是奇数</strong>的话，我们<strong>将所有点连边向前移动一位</strong>。如果是<strong>偶数</strong>的话，<strong>再找一个长度和这个一样的轮换，把两个轮换并在一起</strong>，并在一起就是两个轮换依次取出一个。</p>
<p>如果轮换是偶数且找不到一对的话就显然不合法。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">1000005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> x,P[ONE],d[ONE],record[ONE];</span><br><span class="line"><span class="keyword">int</span> vis[ONE],cnt,tot,num;</span><br><span class="line"><span class="keyword">int</span> Ans[ONE];</span><br><span class="line"></span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; q[ONE];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">&#125;R[ONE];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span>&#123;<span class="keyword">return</span> a.len &lt; b.len;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) P[i]=<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</span><br><span class="line">        cnt = <span class="number">0</span>;    x = i;</span><br><span class="line">        <span class="keyword">for</span>(;;)</span><br><span class="line">        &#123;</span><br><span class="line">            record[++cnt]=x;</span><br><span class="line">            x = P[x];</span><br><span class="line">            vis[x] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x==i) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cnt==<span class="number">1</span>) &#123;Ans[i]=i; <span class="keyword">continue</span>;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cnt%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> len=<span class="number">1</span>;</span><br><span class="line">            num=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                d[len]=record[j];</span><br><span class="line">                len+=<span class="number">2</span>;    <span class="keyword">if</span>(len&gt;cnt) len-=cnt;</span><br><span class="line">            &#125;</span><br><span class="line">            d[cnt+<span class="number">1</span>]=d[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)  Ans[d[j]]=d[j+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            R[++tot].id=tot;    R[tot].len=cnt;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">                q[tot].<span class="built_in">push_back</span>(record[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(tot%<span class="number">2</span>==<span class="number">1</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">    <span class="built_in">sort</span>(R+<span class="number">1</span>,R+tot+<span class="number">1</span>,cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot;j+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=R[j].id, y=R[j+<span class="number">1</span>].id;</span><br><span class="line">        <span class="keyword">if</span>(R[j].len != R[j+<span class="number">1</span>].len) &#123;<span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);<span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line"></span><br><span class="line">        num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;R[j].len;i++)</span><br><span class="line">            d[++num]=q[x][i], d[++num]=q[y][i];</span><br><span class="line"></span><br><span class="line">        d[num+<span class="number">1</span>]=d[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++) Ans[d[i]]=d[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>置换</tag>
      </tags>
  </entry>
  <entry>
    <title>[莫比乌斯反演]Crash的数字表格</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94%5DCrash%E7%9A%84%E6%95%B0%E5%AD%97%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<h1>Crash的数字表格</h1>
<p>Time Limit: 20 Sec Memory Limit: 259 MB</p>
<h2 id="Description">Description</h2>
<p>今天的数学课上，Crash小朋友学习了最小公倍数(Least Common Multiple)。对于两个正整数a和b，LCM(a, b)表示能同时被a和b整除的最小正整数。例如，LCM(6, 8) =  24。回到家后，Crash还在想着课上学的东西，为了研究最小公倍数，他画了一张N<em>M的表格。每个格子里写了一个数字，其中第i行第j列的那个格子里写着数为LCM(i, j)。一个4</em>5的表格如下： 1 2 3 4 5 2 2 6 4 10 3 6 3 12 15 4 4 12 4 20  看着这个表格，Crash想到了很多可以思考的问题。不过他最想解决的问题却是一个十分简单的问题：这个表格中所有数的和是多少。当N和M很大时，Crash就束手无策了，因此他找到了聪明的你用程序帮他解决这个问题。由于最终结果可能会很大，Crash只想知道表格里所有数的和mod 20101009的值。</p>
<h2 id="Input">Input</h2>
<p>输入的第一行包含两个正整数，分别表示N和M。</p>
<h2 id="Output">Output</h2>
<p>输出一个正整数，表示表格中所有数的和mod 20101009的值。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4 5</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>122</p>
<h2 id="HINT">HINT</h2>
<p>100%的数据满足N, M ≤ 10^7。</p>
<h2 id="Main-idea">Main idea</h2>
<p>求<img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528001204.png" alt="img"></p>
<h2 id="Solution">Solution</h2>
<p>先推一波式子：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528001157.png" alt="img"></p>
<p>然后我们只要求出了 f 就可以解决这个问题了。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528001200.png" alt="img"></p>
<p>然后我们就可以莫比乌斯反演出解了。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">10000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">20101009</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">bool</span> isp[ONE];</span><br><span class="line"><span class="keyword">int</span> prime[<span class="number">700005</span>],p_num;</span><br><span class="line"><span class="keyword">int</span> miu[ONE];</span><br><span class="line">s64 Ans,sum[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Getmiu</span><span class="params">(<span class="keyword">int</span> MaxN)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    miu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=MaxN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isp[i])</span><br><span class="line">            prime[++p_num] = i, miu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=p_num, i*prime[j]&lt;=MaxN; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            isp[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                miu[i * prime[j]] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            miu[i * prime[j]] = -miu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=MaxN; i++)</span><br><span class="line">        sum[i] = (sum[i<span class="number">-1</span>] + (s64)i*i%MOD*(miu[i])%MOD) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((s64)n*(n+<span class="number">1</span>)/<span class="number">2</span>%MOD) * ((s64)m*(m+<span class="number">1</span>)/<span class="number">2</span>%MOD) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">f</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s64 Ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m) <span class="built_in">swap</span>(n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>, j=<span class="number">0</span>; i&lt;=n; i=j+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j = <span class="built_in">min</span>(n/(n/i), m/(m/i));</span><br><span class="line">        Ans += <span class="built_in">Sum</span>(n/i, m/i) * ((sum[j] - sum[i<span class="number">-1</span>] + MOD) % MOD) % MOD;</span><br><span class="line">        Ans %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m) <span class="built_in">swap</span>(n,m);</span><br><span class="line">    <span class="built_in">Getmiu</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>, j=<span class="number">0</span>; i&lt;=n; i=j+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j = <span class="built_in">min</span>(n/(n/i), m/(m/i));</span><br><span class="line">        Ans += <span class="built_in">f</span>(n/i, m/i) * ((s64)(i+j)*(j-i+<span class="number">1</span>)/<span class="number">2</span>%MOD) % MOD;</span><br><span class="line">        Ans %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title>[莫比乌斯反演]Gcd</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94%5DGcd/</url>
    <content><![CDATA[<h1>Gcd</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>给定整数N，求1&lt;=x,y&lt;=N且Gcd(x,y)为素数的<br>
　数对(x,y)有多少对.</p>
<h2 id="Input">Input</h2>
<p>一个整数N</p>
<h2 id="Output">Output</h2>
<p>如题</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>4</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=N&lt;=10^7</p>
<h2 id="Solution">Solution</h2>
<p>直接莫比乌斯反演即可。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528000729.png" alt="img"></p>
<p>然后对于这个式子，我们下界分块一下即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1e7</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">bool</span> isp[ONE];</span><br><span class="line"><span class="keyword">int</span> prime[<span class="number">664580</span>],p_num;</span><br><span class="line"><span class="keyword">int</span> miu[ONE],sum_miu[ONE];</span><br><span class="line">s64 Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Getmiu</span><span class="params">(<span class="keyword">int</span> MaxN)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    miu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=MaxN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isp[i])</span><br><span class="line">            isp[i] = <span class="number">1</span>, prime[++p_num] = i, miu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=p_num, i*prime[j]&lt;=MaxN; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            isp[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                miu[i * prime[j]] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            miu[i * prime[j]] = -miu[i];</span><br><span class="line">        &#125;</span><br><span class="line">        miu[i] += miu[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">Getmiu</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">1</span>; d&lt;=p_num; d++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(prime[d] &gt; n) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> N = n/prime[d];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>; i&lt;=N; i=j+<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            j = <span class="built_in">min</span>(N, N/(N/i));</span><br><span class="line">            Ans += (s64)(N/i) * (N/i) * (miu[j] - miu[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title>[莫比乌斯反演]Problem b</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94%5DProblem%20b/</url>
    <content><![CDATA[<h1>Problem b</h1>
<p>Time Limit: 50 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>对于给出的n个询问，每次求有多少个数对(x,y)，满足a≤x≤b，c≤y≤d，且gcd(x,y) = k，gcd(x,y)函数为x和y的最大公约数。</p>
<h2 id="Input">Input</h2>
<p>第一行一个整数n，接下来n行每行五个整数，分别表示a、b、c、d、k</p>
<h2 id="Output">Output</h2>
<p>共n行，每行一个整数表示满足要求的数对(x,y)的个数。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>2<br>
　2 5 1 5 1<br>
　1 5 1 5 2</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>14<br>
　3</p>
<h2 id="HINT">HINT</h2>
<p>100%的数据满足：1≤n≤50000，1≤a≤b≤50000，1≤c≤d≤50000，1≤k≤50000</p>
<h2 id="Solution">Solution</h2>
<p>显然可以考虑容斥，分为四块来做，剩下的就是：</p>
<p><img src="F:%5CData%5Cimg%5C20210528000823.png" alt="img"></p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">50005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> Ax,Bx,Ay,By,k;</span><br><span class="line"><span class="keyword">bool</span> isp[ONE];</span><br><span class="line"><span class="keyword">int</span> prime[ONE],p_num;</span><br><span class="line"><span class="keyword">int</span> miu[ONE],sum_miu[ONE];</span><br><span class="line">s64 Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Getmiu</span><span class="params">(<span class="keyword">int</span> MaxN)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    miu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=MaxN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isp[i])</span><br><span class="line">            prime[++p_num] = i, miu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=p_num, i*prime[j]&lt;=MaxN; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            isp[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%prime[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                miu[i * prime[j]] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            miu[i * prime[j]] = -miu[i];</span><br><span class="line">        &#125;</span><br><span class="line">        miu[i] += miu[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m) <span class="built_in">swap</span>(n,m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> N = n/k, M = m/k;   Ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>; i&lt;=N; i=j+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j = <span class="built_in">min</span>(N/(N/i), M/(M/i));</span><br><span class="line">        Ans += (s64)(N/i) * (M/i) * (miu[j] - miu[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Ax=<span class="built_in">get</span>();   Bx=<span class="built_in">get</span>();   Ay=<span class="built_in">get</span>();   By=<span class="built_in">get</span>();   k=<span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">Calc</span>(Bx,By) - <span class="built_in">Calc</span>(Ax<span class="number">-1</span>,By) - <span class="built_in">Calc</span>(Ay<span class="number">-1</span>,Bx) + <span class="built_in">Calc</span>(Ax<span class="number">-1</span>,Ay<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Getmiu</span>(ONE<span class="number">-1</span>);</span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">        <span class="built_in">Solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title>[莫比乌斯反演]YY的GCD</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94%5DYY%E7%9A%84GCD/</url>
    <content><![CDATA[<h1>YY的GCD</h1>
<p>Time Limit: 10 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p>求1&lt;=x&lt;=N, 1&lt;=y&lt;=M且gcd(x, y)为质数的(x, y)有多少对k。</p>
<h2 id="Input">Input</h2>
<p>第一行一个整数T 表述数据组数接下来T行，每行两个正整数，表示N, M。</p>
<h2 id="Output">Output</h2>
<p>T行，每行一个整数表示第 i 组数据的结果</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>2<br>
　10 10<br>
　100 100</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>30<br>
　2791</p>
<h2 id="HINT">HINT</h2>
<p>T = 10000<br>
　N, M &lt;= 10000000</p>
<h2 id="Solution">Solution</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528001103.png" alt="img"></p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">10000005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">bool</span> isp[ONE];</span><br><span class="line"><span class="keyword">int</span> prime[<span class="number">700005</span>],p_num;</span><br><span class="line"><span class="keyword">int</span> miu[ONE],sum[ONE];</span><br><span class="line">s64 Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Getmiu</span><span class="params">(<span class="keyword">int</span> MaxN)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    miu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=MaxN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isp[i])</span><br><span class="line">            prime[++p_num] = i, miu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=p_num, i*prime[j]&lt;=MaxN; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            isp[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                miu[i * prime[j]] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            miu[i * prime[j]] = -miu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=p_num; j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i*prime[j]&lt;=MaxN; i++)</span><br><span class="line">            sum[i * prime[j]] += miu[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=MaxN;i++)</span><br><span class="line">        sum[i] += sum[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m) <span class="built_in">swap</span>(n,m);</span><br><span class="line">    Ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>, j=<span class="number">0</span>; i&lt;=n; i=j+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j = <span class="built_in">min</span>(n/(n/i), m/(m/i));</span><br><span class="line">        Ans += (s64) (n/i) * (m/i) * (sum[j] - sum[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Getmiu</span>(ONE<span class="number">-1</span>);</span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">        <span class="built_in">Solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title>[莫比乌斯反演]Zap</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94%5DZap/</url>
    <content><![CDATA[<h1>Zap</h1>
<p>Time Limit: 10 Sec Memory Limit: 162 MB</p>
<h2 id="Description">Description</h2>
<p>对于给定的整数a,b和d，有多少正整数对x,y，满足x&lt;=a，y&lt;=b，并且gcd(x,y)=d。</p>
<h2 id="Input">Input</h2>
<p>第一行包含一个正整数n，表示一共有n组询问。接下来n行，每行表示一个询问，每行三个正整数，分别为a,b,d。</p>
<h2 id="Output">Output</h2>
<p>输出一个正整数，表示满足条件的整数对数。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>2<br>
　4 5 2<br>
　6 4 3</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3<br>
　2</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=n&lt;= 50000, 1&lt;=d&lt;=a,b&lt;=50000</p>
<h2 id="Solution">Solution</h2>
<p>我们运用莫比乌斯反演，然后推一下式子得到：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528000823.png" alt="img"></p>
<p>我们依旧对于下界分块求解即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">50005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">bool</span> isp[ONE];</span><br><span class="line"><span class="keyword">int</span> prime[ONE],p_num;</span><br><span class="line"><span class="keyword">int</span> miu[ONE],sum_miu[ONE];</span><br><span class="line">s64 Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Getmiu</span><span class="params">(<span class="keyword">int</span> MaxN)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    miu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=MaxN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isp[i])</span><br><span class="line">            prime[++p_num] = i, miu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=p_num, i*prime[j]&lt;=MaxN; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            isp[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%prime[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                miu[i * prime[j]] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            miu[i * prime[j]] = -miu[i];</span><br><span class="line">        &#125;</span><br><span class="line">        miu[i] += miu[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();    k=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m) <span class="built_in">swap</span>(n,m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> N = n/k, M = m/k;   Ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>; i&lt;=N; i=j+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j = <span class="built_in">min</span>(N/(N/i), M/(M/i));</span><br><span class="line">        Ans += (s64)(N/i) * (M/i) * (miu[j] - miu[i<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Getmiu</span>(ONE<span class="number">-1</span>);</span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">        <span class="built_in">Solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title>[莫比乌斯反演]jzptab</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94%5Djzptab/</url>
    <content><![CDATA[<h1>jzptab</h1>
<p>Time Limit: 10 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p>求 $ \sum_{i=1}^{n} \sum_{j=1}^{m} lcm(i,j) $</p>
<h2 id="Input">Input</h2>
<p>第一行一个 T 表示数据组数</p>
<p>接下来T行 每行两个正整数 表示N、M</p>
<h2 id="Output">Output</h2>
<p>T行 每行一个整数 表示第i组数据的结果</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>1<br>
　4 5</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>122</p>
<h2 id="HINT">HINT</h2>
<p>T &lt;= 10000<br>
　N, M&lt;=10000000</p>
<h2 id="Solution">Solution</h2>
<p>我们先根据 [Crash的数字表格] 运用莫比乌斯反演推到一个式子，然后优化求解：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528001326.png" alt="img"></p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">10000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">100000009</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">bool</span> isp[ONE];</span><br><span class="line"><span class="keyword">int</span> prime[<span class="number">700005</span>],p_num;</span><br><span class="line"><span class="keyword">int</span> f[ONE];</span><br><span class="line">s64 Ans,sum[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Getf</span><span class="params">(<span class="keyword">int</span> MaxN)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=MaxN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isp[i])</span><br><span class="line">            prime[++p_num] = i, f[i] = (-(s64)i*i%MOD+i+MOD)%MOD;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=p_num, i*prime[j]&lt;=MaxN; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            isp[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                f[i * prime[j]] = (s64)f[i] * prime[j] % MOD;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            f[i * prime[j]] = (s64)f[i] * f[prime[j]] % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=MaxN; i++)</span><br><span class="line">        sum[i] = (sum[i<span class="number">-1</span>] + f[i]) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((s64)n*(n+<span class="number">1</span>)/<span class="number">2</span>%MOD) * ((s64)m*(m+<span class="number">1</span>)/<span class="number">2</span>%MOD) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m) <span class="built_in">swap</span>(n,m);</span><br><span class="line">    Ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>, j=<span class="number">0</span>; i&lt;=n; i=j+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j = <span class="built_in">min</span>(n/(n/i), m/(m/i));</span><br><span class="line">        Ans += <span class="built_in">Sum</span>(n/i,m/i) * ((s64)sum[j] - sum[i<span class="number">-1</span>] + MOD) % MOD;</span><br><span class="line">        Ans %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Getf</span>(ONE<span class="number">-1</span>);</span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">        <span class="built_in">Solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title>[莫比乌斯反演]光</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94%5D%E5%85%89/</url>
    <content><![CDATA[<h1>光</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>天猫有一个长方形盒子，长宽分别为A，B。<br>
　　这个长方形盒子的内壁全部是镜面。<br>
　　天猫在这个盒子的左下方放了一个激光灯。<br>
　　这个灯可以照向盒子内的任意角度。<br>
　　现在天猫想要打开这个激光灯，但是他想让光线按照如下规则照射：<br>
　　　　1.这束光必须恰好打到盒子边缘反射D次，并且不能碰到任意一个角落（除了出发点以及结束点）。<br>
　　　　2.这束光必须到达盒子右上角，并且结束反射。<br>
　　天猫想要知道，所有合法的光线路线的长度平方和是多少。<br>
　　作为一个资深OIer，你应该知道输出要对10^9+7取模。</p>
<h2 id="Input">Input</h2>
<p>一行三个数，表示A、B、D。</p>
<h2 id="Output">Output</h2>
<p>一个数，表示路径平方和。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3 3 2</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>180</p>
<h2 id="HINT">HINT</h2>
<p>D&lt;=10^9, A,B&lt;=10^6</p>
<h2 id="Solution">Solution</h2>
<p>首先，我们注意到若一束光在一个平面<strong>反射</strong>，相当于<strong>镜面一侧的物体</strong>对称到<strong>镜面另一侧</strong>，而光线<strong>穿过镜面</strong>照到物体成的虚像上。<br>
　　所以，我们可以认为：有一个D∗D的网格，需要在这个网格上面找到一点**(x,y)<strong>，要满足</strong>x+y−2 = D**，这样的话，我们把**(0,0)<strong>与</strong>(x,y)<strong>连接起来，<strong>连线所经过的网格边</strong>就是</strong>镜面反射时经过的边**。也就是说，<strong>任意的合法方案</strong>与<strong>整数对(x,y)<strong>是一一对应的。<br>
　　注意，由于在反射过程中，不能碰到网格的</strong>角落</strong>，所以应该满足**(0,0)<strong>与</strong>(x,y)<strong>连线上</strong>没有其他整点**，也就是<strong>gcd(x,y)=1</strong>，即<strong>gcd(x,D+2)=1</strong>。</p>
<p>然后用莫比乌斯反演推一波式子，最后发现要用暴力解决qaq。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528010056.png" alt="img"></p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">50005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Niyu = <span class="number">166666668</span>;</span><br><span class="line"></span><br><span class="line">s64 A, B, D;</span><br><span class="line"><span class="keyword">int</span> P[ONE],num;</span><br><span class="line"><span class="keyword">int</span> vis[ONE];</span><br><span class="line">s64 Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Factor</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i*i&lt;=x; i++)</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            P[++num] = i;</span><br><span class="line">            <span class="keyword">while</span>(x % i == <span class="number">0</span>) x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(x != <span class="number">1</span>) P[++num] = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (s64)n * (n+<span class="number">1</span>) % MOD * (<span class="number">2</span>*n+<span class="number">1</span>) % MOD * Niyu % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> d = <span class="number">1</span>, N = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=num; i++)</span><br><span class="line">        <span class="keyword">if</span>(vis[i]) d = (s64)d * P[i] % MOD ,N++;</span><br><span class="line">    N = N &amp; <span class="number">1</span> ? MOD<span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    Ans = Ans + (s64)N % MOD * d % MOD * d % MOD * <span class="built_in">Calc</span>((D+<span class="number">2</span>) / d) % MOD,</span><br><span class="line">    Ans %= MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T &gt; num) &#123;<span class="built_in">Deal</span>(); <span class="keyword">return</span>;&#125;</span><br><span class="line">    vis[T] = <span class="number">1</span>; <span class="built_in">Dfs</span>(T+<span class="number">1</span>);</span><br><span class="line">    vis[T] = <span class="number">0</span>; <span class="built_in">Dfs</span>(T+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;A&gt;&gt;B&gt;&gt;D;</span><br><span class="line">    <span class="keyword">if</span>(D &amp; <span class="number">1</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="built_in">Factor</span>(D + <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">Dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, (s64)(A * A % MOD + B * B % MOD) % MOD * Ans % MOD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title>[莫比乌斯反演]完全平方数</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94%5D%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</url>
    <content><![CDATA[<h1>完全平方数</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>小X自幼就很喜欢数。<br>
　　但奇怪的是，他十分讨厌完全平方数。<br>
　　他觉得这些数看起来很令人难受。<br>
　　由此，他也讨厌所有是完全平方数的正整数倍的数。<br>
　　然而这丝毫不影响他对其他数的热爱。<br>
　　这天是小X的生日，小 W 想送一个数给他作为生日礼物。<br>
　　当然他不能送一个小X讨厌的数。他列出了所有小X不讨厌的数，然后选取了第 K个数送给了小X。<br>
　　小X很开心地收下了。<br>
　　然而现在小 W 却记不起送给小X的是哪个数了。<br>
　　你能帮他一下吗？</p>
<h2 id="Input">Input</h2>
<p>包含多组测试数据。文件第一行有一个整数 T，表示测试数据的组数。<br>
　第 2 至第 T+1 行每行有一个整数 Ki，描述一组数据，含义如题目中所描述。</p>
<h2 id="Output">Output</h2>
<p>含 T 行，分别对每组数据作出回答。第 i 行输出相应的<br>
　第 Ki 个不是完全平方数的正整数倍的数。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4<br>
　1<br>
　13<br>
　100<br>
　1234567</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>1<br>
　19<br>
　163<br>
　2030745</p>
<h2 id="HINT">HINT</h2>
<p>对于 100% 的数据有 1 ≤ Ki ≤ 10^9, T ≤ 50</p>
<h2 id="Main-idea">Main idea</h2>
<p>询问第 k 个不含完全平方因子的数。</p>
<h2 id="Source">Source</h2>
<p>显然我们可以简化一下问题，二分答案。那么我们就只需要知道：1~n中 不含完全平方因子 的数的个数。</p>
<p>然后我们思考一下容斥，用(总数-完全平方数个数)：<strong>完全平方数个数 = 至少有1个质数平方因子的数 - 至少2个质数平方因子的数 + 至少3个质数平方因子的数……</strong><br>
　　（假设你有一堆质数 {P_1, …, P_n}，A_i 表示的是 包含 P_i^2 作为因子的数的集合）</p>
<p>也就是：<strong>奇数个质数平方因子的数 - 偶数个质数平方因子的数</strong>。<br>
　　然后我们发现，那么可以枚举一个d，删除d^2相关，这时候系数也就是μ(d)，求一下莫比乌斯函数即可。当d有奇数个质数因子的时候，删除的是有奇数个质数平方因子中d^2的倍数。<br>
　　整理成式子也就是：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528000554.png" alt="img"></p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">44725</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> prime[ONE],miu[ONE],isp[ONE],p_num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Getmiu</span><span class="params">(<span class="keyword">int</span> MaxN)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    miu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=MaxN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isp[i])</span><br><span class="line">            isp[i] = <span class="number">1</span>, prime[++p_num] = i, miu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=p_num, i*prime[j]&lt;=MaxN; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            isp[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                miu[i * prime[j]] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            miu[i * prime[j]] = -miu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">s64 <span class="title">Check</span><span class="params">(s64 n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s64 res = <span class="number">0</span> ,Q = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d=<span class="number">1</span>; d&lt;=Q; d++)</span><br><span class="line">        res += miu[d] * (n/(d*d));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    s64 l = <span class="number">0</span>, r = <span class="number">2e9</span>;</span><br><span class="line">    <span class="keyword">while</span>( l &lt; r<span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        s64 mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Check</span>(mid) &lt; n) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Check</span>(r) &lt;= n) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, r);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, l);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Getmiu</span>(ONE<span class="number">-1</span>);</span><br><span class="line">    T = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">        <span class="built_in">Solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title>[莫比乌斯反演]数字表格</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94%5D%E6%95%B0%E5%AD%97%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<h1>数字表格</h1>
<p>Time Limit: 50 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>Doris刚刚学习了fibonacci数列。用f[i]表示数列的第i项，那么</p>
<p>f[0]=0</p>
<p>f[1]=1</p>
<p>f[n]=f[n-1]+f[n-2],n&gt;=2</p>
<p>Doris用老师的超级计算机生成了一个n×m的表格，第i行第j列的格子中的数是f[gcd(i,j)]，其中gcd(i,j)表示i,j的最大公约数。Doris的表格中共有n×m个数，她想知道这些数的乘积是多少。答案对10^9+7取模。</p>
<h2 id="Input">Input</h2>
<p>第一个一个数T，表示数据组数。</p>
<p>接下来T行，每行两个数n,m</p>
<h2 id="Output">Output</h2>
<p>输出T行，第i行的数是第i组数据的结果</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3<br>
　2 3<br>
　4 5<br>
　6 7</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>1<br>
　6<br>
　960</p>
<h2 id="HINT">HINT</h2>
<p>T&lt;=1000,1&lt;=n,m&lt;=10^6</p>
<h2 id="Solution">Solution</h2>
<p>运用莫比乌斯反演，得到式子：</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528001842.png" alt="img"></p>
<p>这样我们对于内外分块即可，复杂度为O(n^(0.75)*T)。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> PHI = <span class="number">1e9</span>+<span class="number">6</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> prime[ONE],p_num,miu[ONE];</span><br><span class="line"><span class="keyword">int</span> F[ONE];</span><br><span class="line"><span class="keyword">bool</span> isp[ONE];</span><br><span class="line">s64 Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>; </span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>) </span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>; </span><br><span class="line">    <span class="keyword">return</span> res*Q; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quickpow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res = (s64)res*a%MOD;</span><br><span class="line">        a = (s64)a*a%MOD;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_first</span><span class="params">(<span class="keyword">int</span> MaxN)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    F[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    F[<span class="number">0</span>]=<span class="number">0</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=MaxN; i++) F[i] = ((s64)F[i<span class="number">-1</span>]+F[i<span class="number">-2</span>]) % MOD;</span><br><span class="line">    F[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=MaxN; i++) F[i] = (s64)F[i]*F[i<span class="number">-1</span>] % MOD;</span><br><span class="line"></span><br><span class="line">    miu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=MaxN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isp[i])</span><br><span class="line">            prime[++p_num] = i, miu[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=p_num, i*prime[j]&lt;=MaxN; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            isp[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                miu[i * prime[j]] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            miu[i * prime[j]] = -miu[i];</span><br><span class="line">        &#125;</span><br><span class="line">        miu[i] += miu[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m) <span class="built_in">swap</span>(n,m);</span><br><span class="line">    s64 Ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>; i&lt;=n; i=j+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j = <span class="built_in">min</span>(n/(n/i), m/(m/i));</span><br><span class="line">        Ans += (s64)(n/i) * (m/i)%PHI * ((s64)(miu[j] - miu[i<span class="number">-1</span>] + PHI)%PHI) % PHI;</span><br><span class="line">        Ans %= PHI;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m) <span class="built_in">swap</span>(n,m);</span><br><span class="line">    Ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>; i&lt;=n; i=j+<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        j = <span class="built_in">min</span>(n/(n/i), m/(m/i));</span><br><span class="line">        Ans = Ans * <span class="built_in">Quickpow</span>( (s64)F[j] * <span class="built_in">Quickpow</span>(F[i<span class="number">-1</span>],MOD<span class="number">-2</span>) % MOD , <span class="built_in">f</span>(n/i,m/i) % PHI) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Deal_first</span>(ONE<span class="number">-1</span>);</span><br><span class="line">    T = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">        <span class="built_in">Solve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title>[莫队]序列</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%8E%AB%E9%98%9F%5D%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<h1>序列</h1>
<p>Time Limit: 20 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p>给定长度为n的序列：a1,a2,…,an，记为a[1:n]。<br>
　　类似地，a[l:r]（1≤l≤r≤N）是指序列：al,al+1,…,ar-1,ar。<br>
　　若1≤l≤s≤t≤r≤n，则称a[s:t]是a[l:r]的子序列。<br>
　　现在有q个询问，每个询问给定两个数l和r，1≤l≤r≤n，求a[l:r]的不同子序列的最小值之和。</p>
<p>例如，给定序列5,2,4,1,3，询问给定的两个数为1和3，<br>
　　那么a[1:3]有6个子序列a[1:1],a[2:2],a[3:3],a[1:2],a[2:3],a[1:3]，<br>
　　这6个子序列的最小值之和为5+2+4+2+2+2=17。</p>
<h2 id="Input">Input</h2>
<p>输入文件的第一行包含两个整数n和q，分别代表序列长度和询问数。<br>
　　接下来一行，包含n个整数，以空格隔开,第i个整数为ai，即序列第i个元素的值。接下来q行，每行包含两个整数l和r，代表一次询问。</p>
<h2 id="Output">Output</h2>
<p>对于每次询问，输出一行，代表询问的答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 5<br>
　5 2 4 1 3<br>
　1 5<br>
　1 3<br>
　2 4<br>
　3 5<br>
　2 5</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>28<br>
　17<br>
　11<br>
　11<br>
　17</p>
<h2 id="HINT">HINT</h2>
<p>1 ≤N,Q ≤ 100000,|Ai| ≤ 10^9</p>
<h2 id="Solution">Solution</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528003138.png" alt="img"></p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> block[ONE],Q;</span><br><span class="line"><span class="keyword">int</span> a[ONE],pL[ONE],pR[ONE];</span><br><span class="line"><span class="keyword">int</span> stk[ONE],top;</span><br><span class="line"><span class="keyword">int</span> Log[ONE],Bin[ONE],MinD[ONE][<span class="number">19</span>],NumD[ONE][<span class="number">19</span>];</span><br><span class="line">s64 Fl[ONE],Fr[ONE];</span><br><span class="line">s64 ans,Ans[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">&#125;oper[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(block[a.l] != block[b.l]) <span class="keyword">return</span> block[a.l] &lt; block[b.l];</span><br><span class="line">    <span class="keyword">return</span> a.r &lt; b.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Pre_Rmq</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Log[<span class="number">0</span>]=<span class="number">-1</span>;  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) Log[i] = Log[i&gt;&gt;<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    Bin[<span class="number">0</span>]=<span class="number">1</span>;   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">17</span>; i++) Bin[i] = Bin[i<span class="number">-1</span>] &lt;&lt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">17</span>;j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(i+Bin[j]<span class="number">-1</span> &lt;= n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> Next = i + Bin[j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">if</span>(MinD[i][j<span class="number">-1</span>] &lt; MinD[Next][j<span class="number">-1</span>])</span><br><span class="line">                    MinD[i][j] = MinD[i][j<span class="number">-1</span>], NumD[i][j] = NumD[i][j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    MinD[i][j] = MinD[Next][j<span class="number">-1</span>], NumD[i][j] = NumD[Next][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T = Log[y - x +<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(MinD[x][T] &lt; MinD[y-Bin[T]+<span class="number">1</span>][T]) <span class="keyword">return</span> NumD[x][T];</span><br><span class="line">    <span class="keyword">return</span> NumD[y-Bin[T]+<span class="number">1</span>][T];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">MakepL</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(top &amp;&amp; a[stk[top]] &gt; a[i])</span><br><span class="line">            pL[stk[top--]] = i;</span><br><span class="line">        stk[++top] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(top) pL[stk[top--]] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) pL[i]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">MakepR</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(top &amp;&amp; a[stk[top]] &gt; a[i])</span><br><span class="line">            pR[stk[top--]] = i;</span><br><span class="line">        stk[++top] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(top) pR[stk[top--]] = n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) pR[i]--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> s64 <span class="title">DealL</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="built_in">Get</span>(l,r);</span><br><span class="line">    <span class="keyword">return</span> (s64)a[pos] * (r-pos+<span class="number">1</span>) + Fr[l] - Fr[pos];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> s64 <span class="title">DealR</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="built_in">Get</span>(l,r);</span><br><span class="line">    <span class="keyword">return</span> (s64)a[pos] * (pos-l+<span class="number">1</span>) + Fl[r] - Fl[pos];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();    m = <span class="built_in">get</span>();    Q = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = <span class="built_in">get</span>(); block[i] = (i<span class="number">-1</span>)/Q+<span class="number">1</span>;</span><br><span class="line">        MinD[i][<span class="number">0</span>] = a[i]; NumD[i][<span class="number">0</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Pre_Rmq</span>();    <span class="built_in">MakepL</span>();    <span class="built_in">MakepR</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) Fl[i] = Fl[pL[i]<span class="number">-1</span>] + (s64)(i-pL[i]+<span class="number">1</span>) * a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--) Fr[i] = Fr[pR[i]+<span class="number">1</span>] + (s64)(pR[i]-i+<span class="number">1</span>) * a[i];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        oper[i].id = i;</span><br><span class="line">        oper[i].l = <span class="built_in">get</span>();    oper[i].r = <span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(oper+<span class="number">1</span>, oper+m+<span class="number">1</span>, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(r &lt; oper[i].r) ans += <span class="built_in">DealR</span>(l,++r);</span><br><span class="line">        <span class="keyword">while</span>(oper[i].l &lt; l) ans += <span class="built_in">DealL</span>(--l,r);</span><br><span class="line">        <span class="keyword">while</span>(r &gt; oper[i].r) ans -= <span class="built_in">DealR</span>(l,r--);</span><br><span class="line">        <span class="keyword">while</span>(oper[i].l &gt; l) ans -= <span class="built_in">DealL</span>(l++,r);</span><br><span class="line"></span><br><span class="line">        Ans[oper[i].id] = ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,Ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>莫队</tag>
      </tags>
  </entry>
  <entry>
    <title>[莫队][分块]Gty的二逼妹子序列</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%8E%AB%E9%98%9F%5D%5B%E5%88%86%E5%9D%97%5DGty%E7%9A%84%E4%BA%8C%E9%80%BC%E5%A6%B9%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<h1>Gty的二逼妹子序列</h1>
<p>Time Limit: 80 Sec Memory Limit: 28 MB</p>
<h2 id="Description">Description</h2>
<p>Autumn和Bakser又在研究Gty的妹子序列了！但他们遇到了一个难题。</p>
<p>对于一段妹子们，他们想让你帮忙求出这之内美丽度∈[a,b]的妹子的美丽度的种类数。</p>
<p>为了方便，我们规定妹子们的美丽度全都在[1,n]中。</p>
<p>给定一个长度为n的正整数序列s(1&lt;=si&lt;=n)，对于m次询问“l,r,a,b”，每次输出sl…sr中，权值∈[a,b]的权值的种类数。</p>
<h2 id="Input">Input</h2>
<p>第一行包括两个整数n,m,表示数列s中的元素数和询问数。</p>
<p>第二行包括n个整数s1…sn(1&lt;=si&lt;=n)。</p>
<p>接下来m行,每行包括4个整数l,r,a,b(1&lt;=l&lt;=r&lt;=n,1&lt;=a&lt;=b&lt;=n),意义见题目描述。</p>
<p>保证涉及的所有数在C++的int内。</p>
<p>保证输入合法。</p>
<h2 id="Output">Output</h2>
<p>对每个询问，单独输出一行，表示sl…sr中权值∈[a,b]的权值的种类数。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>10 10<br>
　4 4 5 1 4 1 5 1 2 1<br>
　5 9 1 2<br>
　3 4 7 9<br>
　4 4 2 5<br>
　2 3 4 7<br>
　5 10 4 4<br>
　3 9 1 1<br>
　1 4 5 9<br>
　8 9 3 3<br>
　2 2 1 6<br>
　8 9 1 4</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>2<br>
　0<br>
　0<br>
　2<br>
　1<br>
　1<br>
　1<br>
　0<br>
　1<br>
　2</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=n&lt;=100000,1&lt;=m&lt;=1000000</p>
<h2 id="Main-idea">Main idea</h2>
<p>求区间[l,r]内，权值在[a,b]内的权值种数。</p>
<h2 id="Solution">Solution</h2>
<p>我们直接运用莫队算法，对权值分块，记录<strong>C[x]<strong>表示</strong>权值x的个数</strong>，<strong>Bc[x]<strong>表示</strong>块x</strong>内<strong>权值在a~b中的种数</strong>。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,Q;</span><br><span class="line"><span class="keyword">int</span> a[ONE],block[ONE];</span><br><span class="line"><span class="keyword">int</span> C[ONE],Bc[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans[ONE*<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">int</span> l,r,a,b;</span><br><span class="line">&#125;oper[ONE*<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(block[a.l] != block[b.l]) <span class="keyword">return</span> block[a.l] &lt; block[b.l];</span><br><span class="line">    <span class="keyword">return</span> a.r &lt; b.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">increa</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;C[x]++; <span class="keyword">if</span>(C[x]==<span class="number">1</span>) Bc[block[x]]++;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reduce</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;C[x]--; <span class="keyword">if</span>(C[x]==<span class="number">0</span>) Bc[block[x]]--;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(block[a] == block[b])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=a;i&lt;=b;i++)</span><br><span class="line">            res += C[i]&gt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=block[a]+<span class="number">1</span>; i&lt;=block[b]<span class="number">-1</span>; i++) res += Bc[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a; i&lt;=block[a]*Q; i++)        res += C[i]&gt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=(block[b]<span class="number">-1</span>)*Q+<span class="number">1</span>; i&lt;=b; i++)    res += C[i]&gt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();    m = <span class="built_in">get</span>();</span><br><span class="line">    Q = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) a[i]=<span class="built_in">get</span>(), block[i] = (i<span class="number">-1</span>)/Q+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        oper[i].id = i;</span><br><span class="line">        oper[i].l = <span class="built_in">get</span>();    oper[i].r = <span class="built_in">get</span>();</span><br><span class="line">        oper[i].a = <span class="built_in">get</span>();    oper[i].b = <span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(oper+<span class="number">1</span>, oper+m+<span class="number">1</span>, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(r &lt; oper[i].r) <span class="built_in">increa</span>(a[++r]);</span><br><span class="line">        <span class="keyword">while</span>(oper[i].l &lt; l) <span class="built_in">increa</span>(a[--l]);</span><br><span class="line">        <span class="keyword">while</span>(r &gt; oper[i].r) <span class="built_in">reduce</span>(a[r--]);</span><br><span class="line">        <span class="keyword">while</span>(oper[i].l &gt; l) <span class="built_in">reduce</span>(a[l++]);</span><br><span class="line">        Ans[oper[i].id] = <span class="built_in">Query</span>(oper[i].a, oper[i].b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Ans[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>分块</tag>
        <tag>莫队</tag>
      </tags>
  </entry>
  <entry>
    <title>[莫队][分块]mex</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%8E%AB%E9%98%9F%5D%5B%E5%88%86%E5%9D%97%5Dmex/</url>
    <content><![CDATA[<h1>mex</h1>
<p>Time Limit: 20 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>有一个长度为n的数组{a1,a2,…,an}。m次询问，每次询问一个区间内最小没有出现过的自然数。</p>
<h2 id="Input">Input</h2>
<p>第一行n,m。<br>
　第二行为n个数。<br>
　从第三行开始，每行一个询问l,r。</p>
<h2 id="Output">Output</h2>
<p>一行一个数，表示每个询问的答案。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 5<br>
　2 1 0 2 1<br>
　3 3<br>
　2 3<br>
　2 4<br>
　1 2<br>
　3 5</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>1<br>
　2<br>
　3<br>
　0<br>
　3</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=n,m&lt;=200000, 0&lt;=ai&lt;=1e9</p>
<h2 id="Solution">Solution</h2>
<p>首先，权值&gt;n的显然是没有用的，最多排满1~n。然后我们直接使用莫队，对权值分块，查询的时候看一下<strong>这个块里面权值数是否满了</strong>，即可做到O(sqrt(n))的查询。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,Q,num;</span><br><span class="line"><span class="keyword">int</span> a[ONE],block[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans[ONE];</span><br><span class="line"><span class="keyword">int</span> C[ONE],Bc[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">&#125;oper[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(block[a.l] != block[b.l]) <span class="keyword">return</span> block[a.l] &lt; block[b.l];</span><br><span class="line">    <span class="keyword">return</span> a.r &lt; b.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">increa</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">if</span>(x&gt;n) <span class="keyword">return</span>; C[x]++; <span class="keyword">if</span>(C[x]==<span class="number">1</span>) Bc[block[x]]++;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reduce</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">if</span>(x&gt;n) <span class="keyword">return</span>; C[x]--; <span class="keyword">if</span>(C[x]==<span class="number">0</span>) Bc[block[x]]--;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">        <span class="keyword">if</span>(Bc[i] &lt; Q) &#123;pos = i; <span class="keyword">break</span>;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=(pos<span class="number">-1</span>)*Q+<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(!C[i])</span><br><span class="line">            <span class="keyword">return</span> i<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    Q = <span class="built_in">sqrt</span>(n);    num = (n<span class="number">-1</span>)/Q+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        a[i] = <span class="built_in">get</span>()+<span class="number">1</span>, block[i] = (i<span class="number">-1</span>)/Q+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        oper[i].id = i;</span><br><span class="line">        oper[i].l = <span class="built_in">get</span>();    oper[i].r = <span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(oper+<span class="number">1</span>, oper+m+<span class="number">1</span>, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(r &lt; oper[i].r) <span class="built_in">increa</span>(a[++r]);</span><br><span class="line">        <span class="keyword">while</span>(oper[i].l &lt; l) <span class="built_in">increa</span>(a[--l]);</span><br><span class="line">        <span class="keyword">while</span>(r &gt; oper[i].r) <span class="built_in">reduce</span>(a[r--]);</span><br><span class="line">        <span class="keyword">while</span>(oper[i].l &gt; l) <span class="built_in">reduce</span>(a[l++]);</span><br><span class="line">        Ans[oper[i].id] = <span class="built_in">Query</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>分块</tag>
        <tag>莫队</tag>
      </tags>
  </entry>
  <entry>
    <title>[虚树][树形DP]消耗战</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%99%9A%E6%A0%91%5D%5B%E6%A0%91%E5%BD%A2DP%5D%E6%B6%88%E8%80%97%E6%88%98/</url>
    <content><![CDATA[<h1>消耗战</h1>
<p>Time Limit: 20 Sec Memory Limit: 512 MB</p>
<h2 id="Description">Description</h2>
<p>在一场战争中，战场由n个岛屿和n-1个桥梁组成，保证每两个岛屿间有且仅有一条路径可达。现在，我军已经侦查到敌军的总部在编号为1的岛屿，而且他们已经没有足够多的能源维系战斗，我军胜利在望。已知在其他k个岛屿上有丰富能源，为了防止敌军获取能源，我军的任务是炸毁一些桥梁，使得敌军不能到达任何能源丰富的岛屿。由于不同桥梁的材质和结构不同，所以炸毁不同的桥梁有不同的代价，我军希望在满足目标的同时使得总代价最小。</p>
<p>侦查部门还发现，敌军有一台神秘机器。即使我军切断所有能源之后，他们也可以用那台机器。机器产生的效果不仅仅会修复所有我军炸毁的桥梁，而且会重新随机资源分布（但可以保证的是，资源不会分布到1号岛屿上）。不过侦查部门还发现了这台机器只能够使用m次，所以我们只需要把每次任务完成即可。</p>
<h2 id="Input">Input</h2>
<p>第一行一个整数n，代表岛屿数量。</p>
<p>接下来n-1行，每行三个整数u,v,w，代表u号岛屿和v号岛屿由一条代价为c的桥梁直接相连，保证1&lt;=u,v&lt;=n且1&lt;=c&lt;=100000。</p>
<p>第n+1行，一个整数m，代表敌方机器能使用的次数。</p>
<p>接下来m行，每行一个整数ki，代表第i次后，有ki个岛屿资源丰富，接下来k个整数h1,h2,…hk，表示资源丰富岛屿的编号。</p>
<h2 id="Output">Output</h2>
<p>输出有m行，分别代表每次任务的最小代价。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>10<br>
　1 5 13<br>
　1 9 6<br>
　2 1 19<br>
　2 4 8<br>
　2 3 91<br>
　5 6 8<br>
　7 5 4<br>
　7 8 31<br>
　10 7 9<br>
　3<br>
　2 10 6<br>
　4 5 7 8 3<br>
　3 9 4 6</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>12<br>
　32<br>
　22</p>
<h2 id="HINT">HINT</h2>
<p>对于100%的数据，2&lt;=n&lt;=250000,m&gt;=1,sigma(ki)&lt;=500000,1&lt;=ki&lt;=n-1</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定一棵带权树，每次询问给出若干个关键节点，求出删去若干边使得关键节点无法到达根的最优方案。</p>
<h2 id="Solution">Solution</h2>
<p>显然想到了树形DP，但是直接做DP会TLE。</p>
<p>我们又发现了其实没有必要把全部边都走完，那么只要构建一棵虚树，在虚树上跑DP即可。</p>
<p><strong>虚树构建方法：</strong><br>
　　<strong>1. 将关键点按照DFS序排序；</strong><br>
　　<strong>2. 求出排序后相邻两点的LCA（可以证明就是任意两点的LCA），和关键点一起按照DFS序排序，去重后得到虚树点集；</strong><br>
　　<strong>3. 用栈扫描一遍，维护从根到当前点的链（方法：如果栈顶是i的祖先，那么连边，加入i，否则弹栈）。</strong></p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">500001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,T;</span><br><span class="line"><span class="keyword">int</span> x,y,z;</span><br><span class="line"><span class="keyword">int</span> next1[ONE],first1[ONE],go1[ONE],w1[ONE],tot1;</span><br><span class="line"><span class="keyword">int</span> next[ONE],first[ONE],go[ONE],w[ONE],tot;</span><br><span class="line"><span class="keyword">int</span> size[<span class="number">250001</span>],Rank[<span class="number">250001</span>];</span><br><span class="line"><span class="keyword">int</span> dfn[<span class="number">250001</span>],cnt,num;</span><br><span class="line"><span class="keyword">int</span> f[ONE][<span class="number">25</span>],Dep[<span class="number">250001</span>];</span><br><span class="line"><span class="keyword">int</span> Output[ONE];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">250001</span>];</span><br><span class="line"><span class="keyword">int</span> Minedge[ONE];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">250001</span>];</span><br><span class="line"><span class="keyword">int</span> q[<span class="number">250001</span>],top;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">int</span> rank;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.rank&lt;b.rank;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rule</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.v==b.v &amp;&amp; a.rank==b.rank);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next1[++tot1]=first1[u];    first1[u]=tot1; go1[tot1]=v;    w1[tot1]=z;</span><br><span class="line">    next1[++tot1]=first1[v];    first1[v]=tot1; go1[tot1]=u;    w1[tot1]=z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">New_Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;  w[tot]=z;</span><br><span class="line">    next[++tot]=first[v];   first[v]=tot;   go[tot]=u;  w[tot]=z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[++cnt]=u;</span><br><span class="line">    size[u]=<span class="number">1</span>;</span><br><span class="line">    Dep[u]=Dep[father]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">19</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[u][i+<span class="number">1</span>]=f[f[u][i]][i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e=first1[u];e;e=next1[e])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=go1[e];</span><br><span class="line">        <span class="keyword">if</span>(v==father) <span class="keyword">continue</span>;</span><br><span class="line">        f[v][<span class="number">0</span>]=u;</span><br><span class="line">        Minedge[v]=<span class="built_in">min</span>(w1[e],Minedge[u]);</span><br><span class="line">        <span class="built_in">Dfs</span>(v,u);</span><br><span class="line">        size[u]+=size[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Dep[x]&lt;Dep[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Dep[f[x][i]]&gt;=Dep[y]) x=f[x][i];</span><br><span class="line">        <span class="keyword">if</span>(x==y) <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(f[x][i]!=f[y][i])</span><br><span class="line">        &#123;</span><br><span class="line">            x=f[x][i];</span><br><span class="line">            y=f[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Rank[u]&lt;=Rank[v] &amp;&amp; Rank[v]&lt;=Rank[u]+size[u]<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=a[i].v;</span><br><span class="line">        <span class="keyword">while</span>(!<span class="built_in">Check</span>(q[top],x)) top--;</span><br><span class="line">        <span class="built_in">New_Add</span>(q[top],x,Minedge[x]);</span><br><span class="line">        q[++top]=x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tree_dp</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dp[u]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=go[e];</span><br><span class="line">        <span class="keyword">if</span>(v==father) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">Tree_dp</span>(v,u);</span><br><span class="line">        <span class="keyword">if</span>(vis[v]) dp[u]+=w[e];</span><br><span class="line">        <span class="keyword">else</span> dp[u]+=<span class="built_in">min</span>(dp[v],(<span class="keyword">long</span> <span class="keyword">long</span>)w[e]);</span><br><span class="line">    &#125;</span><br><span class="line">    first[u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();    z=<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Add</span>(x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(Minedge,<span class="number">63</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(Minedge));</span><br><span class="line">    <span class="built_in">Dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    Minedge[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) Rank[dfn[i]]=i;</span><br><span class="line"></span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        m=<span class="built_in">get</span>();</span><br><span class="line">        num=<span class="number">0</span>;</span><br><span class="line">        N=m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[++num].v=<span class="built_in">get</span>();</span><br><span class="line">            a[num].rank=Rank[a[num].v];</span><br><span class="line">            vis[a[num].v]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sort</span>(a+<span class="number">1</span>,a+num+<span class="number">1</span>,cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[++num].v=<span class="built_in">LCA</span>(a[i].v,a[i<span class="number">-1</span>].v);</span><br><span class="line">            a[num].rank=Rank[a[num].v];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        a[++num].v=<span class="number">1</span>; vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        a[num].rank=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sort</span>(a+<span class="number">1</span>,a+num+<span class="number">1</span>,cmp);</span><br><span class="line">        num=<span class="built_in">unique</span>(a+<span class="number">1</span>,a+num+<span class="number">1</span>,rule)<span class="number">-1</span>-a;</span><br><span class="line"></span><br><span class="line">        top=<span class="number">0</span>;  q[++top]=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">Deal</span>();</span><br><span class="line">        <span class="built_in">Tree_dp</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,dp[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++) a[i].rank=a[i].v=vis[a[i].v]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>DP</category>
      </categories>
      <tags>
        <tag>虚树</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title>[计算几何]下落的圆盘</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%5D%E4%B8%8B%E8%90%BD%E7%9A%84%E5%9C%86%E7%9B%98/</url>
    <content><![CDATA[<h1>下落的圆盘</h1>
<p>Time Limit: 10 Sec Memory Limit: 162 MB</p>
<h2 id="Description">Description</h2>
<p>有n个圆盘从天而降，后面落下的可以盖住前面的。求最后形成的封闭区域的周长。</p>
<p>看下面这副图, 所有的红色线条的总长度即为所求。</p>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528010616.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p>第一行为1个整数n<br>
　接下来n行每行3个实数,ri,xi,yi,表示下落时第i个圆盘的半径和圆心坐标.</p>
<h2 id="Output">Output</h2>
<p>最后的周长，保留三位小数</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>2<br>
　1 0 0<br>
　1 1 0</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>10.472</p>
<h2 id="HINT">HINT</h2>
<p>n &lt;= 1000</p>
<h2 id="Solution">Solution</h2>
<p>显然是一道计算几何题。</p>
<p>考虑一个圆对于答案的贡献，显然是<strong>这个圆的周长</strong> - <strong>后面的圆把它覆盖掉的周长的并</strong>。那么我们就考虑怎么求这个并。</p>
<p>先考虑<strong>怎样记录下一个答案</strong>，显然<strong>直接扣掉单个圆对它的覆盖</strong>是<strong>不可行</strong>的，要减去<strong>重叠的情况</strong>。</p>
<p>既然边不可行，我们就用角度。显然，若我们求出 <strong>两圆交点的角度</strong> 即可解决这题。</p>
<p>我们考虑求<strong>圆A被圆B覆盖的角度</strong>：现在我们有<strong>两个圆的半径、圆心距</strong>。我们就可以得到 <strong>圆A与圆B</strong>的<strong>圆心连线</strong> 与 <strong>圆A半径</strong> 的夹角。</p>
<p>我们也可以知道 <strong>圆A与圆B</strong>的<strong>圆心连线</strong> 与 <strong>x轴的夹角</strong>。</p>
<p>这样的话，就可以把<strong>单个圆对于它的贡献记录</strong>到栈里面，最后扫一遍求一下<strong>剩余的角度</strong>，<strong>乘上R</strong>就是它对于答案的贡献了。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y, r;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> a, b;</span><br><span class="line">&#125;stk[ONE];</span><br><span class="line"><span class="keyword">int</span> top;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> circle &amp;a, <span class="keyword">const</span> circle &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.a != b.a) <span class="keyword">return</span> a.a &lt; b.a;</span><br><span class="line">    <span class="keyword">return</span> a.b &lt; b.b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sqr</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;<span class="keyword">return</span> x * x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">(power a, power b)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">sqr</span>(a.x - b.x) + <span class="built_in">sqr</span>(a.y - b.y));&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Calc</span><span class="params">(power a, power b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> A = a.r, B = b.r, C = <span class="built_in">dist</span>(a, b);</span><br><span class="line">    <span class="keyword">double</span> cosB = (<span class="built_in">sqr</span>(A) + <span class="built_in">sqr</span>(C) - <span class="built_in">sqr</span>(B)) / (<span class="number">2</span> * A * C);</span><br><span class="line">    <span class="keyword">double</span> angle = <span class="built_in">atan2</span>(a.x - b.x, a.y - b.y), add = <span class="built_in">acos</span>(cosB);</span><br><span class="line">    stk[++top] = (circle)&#123;angle - add, angle + add&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">init</span><span class="params">(power a, power b)</span> </span>&#123;<span class="keyword">return</span> a.r + <span class="built_in">dist</span>(a, b) &lt;= b.r;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sect</span><span class="params">(power a, power b)</span> </span>&#123;<span class="keyword">return</span> <span class="built_in">fabs</span>(a.r - b.r) &lt; <span class="built_in">dist</span>(a, b) &amp;&amp; <span class="built_in">dist</span>(a, b) &lt; a.r + b.r;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Deal</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = id+<span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">init</span>(a[id], a[i])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = id+<span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">sect</span>(a[id], a[i])) <span class="built_in">Calc</span>(a[id], a[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(stk[i].a &lt; <span class="number">0</span>) stk[i].a += <span class="number">2</span> * pi;</span><br><span class="line">        <span class="keyword">while</span>(stk[i].b &lt; <span class="number">0</span>) stk[i].b += <span class="number">2</span> * pi;</span><br><span class="line">        <span class="keyword">if</span>(stk[i].a &gt; stk[i].b) stk[++top] = (circle)&#123;<span class="number">0</span>, stk[i].b&#125;, stk[i].b = <span class="number">2</span>*pi;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(stk + <span class="number">1</span>, stk + top + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">double</span> last = <span class="number">0.0</span>, sum = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; i++)</span><br><span class="line">        <span class="keyword">if</span>(stk[i].a &gt; last) sum += stk[i].a - last, last = stk[i].b;</span><br><span class="line">    <span class="keyword">else</span> last = <span class="built_in">max</span>(last, stk[i].b);</span><br><span class="line"></span><br><span class="line">    sum += <span class="number">2</span> * pi - last;</span><br><span class="line">    <span class="keyword">return</span> a[id].r * sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf %lf&quot;</span>, &amp;a[i].r, &amp;a[i].x, &amp;a[i].y);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        Ans += <span class="built_in">Deal</span>(i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.3lf&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title>[计算几何]数矩形</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%5D%E6%95%B0%E7%9F%A9%E5%BD%A2/</url>
    <content><![CDATA[<h1>数矩形</h1>
<p>Time Limit: 20 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>最近某歌手在研究自己的全国巡回演出，他将所有心仪的城市都用平面上一个点来表示，并打算从中挑选出4个城市作为这次巡回演出的地点。<br>
　　为了显示自己与众不同，他要求存在一个矩形使得挑选出的4个点恰好是这个矩形的4个顶点，并且希望这个矩形的面积最大。<br>
　　这可急坏了经纪人，于是他向全球歌迷征集方案，当然你这位歌迷一定不会错过这个机会。</p>
<h2 id="Input">Input</h2>
<p>第一行是一个正整数N，表示平面上点的个数（即某歌手心仪的城市数）。<br>
　　接下来N行，每行是两个整数Xi,Yi，表示对应点的坐标。</p>
<h2 id="Output">Output</h2>
<p>输出一个数，表示最大矩形面积。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>8<br>
　　-2 3<br>
　　-2 -1<br>
　　0 3<br>
　　0 -1<br>
　　1 -1<br>
　　2 1<br>
　　-3 1<br>
　　-2 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>10</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=N&lt;=1500 , -10^8&lt;=Xi,Yi&lt;=10^8</p>
<h2 id="Main-idea">Main idea</h2>
<p>给出平面上的若干个点，求出可由这些点作为顶点构成的矩形的最大面积。</p>
<h2 id="Solution">Solution</h2>
<p>显然是一道计算几何题。<br>
　　先考虑矩形的特征：<strong>对角线长度相同并且对角线的中点在同一位置</strong>。<br>
　　然后我们可以n^2枚举出所有对角线的长度并且求出其中点位置，按照长度为第一关键字，中点坐标为第二关键字sort一遍，那么显然可构成矩形的四个点的对角线一定是<strong>连续</strong>的。<br>
　　然后我们枚举所有情况，用矢量叉积来求矩形的面积。<br>
　　**证明一下复杂度：**发现最坏情况应该是所有的中点聚集在同一个点上，以其作为圆心，对角线长度作为直径拓展出成为一个圆，这样的话会有1500/2条长度相同的需要枚举的边，但是由于这是一个圆，所以两点连线不作为直径的构成的边几乎都是不需要枚举的，复杂度正确。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">1505</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> cnt,num;</span><br><span class="line"><span class="keyword">int</span> l[ONE*ONE],r[ONE*ONE];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x,y;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> dist;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    power mid;</span><br><span class="line">&#125;b[ONE*ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> point &amp;a,<span class="keyword">const</span> point &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.dist&lt;b.dist) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a.dist&gt;b.dist) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a.dist==b.dist)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a.mid.x&lt;b.mid.x) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a.mid.y&lt;b.mid.y) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Get_dist</span><span class="params">(power a,power b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Get_area</span><span class="params">(power a1,power a2,power b1,power b2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x1=a2.x-a1.x, y1=a2.y-a1.y;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x2=b2.x-b1.x, y2=b2.y-b1.y;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>( (x1*y2)-(x2*y1) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=num;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(l[k]==r[k]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l[k];i&lt;=r[k];i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=r[k];j++)</span><br><span class="line">            &#123;</span><br><span class="line">                Ans=<span class="built_in">max</span>(Ans,<span class="built_in">Get_area</span>( a[b[i].i],a[b[i].j] , a[b[j].i],a[b[j].j]) );</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i].x=<span class="built_in">get</span>();   a[i].y=<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            b[++cnt].dist=<span class="built_in">Get_dist</span>(a[i],a[j]);</span><br><span class="line">            b[cnt].mid.x=(a[i].x+a[j].x);</span><br><span class="line">            b[cnt].mid.y=(a[i].y+a[j].y);</span><br><span class="line">            b[cnt].i=i; b[cnt].j=j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(b+<span class="number">1</span>,b+cnt+<span class="number">1</span>,cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=cnt)</span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">        l[++num]=i;</span><br><span class="line">        <span class="keyword">while</span>(b[i].dist==b[i+<span class="number">1</span>].dist &amp;&amp; b[i].mid.x==b[i+<span class="number">1</span>].mid.x &amp;&amp; b[i].mid.y==b[i+<span class="number">1</span>].mid.y &amp;&amp; i&lt;=cnt)</span><br><span class="line">        &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        r[num]=i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Deal</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,Ans/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>数学</category>
      </categories>
      <tags>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title>[贪心]生日礼物</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%B4%AA%E5%BF%83%5D%E7%94%9F%E6%97%A5%E7%A4%BC%E7%89%A9/</url>
    <content><![CDATA[<h1>生日礼物</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>ftiasch 18岁生日的时候，lqp18_31给她看了一个神奇的序列 <em>A1</em>, <em>A2</em>, …, <em>AN</em>. 她被允许选择不超过 <em>M</em> 个连续的部分作为自己的生日礼物。</p>
<p>自然地，ftiasch想要知道选择元素之和的最大值。你能帮助她吗？</p>
<h2 id="Input">Input</h2>
<p>第1行，两个整数 <em>N</em> 和 <em>M</em> , 序列的长度和可以选择的部分。</p>
<p>第2行， <em>N</em> 个整数 <em>A1</em>, <em>A2</em>, …, <em>AN</em> , 序列。</p>
<h2 id="Output">Output</h2>
<p>一个整数，最大的和。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 2<br>
　2 -3 2 -1 2</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>5</p>
<h2 id="HINT">HINT</h2>
<p>1 ≤ <em>N</em> ≤ 105， 0 ≤ <em>M</em> ≤ 105， 0 ≤ |<em>Ai</em>| ≤ 104</p>
<h2 id="Solution">Solution</h2>
<p>首先，我们可以把<strong>权值正负相同的连续的一段</strong>合并起来。Ans+=（所有正数），块数++。</p>
<p>然后把每一段的<strong>绝对值</strong>加入到<strong>小根堆</strong>里面。每次贪心取出最小的来，<strong>块数减去 1 直到满足题目要求</strong>为止。</p>
<p>为什么这样可以对呢？我们来讨论一下：</p>
<p>1. 如果删去的段是<strong>正数</strong>， 那么相当于<strong>不取这个</strong>。</p>
<p>2. 如果删去的段是<strong>负数</strong>，那么相当于<strong>取了这个段</strong>合并它左右的两个段。</p>
<p>但是！这样会有一个问题！就是无法考虑<strong>连续取5个段及以上</strong>的情况，并且无法保证：<strong>取了一个数不取相连的两个数</strong>（会导致块数不减）。</p>
<p>所以判断一下，每次<strong>取段</strong>的时候，<strong>删去左右两个小段</strong>，<strong>加上一个大段</strong>（<strong>他们三个合并的值</strong>）即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[ONE], A[ONE];</span><br><span class="line"><span class="keyword">int</span> pre[ONE], suc[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans, block;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id, val;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(power a) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.val &lt; val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue &lt;power&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();    m = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">int</span> from = <span class="number">1</span>;    <span class="keyword">while</span>(a[from] &lt;= <span class="number">0</span>) from++;</span><br><span class="line">    <span class="keyword">int</span> to = n;        <span class="keyword">while</span>(a[to] &lt;= <span class="number">0</span>) to--;</span><br><span class="line"></span><br><span class="line">    n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;from &lt;= to;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( (a[from<span class="number">-1</span>] &lt;= <span class="number">0</span> &amp;&amp; a[from] &lt;= <span class="number">0</span>) || (a[from<span class="number">-1</span>] &gt; <span class="number">0</span> &amp;&amp; a[from] &gt; <span class="number">0</span>))</span><br><span class="line">            A[n] += a[from];</span><br><span class="line">        <span class="keyword">else</span> A[++n] = a[from];</span><br><span class="line">        from++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i] = i - <span class="number">1</span>;</span><br><span class="line">        suc[i] = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(A[i] &gt; <span class="number">0</span>) Ans += A[i], block++;</span><br><span class="line">        A[i] = <span class="built_in">abs</span>(A[i]);</span><br><span class="line">        q.<span class="built_in">push</span>( (power)&#123;i, A[i]&#125; );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(block &lt;= m) &#123;<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Ans); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line">    pre[<span class="number">1</span>] = suc[n] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(;;)</span><br><span class="line">        &#123;</span><br><span class="line">            power u = q.<span class="built_in">top</span>();</span><br><span class="line">            <span class="keyword">if</span>(u.val != A[u.id]) q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        power u = q.<span class="built_in">top</span>();    q.<span class="built_in">pop</span>();</span><br><span class="line">        Ans -= u.val;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pre[u.id] == <span class="number">0</span>)    A[suc[u.id]] = INF, pre[suc[u.id]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(suc[u.id] == <span class="number">0</span>)    A[pre[u.id]] = INF, suc[pre[u.id]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            A[u.id] = A[pre[u.id]] + A[suc[u.id]] - A[u.id];</span><br><span class="line">            A[pre[u.id]] = A[suc[u.id]] = INF;</span><br><span class="line">            pre[u.id] = pre[pre[u.id]];</span><br><span class="line">            suc[u.id] = suc[suc[u.id]];</span><br><span class="line">            pre[suc[u.id]] = suc[pre[u.id]] = u.id;</span><br><span class="line">            q.<span class="built_in">push</span>( (power)&#123;u.id, A[u.id]&#125; );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        block--;    <span class="keyword">if</span>(block &lt;= m) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>[贪心]免费道路</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%B4%AA%E5%BF%83%5D%E5%85%8D%E8%B4%B9%E9%81%93%E8%B7%AF/</url>
    <content><![CDATA[<h1>免费道路</h1>
<p>Time Limit: 2 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527185543.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527185551.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527185556.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>5 7 2<br>
　1 3 0<br>
　4 5 1<br>
　3 2 0<br>
　5 3 1<br>
　4 3 0<br>
　1 2 1<br>
　4 2 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3 2 0<br>
　4 3 0<br>
　5 3 1<br>
　1 2 1</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=n&lt;=20000,1&lt;=m&lt;=100000,0&lt;=k&lt;=n-1</p>
<h2 id="Main-idea">Main idea</h2>
<p>一种0边，一种1边，求一棵最小生成树并且正好有K条0边，输出其中一种方案。</p>
<h2 id="Solution">Solution</h2>
<p>显然要搞一棵符合题目的生成树。</p>
<p>每次要加入0边或者1边，直接做肯定不可行，考虑有什么0边是<strong>一定要加入</strong>的。</p>
<p>只需要输出一种方案，所以我们<strong>先加入所有可加的1边</strong>，如果图不联通则加入可加入的0边，那么这几条0边在我们所求的方案中是一定需要加入的。</p>
<p>这时候判断一下，如果此时加入的0边数量&gt;K，或者图还是无法联通的话则无解。然后处理完毕前半部分，考虑接下来如何实现。</p>
<p>因为我们要使得图为树并且正好有K条0边，运用贪心，想到了<strong>加入0边到K条位置</strong>（如果到不了K条则也无解），然后剩下的用1边来填。</p>
<p>验证一下这样做的可行性：由于我们在前半部分使得了<strong>可以成为一棵树</strong>，那么显然我们在后半部分中每加入一条0边，则在前半部分中一定有一条1边可以替换使得可行（因为前半部分是尽量加入1边）。每次连边判环运用Kruscal即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">1000001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> Edge_k;</span><br><span class="line"><span class="keyword">int</span> fa[ONE];</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> Choose[ONE];</span><br><span class="line"><span class="keyword">int</span> ans_num;</span><br><span class="line"><span class="keyword">int</span> the0;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,v;</span><br><span class="line">&#125;a[ONE],Ans_edg[ONE];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x]!=x) fa[x]=<span class="built_in">find</span>(fa[x]);</span><br><span class="line">    <span class="keyword">return</span> fa[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Un</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a1=<span class="built_in">find</span>(a);</span><br><span class="line">    <span class="keyword">int</span> b1=<span class="built_in">find</span>(b);</span><br><span class="line">    <span class="keyword">if</span>(a1!=b1) fa[a1]=b1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add_set</span><span class="params">(<span class="keyword">int</span> N,<span class="keyword">int</span> v,<span class="keyword">int</span> ci)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> kd=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(kd&gt;=N) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(a[i].v!=v) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x=a[i].x,y=a[i].y;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(x)!=<span class="built_in">find</span>(y))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Un</span>(x,y);</span><br><span class="line">            <span class="keyword">if</span>(ci&gt;=<span class="number">2</span>)    Ans_edg[++ans_num]=a[i];</span><br><span class="line">            <span class="keyword">if</span>(ci==<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Choose[++num]=i;</span><br><span class="line">            &#125;</span><br><span class="line">            Edge_k++;</span><br><span class="line">            kd++;</span><br><span class="line">            <span class="keyword">if</span>(ci==<span class="number">3</span>) the0++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Edge_k==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();    k=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i].x=<span class="built_in">get</span>();    a[i].y=<span class="built_in">get</span>();    a[i].v=<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    Edge_k=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Add_set</span>(INF,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Add_set</span>(INF,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(Edge_k&lt;n<span class="number">-1</span> || num&gt;k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no solution\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Edge_k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=Choose[i];</span><br><span class="line">        <span class="built_in">Un</span>(a[x].x,a[x].y);</span><br><span class="line">        Edge_k++;</span><br><span class="line">        <span class="keyword">if</span>(Edge_k==n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Add_set</span>(k-num,<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span>(the0!=k-num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no solution\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Add_set</span>(INF,<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ans_num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>,Ans_edg[i].x,Ans_edg[i].y,Ans_edg[i].v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>[费用流][分数规划]新生舞会</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%B4%B9%E7%94%A8%E6%B5%81%5D%5B%E5%88%86%E6%95%B0%E8%A7%84%E5%88%92%5D%E6%96%B0%E7%94%9F%E8%88%9E%E4%BC%9A/</url>
    <content><![CDATA[<h1>新生舞会</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>学校组织了一次新生舞会，Cathy作为经验丰富的老学姐，负责为同学们安排舞伴。有n个男生和n个女生参加舞会买一个男生和一个女生一起跳舞，互为舞伴。</p>
<p>Cathy收集了这些同学之间的关系，比如两个人之前认识没计算得出 a[i][j] ，表示第i个男生和第j个女生一起跳舞时他们的喜悦程度。</p>
<p>Cathy还需要考虑两个人一起跳舞是否方便，比如身高体重差别会不会太大，计算得出 b[i][j]，表示第i个男生和第j个女生一起跳舞时的不协调程度。</p>
<p>当然，还需要考虑很多其他问题。Cathy想先用一个程序通过a[i][j]和b[i][j]求出一种方案，再手动对方案进行微调。</p>
<p>Cathy找到你，希望你帮她写那个程序。</p>
<p>一个方案中有n对舞伴，假设没对舞伴的喜悦程度分别是a’1,a’2,…,a’n，</p>
<p>假设每对舞伴的不协调程度分别是b’1,b’2,…,b’n。</p>
<p>令C=(a’1+a’2+…+a’n)/(b’1+b’2+…+b’n),Cathy希望C值最大。</p>
<h2 id="Input">Input</h2>
<p>第一行一个整数n。</p>
<p>接下来n行，每行n个整数，第i行第j个数表示a[i][j]。</p>
<p>接下来n行，每行n个整数，第i行第j个数表示b[i][j]。</p>
<h2 id="Output">Output</h2>
<p>一行一个数，表示C的最大值。四舍五入保留6位小数，选手输出的小数需要与标准输出相等</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3<br>
　19 17 16<br>
　25 24 23<br>
　35 36 31<br>
　9 5 6<br>
　3 4 2<br>
　7 8 9</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>5.357143</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=n&lt;=100,1&lt;=a[i][j],b[i][j]&lt;=10^4</p>
<h2 id="Main-idea">Main idea</h2>
<p>选择两个人&lt;i,j&gt;会获得A[i][j]，以及B[i][j]，选择后不能再选，要求使得ΣA[i][j]/ΣB[i][j]最大。</p>
<h2 id="Solution">Solution</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528002418.png" alt="img"></p>
<p><strong>最大费用最大流</strong>的话，可以把权值取相反数，然后跑<strong>最小费用最大流</strong>。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> EDG = <span class="number">25005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">21474836</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> A[ONE][ONE],B[ONE][ONE];</span><br><span class="line"><span class="keyword">int</span> next[EDG],first[ONE],go[EDG],from[EDG],pas[EDG],tot;</span><br><span class="line"><span class="keyword">int</span> vis[ONE],q[<span class="number">1000001</span>],pre[ONE],tou,wei;</span><br><span class="line"><span class="keyword">double</span> w[EDG],dist[ONE];</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="keyword">double</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> flow,<span class="keyword">double</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;  pas[tot]=flow;  w[tot]=z;   from[tot]=u;</span><br><span class="line">    next[++tot]=first[v];   first[v]=tot;   go[tot]=u;  pas[tot]=<span class="number">0</span>;     w[tot]=-z;  from[tot]=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=S;i&lt;=T;i++) dist[i]=INF;</span><br><span class="line">    tou = <span class="number">0</span>;    wei = <span class="number">1</span>;</span><br><span class="line">    q[<span class="number">1</span>] = S;   vis[S] = <span class="number">1</span>; dist[S] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(tou &lt; wei)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q[++tou];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(dist[v] &gt; dist[u]+w[e] &amp;&amp; pas[e])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v] = dist[u]+w[e]; pre[v] = e;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[++wei] = v;</span><br><span class="line">                    vis[v] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist[T] != INF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e=pre[T]; go[e]!=S; e=pre[from[e]]) x = <span class="built_in">min</span>(x,pas[e]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e=pre[T]; go[e]!=S; e=pre[from[e]])</span><br><span class="line">    &#123;</span><br><span class="line">        pas[e] -= x;</span><br><span class="line">        pas[((e<span class="number">-1</span>)^<span class="number">1</span>)+<span class="number">1</span>] += x;</span><br><span class="line">        Ans += w[e]*x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Check</span><span class="params">(<span class="keyword">double</span> ans)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(first,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(first));  tot=<span class="number">0</span>;</span><br><span class="line">    S=<span class="number">0</span>;    T=<span class="number">2</span>*n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Add</span>(S,i,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="built_in">Add</span>(i,j+n, <span class="number">1</span>,-(A[i][j] - ans*B[i][j]));</span><br><span class="line">        <span class="built_in">Add</span>(i+n,T,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>()) <span class="built_in">Deal</span>();</span><br><span class="line">    <span class="keyword">return</span> -Ans &gt;= eps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            A[i][j] = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            B[i][j] = <span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> l = <span class="number">0</span>, r = <span class="number">1e4</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r - <span class="number">1e-7</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (l+r)/<span class="number">2.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">Check</span>(r)) <span class="built_in">printf</span>(<span class="string">&quot;%.6lf&quot;</span>, r);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%.6lf&quot;</span>, l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>费用流</tag>
        <tag>分数规划</tag>
      </tags>
  </entry>
  <entry>
    <title>[费用流]数字配对</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%B4%B9%E7%94%A8%E6%B5%81%5D%E6%95%B0%E5%AD%97%E9%85%8D%E5%AF%B9/</url>
    <content><![CDATA[<h1>数字配对</h1>
<p>Time Limit: 10 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>有 n 种数字，第 i 种数字是 ai、有 bi 个，权值是 ci。</p>
<p>若两个数字 ai、aj 满足，ai 是 aj 的倍数，且 ai/aj 是一个质数，</p>
<p>那么这两个数字可以配对，并获得 ci×cj 的价值。</p>
<p>一个数字只能参与一次配对，可以不参与配对。</p>
<p>在获得的价值总和不小于 0 的前提下，求最多进行多少次配对。</p>
<h2 id="Input">Input</h2>
<p>第一行一个整数 n。</p>
<p>第二行 n 个整数 a1、a2、……、an。</p>
<p>第三行 n 个整数 b1、b2、……、bn。</p>
<p>第四行 n 个整数 c1、c2、……、cn。</p>
<h2 id="Output">Output</h2>
<p>一行一个数，最多进行多少次配对</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3<br>
　2 4 8<br>
　2 200 7<br>
　-1 -2 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>4</p>
<h2 id="HINT">HINT</h2>
<p>n≤200，ai≤10^9，bi≤10^5，∣ci∣≤10^5</p>
<h2 id="Solution">Solution</h2>
<p>显然是一个费用流，并且这可以是一个二分图，由于 ai/aj 要是质数，那显然可以根据<strong>质因子个数的奇偶</strong>分类。</p>
<p>然后跑一跑<strong>最大费用最大流</strong>。判断一下值要&gt;=0即可统计入答案。mmpBearChild查了一个下午错，发现是INF开小了qaq。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> next nxt</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">400005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N], c[N];</span><br><span class="line">s64 dist[N];</span><br><span class="line"><span class="keyword">int</span> vis[N], q[N], pre[N];</span><br><span class="line"><span class="keyword">int</span> first[M], go[M], next[M], pas[M], from[M], tot;</span><br><span class="line"><span class="keyword">int</span> pNum[M];</span><br><span class="line"><span class="keyword">int</span> odd[M],Onum, eve[M],Enum;</span><br><span class="line"><span class="keyword">int</span> S, T, Ans;</span><br><span class="line"><span class="keyword">int</span> prime[M], isp[M], p;</span><br><span class="line">s64 Val, w[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">    <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">    res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Getp</span><span class="params">(<span class="keyword">int</span> MaxN)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i &lt;= MaxN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isp[i]) prime[++p] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j &lt;= prime[p] &amp;&amp; i*prime[j] &lt;= MaxN; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            isp[i * prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Factor</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=p; i++)</span><br><span class="line">        <span class="keyword">if</span>(x % prime[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x /= prime[i];</span><br><span class="line">            res++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PD</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; y) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span> || y==<span class="number">0</span> || y%x!=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    x = y / x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;x; i++)</span><br><span class="line">    <span class="keyword">if</span>(x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> flow, s64 z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;  pas[tot]=flow;  w[tot]=z;   from[tot]=u;</span><br><span class="line">    next[++tot]=first[v];   first[v]=tot;   go[tot]=u;  pas[tot]=<span class="number">0</span>;     w[tot]=-z;  from[tot]=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=S; i&lt;=T; i++) dist[i] = <span class="number">-1e18</span>;</span><br><span class="line">    <span class="keyword">int</span> tou = <span class="number">0</span>, wei = <span class="number">1</span>;</span><br><span class="line">    q[<span class="number">1</span>] = S;   vis[S] = <span class="number">1</span>; dist[S] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(tou &lt; wei)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q[++tou];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u]; e; e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(dist[v] &lt; dist[u] + w[e] &amp;&amp; pas[e])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v] = dist[u] + w[e];</span><br><span class="line">                pre[v] = e;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[++wei] = v;</span><br><span class="line">                    vis[v] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist[T] != <span class="number">-1e18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e=pre[T]; e; e=pre[from[e]]) x = <span class="built_in">min</span>(x, pas[e]);</span><br><span class="line">    <span class="keyword">if</span>(Val + dist[T] * x &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=pre[T]; e; e=pre[from[e]])</span><br><span class="line">        &#123;</span><br><span class="line">            pas[e] -= x;</span><br><span class="line">            pas[((e<span class="number">-1</span>)^<span class="number">1</span>)+<span class="number">1</span>] += x;</span><br><span class="line">        &#125;</span><br><span class="line">        Val += dist[T] * x;</span><br><span class="line">        Ans += x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, Ans - Val / dist[T]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">Getp</span>(M - <span class="number">5</span>);</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) a[i] = <span class="built_in">get</span>(), pNum[i] = <span class="built_in">Factor</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) b[i] = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) c[i] = <span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    S = <span class="number">0</span>; T = n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(pNum[i] &amp; <span class="number">1</span>) <span class="built_in">Add</span>(S,i, b[i],<span class="number">0</span>), odd[++Onum] = i;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">Add</span>(i,T, b[i],<span class="number">0</span>), eve[++Enum] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=Onum; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=Enum; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = odd[i], y = eve[j];</span><br><span class="line">        <span class="keyword">if</span>( <span class="built_in">PD</span>(a[x], a[y]) )</span><br><span class="line">            <span class="built_in">Add</span>(x,y, INF,(s64)c[x]*c[y]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>()) <span class="built_in">Deal</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, Ans - Val / dist[T]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title>[费用流]猜测</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%B4%B9%E7%94%A8%E6%B5%81%5D%E7%8C%9C%E6%B5%8B/</url>
    <content><![CDATA[<h1>猜测</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194523.png" alt="img"></p>
<h2 id="Input">Input</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194525.png" alt="img"></p>
<h2 id="Output">Output</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194527.png" alt="img"></p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3<br>
　　1 1<br>
　　1 2<br>
　　2 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>3<br>
　　explain:<br>
　　(1,1),(1,1),(2,2)不是一个合法猜测（有相同的格子），因此不管怎么猜总是能全部猜中。</p>
<h2 id="HINT">HINT</h2>
<p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527194529.png" alt="img"></p>
<h2 id="Main-idea">Main idea</h2>
<p>给定了若干个标准点，用这些点的横纵坐标分为x集和y集，定义猜点表示从x集和y集中各选一个，不能猜出重复的点，问在所有合法方案中最少包含上述几个标准点。</p>
<h2 id="Solution">Solution</h2>
<p>我们看到了这道题目，考虑从费用流的方法下手。</p>
<p>我们从<strong>S-&gt;x集：容量为数字出现次数，费用为0</strong>；<strong>y集-&gt;T：容量为数字出现次数，费用为0</strong>；<strong>x集-&gt;y集：容量为1，若组合成了标准点则费用为1，否则为0</strong>。</p>
<p>然后我们这样连边，又由于题目要的是最少包含几个点，那么显然<strong>最小费用最大流</strong>就是答案了。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">2000001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,x,y;</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="keyword">int</span> E[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> next[ONE],first[ONE],go[ONE],pas[ONE],Fro[ONE],tot=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> from[ONE],q[<span class="number">1000001</span>],dist[<span class="number">200001</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[ONE];</span><br><span class="line"><span class="keyword">int</span> tou,wei;</span><br><span class="line"><span class="keyword">int</span> Ans,w[ONE];</span><br><span class="line"><span class="keyword">int</span> li[ONE],li_num;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;a[ONE],time[ONE],Max;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> liu,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;  w[tot]=z;   pas[tot]=liu;   Fro[tot]=u;</span><br><span class="line">    next[++tot]=first[v];   first[v]=tot;   go[tot]=u;  w[tot]=-z;  pas[tot]=<span class="number">0</span>;     Fro[tot]=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">63</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dist));</span><br><span class="line">    dist[S]=<span class="number">0</span>;  q[<span class="number">1</span>]=S; vis[S]=<span class="number">1</span>;</span><br><span class="line">    tou=<span class="number">0</span>;  wei=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(tou&lt;wei)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[++tou];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(dist[v]&gt;dist[u]+w[e] &amp;&amp; pas[e])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v]=dist[u]+w[e]; from[v]=e;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    q[++wei]=v;</span><br><span class="line">                    vis[v]=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist[T]!=dist[T+<span class="number">10</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e=from[T];e;e=from[Fro[e]]) x=<span class="built_in">min</span>(x,pas[e]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e=from[T];e;e=from[Fro[e]])</span><br><span class="line">    &#123;</span><br><span class="line">        pas[e]-=x;</span><br><span class="line">        pas[e^<span class="number">1</span>]+=x;</span><br><span class="line">        Ans += w[e]*x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i].x=<span class="built_in">get</span>();    a[i].y=<span class="built_in">get</span>();</span><br><span class="line">        li[++li_num]=a[i].x; li[++li_num]=a[i].y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(li+<span class="number">1</span>,li+li_num+<span class="number">1</span>);</span><br><span class="line">    li_num = <span class="built_in">unique</span>(li+<span class="number">1</span>,li+li_num+<span class="number">1</span>) - li - <span class="number">1</span>;</span><br><span class="line">    S=<span class="number">0</span>;    T=<span class="number">2</span>*li_num+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i].x = <span class="built_in">lower_bound</span>(li+<span class="number">1</span>,li+li_num+<span class="number">1</span>, a[i].x) - li;</span><br><span class="line">        a[i].y = <span class="built_in">lower_bound</span>(li+<span class="number">1</span>,li+li_num+<span class="number">1</span>, a[i].y) - li;</span><br><span class="line">        E[ a[i].x ][ a[i].y ] = <span class="number">1</span>;</span><br><span class="line">        time[a[i].x].x++;            time[a[i].y].y++;</span><br><span class="line">        Max.x = <span class="built_in">max</span>(Max.x, a[i].x);    Max.y = <span class="built_in">max</span>(Max.y, a[i].y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Max.x;i++) <span class="keyword">if</span>(time[i].x) <span class="built_in">Add</span>(S,i,time[i].x,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Max.y;i++) <span class="keyword">if</span>(time[i].y) <span class="built_in">Add</span>(i+Max.x,T,time[i].y,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Max.x;i++)</span><br><span class="line">        <span class="keyword">if</span>(time[i].x)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=Max.y;j++)</span><br><span class="line">                <span class="keyword">if</span>(time[j].y)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(E[i][j]) <span class="built_in">Add</span>(i,j+Max.x,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">else</span> <span class="built_in">Add</span>(i,j+Max.x,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>()) <span class="built_in">Deal</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title>[费用流]球队预算</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%B4%B9%E7%94%A8%E6%B5%81%5D%E7%90%83%E9%98%9F%E9%A2%84%E7%AE%97/</url>
    <content><![CDATA[<h1>球队预算</h1>
<p>Time Limit: 10 Sec Memory Limit: 256 MB</p>
<h2 id="Description">Description</h2>
<p>在一个篮球联赛里，有n支球队，<br>
　　球队的支出是和他们的胜负场次有关系的，具体来说，第i支球队的赛季总支出是Ci<em>x^2+Di</em>y^2，Di&lt;=Ci。(赢得多，给球员的奖金就多嘛)<br>
　　其中x,y分别表示这只球队本赛季的胜负场次。<br>
　　现在赛季进行到了一半，每只球队分别取得了a[i]场胜利和b[i]场失利。<br>
　　而接下来还有m场比赛要进行。<br>
　　问联盟球队的最小总支出是多少。</p>
<h2 id="Input">Input</h2>
<p>第一行n，m</p>
<p>接下来n行每行4个整数a[i],b[i],Ci,Di</p>
<p>再接下来m行每行两个整数s，t表示第s支队伍和第t支队伍之间将有一场比赛，注意两只队间可能有多场比赛。</p>
<h2 id="Output">Output</h2>
<p>输出总值的最小值。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>3 3<br>
　1 0 2 1<br>
　1 1 10 1<br>
　0 1 3 3<br>
　1 2<br>
　2 3<br>
　3 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>43</p>
<h2 id="HINT">HINT</h2>
<p>2&lt;=n&lt;=5000,0&lt;=m&lt;=1000,0&lt;=di&lt;=ci&lt;=10,0&lt;=a[i],b[i]&lt;=50.</p>
<h2 id="Solution">Solution</h2>
<p>这题很棒棒，肯定是个费用流。我们可以首先假设所有场次都是输的，然后每次调整赢的场次来获得最小答案。<br>
　　怎么建边呢？<br>
　　　　<strong>S-&gt;比赛</strong> 流量为1，费用为0 mean : <strong>一场比赛</strong>；<br>
　　　　<strong>比赛-&gt;两只队伍</strong> 流量为1，费用为0 mean : <strong>流过去则表示这支队伍获得了胜利</strong>；<br>
　　　　<strong>队伍-&gt;T</strong> 连若干条边，流量为1，费用为 C*(2a+1)-D*(2b-1) mean : <strong>获胜得到的收益</strong>，<br>
　　　　为什么呢？这个可以用平方关系得到（多赢一场，少输一场）<br>
　　然后用原来的答案+最小费用即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">50001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> EDG = <span class="number">1000001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="keyword">int</span> Num[ONE];</span><br><span class="line"><span class="keyword">int</span> next[EDG],first[ONE],go[EDG],from[EDG],pas[EDG],w[EDG],tot;</span><br><span class="line"><span class="keyword">int</span> dist[ONE],pre[ONE],vis[ONE];</span><br><span class="line"><span class="keyword">int</span> tou,wei,q[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b,C,D;</span><br><span class="line">&#125;A[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> flow,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;  from[tot]=u;    pas[tot]=flow;  w[tot]=z;</span><br><span class="line">    next[++tot]=first[v];   first[v]=tot;   go[tot]=u;  from[tot]=v;    pas[tot]=<span class="number">0</span>;     w[tot]=-z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=S;i&lt;=T;i++) dist[i] = INF;</span><br><span class="line">    dist[S] = <span class="number">0</span>;    vis[S] = <span class="number">1</span>;</span><br><span class="line">    tou = <span class="number">0</span>; wei = <span class="number">1</span>; q[<span class="number">1</span>] = S;</span><br><span class="line">    <span class="keyword">while</span>(tou &lt; wei)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q[++tou];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u]; e; e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = go[e];</span><br><span class="line">            <span class="keyword">if</span>(dist[v] &gt; dist[u] + w[e] &amp;&amp; pas[e])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v] = dist[u] + w[e]; pre[v] = e;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v] = <span class="number">1</span>;</span><br><span class="line">                    q[++wei] = v;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist[T] != INF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e=pre[T]; e; e=pre[from[e]]) x = <span class="built_in">min</span>(x,pas[e]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e=pre[T]; e; e=pre[from[e]])</span><br><span class="line">    &#123;</span><br><span class="line">        pas[e] -= x;</span><br><span class="line">        pas[((e<span class="number">-1</span>)^<span class="number">1</span>)+<span class="number">1</span>] += x;</span><br><span class="line">        Ans += x*w[e];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    S=<span class="number">0</span>;    T=n+m+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Add</span>(S,i, <span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">Add</span>(i,x+m, <span class="number">1</span>,<span class="number">0</span>);    <span class="built_in">Add</span>(i,y+m, <span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        Num[x]++;    Num[y]++;</span><br><span class="line">        A[x].b++;    A[y].b++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Ans += A[i].a*A[i].a * A[i].C + A[i].b*A[i].b * A[i].D;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=Num[i];j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Add</span>(i+m,T, <span class="number">1</span>,A[i].C*(<span class="number">2</span>*A[i].a+<span class="number">1</span>) - A[i].D*(<span class="number">2</span>*A[i].b<span class="number">-1</span>) );</span><br><span class="line">            A[i].a++; A[i].b--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        A[i].a=<span class="built_in">get</span>();    A[i].b=<span class="built_in">get</span>();</span><br><span class="line">        A[i].C=<span class="built_in">get</span>();    A[i].D=<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Build</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>()) <span class="built_in">Deal</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title>[费用流]软件开发</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E8%B4%B9%E7%94%A8%E6%B5%81%5D%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1>软件开发</h1>
<p>Time Limit: 10 Sec Memory Limit: 162 MB</p>
<h2 id="Description">Description</h2>
<p>某软件公司正在规划一项n天的软件开发计划，根据开发计划第i天需要ni个软件开发人员，为了提高软件开发人员的效率，公司给软件人员提供了很多的服务，其中一项服务就是要为每个开发人员每天提供一块消毒毛巾，这种消毒毛巾使用一天后必须再做消毒处理后才能使用。消毒方式有两种，A种方式的消毒需要a天时间，B种方式的消毒需要b天（b&gt;a），A种消毒方式的费用为每块毛巾fA,  B种消毒方式的费用为每块毛巾fB，而买一块新毛巾的费用为f（新毛巾是已消毒的，当天可以使用）；而且f&gt;fA&gt;fB。公司经理正在规划在这n天中，每天买多少块新毛巾、每天送多少块毛巾进行A种消毒和每天送多少块毛巾进行B种消毒。当然，公司经理希望费用最低。你的任务就是：为该软件公司计划每天买多少块毛巾、每天多少块毛巾进行A种消毒和多少毛巾进行B种消毒，使公司在这项n天的软件开发中，提供毛巾服务的总费用最低。</p>
<h2 id="Input">Input</h2>
<p>第1行为n,a,b,f,fA,fB. 第2行为n1，n2，……，nn.</p>
<h2 id="Output">Output</h2>
<p>最少费用</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4  1  2  3  2  1<br>
　8  2  1  6</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>38</p>
<h2 id="HINT">HINT</h2>
<p>1≤f,fA,fB≤60，1≤n≤1000</p>
<h2 id="Main-idea">Main idea</h2>
<p>每天要用Ni块餐巾，有如下几种选择：<br>
　　　　1.买新的，每块f元；<br>
　　　　2.用A方式处理，a天后得到餐巾，每块花费fA元；<br>
　　　　3.用B方式处理，b天后得到餐巾，每块花费fB元。<br>
　　问满足要求的最小花费。</p>
<h2 id="Solution">Solution</h2>
<p>显然是费用流，拆成两个点，Xi表示用完的，Yi表示需要的，那么建模显然：（令x表示这天需要多少餐巾）<br>
　　　　S-&gt;Xi <strong>流量为x，费用为0</strong>， mean：<strong>这天需要这么多</strong>；<br>
　　　　Yi-&gt;T <strong>流量为x，费用为0</strong>， mean：<strong>这天需要这么多</strong>；<br>
　　　　S-&gt;Yi <strong>流量为INF，费用为f</strong>， mean：<strong>全部买新的</strong>；<br>
　　　　Xi-&gt;Xi+1 <strong>流量为INF，费用为0</strong>， mean：<strong>把这天用完的餐巾放到下一天处理</strong>；<br>
　　　　Xi-&gt;Yi+a+1 <strong>流量为INF，费用为fA</strong>， mean：<strong>用A方式处理</strong>；<br>
　　　　Xi-&gt;Yi+b+1 <strong>流量为INF，费用为fB</strong>， mean：<strong>用B方式处理</strong>。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1000001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> EDG = <span class="number">1000001</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a,b,f,fA,fB;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">int</span> X[ONE],Y[ONE];</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="keyword">int</span> next[EDG],first[ONE],go[EDG],from[EDG],pas[EDG],w[EDG],tot;</span><br><span class="line"><span class="keyword">int</span> dist[ONE],pre[ONE],vis[ONE];</span><br><span class="line"><span class="keyword">int</span> tou,wei,q[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> flow,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;  from[tot]=u;    pas[tot]=flow;  w[tot]=z;</span><br><span class="line">    next[++tot]=first[v];   first[v]=tot;   go[tot]=u;  from[tot]=v;    pas[tot]=<span class="number">0</span>;     w[tot]=-z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=S;i&lt;=T;i++) dist[i] = INF;</span><br><span class="line">    dist[S] = <span class="number">0</span>;    vis[S] = <span class="number">1</span>;</span><br><span class="line">    tou = <span class="number">0</span>; wei = <span class="number">1</span>; q[<span class="number">1</span>] = S;</span><br><span class="line">    <span class="keyword">while</span>(tou &lt; wei)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q[++tou];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u]; e; e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = go[e];</span><br><span class="line">            <span class="keyword">if</span>(dist[v] &gt; dist[u] + w[e] &amp;&amp; pas[e])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v] = dist[u] + w[e]; pre[v] = e;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    vis[v] = <span class="number">1</span>;</span><br><span class="line">                    q[++wei] = v;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist[T] != INF;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e=pre[T]; e; e=pre[from[e]]) x = <span class="built_in">min</span>(x,pas[e]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e=pre[T]; e; e=pre[from[e]])</span><br><span class="line">    &#123;</span><br><span class="line">        pas[e] -= x;</span><br><span class="line">        pas[((e<span class="number">-1</span>)^<span class="number">1</span>)+<span class="number">1</span>] += x;</span><br><span class="line">        Ans += x*w[e];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    a=<span class="built_in">get</span>();    b=<span class="built_in">get</span>();</span><br><span class="line">    f=<span class="built_in">get</span>();    fA=<span class="built_in">get</span>();    fB=<span class="built_in">get</span>();</span><br><span class="line">    S=<span class="number">0</span>;    T=n*<span class="number">2</span>+<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) X[i]=i, Y[i]=i+n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Add</span>(S,X[i], x,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">Add</span>(Y[i],T, x,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">Add</span>(S,Y[i], INF,f);</span><br><span class="line">        <span class="keyword">if</span>(i!=n) <span class="built_in">Add</span>(X[i],X[i+<span class="number">1</span>], INF,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(Y[i]+a+<span class="number">1</span> &lt; T)<span class="built_in">Add</span>(X[i],Y[i]+a+<span class="number">1</span>, INF,fA);</span><br><span class="line">        <span class="keyword">if</span>(Y[i]+b+<span class="number">1</span> &lt; T)<span class="built_in">Add</span>(X[i],Y[i]+b+<span class="number">1</span>, INF,fB);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">Bfs</span>()) <span class="built_in">Deal</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>图论</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title>[随机化]Sensor Network</title>
    <url>/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/%5B%E9%9A%8F%E6%9C%BA%E5%8C%96%5DSensor%20Network/</url>
    <content><![CDATA[<h1>Sensor Network</h1>
<p>Time Limit: 2 Sec Memory Limit: 128 MB</p>
<h2 id="Description">Description</h2>
<p>魔法炮来到了帝都，除了吃特色菜之外，还准备去尝一尝著名的北京烤鸭。<br>
　　帝都一共有n个烤鸭店，可以看成是二维平面内的点。<br>
　　不过由于魔法炮在吃烤鸭之前没有带钱，所以吃完烤鸭之后只能留下刷盘子。<br>
　　刷完盘子之后，魔法炮除了不用付饭费之外，老板还会奖励他d元钱。<br>
　　魔法炮是一个特么喜欢吃烤鸭的孩子，所以在去过一家烤鸭店之后，魔法炮还准备去其他的烤鸭店。<br>
　　但是由于帝都路费较贵，每单位长度需要花费1元钱，所以魔法炮可能去不了所有其他的烤鸭店。<br>
　　在到达下一家烤鸭店之前，魔法炮会花掉手里所有钱，以便于下一次接着吃霸王餐。<br>
　　另外，魔法炮对于自己刷过盘子的烤鸭店有着特殊的感情，所以他要求在某一家烤鸭店吃完烤鸭后，可以到达全部已经吃过去过的烤鸭店。<br>
　　那么问题来了，魔法炮想知道自己最多能去多少家烤鸭店，以及这些烤鸭店都是哪些。你能帮帮他吗？</p>
<h2 id="Input">Input</h2>
<p>第一行两个整数n和d，分别表示烤鸭店数和老板给魔法炮的路费。<br>
　　接下来n行，每行两个整数x,y，表示n个烤鸭店的坐标。</p>
<h2 id="Output">Output</h2>
<p>第一行一个数m，表示魔法炮最多能去多少家烤鸭店。<br>
　　第二行m个数，每个数表示魔法炮能去的烤鸭店标号。</p>
<h2 id="Sample-Input">Sample Input</h2>
<p>4 1<br>
　0 0<br>
　0 1<br>
　1 0<br>
　1 1</p>
<h2 id="Sample-Output">Sample Output</h2>
<p>2<br>
　1 2</p>
<h2 id="HINT">HINT</h2>
<p>1&lt;=n&lt;=100  1&lt;=d&lt;=10000  -10000&lt;=x,y&lt;=10000</p>
<h2 id="Main-idea">Main idea</h2>
<p>给定平面内的n个点，选出一个点集S，使得S里的所有点两两之间欧几里得距离不超过d，问|S|的最大值以及S里的点都有哪些。若答案有多种，输出任意一个。</p>
<h2 id="Solution">Solution</h2>
<p>我们看到了n&lt;=100，立马想到了随机化算法，我们用随机化的方法来求最大团，然后用一个bitset来记录一下方案即可。</p>
<h2 id="Code">Code</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">101</span>;</span><br><span class="line"></span><br><span class="line">bitset &lt;ONE&gt; A,Ans_bit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,d;</span><br><span class="line"><span class="keyword">int</span> Num[ONE],E[ONE][ONE];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"><span class="keyword">int</span> vis[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PD</span><span class="params">(power a,power b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.x-b.x)*(a.x-b.x) + (a.y-b.y)*(a.y-b.y) &lt;= d * d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rand</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">swap</span>(Num[i], Num[<span class="built_in">rand</span>()%n+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(vis));</span><br><span class="line">    A.<span class="built_in">reset</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            res++;</span><br><span class="line">            A.<span class="built_in">set</span>(Num[i]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                <span class="keyword">if</span>(!E[Num[i]][Num[j]]) vis[j]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(Ans &lt; res)</span><br><span class="line">    &#123;</span><br><span class="line">        Ans = res;</span><br><span class="line">        Ans_bit = A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    d=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i].x=<span class="built_in">get</span>();    a[i].y=<span class="built_in">get</span>();    Num[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            E[i][j] = E[j][i] = <span class="built_in">PD</span>(a[i],a[j]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++)</span><br><span class="line">        <span class="built_in">Rand</span>(), <span class="built_in">Deal</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Ans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(Ans_bit[i]) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
        <category>其它</category>
      </categories>
      <tags>
        <tag>随机化</tag>
      </tags>
  </entry>
</search>
