<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BearChild&#39;s Blog</title>
  
  
  <link href="https://www.bearchild.top/atom.xml" rel="self"/>
  
  <link href="https://www.bearchild.top/"/>
  <updated>2024-06-13T12:06:16.106Z</updated>
  <id>https://www.bearchild.top/</id>
  
  <author>
    <name>BearChild</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[UE]LocalDS的启动</title>
    <link href="https://www.bearchild.top/2024/06/04/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/[UE]LocalDS%E7%9A%84%E5%90%AF%E5%8A%A8/"/>
    <id>https://www.bearchild.top/2024/06/04/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/[UE]LocalDS%E7%9A%84%E5%90%AF%E5%8A%A8/</id>
    <published>2024-06-03T16:00:00.000Z</published>
    <updated>2024-06-13T12:06:16.106Z</updated>
    
    <content type="html"><![CDATA[<h1>LocalDS 的启动</h1><h2 id="启动-DS">启动 DS</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> Map=ThirdPersonMap</span><br><span class="line"><span class="built_in">set</span> PlayerNum=<span class="number">2</span></span><br><span class="line"><span class="built_in">set</span> DSEXE=UnrealEditor-Win64-Debug-<span class="built_in">Cmd</span></span><br><span class="line"><span class="built_in">set</span> DSProj=../../UnrealEngine/UE/Engine/Binaries/Win64/<span class="variable">%DSEXE%</span> ../../../../../TestProject/TestProject.uproject</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">rem -----DS-----</span></span><br><span class="line"><span class="built_in">start</span> <span class="variable">%DSProj%</span> <span class="variable">%Map%</span> ? -MaxPlayers=<span class="variable">%PlayerNum%</span> -port=<span class="number">17777</span> -game -server -log=DS.log</span><br></pre></td></tr></table></figure><p>这里的 <code>DSProj</code> 需要定位到该文件（根据不同的 <code>UE Version</code>、<code>BuildConfig</code> 构建出的名字可能不同）：</p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202406042239645.png" alt="image-20240604223903457" style="zoom:50%;" /><p>后续的 <code>.uproject</code> 路径，也是以该 <code>.exe</code> 为基础位置的相对路径。</p><p>同时，这里通过 <code>%Map%</code> 指定了 <code>DS</code> 上的 <code>Map</code>，<code>-port</code> 指定了本地端口号，并将 <code>log</code> 输出在 <code>DS.log</code> 中</p><p>特别的，如果不通过 <code>%Map%</code> 指定对应 <code>Map</code>，则会采用 <code>ProjectSetting</code> 中的默认配置：</p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202406042239607.png" alt="image-20240604222615133" style="zoom: 50%;" /><h2 id="启动-Client">启动 Client</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> Map=Entry</span><br><span class="line"><span class="built_in">set</span> PlayerNum=<span class="number">2</span></span><br><span class="line"><span class="built_in">set</span> ClientEXE=UnrealEditor-Win64-Debug.exe</span><br><span class="line"><span class="built_in">set</span> ClientProj=../../UnrealEngine/UE/Engine/Binaries/Win64/<span class="variable">%ClientEXE%</span> ../../../../../TestProject/TestProject.uproject</span><br><span class="line"><span class="built_in">set</span> CommonClientSet=  -game  -PIEVIACONSOLE -WinX=<span class="number">200</span> -WinY=<span class="number">200</span> -ResX=<span class="number">640</span> -ResY=<span class="number">360</span> -Multiprocess -messaging -windowed -NotInstalledEngine -MultiprocessSaveConfig -featurelevelES31</span><br><span class="line"><span class="built_in">set</span> UID=<span class="number">1000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">rem -----Client-----</span></span><br><span class="line"><span class="keyword">for</span> /l <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="variable">%PlayerNum%</span>) <span class="keyword">do</span> <span class="built_in">start</span> <span class="variable">%ClientProj%</span> <span class="variable">%Map%</span> -UID=<span class="variable">%UID%</span><span class="variable">%%i</span> -log=Client<span class="variable">%%i</span>.log <span class="variable">%CommonClientSet%</span> -ExecCmds=&quot;open <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">17777</span>&quot;</span><br></pre></td></tr></table></figure><p>这里执行了 <code>PlayerNum</code> 次 <code>start</code>，对于 <code>Client</code>，可以首先指定一个空的 <code>Map</code> 即 <code>Entry</code>，后续连上 <code>DS</code> 之后，会同步 <code>DS</code> 对应的 <code>Map</code>；</p><p>在 <code>start</code> 之后，会执行命令 <code>open 127.0.0.1:17777</code> 连接到 <code>DS</code> 对应的本地端口；</p><p>成功连接上之后，可以在 <code>DS.log</code> 中找到对应 <code>Connection</code> 创建的相关信息：</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202406042239691.png" alt="image-20240604223254052"></p><h2 id="完整实现">完整实现</h2><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202406042239973.png" alt="image-20240604223754378"></p><p>运行以下脚本：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">taskkill</span> /im  .exe /F</span><br><span class="line"><span class="built_in">taskkill</span> /im UnrealEditor-<span class="built_in">Cmd</span>.exe /F</span><br><span class="line"><span class="built_in">taskkill</span> /im UnrealEditor-Win64-Debug.exe /F</span><br><span class="line"><span class="built_in">taskkill</span> /im UnrealEditor-Win64-Debug-<span class="built_in">Cmd</span>.exe /F</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> DSMap=ThirdPersonMap</span><br><span class="line"><span class="built_in">set</span> ClientMap=Entry</span><br><span class="line"><span class="built_in">set</span> PlayerNum=<span class="number">2</span></span><br><span class="line"><span class="built_in">set</span> UID=<span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> DSEXE=UnrealEditor-Win64-Debug-<span class="built_in">Cmd</span></span><br><span class="line"><span class="built_in">set</span> DSProj=../../UnrealEngine/UE/Engine/Binaries/Win64/<span class="variable">%DSEXE%</span> ../../../../../TestProject/TestProject.uproject</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> ClientEXE=UnrealEditor-Win64-Debug.exe</span><br><span class="line"><span class="built_in">set</span> ClientProj=../../UnrealEngine/UE/Engine/Binaries/Win64/<span class="variable">%ClientEXE%</span> ../../../../../TestProject/TestProject.uproject</span><br><span class="line"><span class="built_in">set</span> CommonClientSet=  -game  -PIEVIACONSOLE -WinX=<span class="number">200</span> -WinY=<span class="number">200</span> -ResX=<span class="number">640</span> -ResY=<span class="number">360</span> -Multiprocess -messaging -windowed -NotInstalledEngine -MultiprocessSaveConfig -featurelevelES31</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">rem -----DS-----</span></span><br><span class="line"><span class="built_in">start</span> <span class="variable">%DSProj%</span> <span class="variable">%DSMap%</span> ? -MaxPlayers=<span class="variable">%PlayerNum%</span> -port=<span class="number">17777</span> -game -server -log=DS.Log</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">rem -----Client-----</span></span><br><span class="line"><span class="keyword">for</span> /l <span class="variable">%%i</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="variable">%PlayerNum%</span>) <span class="keyword">do</span> <span class="built_in">start</span> <span class="variable">%ClientProj%</span> <span class="variable">%ClientMap%</span> -UID=<span class="variable">%UID%</span><span class="variable">%%i</span> -log=Client<span class="variable">%%i</span>.log <span class="variable">%CommonClientSet%</span> -ExecCmds=&quot;open <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">17777</span>&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;LocalDS 的启动&lt;/h1&gt;
&lt;h2 id=&quot;启动-DS&quot;&gt;启动 DS&lt;/h2&gt;
&lt;figure class=&quot;highlight bat&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="网络" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="UE" scheme="https://www.bearchild.top/tags/UE/"/>
    
    <category term="网络" scheme="https://www.bearchild.top/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>[UE]ToString解决方案</title>
    <link href="https://www.bearchild.top/2024/06/01/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/[UE]ToString%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://www.bearchild.top/2024/06/01/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/[UE]ToString%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2024-05-31T16:00:00.000Z</published>
    <updated>2024-06-03T13:40:26.813Z</updated>
    
    <content type="html"><![CDATA[<h1>ToString解决方案</h1><h2 id="背景">背景</h2><p>提供一个通用机制 <code>UStringUtils::ToString(Value)</code> 将其 <code>String</code> 化。</p><p>其中 <code>Value</code> 包括：</p><ol><li><code>Base</code>：基础类型（<code>int</code>、<code>bool</code>、<code>float</code>、<code>FString</code> 等）；</li><li><code>Enum</code>；</li><li>包含 <code>ToString</code> 或 <code>GetUID</code> 方法的类型、指针；</li><li><code>Pointer</code>：<code>TStrongPtr</code>、<code>TShaerdPtr</code>、<code>TWeakPtr</code>、<code>TUniquePtr</code>；</li><li><code>Variant</code>；</li><li><code>Container</code>：包括 <code>Array</code>、<code>Set</code>、<code>Map</code> 等；</li></ol><h2 id="实现">实现</h2><h3 id="基础类型">基础类型</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;TIsIntegral&lt;T&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> T&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> FString::<span class="built_in">FromInt</span>(<span class="keyword">static_cast</span>&lt;int32&gt;(Value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> uint32&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%u&quot;</span>), Value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> int64&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%lld&quot;</span>), Value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> uint64&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%llu&quot;</span>), Value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;TIsFloatingPoint&lt;T&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> T&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%.3f&quot;</span>), <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(Value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> <span class="keyword">bool</span>&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%s&quot;</span>), Value ? <span class="built_in">TEXT</span>(<span class="string">&quot;true&quot;</span>) : <span class="built_in">TEXT</span>(<span class="string">&quot;false&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> FString&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Enum">Enum</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;TIsEnum&lt;T&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> T&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(google::protobuf::is_proto_enum&lt;T&gt;::value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> String = ::google::protobuf::internal::<span class="built_in">NameOfEnum</span>(::google::protobuf::<span class="keyword">template</span> GetEnumDescriptor&lt;T&gt;(), <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(Value));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">UTF8_TO_TCHAR</span>(String.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in"><span class="keyword">constexpr</span></span> (TIsUEnumClass&lt;T&gt;::Value)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> EnumClass = StaticEnum&lt;T&gt;();</span><br><span class="line">        <span class="keyword">return</span> EnumClass-&gt;<span class="built_in">GetNameStringByValue</span>(<span class="keyword">static_cast</span>&lt;int64&gt;(Value));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;RawEnum_%s&quot;</span>), *<span class="built_in">ToString</span>(<span class="keyword">static_cast</span>&lt;__underlying_type(T)&gt;(Value)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;TIsEnum&lt;T&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> TEnumAsByte&lt;T&gt;&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ToString</span>(Value.<span class="built_in">GetValue</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这里用到了 <code>TIsUEnumClass</code> 判断是否是 <code>UEnum</code>，这在 <code>UE5</code> 才正式提供，具体代码在 <code>UhtHeaderCodeGeneratorHFile.cs : AppendEnum</code> 中生成；</p><p>如果是 <code>UE4</code>，可以自定义该 <code>concept</code>，修改 <code>UHT</code> 的 <code>CodeGenerator</code> ，将其 <code>UEnum : TIsUEnumClass = true</code>生成在 <code>.generated.h</code> 中：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 新增 TIsUEnumClass</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TIsUEnumClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">bool</span> Value = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 修改 UEnum 的 Genrator</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FNativeClassHeaderGenerator::ExportEnum</span><span class="params">(FOutputDevice&amp; Out, UEnum* Enum)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">const</span> EUnderlyingEnumType* EnumPropType = GEnumUnderlyingTypes.<span class="built_in">Find</span>(Enum))</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">Out.<span class="built_in">Logf</span>( <span class="built_in">TEXT</span>(<span class="string">&quot;\r\n&quot;</span>) );</span><br><span class="line">Out.<span class="built_in">Logf</span>( <span class="built_in">TEXT</span>(<span class="string">&quot;enum class %s%s;\r\n&quot;</span>), *Enum-&gt;CppType, *UnderlyingTypeString );</span><br><span class="line">Out.<span class="built_in">Logf</span>( <span class="built_in">TEXT</span>(<span class="string">&quot;template&lt;&gt; %sUEnum* StaticEnum&lt;%s&gt;();\r\n&quot;</span>), *<span class="built_in">GetAPIString</span>(), *Enum-&gt;CppType );</span><br><span class="line">Out.<span class="built_in">Logf</span>( <span class="built_in">TEXT</span>(<span class="string">&quot;\r\n&quot;</span>) );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新增 TIsUEnumClass 判断</span></span><br><span class="line">Out.<span class="built_in">Logf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;template&lt;&gt; struct TIsUEnumClass&lt;%s&gt; &#123; static constexpr bool Value = true; &#125;;\r\n&quot;</span>), *Enum-&gt;CppType);</span><br><span class="line">Out.<span class="built_in">Logf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;\r\n&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="包含-ToString-或-GetUID-方法的类型、指针">包含 <code>ToString</code> 或 <code>GetUID</code> 方法的类型、指针</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;THasToStringFunc&lt;T&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> T&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Value.<span class="built_in">ToString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;THasToStringFunc&lt;T&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> T* Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Value ? Value-&gt;<span class="built_in">ToString</span>() : <span class="built_in">TEXT</span>(<span class="string">&quot;Invalid&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;TIsDerivedFrom&lt;T, UObject&gt;::Value &amp;&amp; !THasToStringFunc&lt;T&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> T&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(THasGetUIDFunc&lt;T&gt;::Value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ToString</span>(Value.<span class="built_in">GetUID</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Value.<span class="built_in">GetName</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;TIsDerivedFrom&lt;T, UObject&gt;::Value &amp;&amp; !THasToStringFunc&lt;T&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> T* Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">IsValid</span>(Value)) <span class="keyword">return</span> <span class="built_in">TEXT</span>(<span class="string">&quot;Invalid&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(THasGetUIDFunc&lt;T&gt;::Value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ToString</span>(Value-&gt;<span class="built_in">GetUID</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Value-&gt;<span class="built_in">GetName</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用了 <code>THasToStringFunc</code>、<code>TGetUIDFunc</code>，需要新增 <code>TypeTraits</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TrueType</span> &#123;</span> <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">bool</span> Value = <span class="literal">true</span>; &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FalseType</span> &#123;</span> <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">bool</span> Value = <span class="literal">false</span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// THas[FunctionName]Func</span></span><br><span class="line"><span class="comment">// Declare type traits to detect if type T has a function named FunctionName with params.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DECLARE_HASFUNCTION_TYPETRAITS(FunctionName, ReturnType, ...) \</span></span><br><span class="line"><span class="meta">template<span class="meta-string">&lt;typename T&gt;</span> \</span></span><br><span class="line"><span class="meta">struct THas##FunctionName##Func\</span></span><br><span class="line"><span class="meta">&#123; \</span></span><br><span class="line"><span class="meta">private: \</span></span><br><span class="line"><span class="meta">template<span class="meta-string">&lt;typename, typename... TArgs&gt;</span> \</span></span><br><span class="line"><span class="meta">    struct Internal &#123; \</span></span><br><span class="line"><span class="meta">template<span class="meta-string">&lt;typename U, typename = void&gt;</span> \</span></span><br><span class="line"><span class="meta">struct THas##FunctionName##FuncInternal : FalseType &#123;&#125;; \</span></span><br><span class="line"><span class="meta">    template<span class="meta-string">&lt;typename U&gt;</span> \</span></span><br><span class="line"><span class="meta">    struct THas##FunctionName##FuncInternal<span class="meta-string">&lt;U, typename TEnableIf&lt;TIsSame&lt;ReturnType, decltype(DeclVal&lt;U&gt;</span>().FunctionName(DeclVal<span class="meta-string">&lt;TArgs&gt;</span>()...))&gt;::Value&gt;::Type&gt; : TrueType &#123;&#125;; \</span></span><br><span class="line"><span class="meta">    &#125;; \</span></span><br><span class="line"><span class="meta">public: \</span></span><br><span class="line"><span class="meta">static constexpr bool Value = Internal<span class="meta-string">&lt;void, ##__VA_ARGS__&gt;</span>::template THas##FunctionName##FuncInternal<span class="meta-string">&lt;T&gt;</span>::Value; \</span></span><br><span class="line"><span class="meta">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ----- Declare -----</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// THasToStringFunc: FString T::ToString()</span></span><br><span class="line"><span class="built_in">DECLARE_HASFUNCTION_TYPETRAITS</span>(ToString, FString)</span><br><span class="line"><span class="comment">// THasGetUIDFunc: uint64 T::GetUID()</span></span><br><span class="line"><span class="built_in">DECLARE_HASFUNCTION_TYPETRAITS</span>(GetUID, uint64)</span><br></pre></td></tr></table></figure><h3 id="Pointer">Pointer</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;TIsPointer&lt;T&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> T&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Value ? UStringUtils::<span class="built_in">ToString</span>(*Value) : <span class="built_in">TEXT</span>(<span class="string">&quot;Invalid&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(TStrongObjectPtr&lt;T&gt; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Value.<span class="built_in">IsValid</span>() ? UStringUtils::<span class="built_in">ToString</span>(Value.<span class="built_in">Get</span>()) : <span class="built_in">TEXT</span>(<span class="string">&quot;Invalid&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(TWeakPtr&lt;T&gt; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Value.<span class="built_in">IsValid</span>() ? UStringUtils::<span class="built_in">ToString</span>(Value.<span class="built_in">Pin</span>().<span class="built_in">Get</span>()) : <span class="built_in">TEXT</span>(<span class="string">&quot;Invalid&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(TSharedPtr&lt;T&gt; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Value.<span class="built_in">IsValid</span>() ? UStringUtils::<span class="built_in">ToString</span>(Value.<span class="built_in">Get</span>()) : <span class="built_in">TEXT</span>(<span class="string">&quot;Invalid&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> TUniquePtr&lt;T&gt;&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Value.<span class="built_in">IsValid</span>() ? UStringUtils::<span class="built_in">ToString</span>(Value.<span class="built_in">Get</span>()) : <span class="built_in">TEXT</span>(<span class="string">&quot;Invalid&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Variant">Variant</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;TIsSame&lt;T, FVariant&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> T&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> VariantType = Value.<span class="built_in">GetType</span>();</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (VariantType)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> EVariantTypes::Bool:     <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;<span class="keyword">bool</span>&gt;());</span><br><span class="line">    <span class="keyword">case</span> EVariantTypes::Float:    <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;<span class="keyword">float</span>&gt;());</span><br><span class="line">    <span class="keyword">case</span> EVariantTypes::String:   <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;FString&gt;());</span><br><span class="line">    <span class="keyword">case</span> EVariantTypes::Int8:     <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;int8&gt;());</span><br><span class="line">    <span class="keyword">case</span> EVariantTypes::Int16:    <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;int16&gt;());</span><br><span class="line">    <span class="keyword">case</span> EVariantTypes::Int32:    <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;int32&gt;());</span><br><span class="line">    <span class="keyword">case</span> EVariantTypes::Int64:    <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;int64&gt;());</span><br><span class="line">    <span class="keyword">case</span> EVariantTypes::UInt8:    <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;uint8&gt;());</span><br><span class="line">    <span class="keyword">case</span> EVariantTypes::UInt16:   <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;uint16&gt;());</span><br><span class="line">    <span class="keyword">case</span> EVariantTypes::UInt32:   <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;uint32&gt;());</span><br><span class="line">    <span class="keyword">case</span> EVariantTypes::UInt64:   <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;uint64&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">TEXT</span>(<span class="string">&quot;Unknown&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Container">Container</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TContainer, <span class="keyword">typename</span> TFunctor, <span class="keyword">typename</span> = <span class="keyword">typename</span> TEnableIf&lt;TIsContainer&lt;TContainer&gt;::Value&gt;::Type&gt;</span><br><span class="line"><span class="keyword">static</span> FString <span class="built_in">ContainerToStringHelper</span>(<span class="keyword">const</span> TContainer&amp; Container, <span class="keyword">const</span> FString&amp; StartToken, <span class="keyword">const</span> FString&amp; EndToken, <span class="keyword">bool</span> Multilines, TFunctor&amp;&amp; ElementToStringFunctor)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (Container.<span class="built_in">IsEmpty</span>()) <span class="keyword">return</span> <span class="built_in">TEXT</span>(<span class="string">&quot;Empty&quot;</span>);</span><br><span class="line"></span><br><span class="line">    TArray&lt;FString&gt; ElementStrings&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; Element : Container)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> String = <span class="built_in">ElementToStringFunctor</span>(Element);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (String.<span class="built_in">IsEmpty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            ElementStrings.<span class="built_in">Emplace</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;None&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ElementStrings.<span class="built_in">Emplace</span>(<span class="built_in">MoveTemp</span>(String));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> Res = FString::<span class="built_in">Join</span>(ElementStrings, Multilines ? <span class="built_in">TEXT</span>(<span class="string">&quot;,\n&quot;</span>) : <span class="built_in">TEXT</span>(<span class="string">&quot;, &quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Multilines)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%s\n%s\n%s&quot;</span>), *StartToken, *Res, *EndToken);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%s%s%s&quot;</span>), *StartToken, *Res, *EndToken);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> TArray&lt;T&gt;&amp; Array, <span class="keyword">bool</span> Multilines = <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> UStringUtils::<span class="built_in">ContainerToStringHelper</span>(Array, <span class="built_in">TEXT</span>(<span class="string">&quot;[&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;]&quot;</span>), Multilines, [](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; Element) -&gt; FString &#123;</span><br><span class="line">        <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Element); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> TSet&lt;T&gt;&amp; Set, <span class="keyword">bool</span> Multilines = <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> UStringUtils::<span class="built_in">ContainerToStringHelper</span>(Set, <span class="built_in">TEXT</span>(<span class="string">&quot;(&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;)&quot;</span>), Multilines, [](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; Element) -&gt; FString &#123;</span><br><span class="line">        <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Element); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TKey, <span class="keyword">typename</span> TValue&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> TMap&lt;TKey, TValue&gt;&amp; Map, <span class="keyword">bool</span> Multilines = <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> UStringUtils::<span class="built_in">ContainerToStringHelper</span>(Map, <span class="built_in">TEXT</span>(<span class="string">&quot;&#123;&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;&#125;&quot;</span>), Multilines, [](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; Element) -&gt; FString &#123;</span><br><span class="line">        <span class="keyword">return</span> FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%s: %s&quot;</span>), *UStringUtils::<span class="built_in">ToString</span>(Element.Key), *UStringUtils::<span class="built_in">ToString</span>(Element.Value));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用到了 <code>TIsContainer</code> ，可以通过是否有 <code>.begin()</code>、<code>.end()</code>、<code>.IsEmpty()</code> 方法简单判断：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TMakeVoid</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TMakeVoid</span> &#123;</span> <span class="keyword">using</span> Type = <span class="keyword">void</span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TIsContainer</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> = <span class="keyword">void</span>&gt;</span><br><span class="line">struct TIsContainer : FalseType &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TIsContainer</span>&lt;</span>T, <span class="keyword">typename</span> TMakeVoid&lt;</span><br><span class="line">    <span class="keyword">decltype</span>(DeclVal&lt;T&gt;().<span class="built_in">begin</span>()), </span><br><span class="line">    <span class="keyword">decltype</span>(DeclVal&lt;T&gt;().<span class="built_in">end</span>()), </span><br><span class="line">    <span class="keyword">typename</span> TEnableIf&lt;TIsSame&lt;<span class="keyword">decltype</span>(DeclVal&lt;T&gt;().<span class="built_in">IsEmpty</span>()), <span class="keyword">bool</span>&gt;::Value&gt;::Type</span><br><span class="line">&gt;::Type&gt; : TrueType &#123;&#125;;</span><br></pre></td></tr></table></figure><h2 id="完整实现">完整实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StringUtils.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;UObject/StrongObjectPtr.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;TypeTraits.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;StringUtils.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UStringUtils</span> :</span> <span class="keyword">public</span> UBlueprintFunctionLibrary</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region Base</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;TIsIntegral&lt;T&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> T&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> FString::<span class="built_in">FromInt</span>(<span class="keyword">static_cast</span>&lt;int32&gt;(Value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> uint32&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%u&quot;</span>), Value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> int64&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%lld&quot;</span>), Value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> uint64&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%llu&quot;</span>), Value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;TIsFloatingPoint&lt;T&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> T&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%.3f&quot;</span>), <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(Value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> <span class="keyword">bool</span>&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%s&quot;</span>), Value ? <span class="built_in">TEXT</span>(<span class="string">&quot;true&quot;</span>) : <span class="built_in">TEXT</span>(<span class="string">&quot;false&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> FString&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion Base</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region Enum</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;TIsEnum&lt;T&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> T&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(google::protobuf::is_proto_enum&lt;T&gt;::value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> String = ::google::protobuf::internal::<span class="built_in">NameOfEnum</span>(::google::protobuf::<span class="keyword">template</span> GetEnumDescriptor&lt;T&gt;(), <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(Value));</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">UTF8_TO_TCHAR</span>(String.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> <span class="built_in"><span class="keyword">constexpr</span></span> (TIsUEnumClass&lt;T&gt;::Value)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> EnumClass = StaticEnum&lt;T&gt;();</span><br><span class="line"><span class="keyword">return</span> EnumClass-&gt;<span class="built_in">GetNameStringByValue</span>(<span class="keyword">static_cast</span>&lt;int64&gt;(Value));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;RawEnum_%s&quot;</span>), *<span class="built_in">ToString</span>(<span class="keyword">static_cast</span>&lt;__underlying_type(T)&gt;(Value)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;TIsEnum&lt;T&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> TEnumAsByte&lt;T&gt;&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">ToString</span>(Value.<span class="built_in">GetValue</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion Enum</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region ToString</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;THasToStringFunc&lt;T&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> T&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Value.<span class="built_in">ToString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;THasToStringFunc&lt;T&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> T* Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Value ? Value-&gt;<span class="built_in">ToString</span>() : <span class="built_in">TEXT</span>(<span class="string">&quot;Invalid&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;TIsDerivedFrom&lt;T, UObject&gt;::Value &amp;&amp; !THasToStringFunc&lt;T&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> T&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(THasGetUIDFunc&lt;T&gt;::Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">ToString</span>(Value.<span class="built_in">GetUID</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Value.<span class="built_in">GetName</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;TIsDerivedFrom&lt;T, UObject&gt;::Value &amp;&amp; !THasToStringFunc&lt;T&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> T* Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">IsValid</span>(Value)) <span class="keyword">return</span> <span class="built_in">TEXT</span>(<span class="string">&quot;Invalid&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">if</span> <span class="title">constexpr</span> <span class="params">(THasGetUIDFunc&lt;T&gt;::Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">ToString</span>(Value-&gt;<span class="built_in">GetUID</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> Value-&gt;<span class="built_in">GetName</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion ToString</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region Pointer</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;TIsPointer&lt;T&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> T&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Value ? UStringUtils::<span class="built_in">ToString</span>(*Value) : <span class="built_in">TEXT</span>(<span class="string">&quot;Invalid&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(TStrongObjectPtr&lt;T&gt; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Value.<span class="built_in">IsValid</span>() ? UStringUtils::<span class="built_in">ToString</span>(Value.<span class="built_in">Get</span>()) : <span class="built_in">TEXT</span>(<span class="string">&quot;Invalid&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(TWeakPtr&lt;T&gt; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Value.<span class="built_in">IsValid</span>() ? UStringUtils::<span class="built_in">ToString</span>(Value.<span class="built_in">Pin</span>().<span class="built_in">Get</span>()) : <span class="built_in">TEXT</span>(<span class="string">&quot;Invalid&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(TSharedPtr&lt;T&gt; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Value.<span class="built_in">IsValid</span>() ? UStringUtils::<span class="built_in">ToString</span>(Value.<span class="built_in">Get</span>()) : <span class="built_in">TEXT</span>(<span class="string">&quot;Invalid&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> TUniquePtr&lt;T&gt;&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Value.<span class="built_in">IsValid</span>() ? UStringUtils::<span class="built_in">ToString</span>(Value.<span class="built_in">Get</span>()) : <span class="built_in">TEXT</span>(<span class="string">&quot;Invalid&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion Pointer</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region FVariant</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;TIsSame&lt;T, FVariant&gt;::Value, FString&gt;::<span class="function">Type <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> T&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> VariantType = Value.<span class="built_in">GetType</span>();</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (VariantType)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> EVariantTypes::Bool:     <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;<span class="keyword">bool</span>&gt;());</span><br><span class="line"><span class="keyword">case</span> EVariantTypes::Float:    <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;<span class="keyword">float</span>&gt;());</span><br><span class="line"><span class="keyword">case</span> EVariantTypes::String:   <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;FString&gt;());</span><br><span class="line"><span class="keyword">case</span> EVariantTypes::Int8:     <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;int8&gt;());</span><br><span class="line"><span class="keyword">case</span> EVariantTypes::Int16:    <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;int16&gt;());</span><br><span class="line"><span class="keyword">case</span> EVariantTypes::Int32:    <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;int32&gt;());</span><br><span class="line"><span class="keyword">case</span> EVariantTypes::Int64:    <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;int64&gt;());</span><br><span class="line"><span class="keyword">case</span> EVariantTypes::UInt8:    <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;uint8&gt;());</span><br><span class="line"><span class="keyword">case</span> EVariantTypes::UInt16:   <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;uint16&gt;());</span><br><span class="line"><span class="keyword">case</span> EVariantTypes::UInt32:   <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;uint32&gt;());</span><br><span class="line"><span class="keyword">case</span> EVariantTypes::UInt64:   <span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Value.<span class="keyword">template</span> GetValue&lt;uint64&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">TEXT</span>(<span class="string">&quot;Unknown&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion FVariant</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region Container</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TContainer, <span class="keyword">typename</span> TFunctor, <span class="keyword">typename</span> = <span class="keyword">typename</span> TEnableIf&lt;TIsContainer&lt;TContainer&gt;::Value&gt;::Type&gt;</span><br><span class="line"><span class="keyword">static</span> FString <span class="built_in">ContainerToStringHelper</span>(<span class="keyword">const</span> TContainer&amp; Container, <span class="keyword">const</span> FString&amp; StartToken, <span class="keyword">const</span> FString&amp; EndToken, <span class="keyword">bool</span> Multilines, TFunctor&amp;&amp; ElementToStringFunctor)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Container.<span class="built_in">IsEmpty</span>()) <span class="keyword">return</span> <span class="built_in">TEXT</span>(<span class="string">&quot;Empty&quot;</span>);</span><br><span class="line"></span><br><span class="line">TArray&lt;FString&gt; ElementStrings&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; Element : Container)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> String = <span class="built_in">ElementToStringFunctor</span>(Element);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (String.<span class="built_in">IsEmpty</span>())</span><br><span class="line">&#123;</span><br><span class="line">ElementStrings.<span class="built_in">Emplace</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;None&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ElementStrings.<span class="built_in">Emplace</span>(<span class="built_in">MoveTemp</span>(String));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> Res = FString::<span class="built_in">Join</span>(ElementStrings, Multilines ? <span class="built_in">TEXT</span>(<span class="string">&quot;,\n&quot;</span>) : <span class="built_in">TEXT</span>(<span class="string">&quot;, &quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Multilines)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%s\n%s\n%s&quot;</span>), *StartToken, *Res, *EndToken);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%s%s%s&quot;</span>), *StartToken, *Res, *EndToken);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> TArray&lt;T&gt;&amp; Array, <span class="keyword">bool</span> Multilines = <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> UStringUtils::<span class="built_in">ContainerToStringHelper</span>(Array, <span class="built_in">TEXT</span>(<span class="string">&quot;[&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;]&quot;</span>), Multilines, [](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; Element) -&gt; FString &#123;</span><br><span class="line"><span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Element); </span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> TSet&lt;T&gt;&amp; Set, <span class="keyword">bool</span> Multilines = <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> UStringUtils::<span class="built_in">ContainerToStringHelper</span>(Set, <span class="built_in">TEXT</span>(<span class="string">&quot;(&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;)&quot;</span>), Multilines, [](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; Element) -&gt; FString &#123;</span><br><span class="line"><span class="keyword">return</span> UStringUtils::<span class="built_in">ToString</span>(Element); </span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TKey, <span class="keyword">typename</span> TValue&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">ToString</span><span class="params">(<span class="keyword">const</span> TMap&lt;TKey, TValue&gt;&amp; Map, <span class="keyword">bool</span> Multilines = <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> UStringUtils::<span class="built_in">ContainerToStringHelper</span>(Map, <span class="built_in">TEXT</span>(<span class="string">&quot;&#123;&quot;</span>), <span class="built_in">TEXT</span>(<span class="string">&quot;&#125;&quot;</span>), Multilines, [](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; Element) -&gt; FString &#123;</span><br><span class="line"><span class="keyword">return</span> FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;%s: %s&quot;</span>), *UStringUtils::<span class="built_in">ToString</span>(Element.Key), *UStringUtils::<span class="built_in">ToString</span>(Element.Value));</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion Container</span></span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeTraits.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TrueType</span> &#123;</span> <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">bool</span> Value = <span class="literal">true</span>; &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FalseType</span> &#123;</span> <span class="keyword">static</span> <span class="keyword">constexpr</span> <span class="keyword">bool</span> Value = <span class="literal">false</span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TMakeVoid</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TMakeVoid</span> &#123;</span> <span class="keyword">using</span> Type = <span class="keyword">void</span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region Container</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TIsContainer</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> = <span class="keyword">void</span>&gt;</span><br><span class="line">struct TIsContainer : FalseType &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TIsContainer</span>&lt;</span>T, <span class="keyword">typename</span> TMakeVoid&lt;</span><br><span class="line">    <span class="keyword">decltype</span>(DeclVal&lt;T&gt;().<span class="built_in">begin</span>()), </span><br><span class="line">    <span class="keyword">decltype</span>(DeclVal&lt;T&gt;().<span class="built_in">end</span>()), </span><br><span class="line">    <span class="keyword">typename</span> TEnableIf&lt;TIsSame&lt;<span class="keyword">decltype</span>(DeclVal&lt;T&gt;().<span class="built_in">IsEmpty</span>()), <span class="keyword">bool</span>&gt;::Value&gt;::Type</span><br><span class="line">&gt;::Type&gt; : TrueType &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion Container</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> region HasMemberFunction</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// THas[FunctionName]Func</span></span><br><span class="line"><span class="comment">// Declare type traits to detect if type T has a function named FunctionName with params.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DECLARE_HASFUNCTION_TYPETRAITS(FunctionName, ReturnType, ...) \</span></span><br><span class="line"><span class="meta">template<span class="meta-string">&lt;typename T&gt;</span> \</span></span><br><span class="line"><span class="meta">struct THas##FunctionName##Func\</span></span><br><span class="line"><span class="meta">&#123; \</span></span><br><span class="line"><span class="meta">private: \</span></span><br><span class="line"><span class="meta">template<span class="meta-string">&lt;typename, typename... TArgs&gt;</span> \</span></span><br><span class="line"><span class="meta">    struct Internal &#123; \</span></span><br><span class="line"><span class="meta">template<span class="meta-string">&lt;typename U, typename = void&gt;</span> \</span></span><br><span class="line"><span class="meta">struct THas##FunctionName##FuncInternal : FalseType &#123;&#125;; \</span></span><br><span class="line"><span class="meta">    template<span class="meta-string">&lt;typename U&gt;</span> \</span></span><br><span class="line"><span class="meta">    struct THas##FunctionName##FuncInternal<span class="meta-string">&lt;U, typename TEnableIf&lt;TIsSame&lt;ReturnType, decltype(DeclVal&lt;U&gt;</span>().FunctionName(DeclVal<span class="meta-string">&lt;TArgs&gt;</span>()...))&gt;::Value&gt;::Type&gt; : TrueType &#123;&#125;; \</span></span><br><span class="line"><span class="meta">    &#125;; \</span></span><br><span class="line"><span class="meta">public: \</span></span><br><span class="line"><span class="meta">static constexpr bool Value = Internal<span class="meta-string">&lt;void, ##__VA_ARGS__&gt;</span>::template THas##FunctionName##FuncInternal<span class="meta-string">&lt;T&gt;</span>::Value; \</span></span><br><span class="line"><span class="meta">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ----- Declare -----</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// THasToStringFunc: FString T::ToString()</span></span><br><span class="line"><span class="built_in">DECLARE_HASFUNCTION_TYPETRAITS</span>(ToString, FString)</span><br><span class="line"><span class="comment">// THasGetUIDFunc: uint64 T::GetUID()</span></span><br><span class="line"><span class="built_in">DECLARE_HASFUNCTION_TYPETRAITS</span>(GetUID, uint64)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> endregion HasMemberFunction</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;ToString解决方案&lt;/h1&gt;
&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;提供一个通用机制 &lt;code&gt;UStringUtils::ToString(Value)&lt;/code&gt; 将其 &lt;code&gt;String&lt;/code&gt; 化。&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;V</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="Gameplay" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/"/>
    
    
    <category term="Gameplay" scheme="https://www.bearchild.top/tags/Gameplay/"/>
    
    <category term="UE" scheme="https://www.bearchild.top/tags/UE/"/>
    
  </entry>
  
  <entry>
    <title>[UE]UnLua &amp; C++ 交互</title>
    <link href="https://www.bearchild.top/2024/05/27/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/[UE]UnLua&amp;C++%E4%BA%A4%E4%BA%92/"/>
    <id>https://www.bearchild.top/2024/05/27/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/[UE]UnLua&amp;C++%E4%BA%A4%E4%BA%92/</id>
    <published>2024-05-26T16:00:00.000Z</published>
    <updated>2024-05-31T14:39:08.186Z</updated>
    
    <content type="html"><![CDATA[<h1>UnLua &amp; C++ 交互</h1><p>在 <code>Lua</code> 中调用一般的 <code>UFUNCTION</code> 反射比较简单直接，这里以从 <code>Lua</code> 中调用 <code>CFUNCTION</code> 为例简单介绍两端交互。</p><p>具体为在 <code>Lua</code> 中的调用：<code>local Table = UE4.UTestUtils.LuaCFunction(Val0, Val1)</code>，并返回一个 <code>Lua Table : &#123; &quot;Val0&quot; = Val0, &quot;Val1&quot; = Va1 &#125;</code>。</p><h3 id="定义">定义</h3><p>首先通过 <code>ADD_STATIC_CFUNCTION</code> 静态导出这个原生的 <code>FGlueFunction</code> ；</p><p>具体的实现可以在 <a href="https://github.com/Tencent/UnLua/blob/master/Plugins/UnLua/Source/UnLua/Public/UnLuaEx.h">UnLuaEx.h</a> 中找到。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Test.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lua_State</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UTestUtils</span> :</span> <span class="keyword">public</span> UBlueprintFunctionLibrary</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">LuaCFunction</span><span class="params">(lua_State* L)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Test.cpp</span></span><br><span class="line"><span class="built_in">BEGIN_EXPORT_REFLECTED_CLASS</span>(UTestUtils)</span><br><span class="line"><span class="built_in">ADD_STATIC_CFUNTION</span>(LuaCFunction)</span><br><span class="line"><span class="built_in">END_EXPORT_CLASS</span>(UTestUtils)</span><br><span class="line"><span class="built_in">IMPLEMENT_EXPORTED_CLASS</span>(UTestUtils)</span><br></pre></td></tr></table></figure><h3 id="实现">实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">UTestUtils::LuaCFunction</span><span class="params">(lua_State* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Top = <span class="built_in">lua_gettop</span>(L);</span><br><span class="line"><span class="keyword">if</span> (Top == <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">int32 Val0 = <span class="built_in">lua_tointeger</span>(L, <span class="number">1</span>);</span><br><span class="line">int32 Val1 = <span class="built_in">lua_tointeger</span>(L, <span class="number">2</span>);</span><br><span class="line">UUnLuaFunctionLibrary::<span class="built_in">CreateLuaTable</span>(L, <span class="string">&quot;Val0&quot;</span>, Val0, <span class="string">&quot;Val1&quot;</span>, Val1);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">luaL_error</span>(L, <span class="string">&quot;Call UTestUtils::LuaCFunction error! argc = %d&quot;</span>, Top);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CFUNCTION</code> 在 <code>Lua</code> 中调用时，会传入当前的 <code>lua_State* L</code> ，可以通过这个<code> L</code> 对 <code>LuaStack</code> 进行访问与写入。</p><p>首先这里的 <code>Top = lua_gettop(L)</code> 会根据 <code>cast_int(L-&gt;top - (L-&gt;ci-&gt;func + 1))</code> 计算出返回参数的个数，比如这里的 <code>(Val0, Val1)</code> 就是 <code>2</code> 个参数。</p><p>接着通过 <code>lua_tointeger(L, i)</code> 将第 <code>i</code> 个参数取出。</p><p>然后通过 <code>UUnLuaFunctionLibrary::CreateLuaTable</code>，创建一个 <code>Lua Table</code>，进行赋值与写入，这个方法是实现的重点。</p><p>最后如果合法，<code>return 1</code>，返回写入 <code>LuaStack</code> 中返回值的个数，也就是有 <code>1</code> 个 <code>LuaTable</code> 被写入了栈。</p><p>具体的与 <code>lua</code> 层交互的原始方法实现可以在 <a href="https://github.com/Tencent/UnLua/blob/master/Plugins/UnLua/Source/ThirdParty/Lua/lua-5.4.4/src/lapi.c">lapi.c</a> 中找到。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Types&gt;</span></span><br><span class="line"><span class="function">UnLua::FLuaTable <span class="title">UUnLuaFunctionLibrary::CreateLuaTable</span><span class="params">(lua_State* L, Types&amp;&amp;... Args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> LuaEnv = UnLua::FLuaEnv::<span class="built_in">FindEnv</span>(L);</span><br><span class="line"><span class="built_in">lua_newtable</span>(L);</span><br><span class="line"></span><br><span class="line"><span class="built_in">PushKeyValue</span>(L, Forward&lt;Types&gt;(Args)...);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> UnLua::<span class="built_in">FLuaTable</span>(LuaEnv, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span>... Types&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UUnLuaFunctionLibrary::PushKeyValue</span><span class="params">(lua_State* L, K&amp;&amp; Key, V&amp;&amp; Value, Types&amp;&amp;... Args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">PushKeyValue</span>(L, Forward&lt;K&gt;(Key), Forward&lt;V&gt;(Value));</span><br><span class="line"><span class="built_in">PushKeyValue</span>(L, Forward&lt;Types&gt;(Args)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UUnLuaFunctionLibrary::PushKeyValue</span><span class="params">(lua_State* L, K&amp;&amp; Key, V&amp;&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">UnLua::<span class="built_in">Push</span>(L, Forward&lt;K&gt;(Key));</span><br><span class="line">UnLua::<span class="built_in">Push</span>(L, Forward&lt;V&gt;(Value));</span><br><span class="line"><span class="built_in">lua_rawset</span>(L, <span class="number">-3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 <code>UUnLuaFunctionLibrary::CreateLuaTable</code> 向 <code>L</code> 对应的 <code>LuaStack</code> 中写入了一个赋值好的 <code>LuaTable</code>。</p><p>首先通过 <code>lua_newtable(L)</code> 创建了一个空的 <code>LuaTable</code>，然后进行 <code>PushKeyValue</code> 的递归调用。</p><p>针对一次 <code>PushKeyValue</code>，首先会往 <code>LuaStack</code> 中压入 <code>Key</code>、<code>Value</code>，压入后先前的 <code>LuaTable</code> 处于在 <code>StatckIndex=-3</code> 的位置。</p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/image-20240527120544564.png" alt="image-20240527120544564" style="zoom:33%;" /><p>然后针对  <code>StackIndex = -3</code>位置（也就是当前栈里的 <code>LuaTable</code>）调用 <code>lua_rawset</code> 方法，将 <code>Key</code> 和 <code>Value</code> 弹出并打包成参数塞进 <code>LuaTable</code>。</p><p>这里的 <code>lua_rawset</code> 实际上类似 <code>lua_settable</code>。对于 <code>lua_settable</code>，会找到元方法 <code>__newindex</code> 并调用，对于 <code>lua_rawset</code>，则会调用默认的 <code>__newindex</code> 方法：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__newindex</span> = <span class="function"><span class="keyword">function</span><span class="params">(table, key, value)</span></span></span><br><span class="line">    <span class="built_in">rawset</span>(<span class="built_in">table</span>, key, value)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这样，就完成了一个这样的方法实现。</p><p>给出 <code>UUnluaFunctionLibrary</code> 的更多扩展：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Types&gt;</span></span><br><span class="line"><span class="function">UnLua::FLuaTable <span class="title">UUnLuaFunctionLibrary::CreateLuaTable</span><span class="params">(lua_State* L, Types&amp;&amp;... Args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> LuaEnv = UnLua::FLuaEnv::<span class="built_in">FindEnv</span>(L);</span><br><span class="line"><span class="built_in">lua_newtable</span>(L);</span><br><span class="line"></span><br><span class="line"><span class="built_in">PushKeyValue</span>(L, Forward&lt;Types&gt;(Args)...);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> UnLua::<span class="built_in">FLuaTable</span>(LuaEnv, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Types&gt;</span></span><br><span class="line"><span class="function">UnLua::FLuaTable <span class="title">UUnLuaFunctionLibrary::CreateLuaArray</span><span class="params">(lua_State* L, <span class="keyword">const</span> Types&amp;... Args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> LuaEnv = UnLua::FLuaEnv::<span class="built_in">FindEnv</span>(L);</span><br><span class="line"><span class="built_in">lua_newtable</span>(L);</span><br><span class="line"></span><br><span class="line">PushKeyValue&lt;<span class="number">1</span>&gt;(L, Forward&lt;Types&gt;(Args)...);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> UnLua::<span class="built_in">FLuaTable</span>(LuaEnv, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UUnLuaFunctionLibrary::PushKeyValue</span><span class="params">(lua_State* L, K&amp;&amp; Key, V&amp;&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">UnLua::<span class="built_in">Push</span>(L, Forward&lt;K&gt;(Key));</span><br><span class="line">UnLua::<span class="built_in">Push</span>(L, Forward&lt;V&gt;(Value));</span><br><span class="line"><span class="built_in">lua_rawset</span>(L, <span class="number">-3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span>... Types&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UUnLuaFunctionLibrary::PushKeyValue</span><span class="params">(lua_State* L, K&amp;&amp; Key, V&amp;&amp; Value, Types&amp;&amp;... Args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">PushKeyValue</span>(L, Forward&lt;K&gt;(Key), Forward&lt;V&gt;(Value));</span><br><span class="line"><span class="built_in">PushKeyValue</span>(L, Forward&lt;Types&gt;(Args)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">int</span> N, <span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UUnLuaFunctionLibrary::PushKeyValue</span><span class="params">(lua_State* L, T&amp;&amp; Arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">UnLua::<span class="built_in">Push</span>(L, N);</span><br><span class="line">UnLua::<span class="built_in">Push</span>(L, Forward&lt;T&gt;(Arg));</span><br><span class="line"><span class="built_in">lua_rawset</span>(L, <span class="number">-3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">int</span> N, <span class="keyword">typename</span> T, <span class="keyword">typename</span>... Types&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UUnLuaFunctionLibrary::PushKeyValue</span><span class="params">(lua_State* L, T&amp;&amp; Arg0, Types&amp;&amp;... Args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PushKeyValue&lt;N&gt;(L, Forward&lt;T&gt;(Arg0));</span><br><span class="line">PushKeyValue&lt;N + <span class="number">1</span>&gt;(L, Forward&lt;Types&gt;(Args)...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UUnLuaFunctionLibrary::PushKeyValue</span><span class="params">(lua_State* L, K&amp;&amp; Key, TArray&lt;T&gt;&amp; Array)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">UnLua::<span class="built_in">Push</span>(L, Forward&lt;K&gt;(Key));</span><br><span class="line"></span><br><span class="line"><span class="built_in">lua_newtable</span>(L);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> Index = <span class="number">0</span>; Index &lt; Array.<span class="built_in">Num</span>(); Index++)</span><br><span class="line">&#123;</span><br><span class="line">UnLua::<span class="built_in">Push</span>(L, Index + <span class="number">1</span>);</span><br><span class="line">UnLua::<span class="built_in">Push</span>(L, Array[Index]);</span><br><span class="line"><span class="built_in">lua_rawset</span>(L, <span class="number">-3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">lua_rawset</span>(L, <span class="number">-3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Json 相关操作</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> K&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UUnLuaFunctionLibrary::PushKeyValue</span><span class="params">(lua_State* L, K&amp;&amp; Key, <span class="keyword">const</span> TSharedPtr&lt;FJsonValue&gt;&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">UnLua::<span class="built_in">Push</span>(L, Forward&lt;K&gt;(Key));</span><br><span class="line"><span class="built_in">PushValue</span>(L, Value);</span><br><span class="line"><span class="built_in">lua_rawset</span>(L, <span class="number">-3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UUnLuaFunctionLibrary::PushValue</span><span class="params">(lua_State* L, <span class="keyword">const</span> TSharedPtr&lt;FJsonObject&gt;&amp; JsonObject)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">lua_newtable</span>(L);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; KeyValue : JsonObject-&gt;Values)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">PushKeyValue</span>(L, KeyValue.Key, KeyValue.Value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UUnLuaFunctionLibrary::PushValue</span><span class="params">(lua_State* L, <span class="keyword">const</span> TArray&lt;TSharedPtr&lt;FJsonValue&gt;&gt;&amp; JsonValues)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">lua_newtable</span>(L);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i = <span class="number">0</span>; i &lt; JsonValues.<span class="built_in">Num</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">PushKeyValue</span>(L, i + <span class="number">1</span>, JsonValues[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UUnLuaFunctionLibrary::PushValue</span><span class="params">(lua_State* L, <span class="keyword">const</span> TSharedPtr&lt;FJsonValue&gt;&amp; Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (Value-&gt;Type)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> EJson::String: UnLua::<span class="built_in">Push</span>(L, Value-&gt;<span class="built_in">AsString</span>()); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EJson::Number: UnLua::<span class="built_in">Push</span>(L, Value-&gt;<span class="built_in">AsNumber</span>()); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EJson::Boolean: UnLua::<span class="built_in">Push</span>(L, Value-&gt;<span class="built_in">AsBool</span>()); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EJson::Array: <span class="built_in">PushValue</span>(L, Value-&gt;<span class="built_in">AsArray</span>()); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> EJson::Object: <span class="built_in">PushValue</span>(L, Value-&gt;<span class="built_in">AsObject</span>()); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: <span class="built_in">lua_pushnil</span>(L); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">UUnLuaFunctionLibrary::GetLuaTableFromJsonPath</span><span class="params">(lua_State* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Top = <span class="built_in">lua_gettop</span>(L);</span><br><span class="line"><span class="keyword">if</span> (Top != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LogWarning</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Args count error. argc = %d&quot;</span>), Top);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> JsonFilePath = <span class="built_in">FString</span>(<span class="built_in">UTF8_TO_TCHAR</span>(<span class="built_in">lua_tostring</span>(L, <span class="number">1</span>)));</span><br><span class="line"><span class="keyword">if</span> (!FPaths::<span class="built_in">FileExists</span>(JsonFilePath))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LogWarning</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Json file path &#x27;%s&#x27; not found.&quot;</span>), *JsonFilePath);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FString FileContent;</span><br><span class="line"><span class="keyword">if</span> (FFileHelper::<span class="built_in">LoadFileToString</span>(FileContent, *JsonFilePath))</span><br><span class="line">&#123;</span><br><span class="line">TSharedPtr&lt;FJsonObject&gt; JsonObject;</span><br><span class="line"><span class="keyword">auto</span> JsonReader = TJsonReaderFactory&lt;&gt;::<span class="built_in">Create</span>(FileContent);</span><br><span class="line"><span class="keyword">if</span> (FJsonSerializer::<span class="built_in">Deserialize</span>(JsonReader, JsonObject))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">PushValue</span>(L, JsonObject);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LogWarning</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Parse json from file &#x27;%s&#x27; failed.&quot;</span>), *JsonFilePath);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LogWarning</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Load file path &#x27;%s&#x27; failed.&quot;</span>), *JsonFilePath);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><p><a href="https://www.lua.org/manual/5.4/manual.html">Lua 5.4 Reference</a>： <em>4.6 – Functions and Types</em></p><p><a href="https://chenanbao.github.io/2018/07/28/Lua%E8%99%9A%E6%8B%9F%E6%A0%88%E4%BA%A4%E4%BA%92%E6%B5%81%E7%A8%8B/">Lua 虚拟栈交互流程</a></p><p><a href="https://zhuanlan.zhihu.com/p/105356332">Unlua 解析</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;UnLua &amp;amp; C++ 交互&lt;/h1&gt;
&lt;p&gt;在 &lt;code&gt;Lua&lt;/code&gt; 中调用一般的 &lt;code&gt;UFUNCTION&lt;/code&gt; 反射比较简单直接，这里以从 &lt;code&gt;Lua&lt;/code&gt; 中调用 &lt;code&gt;CFUNCTION&lt;/code&gt; 为例</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="Gameplay" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/"/>
    
    
    <category term="Gameplay" scheme="https://www.bearchild.top/tags/Gameplay/"/>
    
    <category term="UE" scheme="https://www.bearchild.top/tags/UE/"/>
    
  </entry>
  
  <entry>
    <title>[UE]PlayerInfo高频同步解决方案</title>
    <link href="https://www.bearchild.top/2024/04/30/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/[UE]PlayerInfo%E9%AB%98%E9%A2%91%E5%90%8C%E6%AD%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://www.bearchild.top/2024/04/30/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/[UE]PlayerInfo%E9%AB%98%E9%A2%91%E5%90%8C%E6%AD%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2024-04-29T16:00:00.000Z</published>
    <updated>2024-05-31T14:40:56.361Z</updated>
    
    <content type="html"><![CDATA[<h1>PlayerInfo高频同步解决方案</h1><h2 id="描述">描述</h2><h3 id="需求目的">需求目的</h3><p>分析一个常见的需求： “在 <code>1P</code> 客户端显示 <code>3P</code> 的 <code>Transform</code> ”。</p><p>显然，在客户端存在 <code>3P</code> 的 <code>Pawn</code> 时，可以直接取 <code>Pawn</code> 的 <code>Transform</code>；但出于性能考虑，会进行各种 <code>AOI</code> 机制，在较远距离时客户端会将 <code>3P</code> 的 <code>Pawn</code> 裁剪掉，只留下 <code>PlayerState</code>（或者某个不被剪裁的数据 <code>Channel</code>） 用于同步。</p><p>一个直观的想法是将 <code>Transform</code> 直接通过对应的 <code>PlayerState</code> 属性同步给所有客户端；但出于性能考虑，对于同步一般会开启 <code>PushModel</code>；这种高频字段会频繁将 <code>PlayerState</code> 对应 <code>ActorChannel</code> 给 <code>MarkDirty</code>，导致 <code>PushModel</code> 功能基本失效，频繁进行同步的 <code>Diff</code> 等大开销的操作；</p><p>所以需要一个机制对这种情况进行优化。</p><h3 id="核心思路">核心思路</h3><p>对于 <code>DS</code>，创建一个 <code>Channel</code> 专门用于同步 <code>Player</code> 的高频变化信息，如 <code>Location</code>、<code>Rotation</code> 等；</p><p>对于同步的信息，进行适当的同步降频（不需要每帧同步）、字节压缩（舍弃部分精度，精确到 <code>float</code> 没有意义）；</p><p>同时为了保证 <code>Client</code> 的信息相对正确（同步降频会导致 <code>Location</code> 不连续），在 <code>1P</code> <code>Client</code> 进行信息的预测插值；</p><h2 id="实现">实现</h2><h3 id="Replicator">Replicator</h3><p>创建一个 <code>Actor</code> - <code>PlayerSyncInfoReplicator</code> 专门用于打包所有 <code>Player</code> 高频 <code>Info</code>（这里特指 <code>Location</code>、<code>Rotation</code>） 进行数据同步，在合适的地方进行初始化（比如 <code>ReplicationGraph</code> 初始化后）；</p><p><code>Replicator</code> 包括一个 <code>FPlayerSyncInfoContainer</code> 结构体用于打包数据、进行数据的收集、自定义序列化；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">APlayerSyncInfoReplicator::GetLifetimeReplicatedProps</span><span class="params">(TArray&lt;FLifetimeProperty&gt;&amp; OutLifetimeProps)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">GetLifetimeReplicatedProps</span>(OutLifetimeProps);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用 PushModel，始终进行同步操作</span></span><br><span class="line">FDoRepLifetimeParams Params;</span><br><span class="line"><span class="built_in">DOREPLIFETIME_WITH_PARAMS</span>(APlayerSyncInfoReplicator, PlayerSyncInfoContainer, Params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">APlayerSyncInfoReplicator::PreReplication</span><span class="params">(IRepChangedPropertyTracker&amp; ChangedPropertyTracker)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 收集数据</span></span><br><span class="line">PlayerSyncInfoContainer.<span class="built_in">PreReplication</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Define-Data-Byte-Compression">Define Data &amp; Byte Compression</h3><p>对于每一个 <code>Player</code>，需要收集 <code>FSyncInfo</code>，这里记录了一个 <code>SyncLocation : FVector_NetQuantize</code> 与 <code>Yaw</code>；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">USTRUCT</span>()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FSyncInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">FSyncInfo</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">FSyncInfo</span>(<span class="keyword">const</span> FVector_NetQuantize&amp; InSyncLocation) : <span class="built_in">SyncLocation</span>(InSyncLocation) &#123; &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NetSerialize</span><span class="params">(FArchive&amp; Ar, class UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">FVector_NetQuantize SyncLocation;</span><br><span class="line">    <span class="keyword">float</span> Yaw;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TStructOpsTypeTraits</span>&lt;</span> FSyncInfo &gt; : <span class="keyword">public</span> TStructOpsTypeTraitsBase2&lt; FSyncInfo &gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">WithNetSerializer = <span class="literal">true</span>,</span><br><span class="line">WithNetSharedSerialization = <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>FVector_NetQuantize</code> 是一个自定义的类型，进行了对 <code>FVector</code> 的数据压缩。</p><p>由于表达一个 <code>float</code> 所需要的 <code>Bit</code> 比较多，但大部分情况不需要同步到 <code>float</code> 这么高精度的数据），比如一个有限范围的大世界， <code>Location</code> 显然不需要那么高的精度表示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">USTRUCT</span>()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FVector_NetQuantize</span> :</span> <span class="keyword">public</span> FVector</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_USTRUCT_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="function">FORCEINLINE <span class="title">FVector_NetQuantize</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> FORCEINLINE <span class="title">FVector_NetQuantize</span><span class="params">(EForceInit E)</span> : FVector(E) </span></span><br><span class="line"><span class="function">FORCEINLINE FVector_NetQuantize( float InX, float InY, float InZ ) : FVector(InX, InY, InZ) &#123;</span>&#125;</span><br><span class="line"><span class="function">FORCEINLINE <span class="title">FVector_NetQuantize</span><span class="params">( <span class="keyword">const</span> FVector &amp;InVec )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FVector::<span class="keyword">operator</span>=(InVec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NetSerialize</span><span class="params">(FArchive&amp; Ar, class UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bOutSuccess = SerializePackedVector&lt;<span class="number">1</span>, <span class="number">20</span>&gt;(*<span class="keyword">this</span>, Ar);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TStructOpsTypeTraits</span>&lt;</span> FVector_NetQuantize &gt; : <span class="keyword">public</span> TStructOpsTypeTraitsBase2&lt; FVector_NetQuantize &gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">WithNetSerializer = <span class="literal">true</span>,</span><br><span class="line">WithNetSharedSerialization = <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里除了将 <code>FVector</code> 压缩为一个 <code>20bit</code> 的 <code>FVector_NetQuantize</code>，还可以对 <code>Yaw</code> 这一旋转角度进行压缩：</p><ol><li>定义一个 <code>uint8</code> 的 <code>ByteYaw</code>，存储 <code>Yaw</code> 的压缩版本，通过 <code>FRotator::CompressAxisToByte</code> 将其压缩为一个字节；</li><li>新增一个标志位 <code>NotZero</code> 判断 <code>ByteRaw</code> 是否是 <code>0</code>（不需要同步 <code>Yaw</code> 时候，该值就为 <code>0</code>，可能清空较多），如果为 <code>0</code>，则只需要存储 <code>NotZero</code> 的值（1位），而不是整个 <code>ByteYaw</code>（8位）；</li></ol><p>对于 <code>FSyncInfo</code>，自定义其 <code>NetSerialize</code> 逻辑：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FSyncInfo::NetSerialize</span><span class="params">(FArchive&amp; Ar, UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SyncLocation.<span class="built_in">NetSerialize</span>(Ar, Map, bOutSuccess);</span><br><span class="line"></span><br><span class="line">uint8 ByteYaw = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ( Ar.<span class="built_in">IsSaving</span>() )</span><br><span class="line">ByteYaw = FRotator::<span class="built_in">CompressAxisToByte</span>(Yaw);</span><br><span class="line"></span><br><span class="line">uint8 NotZero = ByteYaw != <span class="number">0</span>;</span><br><span class="line">Ar.<span class="built_in">SerializeBits</span>( &amp;NotZero, <span class="number">1</span> );</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> ( NotZero ) Ar &lt;&lt; ByteYaw;</span><br><span class="line">    <span class="keyword">else</span> ByteYaw = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( Ar.<span class="built_in">IsLoading</span>() )</span><br><span class="line">&#123;</span><br><span class="line">Yaw= FRotator::<span class="built_in">DecompressAxisFromByte</span>(ByteYaw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里就定义完毕了 <code>FSyncInfo</code>，显然需要一个 <code>FSyncInfo</code> 对 <code>Player</code> <code>UID</code> 的映射，打包成一个结构体 <code>FPlayerSyncInfo</code>。</p><p>一般使用 <code>uint64</code> 来保存 <code>UID</code>，可以简单的用额外的一个 <code>bit</code> 判断 <code>UID</code> 是否 <code>&gt; MAX_uint32</code>，用来节省一些流量（也可以将 <code>uint64</code> 分为 4 个 <code>16bit</code>，用额外的 <code>2bit</code> 来判断在哪一段范围）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">USTRUCT</span>()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FPlayerSyncInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="built_in">FPlayerSyncInfo</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">FPlayerSyncInfo</span>(uint64 UID, <span class="keyword">const</span> FSyncInfo&amp; SyncInfo)</span><br><span class="line">: <span class="built_in">UID</span>(UID), <span class="built_in">SyncInfo</span>(SyncInfo) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NetSerialize</span><span class="params">(FArchive&amp; Ar, class UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">uint64 UID;</span><br><span class="line">FSyncInfo SyncInfo;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TStructOpsTypeTraits</span>&lt;</span> FPlayerSyncInfo &gt; : <span class="keyword">public</span> TStructOpsTypeTraitsBase2&lt; FPlayerSyncInfo &gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">WithNetSerializer = <span class="literal">true</span>,</span><br><span class="line">WithNetSharedSerialization = <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FPlayerSyncInfo::NetSerialize</span><span class="params">(FArchive&amp; Ar, UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SyncInfo.<span class="built_in">NetSerialize</span>(Ar, Map, bOutSuccess);</span><br><span class="line"></span><br><span class="line">uint8 UID_IsHigh = UID &gt; MAX_uint32;</span><br><span class="line">Ar.<span class="built_in">SerializeBits</span>(&amp;IsHigh, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (UID_IsHigh)</span><br><span class="line">&#123;</span><br><span class="line">Ar &lt;&lt; UID;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">uint32 UID_LowBits = (uint32)UID;</span><br><span class="line">Ar &lt;&lt; UID_LowBits;</span><br><span class="line">UID = (uint64)UID_LowBits;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Collect-Data">Collect Data</h3><p><code>FPlayerSyncInfoContainer</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">USTRUCT</span>()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FPlayerSyncInfoContainer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">FPlayerSyncInfoContainer</span>() &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NetSerialize</span><span class="params">(FArchive&amp; Ar, class UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreReplication</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> FPlayerSyncInfoContainer&amp; Other) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FrameCounter == Other.FrameCounter;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> FPlayerSyncInfoContainer&amp; Other) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(*<span class="keyword">this</span> == Other);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CollectReplicateData</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 控制同步频率</span></span><br><span class="line">uint64 FrameCounter = <span class="number">0</span>;</span><br><span class="line">uint32 PastFrameCounter = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> bHasCollectDataThisFrame = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 同步信息的数量（对应玩家个数）</span></span><br><span class="line">uint32 InfoCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// Bit 流</span></span><br><span class="line">TSharedPtr &lt;FNetBitWriter&gt; WriterPtr;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Replicator</span></span><br><span class="line">    TWeakObjectPtr &lt;<span class="class"><span class="keyword">class</span> <span class="title">APlayerSyncInfoReplicator</span>&gt;</span> Replicator;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TStructOpsTypeTraits</span>&lt;</span>FPlayerSyncInfoContainer&gt; : <span class="keyword">public</span> TStructOpsTypeTraitsBase2&lt;FPlayerSyncInfoContainer&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">WithNetSerializer = <span class="literal">true</span>,</span><br><span class="line">WithIdenticalViaEquality = <span class="literal">true</span>,</span><br><span class="line">WithCopy = <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 <code>PreReplication</code> 中进行 <code>CollectReplicateData</code>；</p><p>通过 <code>CVarPlayerSyncInfoReplicateFrameInternal</code> 来控制同步的频率，记录 <code>PastFrameCounter</code> 用于记录过去了多少帧，用于后续判断；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FPlayerSyncInfoContainer::PreReplication</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (FrameCounter == GFrameCounter) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    PastFrameCounter = FMath::Clamp&lt;uint32&gt;(GFrameCounter - FrameCounter, <span class="number">1</span>, CVarPlayerSyncInfoReplicateFrameInternal + <span class="number">1</span>);</span><br><span class="line">FrameCounter = GFrameCounter;</span><br><span class="line">bHasCollectDataThisFrame = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CollectReplicateData</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>CollectReplicate</code> 中进行数据收集与统计，将收集到的数据字节流写入 <code>Writer</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FPlayerSyncInfoContainer::CollectReplicateData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Replicator.<span class="built_in">IsValid</span>()) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (bHasCollectDataThisFrame) <span class="keyword">return</span>;</span><br><span class="line">bHasCollectDataThisFrame = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!WriterPtr.<span class="built_in">IsValid</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        WriterPtr = MakeShared&lt;FNetBitWriter&gt;();</span><br><span class="line">        WriterPtr-&gt;<span class="built_in">SetAllowResize</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        WriterPtr.<span class="built_in">Get</span>()-&gt;<span class="built_in">Reset</span>();</span><br><span class="line">        InfoCount = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FNetBitWriter* Writer = WriterPtr.<span class="built_in">Get</span>();</span><br><span class="line">    <span class="keyword">bool</span> bOutSuccess = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">auto</span> SerializePlayerSyncInfo = [&amp;](<span class="keyword">const</span> <span class="keyword">auto</span>&amp; PlayerState)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!PlayerState.<span class="built_in">IsValid</span>()) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        uint64 UID = PlayerState-&gt;<span class="built_in">GetUID</span>();</span><br><span class="line">        FVector Location = INVALID_LOCATION</span><br><span class="line">        <span class="keyword">float</span> Yaw = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (APawn* PlayerPawn = PlayerState-&gt;<span class="built_in">GetPawn</span>(); <span class="built_in">IsValid</span>(PlayerPawn))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">const</span> FTransform&amp; Transform = PlayerPawn-&gt;<span class="built_in">GetTransform</span>();</span><br><span class="line">            Location = Transform.<span class="built_in">GetLocation</span>();</span><br><span class="line">            Yaw = Transform.<span class="built_in">Rotator</span>().Yaw;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">FVector_NetQuantize <span class="title">SyncLocation</span><span class="params">(Location.X, Location.Y, Location.Z)</span></span>;</span><br><span class="line">        <span class="function">FPlayerSyncInfo <span class="title">PlayerSyncInfo</span><span class="params">(UID, &#123;SyncLocation, Yaw&#125;)</span></span>;</span><br><span class="line">        PlayerSyncInfo.<span class="built_in">NetSerialize</span>(*Writer, <span class="literal">nullptr</span>, bOutSuccess);</span><br><span class="line">        InfoCount++;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; PlayerState : PlayerArray)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">SerializePlayerSyncInfo</span>(PlayerState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Serialize">Serialize</h3><p>对于每一个 <code>Player</code> 的 <code>Connection</code>，判断其是否满足同步帧数限制，每次 <code>NetSerialize</code> ，将 <code>ConnectionDriver-&gt;NextReplicateFrameCount -= PlayerSyncInfoContainer.PastFameCounter</code>，若 <code>&lt;= 0</code> 则重置其 <code>NextReplicateFrameCount</code> 为 <code>CVarPlayerSyncInfoReplicateFrameInternal</code>，并认为本次需要对该 <code>Connection</code> 进行同步；若需要同步，将 <code>Writer </code> 中的数据进行序列化；</p><p>在反序列化时，找到对应的 <code>Player</code>，将数据设置到其 <code>PlayerState</code> 中；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FPlayerSyncInfoContainer::NetSerialize</span><span class="params">(FArchive&amp; Ar, class UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Ar.<span class="built_in">IsSaving</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> PackageMapClient = Cast&lt;UPackageMapClient&gt;(Map);</span><br><span class="line"><span class="keyword">auto</span> Connection = PackageMapClient-&gt;<span class="built_in">GetConnection</span>();</span><br><span class="line"><span class="keyword">auto</span> ConnectionDriver = Connection-&gt;<span class="built_in">GetReplicationConnectionDriver</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">bool</span> bNeedReplicate = <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (ConnectionDriver-&gt;NextReplicateFrameCount &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            bNeedReplicate = <span class="literal">true</span>;</span><br><span class="line">            ConnectionDriver-&gt;NextReplicateFrameCount = CVarPlayerSyncInfoReplicateFrameInternal</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bNeedReplicate)</span><br><span class="line">        &#123;</span><br><span class="line">            Ar.<span class="built_in">SerializeIntPacked</span>(InfoCount);</span><br><span class="line">            Ar.<span class="built_in">SerializeBits</span>(WriterPtr-&gt;<span class="built_in">GetData</span>(), WriterPtr-&gt;<span class="built_in">GetNumBits</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            uint32 Count = <span class="number">0</span>;</span><br><span class="line">            Ar.<span class="built_in">SerializeIntPacked</span>(Count);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        bOutSuccess = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">// 将收集到的数据同步到客户端，在客户端进行数据的反序列化，</span></span><br><span class="line">uint32 Count = <span class="number">0</span>;</span><br><span class="line">Ar.<span class="built_in">SerializeIntPacked</span>(Count);</span><br><span class="line"><span class="keyword">if</span> (Count == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录当前收包累计次数，用于预测等</span></span><br><span class="line"><span class="keyword">const</span> uint64 FrameNum = ++GDSPlayerSyncInfoReplicateFrameNum;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> Index = <span class="number">0</span>; Index &lt; Count; Index++)</span><br><span class="line">&#123;</span><br><span class="line">FPlayerSyncInfo PlayerSyncInfo;</span><br><span class="line">PlayerSyncInfo.<span class="built_in">NetSerialize</span>( Ar, Map, bOutSuccess );</span><br><span class="line"></span><br><span class="line">uint64 UID = PlayerSyncInfo.UID;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> PlayerState = <span class="built_in">GET_PLAYERSTATE_BY_UID</span>(UID))</span><br><span class="line">&#123;</span><br><span class="line">PlayerState-&gt;<span class="built_in">SetPlayerSyncInfo</span>(PlayerSyncInfo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client-Predict">Client Predict</h3><p>对于 <code>Client</code>，会间隔收到 <code>3P</code> 的  <code>PlayerSyncInfo</code>，同时在收包的时候记录了帧号。</p><p>对于比如 <code>Location</code> 这样的数据，显然需要保证其连续性。</p><p>于是可以根据这些信息做一个简单的预测：</p><ol><li>在 <code>Client</code> 存在 <code>Pawn</code> 时，直接使用 <code>Pawn</code> 的位置，并且强制更新预测与期望；</li><li>在收到一个新包 <code>CurrentBack</code> 时，使用 <code>PrePack -&gt; CurrentBack</code> 的 <code>LocationDiff / PreFrameInternal</code> 计算出一个新的预测速度 <code>PredictCalcDeltaSyncLocationVelocity</code>，同时可以根据实际情况  <code>* SpeedFactor</code> 来进行适当修改；</li><li>每次 <code>GetSyncLocation</code> 时尝试更新预测信息，在当前帧 <code>CurrentFrame</code>，利用 <code>PredictCalcDeltaSyncLocationVelocity * FrameInternal</code> 来外推当前所在 <code>Location</code>，这里的 <code>FrameInternal</code> 是从 上一次预测帧 <code>LastPredictFrame</code> 开始经过的帧数，预测完毕更新 <code>LastPredictFrame</code>；</li><li>如果当前位置和预测期望位置太远，则直接设置为期望位置，不进行插值；</li></ol><pre class="mermaid">flowchart LRA(PrePack)B(CurrentBack)C(NextBack)Last([LastPredictFrame])Now([CurrentFrame])A---->|PreFrameInternal| BB-->|Internal|LastLast-->|Internal|NowNow-..->C</pre><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">APlayerState::SetSyncLocation</span><span class="params">(FVector InSyncLocation, int32 CurrentFrameNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> bEnableSet = <span class="built_in">EnableSetSyncLocation</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (bEnableSet)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// --- Predict</span></span><br><span class="line">        int64 DeltaFrameCount = UKismetSystemLibrary::<span class="built_in">GetFrameCount</span>() - SyncLocationFrameCount;</span><br><span class="line">        <span class="keyword">float</span> SpeedUpFactor = <span class="number">1.05f</span>;</span><br><span class="line">        PredictCalcDeltaSyncLocationVelocity = DeltaFrameCount &lt;= <span class="number">0</span> ? <span class="number">0.0f</span> : FVector::<span class="built_in">Dist</span>(InSyncLocation, ActorSyncLocation) / DeltaFrameCount * SpeedUpFactor;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// --- UpdateLocation</span></span><br><span class="line">        ActorSyncLocation = InSyncLocation;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        PredictCalcDeltaSyncLocationVelocity = <span class="number">0.0f</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// --- UpdateFrame</span></span><br><span class="line">SyncLocationUpdateFrameNum = CurrentFrameNum;</span><br><span class="line">SyncLocationFrameCount = UKismetSystemLibrary::<span class="built_in">GetFrameCount</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">APlayerState::EnableSetSyncLocation</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// if WeakNet then Disable...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">FVector <span class="title">APlayerState::GetSyncLocation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (APawn* Pawn = <span class="built_in">GetPawn</span>(); <span class="built_in">IsValid</span>(Pawn))</span><br><span class="line">&#123;</span><br><span class="line">        FVector Location = Pawn-&gt;<span class="built_in">GetTransform</span>().<span class="built_in">GetLocation</span>();</span><br><span class="line">        ActorSyncLocation.<span class="built_in">Set</span>(Loc.X, Loc.Y, Loc.Z);</span><br><span class="line">        <span class="built_in">UpdatePredictSyncLocation</span>(ActorSyncLocation, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> ActorSyncLocation;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否正常发包，若新的 PlayerSyncInfoPack 中无该 PlayerState 则不采用预测信息</span></span><br><span class="line"><span class="keyword">if</span> (GDSPlayerSyncInfoReplicateFrameNum == SyncLocationUpdateFrameNum &amp;&amp; SyncLocationUpdateFrameNum != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">UpdatePredictSyncLocation</span>(ActorSyncLocation);</span><br><span class="line"><span class="keyword">return</span> PredictSyncLocation;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> InvalidSyncLocation;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">APlayerState::UpdatePredictSyncLocation</span><span class="params">(FVector InLocation, <span class="keyword">bool</span> bForce)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">int64 CurrentFrame = UKismetSystemLibrary::<span class="built_in">GetFrameCount</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 强制更新预测信息</span></span><br><span class="line"><span class="keyword">if</span> (bForce == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">LastPredictCalcLocationFrameCount = CurrentFrame;</span><br><span class="line">PredictSyncLocation = InLocation;</span><br><span class="line">        PredictCalcDeltaSyncLocationVelocity = <span class="number">0.0f</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int64 DeltaFrame = CurrentFrame - LastPredictCalcLocationFrameCount;</span><br><span class="line"><span class="keyword">if</span> (DeltaFrame &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预测速度为 0 / 距离超过 DistanceLimit，直接传送</span></span><br><span class="line"><span class="keyword">if</span> ( FMath::<span class="built_in">IsNearlyEqual</span>(PredictCalcDeltaSyncLocationVelocity, <span class="number">0.0f</span>) || FVector::<span class="built_in">DistSquared</span>(PredictSyncLocation, InLocation) &gt;= PredictSyncLocationDistanceLimitSquared)</span><br><span class="line">&#123;</span><br><span class="line">PredictSyncLocation = InLocation;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">PredictSyncLocation += DeltaFrame * (InLocation - PredictSyncLocation).<span class="built_in">GetSafeNormal</span>() * PredictCalcDeltaSyncLocationVelocity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LastPredictCalcLocationFrameCount = CurrentFrame;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，就可以得到一个相对丝滑的 <code>Location</code> 信息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;PlayerInfo高频同步解决方案&lt;/h1&gt;
&lt;h2 id=&quot;描述&quot;&gt;描述&lt;/h2&gt;
&lt;h3 id=&quot;需求目的&quot;&gt;需求目的&lt;/h3&gt;
&lt;p&gt;分析一个常见的需求： “在 &lt;code&gt;1P&lt;/code&gt; 客户端显示 &lt;code&gt;3P&lt;/code&gt; 的 &lt;code&gt;Trans</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="网络" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="UE" scheme="https://www.bearchild.top/tags/UE/"/>
    
    <category term="网络" scheme="https://www.bearchild.top/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>ACT浅思</title>
    <link href="https://www.bearchild.top/2024/04/24/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/3C/ACT%E6%B5%85%E6%80%9D/"/>
    <id>https://www.bearchild.top/2024/04/24/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/3C/ACT%E6%B5%85%E6%80%9D/</id>
    <published>2024-04-23T16:00:00.000Z</published>
    <updated>2024-04-26T14:19:18.605Z</updated>
    
    <content type="html"><![CDATA[<h1>ACT浅思</h1><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202404262219322.png" alt="image-20240426221904635"></p><h2 id="ACT-表现">ACT 表现</h2><h3 id="动作">动作</h3><ol><li>动作节奏：</li></ol><pre class="mermaid">flowchart LR前摇--->攻击判定--->后摇-->后摇-可打断</pre><p>需要控制好每个阶段的时间分配，表现不同的节奏；</p><blockquote><p>较长的后摇可以方便玩家明确下一步操作（不攻击、打断后摇继续攻击），判定更明确；</p><p>较短的后摇可以增加动作连续性连续，提升手感；</p></blockquote><ol start="2"><li>动画配合：</li></ol><p>动画曲线配合：从动画中提取曲线，配合曲线调整位移；比如移动，需要在脚落下的那一刻位移速度最大，其余阶段几乎不位移；</p><p>攻击方、受击方动画、位移需要匹配；</p><ol start="3"><li>受击表现：</li></ol><p>受击动作，可以有夸张的表现，具体在 硬直、击退、击飞 等；同时可以添加骨骼抖动强化受击反馈；</p><ol start="4"><li>爽感优化</li></ol><p>顿帧：伤害越大顿帧越久，一般发生在 攻击方接触受击方、技能或连招开始与结束时；</p><p>连招：较长的连招（意味着更大的风险）过后，可以添加夸张的收尾表演，释放压力；</p><p>终结技：目标强僵直、残血时可以添加慢镜头终结技；</p><h3 id="镜头">镜头</h3><ol><li>运镜逻辑：</li></ol><p>镜头内容：需要保证全程看清目标，更多以目标为核心；需要保证目标完整在镜头内（尤其是使用大位移技能时）；尽量避免主角与目标重叠；</p><p>镜头构图：可以稍微错位，可以看清目标动作；</p><ol start="2"><li>镜头效果：</li></ol><p>屏幕震动：普攻可以增加左右偏移、重击增加上下纵深偏移；</p><p>子弹时间：在合适的时候增加子弹时间，可以表现出力量感；</p><p>镜头模糊：径向模糊、动态模糊、空气扭曲等效果；可以表现出速度感；</p><h3 id="UI">UI</h3><ol><li><code>HUD</code> 的缩放、偏移、光效；</li><li>屏幕闪屏：在使用技能或击杀目标时，可以增加闪屏或者黑屏淡入淡出等效果；</li><li>准心变化：颜色、大小、特殊形态（骷髅表示击杀、打叉表示命中或爆头）；</li><li>跳字：分为普攻、暴击、恢复；主要调整：轨迹（抛物线、弹出、上浮）、缩放、透明度、重力、字体、颜色；比如暴击一般离散范围小、上浮位移大、爆发力可以更强；</li><li>连击提示：与击打节奏契合；</li><li>受击指向：被攻击的方向；</li></ol><h3 id="特殊效果">特殊效果</h3><ol><li>特效：</li></ol><blockquote><ol><li>普通特效：技能本身效果（武器发光等），保证和场景颜色差异大；</li><li>粒子特效：与目标解除时出现 命中/防御/暴击 等粒子表现；场景破碎效果等；</li><li>环境特效：对环境的氛围影响，场景灯光、场景变色；</li><li>角色特效：角色自身的发光等表现；</li></ol></blockquote><ol start="2"><li>音效：在进行指定行为时，需要有特定音效反馈，比如冲击、发射、受击等；</li><li>背景音乐：战斗和漫游需要有不同的音乐变化；</li><li>物理震动：手柄、手机的震动反馈；</li></ol><h2 id="ACT-数值">ACT 数值</h2><h3 id="攻击方">攻击方</h3><ol><li><p>基本属性：攻击力、暴击率、属性加成；</p></li><li><p>攻击范围：</p><blockquote><ol><li>自身：关注攻击碰撞盒，方向、距离、范围等；</li><li>抛射物：关注触发方式（时间、瞄准方式）、轨迹等；</li></ol></blockquote></li><li><p>攻击强度：</p><blockquote><ol><li>进攻强度：与对方防御强度对比，决定对对方造成的伤害与效果；</li><li>维持强度：保证攻击完整的能力，与敌方进攻强度对比，决定攻击是否会被对方攻击打断；</li><li>命中效果：硬直时间（防御、命中），特殊表现（击飞、倒地）</li></ol></blockquote></li><li><p>攻击节奏：前摇、生效（判定时间、持续时间）、后摇</p></li><li><p>攻击位移：水平位移、空中位移</p></li></ol><h3 id="防守方">防守方</h3><ol><li><p>基本属性：防御值、护甲、抗性、伤害减免；</p></li><li><p>防守范围：</p><blockquote><ol><li>受击判定：是否进行判定（硬直）、无敌帧</li><li>受击范围：受击碰撞盒、防守碰撞盒</li></ol></blockquote></li><li><p>防守强度：</p><blockquote><ol><li>格挡：格挡强度、格挡范围、移动距离</li><li>闪避：移动距离、无敌时间、后摇硬直时间</li><li>反击：允许反击的时间与状态、无敌时间、硬直时间</li></ol></blockquote></li><li><p>防守体力：</p><blockquote><ol><li>体力上限：最大体力值，受到攻击、进行防守等行为会降低体力，体力为 0 会进入硬直</li><li>体力恢复：脱战恢复体力</li></ol></blockquote></li></ol><h2 id="参考">参考</h2><p><a href="https://zhuanlan.zhihu.com/p/360843202">拳打冥王脚踢地府——《黑帝斯》战斗设计分析</a></p><p><a href="https://game.academy.163.com/course/careerArticle?course=324">最畅爽的打击感从何而来？</a></p><p><a href="https://zhuanlan.zhihu.com/p/342697831">《战双帕弥什》的动作打击感是怎么做出来的</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;ACT浅思&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202404262219322.png&quot; alt=&quot;image-20</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="3C" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/3C/"/>
    
    
    <category term="3C" scheme="https://www.bearchild.top/tags/3C/"/>
    
  </entry>
  
  <entry>
    <title>[UE]ReplicationGraph源码浅析</title>
    <link href="https://www.bearchild.top/2024/04/21/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/[UE]ReplicationGraph%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/"/>
    <id>https://www.bearchild.top/2024/04/21/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/[UE]ReplicationGraph%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/</id>
    <published>2024-04-20T16:00:00.000Z</published>
    <updated>2024-04-26T16:30:52.757Z</updated>
    
    <content type="html"><![CDATA[<h1>ReplicationGraph源码浅析</h1><h2 id="简介">简介</h2><p><code>UnrealEngine</code> 基本的网络同步在进行同步时需要对每个连接判断每个 <code>Actor</code> 是否需要同步，开销较大；</p><p>可以通过实现 <code>Replication</code> ，实现一个不同的 <code>ReplicationDriver</code> 来优化性能；</p><p><code>Replication</code> 将 <code>World</code> 分为多个区域 <code>Grid</code>，把 <code>Actor</code> 根据所在 <code>Grid</code> 进行分类编组，可以快速找出需要同步的 <code>Actor</code>，同时确定哪些区域需要进行同步复制。</p><h2 id="数据结构">数据结构</h2><pre class="mermaid">classDiagram    class UReplicationGraph</pre><ol><li><code>FGlobalActorReplicationInfo </code>：同步的 <code>Actor</code> 信息，包括</li></ol><blockquote><p><code>Settings</code>：<code>FClassReplicationInfo</code>，每个 <code>Actor Class</code> 对应的同步配置，包括 <code>CullDistance</code>、<code>ReplicationPeriodFrame</code>、<code>PriorityScale</code> 等；</p><p><code>Events</code>：<code>FGlobalActorReplicationEvents Events</code>，记录休眠状态的改变时，从休眠列表中添加或者移除；</p><p><code>FConnectionReplicationActorInfo</code>：对于 <code>Connection</code> 同步的 <code>Actor</code> 信息；</p></blockquote><ol start="3"><li><p><code>ReplicationGraphNode</code>：<code>GraphNode</code> 基类</p></li><li><p><code>ReplicationGraphNode_ActorList</code>：记录同步的 <code>Actors</code>；在 <code>StreamingLevelCollection</code> （以 <code>SubLevelName</code> 为 <code>Key</code> 的 <code>List</code>）中记录 <code>SubLevel</code> 的 <code>Actor</code>，否则在 <code>ReplicationActorList</code> 中记录。</p></li><li><p><code>GlobalGraphNodes</code>：维护 <code>GridSpatialization2D</code></p></li></ol><h2 id="GraphNode">GraphNode</h2><pre class="mermaid">classDiagram    class UReplicationGraphNode {        TArray~UReplicationGraphNode*~ AllChildNodes        GatherActorListsForConnection()        RouteAddNetworkActorToNodes()        RouteRemoveNetworkActorToNodes()    }    UReplicationGraphNode <|-- UReplicationGraphNode_ActorList     class UReplicationGraphNode_ActorList {    FActorRepListRefView ReplicationActorList    }            UReplicationGraphNode <|-- UReplicationGraphNode_GridSpatialization2D    class UReplicationGraphNode_GridSpatialization2D {        TArray~TArray[UReplicationGraphNode_GridCell*]~ Grid;    }        UReplicationGraphNode <|-- UReplicationGraphNode_AlwaysRelevant    class UReplicationGraphNode_AlwaysRelevant{        TArray~UClass*~AlwaysRelevantClasses;    }        UReplicationGraphNode <|-- UReplicationGraphNode_ActorListFrequencyBuckets         UReplicationGraphNode_ActorList <|-- UReplicationGraphNode_GridCell        UReplicationGraphNode_ActorList <|-- UReplicationGraphNode_AlwaysRelevant_ForConnection</pre><ol><li><code>GridSpatalization2D</code>：将世界划分为 <code>2D</code> 网格，按位置把 <code>Actor</code> 分到不同的 <code>GridCell</code> 中，按空间管理<code>Actor</code> 是否进行同步，每帧更新 <code>GridCell</code> 内的 <code>Actor</code>；</li><li><code>GridCell</code>：<code>ReplicationActorList</code> 缓存着在该 <code>GridCell</code> 中的所有静态 <code>Actor</code>，<code>DynamicNodes</code> 里记录动态的 <code>Actor</code>，<code>DormancyNode</code> 里记录休眠的<code>Actor</code>；</li><li><code>AlwaysRelevant </code>：处理总是发送 <code>Net Updates</code> 给 所有 <code>Connections</code> 的 <code>Actors</code>；</li><li><code>AlwaysRelevant_ForConnection</code>：处理总是发送 <code>Net Updates</code> 给 特定 <code>Connection</code> 的 <code>Actors</code> ，一般是同步给 <code>PlayerController</code> 和 <code>ViewTarget</code>；</li><li><code>ActorListFrequencyBuckets </code>：记录地图格子上的 动态 <code>Actor</code> ;</li></ol><h2 id="生命周期">生命周期</h2><h3 id="Init">Init</h3><pre class="mermaid">graph TDStart(UNetDriver::InitBase) --> A("UNetDriver::SetReplicationDriver")A --> B("UReplicationGraph::InitializeActorsInWorld")B --> | 将World中的同步对象添加到对应GraphNode | C("UReplicationGraph::InitializeForWorld")C --> D("UReplicationGraph::AddNetworkActor(AActor* Actor)") A --> E(InitForNetDriver)E --> F(InitGlobalActorClassSettings)E --> G(InitGlobalGraphNodes)</pre><p><code>InitGlobalActorClassSettings</code>：设置 <code>CulltDistance</code>、<code>ReplicationPeriodFrame</code>；注册 <code>Actor</code> 对应的 <code>ClassReplicationInfo</code> 到 <code>GlobalActorReplicationInfoMap</code>；</p><p><code>InitGlobalGraphNodes</code>：创建 <code>GridSpatialization2D</code>、<code>AlwaysRelevant</code> 的 <code>GraphNode</code>；</p><p><code>InitConnectionGraphNodes</code>：创建 <code>AlwaysRelevantForConnection</code> 的 <code>GraphNode</code>；</p><p><code>RouteAddNetworkActorToNodes </code>：生成 <code>Actor</code> 时，添加 <code>NetworkActor</code>，分发 <code>Actor</code> 到 <code>GraphNode</code>；</p><p><code>RouteRemoveNetworkActorToNodes </code>：销毁 <code>Actor</code> 时，删除 <code>NetworkActor</code>，通知<code>GraphNode</code> 移除 <code>Actor</code>；</p><h3 id="Repliate">Repliate</h3><pre class="mermaid">graph TBStart(ServerReplicateActors) --> A(PrepareForReplication)A --> B(GatherActorListsForConnection)B --> C(ReplicateActorListsForConnections_Default)C --> D[ReplicateSingleActor]</pre><ol><li><p><code>PrepareForReplication</code> ： 调用 <code>GraphNode</code> 的 <code>PrepareForReplication</code>：</p><p>对于 <code>GridSpatialization2D</code>，会遍历 <code>Actor</code>，更新其所在的 <code>Grid</code>；</p><p>对于 <code>AlwaysRelevant</code>，记录需要同步给所有连接的 <code>Actor</code>；</p></li><li><p><code>GatherActorListsForConnection</code> ： 遍历 <code>Connections</code> 收集 <code>ReplicationActorList</code></p><p>针对每个 <code>Connection</code> 遍历 <code>GlobalGraphNodes</code> 和 <code>Connection</code> 的<code>ConnectionGraphNodes</code>，调用其 <code>GatherActorListsForConnection</code>，收集需要同步给这个<code>Connection</code> 的 <code>Actor</code>；</p><p>对于 <code>GridSpatialization2D</code>，通过其 <code>GridCellNode</code> 根据 <code>Actor</code> 的<code>ViewLocation</code> 收集；</p><p>收集的 <code>Actor</code> 默认加到 <code>GatheredReplicationListsForConnection</code> 里的 <code>EActorRepListTypeFlags.Default List</code>。</p></li><li><p><code>ReplicateActorListsForConnections_Default</code>：进行 <code>Replicate</code> 的同步检测与排序</p><p>对 <code>GatheredReplicationListsForConnection</code> 里的 <code>Actor</code>，进行检测；</p><p>首先排除 <code>Dormancy</code>、不满足<code>ReplicateFrame</code> 的 <code>Actor</code>，然后根据优先级排序（<code>Distance</code>、<code>Starvation</code>、<code>逻辑判定</code>、<code>Owner &amp; ViewTarget</code>)，将结果缓存在 <code>PrioritizedReplicationList</code> 中；</p></li><li><p><code>ReplicateSingleActor</code>：对排好序的 <code>PrioritizedReplicationList</code> 调用 <code>ReplicateSingleActor</code> 进行同步。</p></li></ol><h2 id="参考">参考</h2><p><a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/replication-graph-in-unreal-engine">UE ReplicationGraph Document</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;ReplicationGraph源码浅析&lt;/h1&gt;
&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;UnrealEngine&lt;/code&gt; 基本的网络同步在进行同步时需要对每个连接判断每个 &lt;code&gt;Actor&lt;/code&gt; 是否需要同步，开销较大；&lt;/p&gt;
</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="网络" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="UE" scheme="https://www.bearchild.top/tags/UE/"/>
    
    <category term="网络" scheme="https://www.bearchild.top/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>[UE]Networking源码浅析</title>
    <link href="https://www.bearchild.top/2024/04/20/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/[UE]Networking%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/"/>
    <id>https://www.bearchild.top/2024/04/20/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/[UE]Networking%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/</id>
    <published>2024-04-19T16:00:00.000Z</published>
    <updated>2024-04-26T15:30:09.646Z</updated>
    
    <content type="html"><![CDATA[<h1>Networking源码浅析</h1><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202404262212892.png" alt="image-20240426221216657"></p><h2 id="定义">定义</h2><p><code>Bunch</code>：表示一组相关的网络数据，包含 <code>RPC / 属性同步</code> 等信息，<code>UE</code> 中 <code>DS/Client</code> 通信的基本单位。</p><p><code>Packet</code>：<code>UDP</code> 的基本传输单位，可以打包一个或多个 <code>Bunch</code>，在接受端进行解析。</p><p><code>NetDriver</code>：管理网络通信，比如管理连接、处理数据包的发送和接收、处理网络事件。</p><p><code>NetConnection</code>：表示一个网络连接，与一个 <code>NetDriver</code> 关联，并通过 <code>NetDriver</code> 进行实际的网络通信。</p><p><code>Channel</code>：管理网络传输，进行数据分类，提供  <code>SendBunch</code>、<code>ReceivedRawBunch</code> 方法，由 <code>NetConnection</code> 管理，一个 <code>NetConnection</code> 可以包含多种 <code>Channel</code>。</p><p><code>FObjectReplicator</code>：处理对象的网络同步，保存属性快照，进行状态改变发送、更新同步状态、接受与发送消息。</p><p><code>ActorChannel</code>：关联特定的 <code>Actor</code> 负责其同步，包含多个 <code>FObjectReplicator</code> 用于复制其 <code>Actor</code>、<code>ActorComponent</code> 。</p><p><code>FRepLayout</code>：管理复制的属性，定义底层数据内存布局，数据比较、序列化与反序列化等。</p><h2 id="RPC">RPC</h2><p><strong>Server RPC</strong></p><table><thead><tr><th>Calling Machine</th><th>Owning Connection</th><th>Executing Machine</th></tr></thead><tbody><tr><td>Server</td><td>Client</td><td>Server</td></tr><tr><td>Server</td><td>Server</td><td>Server</td></tr><tr><td>Server</td><td>None</td><td>Server</td></tr><tr><td>Client</td><td>Invoking Client</td><td>Server</td></tr><tr><td>Client</td><td>Different Client</td><td>Dropped</td></tr><tr><td>Client</td><td>Server</td><td>Dropped</td></tr><tr><td>Client</td><td>None</td><td>Dropped</td></tr></tbody></table><p><strong>Client RPC</strong></p><table><thead><tr><th>Calling Machine</th><th>Owning Connection</th><th>Executing Machine</th></tr></thead><tbody><tr><td>Server</td><td>Owning Client</td><td>Owning Client</td></tr><tr><td>Server</td><td>Server</td><td>Server</td></tr><tr><td>Server</td><td>None</td><td>Server</td></tr><tr><td>Client</td><td>Invoking Client</td><td>Invoking Client</td></tr><tr><td>Client</td><td>Different Client</td><td>Invoking Client</td></tr><tr><td>Client</td><td>Server</td><td>Invoking Client</td></tr><tr><td>Client</td><td>None</td><td>Invoking Client</td></tr></tbody></table><p><strong>NetMulticast RPC</strong></p><table><thead><tr><th>Calling Machine</th><th>Owning Connection</th><th>Executing Machine</th></tr></thead><tbody><tr><td>Server</td><td>Client</td><td>Server and all Clients the invoking actor is relevant for</td></tr><tr><td>Server</td><td>Server</td><td>Server and all Clients the invoking actor is relevant for</td></tr><tr><td>Server</td><td>None</td><td>Server and all Clients the invoking actor is relevant for</td></tr><tr><td>Client</td><td>Invoking Client</td><td>Invoking Client</td></tr><tr><td>Client</td><td>Different Client</td><td>Invoking Client</td></tr><tr><td>Client</td><td>Server</td><td>Invoking Client</td></tr><tr><td>Client</td><td>None</td><td>Invoking Client</td></tr></tbody></table><p><strong>Send RPC</strong></p><pre class="mermaid">flowchart TBUObject::ProcessEvent-- FunctionCallspace::Remote --> AActor::CallRemoteFunction--> UNetDriver::ProcessRemoteFunctionServerMulticast(bIsServerMulticast)UNetDriver::ProcessRemoteFunction--> ServerMulticastServerMulticast--TRUE-->UNetDriver::GetFunctionRepLayout--Actor IsNetRelevant || FUNC_NetReliable --> FRepLayout::BuildSharedSerializationForRPC--> UNetDriver::InternalProcessRemoteFunctionPrivate--> UNetDriver::ProcessRemoteFunctionForChannelPrivateServerMulticast--FALSE--> UReplicationGraph::ProcessRemoteFunction--> UNetDriver::ProcessRemoteFunctionForChannel--> UNetDriver::ProcessRemoteFunctionForChannelPrivate-- FRepLayout::SendPropertiesForRPC --> QueueBunchQueueBunch(!bReliable & NetMulticast)QueueBunch--TRUE-->UChannel::SendBunchQueueBunch--FALSE-->UActorChannel::QueueRemoteFunctionBunch</pre><p><strong>Receive RPC</strong></p><pre class="mermaid">flowchart TBUIpNetDriver::TickDispatch--> UNetConnection::ReceivedRawPacket--> UNetConnection::ReceivedPacket--> UNetConnection::DispatchPacket--> UChannel::ReceivedRawBunch--> UChannel::ReceivedNextBunch--> UChannel::ReceivedSequencedBunch--> UActorChannel::ReceivedBunch--> UActorChannel::ProcessBunch--> FObjectReplicator::ReceivedBunch-- FObjectReplicator::ReceivedRPC--> UObject::ProcessEvent</pre><h2 id="属性同步">属性同步</h2><p><strong>Replicate Diff</strong></p><pre class="mermaid">flowchart TBUNetDriver::TickFlush--> UNetDriver::ServerReplicateActors--> UActorChannel::ReplicateActor--> FObjectReplicator::ReplicateProperties--> FNetSerializeCB::UpdateChangelistMgr--> FRepLayout::UpdateChangelistMgr--> FRepLayout::CompareProperties</pre><p><strong>Replicate Send</strong></p><pre class="mermaid">flowchart TBUNetDriver::TickFlush--> UNetDriver::ServerReplicateActors--> UActorChannel::ReplicateActor--> FObjectReplicator::ReplicateProperties--> FRepLayout::ReplicateProiperties--> FRepLayout::SendProperties--> FProperty::NetSerializeItem--> UChannel::SendBunch</pre><p><strong>Replicate Receive</strong></p><pre class="mermaid">flowchart TBUIpNetDriver::TickDispatch--> UNetConnection::ReceivedRawPacket--> UNetConnection::ReceivedPacket--> UNetConnection::DispatchPacket--> UChannel::ReceivedRawBunch--> UChannel::ReceivedNextBunch--> UChannel::ReceivedSequencedBunch--> UActorChannel::ReceivedBunch--> UActorChannel::ProcessBunch--> FObjectReplicator::ReceivedBunch--> FRepLayout::ReceiveProperties--> FRepLayout::ReceivePropertyHelper--> FProperty::NetSerializeItem--> FObjectReplicator::PostReceivedBunch--> FObjectReplicator::CallRepNotifies</pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Networking源码浅析&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202404262212892.png&quot; alt=</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="网络" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="UE" scheme="https://www.bearchild.top/tags/UE/"/>
    
    <category term="网络" scheme="https://www.bearchild.top/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>[UE]弱网工具Clumsy的使用</title>
    <link href="https://www.bearchild.top/2024/04/14/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/[UE]%E5%BC%B1%E7%BD%91%E5%B7%A5%E5%85%B7Clumsy%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.bearchild.top/2024/04/14/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/[UE]%E5%BC%B1%E7%BD%91%E5%B7%A5%E5%85%B7Clumsy%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2024-04-13T16:00:00.000Z</published>
    <updated>2024-04-14T11:41:55.634Z</updated>
    
    <content type="html"><![CDATA[<h1>弱网工具Clumsy的使用</h1><p><strong>Clumsy</strong> 用于弱网测试时，进行本地弱网环境的模拟，基于 <a href="https://github.com/basil00/Divert">WinDivert</a> 实现，可以出模拟延迟、丢包等网络状态。</p><h2 id="Downloads">Downloads</h2><p>下载地址：<a href="https://github.com/jagt/clumsy">Clumsy</a>；官方文档：<a href="https://jagt.github.io/clumsy/cn/index.html">Clumsy Manual</a></p><p>下载后的几个重点文件：</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202404141744461.png" alt="%~UYF6SWT2EC28Q%6Z4N_EM"></p><p>打开 <strong>Clumsy.exe</strong> 可以看到以下内容：</p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202404141744627.png" alt="image-20240414172540109" style="zoom:50%;" /><p>可以看出这里有几个重点的 <code>Function</code>，一般重点使用 <strong>Lag 延迟</strong>、<strong>Drop 丢包</strong>。</p><p>在 <code>Filtering</code> 填入对应的 <code>Command</code> 后，设置 <code>Functions</code>，点击 <code>Start</code> 即可开始模拟。</p><p>同时可以在 <code>Config.txt</code> 中，预设一些 <code>Presets</code> 方便下次使用。</p><h2 id="UE-DS-中的使用">UE DS 中的使用</h2><p>对于 <code>UE</code>的 <code>DS</code> 环境，首先为了具体到某一个 <code>Client</code> / <code>DS</code>，采用 <code>Filter Port</code> 的机制，对某个具体的端口号进行操作。</p><p>用 <code>netstat -aon\Findstr 进程ID</code>，查询 <code>DS</code>/<code>Client</code> 进程，通过 <code>UDP</code> 进行链接。</p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202404141745888.png" alt="image-20240414173745071" style="zoom:67%;" /><p><code>DS</code> 的 <code>port</code> 一般可以在启动命令中找到 <code>-port=17777</code>；</p><p><code>Client</code> 的 <code>port</code> 可以在 <code>DS</code> 的 <code>Log</code> 中，快速查询到对应与指定 <code>Client</code> 连接的对应端口号：</p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202404141745297.png" alt="image-20240414173856028" style="zoom: 50%;" /><blockquote><p>// DS.log</p><p>LogNet: NotifyAcceptedConnection: Name: TestMap, TimeStamp: 04/14/24 00:00:00, [UNetConnection] <strong>RemoteAddr</strong>: 127.0.0.1:<strong>58459</strong>, Name: IpConnection_0, Driver: GameNetDriver NetDriver_1, IsServer: YES, PC: NULL, Owner: NULL, UniqueId: INVALID</p><p>LogNet: AddClientConnection: Added client connection: [UNetConnection] RemoteAddr: 127.0.0.1:58459, Name: IpConnection_0, Driver: GameNetDriver NetDriver_1, IsServer: YES, PC: NULL, Owner: NULL, UniqueId: INVALID</p></blockquote><pre><code>这里的 **58459** 也就是该 `Client` 的 `Connetcion` 对应的端口号。在 `Filtering` 中填入对应的设置即可：1. 关闭上行包：`udp and udp.SrcPort == 58459` ，设置 `Drop = 100%`2. 关闭下行包：`udp and udp.DstPort == 58459`，设置 `Drop = 100%`</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;弱网工具Clumsy的使用&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Clumsy&lt;/strong&gt; 用于弱网测试时，进行本地弱网环境的模拟，基于 &lt;a href=&quot;https://github.com/basil00/Divert&quot;&gt;WinDivert&lt;/a&gt; 实现，可以出模拟延</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="网络" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="UE" scheme="https://www.bearchild.top/tags/UE/"/>
    
    <category term="网络" scheme="https://www.bearchild.top/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>[UE]夺旗模式框架</title>
    <link href="https://www.bearchild.top/2024/03/20/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/[UE]%E5%A4%BA%E6%97%97%E6%A8%A1%E5%BC%8F%E6%A1%86%E6%9E%B6/"/>
    <id>https://www.bearchild.top/2024/03/20/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/[UE]%E5%A4%BA%E6%97%97%E6%A8%A1%E5%BC%8F%E6%A1%86%E6%9E%B6/</id>
    <published>2024-03-19T16:00:00.000Z</published>
    <updated>2024-04-26T16:23:00.291Z</updated>
    
    <content type="html"><![CDATA[<h1>夺旗模式框架</h1><h2 id="描述">描述</h2><p><strong>夺旗模式：</strong></p><p>场景里会按照一定的规则刷新出不同类型的旗帜（不同类型的旗帜有不同的得分、血量、表现等）；</p><p>玩家会被分成若干个队伍，抢夺刷新出来的旗帜，将旗帜带到自己队伍目标点进行销毁，则可以获得分数；</p><p>玩家持有旗帜时，旗帜可能会掉落或被抢夺：被其它玩家撞击到则旗帜被抢夺到其它玩家身上；旗帜的血量归零则会掉落回场景；</p><p>有正式赛与加时赛两种类型的比赛，首先会开启正式赛；对于正式赛，率先达到目标分的队伍获胜；如果平局则开启加时赛，否则进行结算；对于加时赛，率先得分的队伍获胜，如果平局则以两队平局进行结算；</p><p><strong>要点总结：</strong></p><blockquote><ol><li>旗帜实体：旗帜本身有自己的类型、得分、血量；</li><li>旗帜刷新：场景内根据一定规则（倒计时刷新、旗子上缴）会刷出不同类型旗帜；</li><li>旗帜传递：玩家可以拾取场景里的旗帜、相互抢夺旗帜、掉落旗帜（持有旗帜血量归零）、将旗帜送给终点得分等；玩家可以组队，共享队伍得分；同队伍之间的玩家可以传递旗帜；</li><li>单局流程：所有玩家就绪分队后，传送到起始点准备开赛；如果一局比赛平分，一定条件下可以触发下一场比赛继续；</li></ol></blockquote><h2 id="模式基础">模式基础</h2><h3 id="单局流程">单局流程</h3><p>首先，一个完整的夺旗赛，由若干个子比赛构成，子比赛逐渐推进；</p><pre class="mermaid">flowchart LRM[MainProcess]R0[RaceProcess_0]R1[RaceProcess_1]R2[RaceProcess_2]M-->R0M-->R1M-->R2R0-.->R1R1-.->R2</pre><p>比赛胜负规则：</p><blockquote><p>单场比赛结束时，判定是否有一方队伍得分更高：</p><p>如果有，则全局结束；</p><p>如果没有，尝试进入下一场比赛（如果有配置的话），若没有下一场则全局结束；</p><ol><li>正式赛：比赛结束条件：有一队达到目标分 / 倒计时结束</li><li>加时赛：比赛结束条件：有一队得到分数 / 倒计时结束</li><li>其它类型比赛……</li></ol></blockquote><h3 id="局内玩法">局内玩法</h3><p>从业务出发，先明确有哪些相关逻辑：</p><p>最基本的交互显然是：</p><pre class="mermaid">flowchart LRF0[场景旗帜_0]F1[场景旗帜_1]G0([目标点_0])G1([目标点_1])P0[[Player_0]]P1[[Player_1]]F0--PickUp--->P0--Drop-->F0P0--Reach--->G0P0<--Strike--->P1</pre><blockquote><p><code>PickUp</code>：<code>Player</code> 触碰到 <code>场景旗帜</code> ，就可以拾取该旗帜到自己身上；</p><p><code>Drop</code> ：<code>Player</code> 持有的旗帜存在血量，其血量归零（可能是被其它 <code>Player</code> 攻击导致扣血），就会触发旗帜的掉落，在对应位置生成场景旗帜；</p><p><code>Reach</code>：<code>Player</code> 将持有的旗帜护送到 <code>目标点</code>，获得分数，同时该旗帜会被销毁；</p><p><code>Strike</code>：<code>Player</code> 撞击另一个 <code>Player</code>，可以抢夺对方的旗帜；</p></blockquote><h3 id="业务拆分">业务拆分</h3><p>首先，先给出基本的一些元素定义；</p><blockquote><p>游戏玩法的本质是由刷新点刷新出旗帜，旗帜在各个部分之间交互传递，旗帜本身定义为 <code>FlagItem</code>。</p><p>旗帜在场景（不在 <code>Player</code> 身上）里的表现为，存在对应的 <code>FlagSceneItem</code>。</p><p>场景里存在若干个终点，定义该终点为 <code>GoalPointSceneItem</code></p></blockquote><p>这里说的 <strong>交互</strong> 的本质实际上是一个 <code>Flag</code> 的 <code>Instance</code> 在 <em><strong>各个部分</strong></em> 之间的 <strong>传递</strong> 。想一下所谓的 <em>各个部分</em>，到底是什么？</p><p>本质可以抽象为一个个持有 <code>Flag</code> 的容器，将其定义为 <code>FlagContainer</code>。</p><p>这里显然有三种 <code>Container</code>：</p><blockquote><p><code>Container_WorldFlag</code>：定义 <code>WorldFlag</code> 为 <strong>没有被 <code>Player</code> 持有的旗帜</strong></p><p><code>Container_GoalPoint</code>：定义 <code>GoalPoint</code> 为目标点</p><p><code>Container_Player</code>：每个 <code>Player</code> 持有一个 <code>Container</code>；</p></blockquote><p>细想一下， <code>WorldFlag</code> 、<code>GoalPoint</code> 的具体业务逻辑和具体的某个 <code>Instance</code> 没有太大关系，只需要通过 <code>ID</code> 串联即可，所以对于 <code>WorldFlag</code>、<code>GoalPoint</code>，不需要真的在每一个 <code>Instance</code> 都创建对应 <code>Container</code>，只需要一个单局管理的唯一 <code>Manager</code> 用来代替管理即可。但显然对于每个 <code>Player</code> 都需要有自己的 <code>Container</code>。</p><p>可以在单局内创建全局唯一的  <code>Container_WorldFlag</code> 、<code>Container_GoalPoint</code> 实例。</p><pre class="mermaid">flowchart TDF0[FlagSceneItem_0]F1[FlagSceneItem_1]F2[FlagSceneItem_2]subgraph WorldFlag[Container_WorldFlag]    direction LR    F0-.-F1-.-F2endG0([GoalPoint_0])G1([GoalPoint_1])G2([GoalPoint_2])subgraph GoalPoint[Container_GoalPoint]    direction LR    G0-.-G1-.-G2endP0[[Container_Player_0]]P1[[Container_Player_1]]WorldFlag--PickUp--->P0--Drop--->WorldFlagP0--Reach--->GoalPointP0<--Strike--->P1</pre><p>这样就可以将 <strong>交互</strong> 的逻辑拆得非常简单了：</p><blockquote><p><code>PickUp</code> ：由 <code>FlagSceneItem</code> 和 <code>Player</code> 的 <code>Overlap</code> 触发，将 <code>Container_WorldFlag</code> 持有的对应该 <code>FlagSceneItem</code> 的 <code>FlagItem</code> ，传递给这个 <code>Player</code> 的 <code>Conatiner_Player</code></p><p><code>Drop</code> ： 由 <code>Player</code> 的血量变化归零触发，将 <code>Container_Player</code> 上的所有 <code>FlagItem</code> 转移给 <code>Cotainer_WorldFlag</code></p><p><code>Reach</code>：由 <code>Player</code> 和 <code>GoalPointSceneItem</code> 的 <code>Overlap</code> 触发，将 <code>Container_Player</code> 上的所有 <code>FlagItem</code> 转移给 <code>Cotainer_GoalPonit</code></p><p><code>Strike</code>：由 <code>Player0</code> 和 <code>Player1</code> 的撞击触发，将 <code>Container_Player</code> 上的所有 <code>FlagItem</code> 转移给 <code>Cotainer_Player1</code></p></blockquote><p>这里的 <code>PickUp</code>、<code>Drop</code>、<code>Reach</code>、<code>Strike</code> 是这张图的 <strong>边</strong>，将其定义为 <code>TransferPolicy</code>。</p><p>对于 <code>Container</code>，有各自的 <code>Add(FlagItem)</code>、<code>Remove(FlagItem)</code>，一些基本逻辑：</p><blockquote><p><code>Container_WorldFlag</code>：</p><ol><li><p><code>AddItem</code> ：从 <code>FlagItem</code> 上取出位置，将 <code>Item</code> 血量设置为满血，通过调用 <code>FlagSceneItemManager</code> 创建出 <code>FlagItem</code> 对应的 <code>FlagSceneItem</code>；</p></li><li><p><code>RemoveItem</code>：调用 <code>FlagSceneItemManager</code> 删除对应的  <code>FlagItem</code>  对应的 <code>FlagSceneItem</code>；</p></li></ol></blockquote><blockquote><p><code>Container_GoalPoint</code>：</p><ol><li><p><code>AddItem</code>：判断是从哪个 <code>Container</code> 来的，给对应 <code>Player</code> 加分，并且 <code>RemoveItem</code>；</p></li><li><p><code>RemoveItem</code> ：销毁对应的 <code>FlagItem</code>；</p></li></ol></blockquote><blockquote><p><code>Container_Player</code>：</p><ol><li><p><code>AddItem</code>：从 <code>FlagItem</code> 获得 <code>FlagSyncData</code> 同步给自己，并设置 <code>Player</code> 血量为 <code>Item</code> 的血量等逻辑；</p></li><li><p><code>RemoveItem</code>：将 <code>Player</code> 血量设置给 <code>Item</code> 血量，清空同步信息等逻辑；</p></li></ol></blockquote><p>完整的业务拆分完毕，这下需要哪些系统显而易见：</p><blockquote><p><code>ProcessSystem</code>：负责管理单局流程，创建比赛与推动玩法进程；</p><p><code>TeamSystem</code> ：负责 <code>Player</code> 的组队，管理 <code>Memebr</code>、<code>Score</code> 等；</p><p><code>FlagItemSystem</code>：负责管理所有 <code>FlagItem</code> 实例，提供 <code>Create</code>、<code>Destroy</code> 等方法，维护 <code>Item</code> 基本的生命周期；</p><p><code>ContainerSystem</code>：负责提供基本的 <code>CreateContainer</code>、<code>DestoryContainer</code> 方法，对于具体的 <code>Container</code>，需要支持 <code>AddItem</code> 、<code>RemoveItem</code>、<code>GetItem</code> 等；</p><p><code>TransferSystem</code>：负责管理所有的 <code>TransferPolicy</code> ，提供 <code>TransferItem</code> 方法；</p><p><code>FlagSpawnerSystem</code>：旗帜的刷新点，负责 <code>WorldFlag</code> 的生成，生成 <code>FlagItem</code> 并 <code>Add</code> 到 <code>Container_WorldFlag</code>；</p><p><code>SceneItemSystem</code> ：维护场景里 <code>SceneItem</code> 的生成，提供 <code>Create</code>、<code>Destroy</code> 对应的 <code>SceneItem</code> 的方法；对于某个具体的 <code>SceneItem</code>，需要实现基础的 <code>Overlap</code>、<code>Sync</code>；</p></blockquote><h2 id="具体实现">具体实现</h2><h3 id="ProcesSystem"><code>ProcesSystem</code></h3><p>首先需要一个挂在 <code>GameState</code> 上的  <code>MainProcess</code> 负责管理全局的流程，串联多个 <code>RaceProcess</code> 推进玩法；</p><p>显然，一个最简单的流程可以这样：</p><pre class="mermaid">flowchart LRM[MainProcess]R0[RaceProcess_0]R1[RaceProcess_1]F[Finish]M---->|1. 开赛|R0R0-.->|2. Result_0|MM-->|3. Check_Result_0|R1R1-.->|4. Result_1|MM-->|5. Check_Result_1|FR0-.->R1R1-.->F</pre><p>但是这样循环流程需要在 <code>Main</code> 里面关注 <code>RaceProcess</code> 给出的 <code>Result</code> 事件，显然有点不够优雅。</p><p>发现这里的主要由两部分组成：</p><blockquote><ol><li><code>RaceProcess</code> 管理子比赛流程，给出 <code>Result</code></li><li><code>MainProcess</code> 接受子比赛 <code>Result</code>，校验并判断开启下一场 <code>Race</code> 或者结束比赛</li></ol></blockquote><p>所以可以将其拆成两个 <code>Controller</code>：</p><p><code>MainProcess</code> 负责提供 <code>Dispatch</code> 的功能，</p><blockquote><ol><li><code>FinishRace_Controller</code>：监听 <code>Dispatcher</code> 的 <code>开赛</code> 事件，并向 <code>Dispatcher</code> 分发 <code>单局结束</code>事件；</li><li><code>CreateRace_Controller</code>：监听 <code>单局结束</code> 事件，进行处理并向 <code>Dispatcher</code> 分发<code>开赛</code> 事件；</li></ol></blockquote><pre class="mermaid">flowchart TBM[MainProcess]D[Dispatcher]F[FinishRace_Controller]C[CreateRace_Controller]M-->DF-->|Send_Finsih|DD-.->|Register_Create|FC-->|Send_Create|DD-.->|Register_Finish|C</pre><h3 id="TeamSystem"><code>TeamSystem</code></h3><p>参考 <a href="https://www.bearchild.top/2024/03/14/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/%5BUE%5DTeamSystem%E6%A1%86%E6%9E%B6/">[UE] TeamSystem 框架</a></p><p>支持玩家的 <code>加入</code>、<code>退出</code> 队伍，以及维护队伍的各种数据（比如 <code>Members</code>、<code>Score</code>），并维护数据，进行同步。</p><h3 id="SceneItemSystem"><code>SceneItemSystem</code></h3><pre class="mermaid">classDiagram    UCFSceneItemUtils..>UCFSceneItemManager        UCFSceneItemManager..>UCFScecneItemBase    class UCFSceneItemManager {    frien UCFSceneItemUtils    - CreateItem(Type, UID, Params)    - DestroyItem(UID)    }        UCFScecneItemBase..*UCFScecneItemSyncComponent    UCFScecneItemBase..*UCFScecneItemDisplayComponent    class UCFScecneItemBase {    SyncComponent : UCFScecneItemSyncComponent    OverlapDelegate    # OnInit()    # OnUninit()    # BeginDetect()    # EndDetect()    + CollectSyncData()    }        UCFScecneItem_WorldFlag--|>UCFScecneItemBase    UCFScecneItem_GoalPoint--|>UCFScecneItemBase</pre><p>首先，需要 <code>UCFSceneItemManager</code> 负责管理所有的 <code>SceneItem</code>，同时通过 <code>UCFSceneItemUtils</code> 提供方法给外部调用。</p><p>对于一个具体的 <code>SceneItem</code>，额外对其提供两个 <code>Component</code>，</p><blockquote><ol><li><code>SyncComponent</code>：在 <code>DS/Client</code> 生成，维护 <code>SceneItem</code> 的同步数据，这一部分数据不会被 <code>AOI</code> 裁剪，保证远距离的数据同步；</li><li><code>DisplayComponent</code>：仅在 <code>Client</code> 生成，随着 <code>SceneItem</code> 被 <code>AOI</code>，用于实现客户端表现。</li></ol></blockquote><h3 id="FlagItemSystem、ContainerSystem"><code>FlagItemSystem</code>、<code>ContainerSystem</code></h3><pre class="mermaid">classDiagramdirection LRUCaptureFlagItemSystem..>FCaptureFlagItem    class UCaptureFlagItemSystem {    ItemInstances : TMap~uint64|TSharedPtr~FCaptureFlagItem~~    + CreateItem(ItemID)    + DestroyItem(ItemUID)    + GetItem(ItemUID)    - GenerateUID()    - RegisterClearTimer()    - UnregisterClearTimer()    - ClearAllItems(bCheckUnused)    }        %% ----- FlagItem -----        namespace FlagItem {        class FCaptureFlagItem        class FCaptureFlagItemSyncData    }        FCaptureFlagItem..FCaptureFlagItemSyncData    FCaptureFlagItem..UCaptureFlagContainerBase    class FCaptureFlagItem {    + InitItem(InUID, ItemID)    + GetSyncData() : FCaptureFlagItemSyncData    + UID / ItemID / Type / Health / MaxHealth...    + Container : TWeakObjectPtr~UCaptureFlagContainerBase~    + TransferReason : ECFTransferReason    }        class FCaptureFlagItemSyncData {    + UID / ItemID / Type / Health / MaxHealth / TransferReason    }        %% ----- FlagContainer -----        namespace FlagContainer {    class UCaptureFlagContainerBase    class UCaptureFlagContainer_WorldFlag    class UCaptureFlagContainer_GoalPoint    class UCaptureFlagContainer_Player    }        class UCaptureFlagContainerBase {    Items : TMap ~uint64|TWeakPtr~FCaptureFlagItem~~    Owner : TWeakObjectPtr~UObject~    + Init(InOwner)    + Uninit()    + AddItem(TWeakPtr~FCaptureFlagItem~Item, Params)    + RemoveItem(TWeakPtr~FCaptureFlagItem~ Item)    + VerifyCanAddItem()    + GetType() : ECFContainerType    # OnInit()    # OnUninit()    # OnAddItem(TWeakPtr~FCaptureFlagItem~Item, Params)    # OnRemoveItem(TWeakPtr~FCaptureFlagItem~ Item)    }        UCaptureFlagContainer_WorldFlag--|>UCaptureFlagContainerBase    UCaptureFlagContainer_GoalPoint--|>UCaptureFlagContainerBase        UCaptureFlagContainer_Player--|>UCaptureFlagContainerBase    class UCaptureFlagContainer_Player{    # GetType() : ECFContainerType        }        %% ----- ContainerOwner -----        namespace ContainerOwner {    class UCaptureFlagManager    class UCaptureFlagComponent    class ICaptureFlagContainerOwnerInterface    }            UCaptureFlagManager..>UCaptureFlagContainer_GoalPoint    UCaptureFlagManager..>UCaptureFlagContainer_WorldFlag    UCaptureFlagManager..|>ICaptureFlagContainerOwnerInterface    class UCaptureFlagManager{    - WorldFlagContainer    - GoalPointContainer    + GetWorldFlagContainer()    + GetGoalPointContainer()    }        UCaptureFlagComponent..|>ICaptureFlagContainerOwnerInterface    UCaptureFlagComponent..>UCaptureFlagContainer_Player    UCaptureFlagComponent..>FCaptureFlagItemSyncData    class UCaptureFlagComponent{    - FlagContainer_Player    - FlagItemSyncData : FCaptureFlagItemSyncData    + GetCaptureFlagContainer()    + UpdateFlagItemSyncData(SyncData)    }        ICaptureFlagContainerOwnerInterface..>UCaptureFlagContainerBase    class ICaptureFlagContainerOwnerInterface{    CreateFlagContainer(InOwner)    DestroyFlagContainer(Container)    }</pre><p>首先，需要一个 <code>FlagItemSystem</code> 负责管理所有的 <code>FlagItem</code> 实例。提供基本的创建、销毁、查询功能的同时，这个 <code>FlagItemSystem</code>需要 <code>RegisterClearTimer</code>，每隔一段时间，<code>Clear</code> 不被任何一个 <code>Container</code> 持有的 <code>Item</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UCaptureFlagItemManager</span></span><br><span class="line"></span><br><span class="line"><span class="function">TWeakPtr&lt;FCaptureFlagItem&gt; <span class="title">UCaptureFlagItemManager::CreateItem</span><span class="params">(<span class="keyword">int</span> ItemID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> NewItem = MakeShared&lt;FCaptureFlagItem&gt;();</span><br><span class="line">NewItem-&gt;<span class="built_in">Init</span>( <span class="built_in">GenerateUID</span>(),  ItemID );</span><br><span class="line">ItemInstances.<span class="built_in">Add</span>( NewItem-&gt;<span class="built_in">GetUID</span>(), NewItem );</span><br><span class="line"></span><br><span class="line"><span class="built_in">NotifyItemCreated</span>(NewItem);</span><br><span class="line"><span class="keyword">return</span> NewItem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UCaptureFlagItemManager::DestoryItem</span><span class="params">(uint64 ItemUID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!ItemInstances.<span class="built_in">Contains</span>(ItemUID)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> Item = ItemInstances.<span class="built_in">FindRef</span>(ItemUID);</span><br><span class="line"><span class="keyword">if</span> (Item.<span class="built_in">IsValid</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Item-&gt;<span class="built_in">GetContainer</span>().<span class="built_in">IsValid</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 先从 Container 上移除</span></span><br><span class="line">Item-&gt;<span class="built_in">GetContainer</span>()-&gt;<span class="built_in">RemoveItem</span>(Item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ItemInstances.<span class="built_in">Remove</span>(ItemUID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UCaptureFlagItemManager::ClearAllItems</span><span class="params">(<span class="keyword">bool</span> bUnused)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TArray &lt;uint64&gt; ItemUIDs;</span><br><span class="line">ItemInstances.<span class="built_in">GetKeys</span>(ItemUIDs);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ItemUID : ItemUIDs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> Item = ItemInstances.<span class="built_in">FindRef</span>(ItemUID);</span><br><span class="line"><span class="keyword">if</span> (!Item.<span class="built_in">IsValid</span>()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( bUnused == <span class="literal">false</span></span><br><span class="line">|| <span class="comment">/*未被任何 Container 持有*/</span> Item-&gt;<span class="built_in">GetContainer</span>().<span class="built_in">IsValid</span>() == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">DestoryItem</span>(ItemUID);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 <code>FlagItem</code>，保存 <code>Flag</code> 最基本的信息，同时提供一个 <code>CollectSyncData</code>，用于生成对应的 <code>FlagSyncData</code>，表示需要同步的数据，在 <code>ContainerOwner</code> 需要的时候进行数据同步。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FlagItem.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GENERATE_CAPTUREFLAG_ITEM_PROPERTY(Visibility, Type, Name) \</span></span><br><span class="line"><span class="meta">public: Type Get##Name() const &#123; return Name; &#125; \</span></span><br><span class="line"><span class="meta">public: void Set##Name(const Type&amp; Value) &#123; Name = Value; &#125; \</span></span><br><span class="line"><span class="meta">Visibility: Type Name</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要在 FCaptureFlagItem::GetSyncData 中打包数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">USTRUCT</span>()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FCaptureFlagItemSyncData</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">FCaptureFlagItemSyncData</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">FString <span class="title">ToString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> FCaptureFlagItemSyncData&amp; Other) <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> FCaptureFlagItemSyncData&amp; Other) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(*<span class="keyword">this</span> == Other);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">uint64 UID = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line"><span class="keyword">int</span> ItemID = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line"><span class="keyword">int</span> Type = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line"><span class="keyword">float</span> Health = <span class="number">0.0f</span>;</span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line"><span class="keyword">float</span> MaxHealth = <span class="number">0.0f</span>;</span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">ECFTransferReason TransferReason;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FCaptureFlagItem</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">FCaptureFlagItem</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(uint64 InUID, <span class="keyword">int</span> ItemID)</span></span>;</span><br><span class="line"><span class="function">FCaptureFlagItemSyncData <span class="title">GetSyncData</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">FString <span class="title">ToString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">GENERATE_CAPTUREFLAG_ITEM_PROPERTY</span>(<span class="keyword">private</span>, uint64, UID);</span><br><span class="line"></span><br><span class="line"><span class="built_in">GENERATE_CAPTUREFLAG_ITEM_PROPERTY</span>(<span class="keyword">private</span>, <span class="keyword">int</span>, ItemID);</span><br><span class="line"><span class="built_in">GENERATE_CAPTUREFLAG_ITEM_PROPERTY</span>(<span class="keyword">private</span>, <span class="keyword">int</span>, Type);</span><br><span class="line"><span class="built_in">GENERATE_CAPTUREFLAG_ITEM_PROPERTY</span>(<span class="keyword">private</span>, <span class="keyword">float</span>, Health);</span><br><span class="line"><span class="built_in">GENERATE_CAPTUREFLAG_ITEM_PROPERTY</span>(<span class="keyword">private</span>, <span class="keyword">float</span>, MaxHealth);</span><br><span class="line"><span class="built_in">GENERATE_CAPTUREFLAG_ITEM_PROPERTY</span>(<span class="keyword">private</span>, <span class="keyword">int</span>, Score);</span><br><span class="line"></span><br><span class="line"><span class="built_in">GENERATE_CAPTUREFLAG_ITEM_PROPERTY</span>(<span class="keyword">private</span>, ECFTransferReason, TransferReason);</span><br><span class="line"><span class="built_in">GENERATE_CAPTUREFLAG_ITEM_PROPERTY</span>(<span class="keyword">private</span>, TWeakObjectPtr&lt;class UCaptureFlagContainerBase&gt;, Container);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>需要 <code>Container</code> 来持有 <code>FlagItem</code>，在 <code>AddItem</code> 和 <code>RemoveItem</code> 内写具体的逻辑。</p><p>每种 <code>Container</code> 通过重载 <code>UCaptureFlagContainerBase</code> 的 <code>PURE_VIRTUAL</code> 方法  <code>GetType</code>  来定义其类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ContainerBase.h</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UCLASS</span>(Abstract)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UCaptureFlagContainerBase</span> :</span> <span class="keyword">public</span> UObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">UCaptureFlagItemUtils</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> ECFContainerType <span class="title">GetType</span><span class="params">()</span> <span class="title">PURE_VIRTUAL</span><span class="params">( UCaptureFlagContainerBase::GetType, <span class="keyword">return</span> ECFContainerType::None; )</span> <span class="comment">// 设置 ContainerType</span></span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">VerifyCanAddItem</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">CollectParams</span><span class="params">(FCaptureFlagParams&amp; Params)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CheckCapcityValid</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(UObject* InOwner)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Uninit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">AddItem</span><span class="params">(TWeakPtr&lt;FCaptureFlagItem&gt; Item, <span class="keyword">const</span> FCaptureFlagParams&amp; Params = &#123;&#125;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">RemoveItem</span><span class="params">(TWeakPtr&lt;FCaptureFlagItem&gt; Item)</span></span>;</span><br><span class="line">TArray &lt;TWeakPtr&lt;FCaptureFlagItem&gt;&gt; <span class="built_in">GetAllItems</span>();</span><br><span class="line"><span class="function">TWeakPtr&lt;FCaptureFlagItem&gt; <span class="title">GetItem</span><span class="params">(uint64 ItemUID)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearItems</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="comment">// 各个 Container 自定义逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnInit</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnUninit</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnAddItem</span><span class="params">(TWeakPtr&lt;FCaptureFlagItem&gt; Item, <span class="keyword">const</span> FCaptureFlagParams&amp; Params)</span> </span>&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnRemoveItem</span><span class="params">(TWeakPtr&lt;FCaptureFlagItem&gt; Item)</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">TMap &lt;uint64, TWeakPtr&lt;FCaptureFlagItem&gt;&gt; Items &#123;&#125;;</span><br><span class="line">TWeakObjectPtr &lt;UObject&gt; Owner = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ContainerBase.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">UCaptureFlagContainerBase::AddItem</span><span class="params">(TWeakPtr&lt;FCaptureFlagItem&gt; Item, <span class="keyword">const</span> FCaptureFlagParams&amp; Params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Owner.<span class="built_in">IsValid</span>() || !Item.<span class="built_in">IsValid</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">uint64 ItemUID = Item.<span class="built_in">Pin</span>()-&gt;<span class="built_in">GetUID</span>();</span><br><span class="line"><span class="keyword">if</span> (Item.<span class="built_in">Pin</span>()-&gt;<span class="built_in">GetContainer</span>().<span class="built_in">IsValid</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Item 只能被放在一个 Container 内</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否可以获得</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">VerifyCanAddItem</span>() == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Item.<span class="built_in">Pin</span>()-&gt;<span class="built_in">SetContainer</span>( <span class="keyword">this</span> );</span><br><span class="line">Items.<span class="built_in">Add</span>( ItemUID, Item );</span><br><span class="line"></span><br><span class="line"><span class="built_in">OnAddItem</span>(Item, Params);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">UCaptureFlagContainerBase::RemoveItem</span><span class="params">(TWeakPtr&lt;FCaptureFlagItem&gt; Item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Owner.<span class="built_in">IsValid</span>() || !Item.<span class="built_in">IsValid</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">uint64 ItemUID = Item.<span class="built_in">Pin</span>()-&gt;<span class="built_in">GetUID</span>();</span><br><span class="line"><span class="keyword">if</span> (!Items.<span class="built_in">Contains</span>(ItemUID))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Item.<span class="built_in">Pin</span>()-&gt;<span class="built_in">SetContainer</span>(<span class="literal">nullptr</span>);</span><br><span class="line">Items.<span class="built_in">Remove</span>(ItemUID);</span><br><span class="line"><span class="built_in">OnRemoveItem</span>(Item);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个 <code>Container</code> 需要一个 <code>ContainerOwner</code> 来持有，这里有三种 <code>Container</code>。</p><blockquote><ol><li><code>Container_WorldFlag</code>： 由 <code>CaptureFlagManager(GS)</code> 持有，一场子比赛持有一个；</li><li><code>Container_GoalPoint</code>：由 <code>CaptureFlagManager(GS)</code> 持有，一场子比赛持有一个；</li><li><code>Container_Player</code>：由 <code>CaptureFlagComponent(PS)</code> 持有，每个 <code>Player</code> 持有一个；</li></ol></blockquote><p>提供一个 <code>ICaptureFlagContainerOwnerInterface</code> 用于支持 <code>Create</code>、<code>Destroy</code> 对应的 <code>Container</code> 方法；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ContainerOwner.h</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UINTERFACE</span>(BlueprintType, Blueprintable)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UCaptureFlagContainerOwnerInterface</span> :</span> <span class="keyword">public</span> UInterface</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ICaptureFlagContainerOwnerInterface</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">typename</span> TEnableIf&lt;TIsDerivedFrom&lt;T, UCaptureFlagContainerBase&gt;::Value, T*&gt;::<span class="function">Type</span></span><br><span class="line"><span class="function"><span class="title">CreateFlagContainer</span><span class="params">(UObject* InOwner)</span> <span class="comment">// 传入 this</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">IsValid</span>(InOwner)) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">T* Container = NewObject&lt;T&gt;(InOwner);</span><br><span class="line">Container-&gt;<span class="built_in">Init</span>(InOwner);</span><br><span class="line"><span class="keyword">return</span> Container;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestroyFlagContainer</span><span class="params">(UCaptureFlagContainerBase* Container)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">IsValid</span>(Container)) <span class="keyword">return</span>;</span><br><span class="line">Container-&gt;<span class="built_in">Uninit</span>();</span><br><span class="line">Container = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="TransferSystem"><code>TransferSystem</code></h3><pre class="mermaid">classDiagram    direction LR        UCFTransferSystem..>UCFTransferPolicyBase    UCFTransferSystem..UCaptureFlagContainerBase    class UCFTransferSystem {        Policies : FGameSubSystemCollection~UCFTransferPolicyBase~        friend UCFTransferPolicyBase        - TransferItem(Item, TargetContainer, TransferReason)    }            UCFTransferPolicyBase..UCaptureFlagContainerBase    class UCFTransferPolicyBase{    # OnInit()    # OnUninit()    # TransferItem(Item, TargetContainer)    # GetTransferReason() : ECFTransferReason    }        UCFTansferPolicy_PickUp--|>UCFTransferPolicyBase    UCFTansferPolicy_Drop--|>UCFTransferPolicyBase    UCFTansferPolicy_Reach--|>UCFTransferPolicyBase    UCFTansferPolicy_Strike--|>UCFTransferPolicyBase</pre><p>首先需要一个 <code>UCFTransferSystem</code> 持有 <code>Polices</code>，管理并维护所有 <code>TransferPolicy</code> 的生命周期，具体可以参考 <a href="https://www.bearchild.top/2024/03/14/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/%5BUE%5DGameSubSystem%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/">[UE] GameSubSystem 简单实现</a>。</p><p>对于一个具体的 <code>TransferPolicy</code>，通过重载 <code>TransferPolicyBase</code> 的 <code>PURE_VIRTUAL</code> 方法  <code>GetTransferReason</code> ，明确其对应的 <code>TransferReason</code>，在其 <code>OnInit</code>、<code>OnUninit</code>，监听该类型需要的事件，通过对应的 <code>Callback</code> 调用到 <code>Base</code> 提供的 <code>TransferItem</code> 方法，执行 <code>Item</code> 的转移。</p><p>对于一次成功的 <code>Transfer</code>，显然会调用到 <code>SourceContainer</code> 的 <code>Remove</code> ，以及 <code>TargetContainer</code> 的 <code>Add</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TransferManager</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">UCaptureFlagTransferManager::TransferItem</span><span class="params">(TWeakPtr&lt;FCaptureFlagItem&gt; Item, UCaptureFlagContainerBase* TargetContainer, ECFTransferReason TransferReason)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Item.<span class="built_in">IsValid</span>() || !<span class="built_in">IsValid</span>(TargetContainer)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> SharedItem = Item.<span class="built_in">Pin</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否可以获得</span></span><br><span class="line"><span class="keyword">if</span> (TargetContainer-&gt;<span class="built_in">VerifyCanAddItem</span>() == <span class="literal">false</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// Source 可以为空</span></span><br><span class="line"><span class="keyword">auto</span> SourceContainer = SharedItem-&gt;<span class="built_in">GetContainer</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SourceContainer == TargetContainer) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">ECFTransferReason LastTransferReason = Item.<span class="built_in">Pin</span>()-&gt;<span class="built_in">GetTransferReason</span>();</span><br><span class="line">Item.<span class="built_in">Pin</span>()-&gt;<span class="built_in">SetTransferReason</span>(TransferReason);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若有 Source，则尝试移除</span></span><br><span class="line"><span class="keyword">if</span> (SourceContainer.<span class="built_in">IsValid</span>() &amp;&amp; SourceContainer-&gt;<span class="built_in">RemoveItem</span>(Item) == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">Item.<span class="built_in">Pin</span>()-&gt;<span class="built_in">SetTransferReason</span>(LastTransferReason);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FCaptureFlagParams Params&#123;&#125;;</span><br><span class="line"><span class="keyword">if</span> (SourceContainer.<span class="built_in">IsValid</span>())</span><br><span class="line">&#123;</span><br><span class="line">SourceContainer-&gt;<span class="built_in">CollectParams</span>(Params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试添加</span></span><br><span class="line"><span class="keyword">if</span> (TargetContainer-&gt;<span class="built_in">AddItem</span>(Item, Params) == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">Item.<span class="built_in">Pin</span>()-&gt;<span class="built_in">SetTransferReason</span>(LastTransferReason);</span><br><span class="line"><span class="comment">// 失败则还给 Source</span></span><br><span class="line"><span class="keyword">if</span> (SourceContainer.<span class="built_in">IsValid</span>())</span><br><span class="line">&#123;</span><br><span class="line">SourceContainer-&gt;<span class="built_in">AddItem</span>(Item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TransferPolicyBase.h</span></span><br><span class="line"><span class="built_in">UCLASS</span>(Abstract)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UCFTransferPolicyBase</span> :</span> <span class="keyword">public</span> UGameModeSubSystemBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> ECFTransferReason <span class="title">GetTransferReason</span><span class="params">()</span> <span class="keyword">const</span> <span class="title">PURE_VIRTUAL</span><span class="params">(UCFTransferPolicyBase::GetTransferReason, <span class="keyword">return</span> ECFTransferReason::None;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnInit</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnUninit</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">TransferItem</span><span class="params">(TWeakPtr&lt;FCaptureFlagItem&gt; Item, UCaptureFlagContainerBase* TargetContainer)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">TWeakObjectPtr &lt;<span class="class"><span class="keyword">class</span> <span class="title">UCaptureFlagTransferManager</span>&gt;</span> System = <span class="literal">nullptr</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TransferPolicy.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UCFTransferPolicyBase::OnInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System = Cast&lt;UCaptureFlagTransferManager&gt;(<span class="built_in">GetOuter</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">UCFTransferPolicyBase::TransferItem</span><span class="params">(TWeakPtr&lt;FCaptureFlagItem&gt; Item, UCaptureFlagContainerBase* TargetContainer)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!System.<span class="built_in">IsValid</span>() || !Item.<span class="built_in">IsValid</span>() || !<span class="built_in">IsValid</span>(TargetContainer)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> bSucceed = <span class="literal">false</span>;</span><br><span class="line">bSucceed = System-&gt;<span class="built_in">TransferItem</span>( Item, TargetContainer, <span class="built_in">GetTransferReason</span>() );</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> bSucceed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;夺旗模式框架&lt;/h1&gt;
&lt;h2 id=&quot;描述&quot;&gt;描述&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;夺旗模式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;场景里会按照一定的规则刷新出不同类型的旗帜（不同类型的旗帜有不同的得分、血量、表现等）；&lt;/p&gt;
&lt;p&gt;玩家会被分成若干个队伍，抢夺刷新出来的</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="Gameplay" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/"/>
    
    
    <category term="Gameplay" scheme="https://www.bearchild.top/tags/Gameplay/"/>
    
    <category term="UE" scheme="https://www.bearchild.top/tags/UE/"/>
    
  </entry>
  
  <entry>
    <title>[UE]CommonParams解决方案</title>
    <link href="https://www.bearchild.top/2024/03/14/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/[UE]CommonParams%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://www.bearchild.top/2024/03/14/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/[UE]CommonParams%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2024-03-13T16:00:00.000Z</published>
    <updated>2024-03-14T17:15:44.538Z</updated>
    
    <content type="html"><![CDATA[<h1>CommonParams解决方案</h1><p>在实现业务框架的时候，经常需要支持传参的功能（比如 <code>Buff</code> 系统中，<code>AddBuff</code> 的时候，通常需要支持外部传入一个 <code>BuffParams</code> ，在内部解析出各种 <code>Param</code> 使用。）</p><p>这个参数需要支持基本的数据保存、同步等。</p><h2 id="初始的想法">初始的想法</h2><p>一个最简单的想法，是打包一个结构体，支持各种类型的传入，比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">USTRUCT</span>()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Params</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">UPROPERTY</span>()</span><br><span class="line">    uint64 uVar0;</span><br><span class="line">    <span class="built_in">UPROPERTY</span>()</span><br><span class="line">    <span class="keyword">int</span> iVar0;</span><br><span class="line">    <span class="built_in">UPROPERTY</span>()</span><br><span class="line">    <span class="keyword">float</span> fVar0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样虽然很简单，同时可以通过反射来同步。</p><p>但是有一个巨大的问题，那就是在解析参数的时候，只知道 <code>Var0</code> 这种没有名字的抽象的概念，使用者需要记住 <code>Var0</code> 对应的是什么数据，很不直观。</p><h2 id="CommonVariantParams">CommonVariantParams</h2><p>维护一个 <code>CommonVariantParams</code>，通过 <code>TMap &lt;FString, FVariant&gt; ValueMap</code> 来保存数据，同时自定义 <code>NetSerialize</code> 来支持网络同步。</p><p>为了方便使用，还可以自定义一些构造函数，比如 <code>std::initializer_list&lt;TPairInitializer&lt;const FString&amp;, FVariant&gt;&gt; ValuePairs</code> ，这样就可以支持 <code>&#123; &#123;Key0, Val0&#125;, &#123;Key1, Val1&#125; &#125;</code> 形式的构造。</p><p>由于 <code>TMap</code> 以及 <code>FVariant</code> 实际上在引擎内部都已经有了合适的重载 <code>operator &lt;&lt; Archive</code>，所以自定义 <code>NetSerialize</code> 也很简单。</p><h3 id="使用方法">使用方法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Params：</span></span><br><span class="line">FCommonVariantParams Params = &#123; &#123;<span class="string">&quot;ParamA&quot;</span>, (<span class="keyword">float</span>)A&#125;, &#123;<span class="string">&quot;ParamsB&quot;</span>, (<span class="keyword">int</span>)B &#125;, &#123;<span class="string">&quot;ParamsC&quot;</span>, (FString)C &#125; <span class="comment">/* ... */</span> &#125;);</span><br><span class="line"><span class="comment">// 解析Params:</span></span><br><span class="line"><span class="keyword">float</span> A = BuffParams.GetValue&lt;<span class="keyword">float</span>&gt;(<span class="string">&quot;ParamA&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> B = BuffParams.GetValue&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;ParamB&quot;</span>);</span><br><span class="line">FString C = BuffParams.GetValue&lt;FString&gt;(<span class="string">&quot;ParamC&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="具体实现">具体实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonVariantParams.h</span></span><br><span class="line"><span class="built_in">USTRUCT</span>(BlueprintType)</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FCommonVariantParams</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">FCommonVariantParams</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">FCommonVariantParams</span>(<span class="keyword">const</span> FString&amp; Key, FVariant Value);</span><br><span class="line"><span class="built_in">FCommonVariantParams</span>(std::initializer_list&lt;TPairInitializer&lt;<span class="keyword">const</span> FString&amp;, FVariant&gt;&gt; ValuePairs);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetValue</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName, FVariant Value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Contains</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ValueType = <span class="keyword">float</span>&gt; ValueType <span class="built_in">GetValue</span>(<span class="keyword">const</span> FString&amp; FieldName, ValueType Default = &#123;&#125;) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!ValueMap.<span class="built_in">Contains</span>(FieldName)) <span class="keyword">return</span> Default;</span><br><span class="line"><span class="keyword">if</span> (TVariantTraits&lt;ValueType&gt;::<span class="built_in">GetType</span>() != ValueMap[FieldName].<span class="built_in">GetType</span>()) <span class="keyword">return</span> Default;</span><br><span class="line"><span class="keyword">return</span> ValueMap[FieldName].GetValue&lt;ValueType&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FString <span class="title">ToString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> TMap&lt;FString, FVariant&gt;&amp; <span class="title">GetValueMap</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NetSerialize</span><span class="params">(FArchive&amp; Ar, class UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span>;</span><br><span class="line"></span><br><span class="line">FCommonVariantParams <span class="keyword">operator</span>+(<span class="keyword">const</span> FCommonVariantParams&amp; OtherParams);</span><br><span class="line">FCommonVariantParams&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> FCommonVariantParams&amp; OtherParams)</span><br><span class="line">&#123;</span><br><span class="line">ValueMap = OtherParams.<span class="built_in">GetValueMap</span>();</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">const</span> FCommonVariantParams&amp; OtherParams)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ValueMap.<span class="built_in">begin</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">begin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ValueMap.<span class="built_in">begin</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ValueMap.<span class="built_in">end</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">decltype</span>(<span class="keyword">auto</span>) <span class="title">end</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ValueMap.<span class="built_in">end</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">TMap&lt;FString, FVariant&gt; ValueMap;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SGGAMEMODE_API</span> <span class="title">TStructOpsTypeTraits</span>&lt;</span>FCommonVariantParams&gt; : TStructOpsTypeTraitsBase2&lt;FCommonVariantParams&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">WithNetSerializer = <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CommonVariantParams.cpp</span></span><br><span class="line">FCommonVariantParams::<span class="built_in">FCommonVariantParams</span>(<span class="keyword">const</span> FString&amp; Key, FVariant Value)</span><br><span class="line">&#123;</span><br><span class="line">ValueMap.<span class="built_in">Add</span>(Key, Value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FCommonVariantParams::<span class="built_in">FCommonVariantParams</span>(std::initializer_list&lt;TPairInitializer&lt;<span class="keyword">const</span> FString&amp;, FVariant&gt;&gt; ValuePairs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; Pair : ValuePairs)</span><br><span class="line">&#123;</span><br><span class="line">ValueMap.<span class="built_in">Add</span>(Pair.Key, Pair.Value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FCommonVariantParams::SetValue</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName, FVariant Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ValueMap.<span class="built_in">Add</span>(FieldName, <span class="built_in">FVariant</span>(Value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FCommonVariantParams::Contains</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ValueMap.<span class="built_in">Contains</span>(FieldName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FCommonVariantParams::IsEmpty</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ValueMap.<span class="built_in">IsEmpty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FString <span class="title">FCommonVariantParams::ToString</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FString DebugString = FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Params:&quot;</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; [Key, Value] : ValueMap)</span><br><span class="line">&#123;</span><br><span class="line">DebugString += FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;[%s=%s]&quot;</span>), *Key, *USGStringUtils::<span class="built_in">ToString</span>(Value));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DebugString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> TMap&lt;FString, FVariant&gt;&amp; <span class="title">FCommonVariantParams::GetValueMap</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ValueMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FCommonVariantParams::NetSerialize</span><span class="params">(FArchive&amp; Ar, class UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bOutSuccess = <span class="literal">true</span>;</span><br><span class="line">Ar &lt;&lt; ValueMap;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FCommonVariantParams FCommonVariantParams::<span class="keyword">operator</span>+(<span class="keyword">const</span> FCommonVariantParams&amp; OtherParams)</span><br><span class="line">&#123;</span><br><span class="line">FCommonVariantParams CombinedParams = *<span class="keyword">this</span>;</span><br><span class="line">CombinedParams.<span class="built_in">Merge</span>(OtherParams);</span><br><span class="line"><span class="keyword">return</span> CombinedParams;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FCommonVariantParams::Merge</span><span class="params">(<span class="keyword">const</span> FCommonVariantParams&amp; OtherParams)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; [Key, Value] : OtherParams.<span class="built_in">GetValueMap</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 覆盖</span></span><br><span class="line"><span class="built_in">SetValue</span>(Key, Value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FCommonVariantParams::Clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ValueMap.<span class="built_in">Empty</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lua">Lua</h3><p>对于这个 <code>CommonVariantParams</code>，还可以扩展一些方法，让这些参数可以通过 <code>Unlua</code> 在 <code>Lua</code> 脚本中设置与访问。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FCommonVariantParams::SetValue</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName, FVariant Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ValueMap.<span class="built_in">Add</span>(FieldName, <span class="built_in">FVariant</span>(Value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FCommonVariantParams::SetIntValue</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName, int32 Value)</span> </span>&#123; <span class="built_in">SetValue</span>(FieldName, Value); &#125;</span><br><span class="line"><span class="function">int32 <span class="title">FCommonVariantParams::GetIntValue</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName, int32 Default <span class="comment">/*= &#123;&#125;*/</span>)</span> </span>&#123; <span class="keyword">return</span> GetValue&lt;int32&gt;(FieldName, Default); &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出：</span></span><br><span class="line"><span class="comment">// define 在 UnluaEx.h 中</span></span><br><span class="line"><span class="built_in">BEGIN_EXPORT_REFLECTED_CLASS</span>(FCommonVariantParams)</span><br><span class="line">    <span class="built_in">ADD_FUNCTION</span>(SetIntValue)</span><br><span class="line"><span class="built_in">ADD_FUNCTION</span>(GetIntValue)</span><br><span class="line"><span class="built_in">END_EXPORT_CLASS</span>()</span><br><span class="line"><span class="built_in">IMPLEMENT_EXPORTED_CLASS</span>(FCommonVariantParams)</span><br></pre></td></tr></table></figure><h3 id="具体业务">具体业务</h3><p>特别地，具体业务使用的时候，可以继承一个自己的 <code>Params</code> 来使用，以 <code>FGameplayBuffParams</code> 为例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">USTRUCT</span>()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FGameplayBuffParams</span> :</span> <span class="keyword">public</span> FCommonVariantParams</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">using</span> FCommonVariantParams::FCommonVariantParams;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;CommonParams解决方案&lt;/h1&gt;
&lt;p&gt;在实现业务框架的时候，经常需要支持传参的功能（比如 &lt;code&gt;Buff&lt;/code&gt; 系统中，&lt;code&gt;AddBuff&lt;/code&gt; 的时候，通常需要支持外部传入一个 &lt;code&gt;BuffParams&lt;/code&gt; ，</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="Gameplay" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/"/>
    
    
    <category term="Gameplay" scheme="https://www.bearchild.top/tags/Gameplay/"/>
    
    <category term="UE" scheme="https://www.bearchild.top/tags/UE/"/>
    
  </entry>
  
  <entry>
    <title>[UE]GameSubSystem简单实现</title>
    <link href="https://www.bearchild.top/2024/03/14/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/[UE]GameSubSystem%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
    <id>https://www.bearchild.top/2024/03/14/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/[UE]GameSubSystem%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</id>
    <published>2024-03-13T16:00:00.000Z</published>
    <updated>2024-04-26T16:26:19.759Z</updated>
    
    <content type="html"><![CDATA[<h1>GameSubSystem简单实现</h1><p>一种简单的维护 <code>SubSystem</code> 的解决方案，参考 <code>UE</code> 自带的 <code>FSubsystemCollection</code> 实现。</p><p>在维护各个业务时，经常需要将一个上层的 <code>Manager</code>，下面再拆出若干个子系统，需要一种快捷的方法快速扩展出一套 <code>SUbSystem</code> 系统。</p><h2 id="基本结构">基本结构</h2><pre class="mermaid">classDiagramManager..*FGameSubSystemCollectionclass Manager {SubSystemCollections : FGameSubSystemCollection~USubSystemBase~}class FGameSubSystemCollection {FGameSubSystemCollection()}FGameSubSystemCollectionBase<|--FGameSubSystemCollectionclass FGameSubSystemCollectionBase {        Outer : TWeakObjectPtr~UObject~        SubSystemMap : TMap~UClass*,TStrongObjectPtr[UGameSubSystemBase]~        BaseType : UClass*                Init()        Uninit()        Tick()                FGameSubSystemCollectionBase(UClass* InBaseType)        AddSubSystemByClass(UClass* SubSystemClass)        RemoveSubSystemByClass(UClass* SubSystemClass)    }           FGameSubSystemCollectionBase..>UGameSubSystemBase    class UGameSubSystemBase {    LastTickTime : float        + Init()    + Uninit()    + Tick()    # OnInit()    # OnUnInit()    # OnTick(float DeltaTime)        # GetTickInternal()    # GetTimeNow()        }        UGameSubSystemBase<|--UGameSubSystem    class UGameSubSystem {    # OnInit()    # OnUnInit()    # OnTick(float DeltaTime)        # GetTickInternal()    }</pre><h2 id="使用方法">使用方法</h2><p>由 <code>Manager</code> 持有对应类型的 <code>SubSystemCollection</code>，主动调用 <code>Init</code>、<code>Uninit</code>、<code>Tick</code> 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Manager.h</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> TEnableIf&lt;TIsDerivedFrom&lt;T, UGameSubSystem&gt;::Value, T*&gt;::<span class="function">Type</span></span><br><span class="line"><span class="function"><span class="title">GetSubSystem</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> SubSystemCollections.GetSubSystem&lt;T&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">FGameSubSystemCollection &lt;UGameSubSystem&gt; SubSystemCollections;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Manager.cpp</span></span><br><span class="line"><span class="comment">// 在合适的时机：</span></span><br><span class="line">SubSystemCollections.<span class="built_in">Init</span>()</span><br><span class="line">SubSystemCollections.<span class="built_in">Uninit</span>()</span><br><span class="line">SubSystemCollections.<span class="built_in">Tick</span>()</span><br></pre></td></tr></table></figure><h2 id="SubSystemCollection">SubSystemCollection</h2><p><code>SubSystemCollection</code> 负责收集与管理所有的 <code>SubSystem</code>。</p><p>在 <code>SubSystemCollectionBase</code> 中，提供一个 <code>BaseClass</code>，这个 <code>BaseClass</code> 由对应的 <code>SubSystemCollection</code> 在初始化的时候传入：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TBaseType&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FGameSubSystemCollection</span> :</span> FGameSubSystemCollectionBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in"><span class="keyword">static_assert</span></span>(TIsDerivedFrom&lt;TBaseType, UGameSubSystemBase&gt;::Value, <span class="string">&quot;TBaseType must inherit from UGameSubSystemBase&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">FGameSubSystemCollection</span>() : <span class="built_in">FGameSubSystemCollectionBase</span>(TBaseType::<span class="built_in">StaticClass</span>())</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FGameSubSystemCollectionBase::<span class="built_in">FGameSubSystemCollectionBase</span>(UClass* InBaseType)</span><br><span class="line">: <span class="built_in">BaseType</span>(InBaseType)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">check</span>(BaseType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>Init</code> 的时候，根据 <code>BaseClass</code>，找到所有继承于该类的 <code>Class</code> （<code>GetDerivedClasses(BaseType, SubSystemClasses, true)</code>），然后进行 <code>AddSubSystemByClass</code>。</p><p>用一个 <code>TMap &lt; UClass*, TStrongObjectPtr&lt;UGameSubSystemBase&gt; &gt; SubSystemMap</code> 将所有的 <code>SubSystem</code> 实例保存下来，这里由于我们期望 <code>FGameSubSystemCollection</code> 可以在编译期决定类型，所以使用了 <code>template&lt;typename TBaseType&gt;</code> ，导致无法走 <code>UHT</code> 的反射，挂上<code>UPROPERTY()</code> 来保证生命周期。所以这里需要用 <code>TStrongObjectPtr</code> 来保证这个 <code>Collection</code> 内部的 <code>SubSystem</code> 不会被 <code>GC</code> 掉，同时保证被 <code>Manager</code> 持有时生命周期正确。</p><p>同时我们需要</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SubSystemCollectionBase.h</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FGameSubSystemCollectionBase</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">// 外部调用</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(UObject* InOuter)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Uninit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tick</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="built_in">FGameSubSystemCollectionBase</span>(UClass* InBaseType);</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">TSubSystemClass</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> TEnableIf&lt;TIsDerivedFrom&lt;TSubSystemClass, UGameSubSystemBase&gt;::Value, UGameSubSystemBase*&gt;::<span class="function">Type</span></span><br><span class="line"><span class="function"><span class="title">GetSubSystemInternal</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> SubSystem = SubSystemMap.<span class="built_in">FindRef</span>( TSubSystemClass::<span class="built_in">StaticClass</span>() ); SubSystem.<span class="built_in">IsValid</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> SubSystem.<span class="built_in">Get</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">TSubSystemClass</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> TEnableIf&lt;TIsDerivedFrom&lt;TSubSystemClass, UGameSubSystemBase&gt;::Value, TArray&lt;UGameSubSystemBase*&gt;&gt;::<span class="function">Type</span></span><br><span class="line"><span class="function"><span class="title">GetSubSystemsInternal</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TArray &lt;TSubSystemClass*&gt; OutArray;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; Pair : SubSystemMap)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!Pair.Value.<span class="built_in">IsValid</span>()) <span class="keyword">continue</span>;</span><br><span class="line">&#123;</span><br><span class="line">OutArray.<span class="built_in">Add</span>( Pair.Value.<span class="built_in">Get</span>() );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OutArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function">UGameSubSystemBase* <span class="title">AddSubSystemByClass</span><span class="params">(UClass* SubSystemClass)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RemoveSubSystemByClass</span><span class="params">(UClass* SubSystemClass)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">TWeakObjectPtr &lt;UObject&gt; Outer = <span class="literal">nullptr</span>;</span><br><span class="line">TMap &lt; UClass*, TStrongObjectPtr&lt;UGameSubSystemBase&gt; &gt; SubSystemMap;</span><br><span class="line">UClass* BaseType = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SubSystemCollectionBase.cpp</span></span><br><span class="line">FGameSubSystemCollectionBase::<span class="built_in">FGameSubSystemCollectionBase</span>(UClass* InBaseType)</span><br><span class="line">: <span class="built_in">BaseType</span>(InBaseType)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">check</span>(BaseType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FGameSubSystemCollectionBase::Init</span><span class="params">(UObject* InOuter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Outer.<span class="built_in">IsValid</span>()) <span class="keyword">return</span>; <span class="comment">// already initialized</span></span><br><span class="line"><span class="keyword">if</span> (InOuter == <span class="literal">nullptr</span>) <span class="keyword">return</span>; <span class="comment">// invalid Outer</span></span><br><span class="line"></span><br><span class="line">Outer = InOuter;</span><br><span class="line"></span><br><span class="line">TArray&lt;UClass*&gt; SubSystemClasses;</span><br><span class="line"><span class="built_in">GetDerivedClasses</span>(BaseType, SubSystemClasses, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">for</span> (UClass* SubSystemClass : SubSystemClasses)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">AddSubSystemByClass</span>(SubSystemClass);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FGameSubSystemCollectionBase::Tick</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; Pair : SubSystemMap)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> SubSystem = Pair.Value;</span><br><span class="line"><span class="keyword">if</span> (SubSystem.<span class="built_in">IsValid</span>())</span><br><span class="line">&#123;</span><br><span class="line">SubSystem-&gt;<span class="built_in">Tick</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FGameSubSystemCollectionBase::Uninit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TArray &lt;UClass*&gt; SubSystemClasses;</span><br><span class="line">SubSystemMap.<span class="built_in">GetKeys</span>(SubSystemClasses);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> SubSystemClass : SubSystemClasses)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">RemoveSubSystemByClass</span>(SubSystemClass);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">UGameSubSystemBase* <span class="title">FGameSubSystemCollectionBase::AddSubSystemByClass</span><span class="params">(UClass* SubSystemClass)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (SubSystemClass == <span class="literal">nullptr</span> || !Outer.<span class="built_in">IsValid</span>()) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">if</span> (SubSystemClass-&gt;<span class="built_in">HasAnyClassFlags</span>(CLASS_Abstract)) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SubSystemMap.<span class="built_in">Contains</span>( SubSystemClass ))</span><br><span class="line"><span class="keyword">return</span> SubSystemMap.<span class="built_in">FindRef</span>(SubSystemClass).<span class="built_in">Get</span>();</span><br><span class="line"></span><br><span class="line">UGameSubSystemBase* SubSystem = NewObject&lt;UGameSubSystemBase&gt;(Outer.<span class="built_in">Get</span>(), SubSystemClass);</span><br><span class="line">SubSystemMap.<span class="built_in">Add</span>( SubSystemClass, <span class="built_in">TStrongObjectPtr</span>(SubSystem)  );</span><br><span class="line">SubSystem-&gt;<span class="built_in">Init</span>();</span><br><span class="line"><span class="keyword">return</span> SubSystem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FGameSubSystemCollectionBase::RemoveSubSystemByClass</span><span class="params">(UClass* SubSystemClass)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (SubSystemClass == <span class="literal">nullptr</span> || !Outer.<span class="built_in">IsValid</span>()) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (!SubSystemMap.<span class="built_in">Contains</span>( SubSystemClass )) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> SubSystem = SubSystemMap.<span class="built_in">FindAndRemoveChecked</span>(SubSystemClass);</span><br><span class="line"><span class="keyword">if</span> (!SubSystem.<span class="built_in">IsValid</span>()) <span class="keyword">return</span>;</span><br><span class="line">SubSystem-&gt;<span class="built_in">Uninit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SubSystemCollection.h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> TBaseType&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FGameSubSystemCollection</span> :</span> FGameSubSystemCollectionBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in"><span class="keyword">static_assert</span></span>(TIsDerivedFrom&lt;TBaseType, UGameSubSystemBase&gt;::Value, <span class="string">&quot;TBaseType must inherit from UGameSubSystemBase&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">FGameSubSystemCollection</span>() : <span class="built_in">FGameSubSystemCollectionBase</span>(TBaseType::<span class="built_in">StaticClass</span>())</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">TSubSystemClass</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> TEnableIf&lt;TIsDerivedFrom&lt;TSubSystemClass, TBaseType&gt;::Value, TSubSystemClass*&gt;::<span class="function">Type</span></span><br><span class="line"><span class="function"><span class="title">GetSubSystem</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;TSubSystemClass*&gt;(GetSubSystemInternal&lt;TSubSystemClass&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">TSubSystemClass</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> TEnableIf&lt;TIsDerivedFrom&lt;TSubSystemClass, TBaseType&gt;::Value, TArray&lt;TSubSystemClass*&gt;&gt;::<span class="function">Type</span></span><br><span class="line"><span class="function"><span class="title">GetSubSystems</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> TArray&lt;UGameSubSystemBase*&gt;&amp; Array = GetSubSystemsInternal&lt;TSubSystemClass&gt;();</span><br><span class="line"><span class="keyword">const</span> TArray&lt;TSubSystemClass*&gt;* SpecificArray = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> TArray&lt;TSubSystemClass*&gt;*&gt;(&amp;Array);</span><br><span class="line"><span class="keyword">return</span> *SpecificArray;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>特别地，注意这里的 <code>FGameSubSystemCollection::GetSubSystems</code>，由于 <code>GetSubSystemsInternal</code> 返回的都是 <code>UGameSubSystemBase</code> 指针，内存大小和 <code>TSubSystemClass</code> 指针一样，所以可以使用 <code>reinterpret_cast</code> 直接将整个数组的类型转化，节省一步 <code>O(n)</code> 来 <code>cast</code> 的开销。</p><h2 id="SubSystemBase">SubSystemBase</h2><p>我们需要一个 <code>SubSystemBase</code>，负责管理给 <code>SubSystemCollection</code> 持有，同时给各自定义的 <code>SubSystem</code> 继承。</p><p>提供一些基础的方法，<code>Init</code>、<code>Uninit</code>、<code>Tick</code> 给 <code>SubSystemCollection</code> 调用。</p><p>同时子类只需要关心：<code>OnInit</code>、<code>OnUninit</code>、<code>OnTick</code>。</p><p>对于各自的业务，大家各自继承自定义的 <code>SubSystemBase</code> ，然后再自定义各自的 <code>SubSytem</code> 继承于这个业务扩展出来的 <code>SubSystemBase</code> 即可。</p><p><code>SubSystemBase-&gt;GetOuter()</code> 就可以拿到对应的 <code>Manager</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UCLASS</span>(Abstract)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UGameSubSystemBase</span> :</span> <span class="keyword">public</span> UObject</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tick</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Uninit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnInit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnUninit</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnTick</span><span class="params">(<span class="keyword">float</span> DeltaTime)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">float</span> <span class="title">GetTickInternal</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">-1.0f</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">float</span> <span class="title">GetTimeNow</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">float</span> LastTickTime;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于 <code>Tick</code> ，维护一个 <code>LastTickTime</code>，用于计算 <code>DeltaTime</code> 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameSubSystemBase::Tick</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">float</span> TickInternal = <span class="built_in">GetTickInternal</span>();</span><br><span class="line"><span class="keyword">if</span> (TickInternal &lt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> CurrentTickTime = <span class="built_in">GetTimeNow</span>();</span><br><span class="line"><span class="keyword">if</span> (CurrentTickTime - LastTickTime &gt; TickInternal)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">OnTick</span>(CurrentTickTime - LastTickTime);</span><br><span class="line">LastTickTime = CurrentTickTime;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;GameSubSystem简单实现&lt;/h1&gt;
&lt;p&gt;一种简单的维护 &lt;code&gt;SubSystem&lt;/code&gt; 的解决方案，参考 &lt;code&gt;UE&lt;/code&gt; 自带的 &lt;code&gt;FSubsystemCollection&lt;/code&gt; 实现。&lt;/p&gt;
&lt;p&gt;在维护各个</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="Gameplay" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/"/>
    
    
    <category term="Gameplay" scheme="https://www.bearchild.top/tags/Gameplay/"/>
    
    <category term="UE" scheme="https://www.bearchild.top/tags/UE/"/>
    
  </entry>
  
  <entry>
    <title>[UE]TeamSystem框架</title>
    <link href="https://www.bearchild.top/2024/03/14/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/[UE]TeamSystem%E6%A1%86%E6%9E%B6/"/>
    <id>https://www.bearchild.top/2024/03/14/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/[UE]TeamSystem%E6%A1%86%E6%9E%B6/</id>
    <published>2024-03-13T16:00:00.000Z</published>
    <updated>2024-04-26T15:24:47.454Z</updated>
    
    <content type="html"><![CDATA[<h1>TeamSystem框架</h1><p>一个简单的组队系统：支持玩家的 <code>加入</code>、<code>退出</code> 队伍，以及维护队伍的各种数据（比如 <code>Members</code>、<code>Score</code>）。</p><p>首先需要一个全局的 <code>TeamManager</code> ，以及一个在 <code>Player</code> 身上的 <code>TeamComponent</code> 负责维护 <code>Player</code> 相关的组队信息；</p><p>同时，将业务拆分为多个 <code>TeamSubSystems</code>。</p><p>以及最重点的 <strong>数据同步</strong>，根据不同的数据类型，进行不同方式的数据同步。</p><h2 id="TeamSubSystemBase">TeamSubSystemBase</h2><p>首先，需要将业务拆分为多个 <code>SubSystem</code> ，通过 <code>TeamManager</code> 持有  <code>SubSystemCollection</code> 来实现这个功能。</p><p>需要一个 <code>TeamSubSystemBase</code> ，在这里传入 <code>System = TeamManager</code> 以及为后续同步数据的分发做准备。</p><p>参考：<a href="https://www.bearchild.top/2024/03/14/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/%5BUE%5DGameSubSystem%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/">[UE]GameSubSystem简单实现</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UCLASS</span>(Abstract)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UTeamSubSystemBase</span> :</span> <span class="keyword">public</span> UGameSubSystemBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnInit</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">OnUninit</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">TWeakObjectPtr &lt;<span class="class"><span class="keyword">class</span> <span class="title">UTeamManager</span>&gt;</span> System = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamSubSystemBase::OnInit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">OnInit</span>();</span><br><span class="line">System = Cast&lt;UTeamManager&gt;(<span class="built_in">GetOuter</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TeamMemberSystem">TeamMemberSystem</h2><p>一个组队系统，最基本的功能就是玩家的 <code>JoinTeam</code>、<code>LeaveTeam</code>，对应的，需要 <code>TeamSystem</code> 支持队伍的 <code>Create</code>、<code>Destroy</code> 。</p><pre class="mermaid">classDiagram    UTeamManager..>UTeam    UTeamManager..>UTeamSubSystemBase    class UTeamManager {        SubSystemCollections : FGameSubSystemCollection~UTeamSubSystemBase~        Teams : TMap~uint64|UTeam*~         CreateTeam()        DestoryTeam()        GetTeam(uint64 TeamID)    }    class UTeamComponent {        TeamID : uint64        UpdateTeamID()    }        class UTeamSubSystemBase {    System : TWeakObjectPtr~class UTeamManager~    # OnInit()    # OnUninit()    }            UTeamMemberSystem..>UTeam    UTeamSubSystemBase<|--UTeamMemberSystem    class UTeamMemberSystem {    +JoinTeam(TeamID, PlayerUID)    +LeaveTeam(PlayerUID)    - GetOrCreateTeam(TeamID)    }        UTeam..>UTeamComponent    class UTeam {    TeamID : uint64    Members : TArray~ TWeakObjectPtr[UTeamComponent] ~    }</pre><p><em>伪代码示例：</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamMemberSystem::JoinTeam</span><span class="params">(uint64 TeamID, uint64 PlayerUID, <span class="keyword">bool</span> bProcessID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">IsStandaloneOrDS</span>(<span class="keyword">this</span>)) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">auto</span> Team = <span class="built_in">GetOrCreateTeam</span>(TeamID);</span><br><span class="line">TeamComponent-&gt;<span class="built_in">UpdateTeamID</span>(Team-&gt;<span class="built_in">GetTeamID</span>());</span><br><span class="line">Team-&gt;<span class="built_in">AddMember</span>(TeamComponent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamMemberSystem::LeaveTeam</span><span class="params">(uint64 PlayerUID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">IsStandaloneOrDS</span>(<span class="keyword">this</span>)) <span class="keyword">return</span>;</span><br><span class="line">Team-&gt;<span class="built_in">RemoveMember</span>(TeamComponent);</span><br><span class="line">TeamComponent-&gt;<span class="built_in">UpdateTeamID</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (Team-&gt;<span class="built_in">GetMembers</span>().<span class="built_in">Num</span>() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">System-&gt;<span class="built_in">DestoryTeam</span>( TeamID );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">UTeam* <span class="title">UTeamMemberSystem::GetOrCreateTeam</span><span class="params">(uint64 TeamID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> Team = System-&gt;<span class="built_in">GetTeam</span>(TeamID); !<span class="built_in">IsValid</span>(Team))</span><br><span class="line">&#123;</span><br><span class="line">System-&gt;<span class="built_in">CreateTeam</span>(TeamID);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> System-&gt;<span class="built_in">GetTeam</span>(TeamID);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">UTeam* <span class="title">UTeamManager::CreateTeam</span><span class="params">(uint64 TeamID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">GetTeam</span>(TeamID) != <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">UTeam* NewTeam = NewObject&lt;UTeam&gt;(<span class="keyword">this</span>);</span><br><span class="line">NewTeam-&gt;<span class="built_in">Init</span>(TeamID);</span><br><span class="line">Teams.<span class="built_in">Add</span>( TeamID, NewTeam );</span><br><span class="line"><span class="keyword">return</span> NewTeam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamManager::DestoryTeam</span><span class="params">(uint64 TeamID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> Team = <span class="built_in">GetTeam</span>(TeamID);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">IsValid</span>(Team)) <span class="keyword">return</span>;</span><br><span class="line">Team-&gt;<span class="built_in">Uninit</span>();</span><br><span class="line">Teams.<span class="built_in">Remove</span>(TeamID);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeam::Init</span><span class="params">(uint64 InTeamID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TeamID = InTeamID;</span><br><span class="line">Members.<span class="built_in">Empty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeam::AddMember</span><span class="params">(TWeakObjectPtr&lt;UTeamComponent&gt; InMember)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Members.<span class="built_in">Add</span>(InMember);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeam::RemoveMember</span><span class="params">(TWeakObjectPtr&lt;UTeamComponent&gt; InMember)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Members.<span class="built_in">Remove</span>(InMember);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TeamScoreSystem">TeamScoreSystem</h2><p>组队需要得分，每个队伍维护一个 <code>Score</code>。</p><pre class="mermaid">classDiagram        class UTeamSubSystemBase {    }        UTeamScoreSystem--|>UTeamSubSystemBase    class UTeamScoreSystem {    + AddScore(TeamID, InScore)    + ClearScore(TeamID)    }       UTeamScoreSystem..>UTeam    class UTeam {    Score : float    SetScore()    GetScore()    }</pre><p><em>伪代码示例：</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamScoreSystem::AddScore</span><span class="params">(uint64 TeamID, <span class="keyword">int</span> InAddScore)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">IsStandaloneOrDS</span>(<span class="keyword">this</span>)) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> LastScore = <span class="built_in">GetScore</span>(TeamID);</span><br><span class="line"><span class="keyword">int</span> NewScore = LastScore + InAddScore;</span><br><span class="line"><span class="built_in">SetScore</span>( TeamID, NewScore);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamScoreSystem::ClearScore</span><span class="params">(uint64 TeamID)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="params">(!IsStandaloneOrDS(<span class="keyword">this</span>))</span> <span class="keyword">return</span></span>;</span><br><span class="line"><span class="built_in">SetScore</span>( TeamID, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TeamSyncSystem"><em><strong>TeamSyncSystem</strong></em></h2><p>数据的同步，是该组队系统的 <strong>重点</strong> ，考虑一下对于各种各样的数据，有哪些本质的类型。</p><p>比如上述有 <code>队伍成员 Members</code>、<code>队伍分数 Score</code> 这两种数据，这两个数据的差别在于：</p><blockquote><p>① Members：对于玩家客户端，自己只关心自己队伍的 Members，不关心其它队伍的 Members</p><p>② Score：对于玩家客户端，不仅关心自己队伍的 Score，也关心其它队伍的 Score</p></blockquote><p>于是将数据拆为这两种类型，进行不同的同步方式，同时需要将同步数据的 <code>转发</code>、<code>通知</code> 分发到各个 <code>SubSystem</code> 里执行。</p><p>将这数据定义为这两种类型：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UENUM</span>()</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">ETeamSyncDataType</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">None           = <span class="number">0</span>,</span><br><span class="line">OwnerOnly      = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">Common         = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">ENUM_CLASS_FLAGS</span>(ETeamSyncDataType);</span><br></pre></td></tr></table></figure><blockquote><p><code>FTeamSyncData_OwnerOnly</code>：<code>Client-OwnerOnly Data</code>, 通过 <code>TeamComponent(PlayerState)-OwnerOnly</code> 同步（若某个字段，<code>Client</code> 只关心自己队伍上的，则放在这）</p><p><code>FTeamSyncData_Common</code>： <code>All Data</code>, 通过 <code>TeamManager(GameState)</code> 同步（若某个数据，<code>1P</code> 关心其它队伍上的数据，则放在这）</p></blockquote><p>特别注意的是，有时候某些数据同时存在于两种类型中，比如 <code>TeamID</code>。</p><h3 id="数据类型：OwnerOnlyData">数据类型：OwnerOnlyData</h3><p><code>OwnerOnlyData</code> 比较简单，直接将数据打包好，然后设置给 <code>TeamComponent(PS)</code> 来同步即可，将同步数据 <code>Condition</code> 设置为 <code>COND_OwnerOnly</code> 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">USTRUCT</span>()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FTeamSyncData_OwnerOnly</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">FTeamSyncData_OwnerOnly</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">uint64 TeamID;</span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">TArray &lt;uint64&gt; MemberUIDs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> FTeamSyncData_OwnerOnly&amp; Other) <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> FTeamSyncData_OwnerOnly&amp; Other) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(*<span class="keyword">this</span> == Other);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">FString <span class="title">ToString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="数据类型：CommonData">数据类型：CommonData</h3><p><code>CommonData</code> 的原始数据比较简单：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">USTRUCT</span>()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FTeamSyncData_Common</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">FTeamSyncData_Common</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">uint64 TeamID = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line"><span class="keyword">int</span> Score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> FArchive&amp; <span class="keyword">operator</span>&lt;&lt;(FArchive&amp; Ar, FTeamSyncData_Common&amp; Data);</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> FTeamSyncData_Common&amp; Other) <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> FTeamSyncData_Common&amp; Other) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(*<span class="keyword">this</span> == Other);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">FString <span class="title">ToString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">FArchive&amp; <span class="keyword">operator</span>&lt;&lt;(FArchive&amp; Ar, FTeamSyncData_Common&amp; Data)</span><br><span class="line">&#123;</span><br><span class="line">Ar &lt;&lt; Data.TeamID;</span><br><span class="line">Ar &lt;&lt; Data.Score;</span><br><span class="line"><span class="keyword">return</span> Ar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是由于这个数据通过 <code>TeamManager</code> 来同步，需要维护 <code>TeamID-&gt;CommonData</code> 这个映射。</p><p>但是由于 <code>TMap</code> 不能直接挂 <code>UPROPERTY()</code> 进行同步，所以需要自定义一下 <code>NetSerialize</code> 来进行同步。</p><p>在 <code>TeamManager</code> 中设置：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Manager</span></span><br><span class="line">&#123; </span><br><span class="line"><span class="built_in">UPROPERTY</span>(Replicated, PushModelProperty, ReplicatedUsing = OnRep_SyncDatas)</span><br><span class="line">FTeamSyncCommonDatas SyncDatas;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过一个 <code>SyncDatas</code> 来同步数据，这个 <code>SyncDatas</code> 里保存了 <code>TMap &lt;uint64, FTeamSyncData_Common&gt; Datas</code>，以及一个用于触发同步的 <code>SyncCount</code>。</p><p>每次数据 <code>Update</code> 或者 <code>Remove</code> 的时候，<code>MARK_SYNC_DIRTY</code> 来将 <code>SyncCount++</code>，并且 <code>MarkDirty</code> 一下，触发数据同步。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">USTRUCT</span>()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FTeamSyncCommonDatas</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">FTeamSyncCommonDatas</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">FTeamSyncData_Common <span class="title">GetData</span><span class="params">(uint64 TeamID)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> TMap&lt;uint64, FTeamSyncData_Common&gt;&amp; <span class="title">GetDatas</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UpdateData</span><span class="params">(uint64 TeamID, <span class="keyword">const</span> FTeamSyncData_Common&amp; InData)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RemoveData</span><span class="params">(uint64 TeamID)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">TMap &lt;uint64, FTeamSyncData_Common&gt; Datas;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NetSerialize</span><span class="params">(FArchive&amp; Ar, class UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MARK_SYNC_DIRTY</span><span class="params">()</span></span>;</span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line">uint32 SYNC_COUNT = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TStructOpsTypeTraits</span>&lt;</span>FTeamSyncCommonDatas&gt; : TStructOpsTypeTraitsBase2&lt;FTeamSyncCommonDatas&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">WithNetSerializer = <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">FTeamSyncData_Common <span class="title">FTeamSyncCommonDatas::GetData</span><span class="params">(uint64 TeamID)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!Datas.<span class="built_in">Contains</span>(TeamID)) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">return</span> Datas[TeamID];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> TMap&lt;uint64, FTeamSyncData_Common&gt;&amp; <span class="title">FTeamSyncCommonDatas::GetDatas</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Datas;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FTeamSyncCommonDatas::UpdateData</span><span class="params">(uint64 TeamID, <span class="keyword">const</span> FTeamSyncData_Common&amp; InData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Datas.<span class="built_in">Add</span>( TeamID, InData );</span><br><span class="line"><span class="built_in">MARK_SYNC_DIRTY</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FTeamSyncCommonDatas::RemoveData</span><span class="params">(uint64 TeamID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Datas.<span class="built_in">Remove</span>(TeamID);</span><br><span class="line"><span class="built_in">MARK_SYNC_DIRTY</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FTeamSyncCommonDatas::MARK_SYNC_DIRTY</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SYNC_COUNT++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FTeamSyncCommonDatas::NetSerialize</span><span class="params">(FArchive&amp; Ar, UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Ar &lt;&lt; SYNC_COUNT;</span><br><span class="line">Ar &lt;&lt; Datas;</span><br><span class="line">bOutSuccess = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数据同步">数据同步</h3><pre class="mermaid">classDiagramclass UTeam {    + CollectSyncData_OwnerOnly(FTeamSyncData_OwnerOnly& SyncData)    + CollectSyncData_Common(FTeamSyncData_Common& SyncData)    - NotifySyncDataChanged(ETeamSyncDataType DataType)    }        UTeam..>Delegate    Delegate..>UTeamSubSystemBase        class UTeamSubSystemBase {    - RegisterSyncData()    - UnregisterSyncData()    # OnSyncTeamDataOwnerOnlyChanged(TeamID, NewData, LastData)    # OnSyncTeamDataCommonChanged(TeamID, NewData, LastData)    }</pre><p>由于原始数据存在 <code>DS</code> 的 <code>UTeam</code> 上，实现一个 <code>Notify</code> 方法，在数据变化的时候，通过 <code>Delegate</code> 调用到 <code>TeamSyncSystem</code>，进行数据的分发。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeam::NotifySyncDataChanged</span><span class="params">(ETeamSyncDataType DataType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">EnumHasAllFlags</span>(DataType, ETeamSyncDataType::OwnerOnly))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> Delegate = UTeamCommonDelegate::<span class="built_in">GetDelegate</span>()-&gt;OnSyncTeamData_OwnerOnly; Delegate.<span class="built_in">IsBound</span>())</span><br><span class="line">&#123;</span><br><span class="line">Delegate.<span class="built_in">Execute</span>(TeamID);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">EnumHasAllFlags</span>(DataType, ETeamSyncDataType::Common))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> Delegate = UTeamCommonDelegate::<span class="built_in">GetDelegate</span>()-&gt;OnSyncTeamData_Common; Delegate.<span class="built_in">IsBound</span>())</span><br><span class="line">&#123;</span><br><span class="line">Delegate.<span class="built_in">Execute</span>(TeamID);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AddMember、RemoveMember 时 Members 发生变化后：</span></span><br><span class="line"><span class="built_in">NotifySyncDataChanged</span>(ETeamSyncDataType::OwnerOnly);</span><br><span class="line"><span class="comment">// SetScore 时 Score发生变化</span></span><br><span class="line"><span class="built_in">NotifySyncDataChanged</span>(ETeamSyncDataType::Common);</span><br></pre></td></tr></table></figure><p>在 <code>TeamSyncData : TeamSubSystemBase</code> 里绑定两种数据变化的 <code>Delegate</code>，对数据进行操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamSyncSystem::SyncTeamData_OwnerOnlyCallback</span><span class="params">(uint64 TeamID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FTeamSyncData_OwnerOnly SyncData;</span><br><span class="line">Team-&gt;<span class="built_in">CollectSyncData_OwnerOnly</span>(SyncData);</span><br><span class="line">    <span class="comment">// 对队伍里的所有成员修改 SyncData</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> Member : Team-&gt;<span class="built_in">GetMembers</span>())</span><br><span class="line">&#123;</span><br><span class="line">Member-&gt;<span class="built_in">UpdateTeamSyncData</span>( SyncData ); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamSyncSystem::OnSyncTeamData_CommonCallback</span><span class="params">(uint64 TeamID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FTeamSyncData_Common SyncData;</span><br><span class="line">Team-&gt;<span class="built_in">CollectSyncData_Common</span>(SyncData);</span><br><span class="line">    <span class="comment">// 将数据设置到 Manager 里</span></span><br><span class="line">System-&gt;<span class="built_in">UpdateTeamSyncData</span>( TeamID, SyncData );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特别地，在 <code>DestroyTeam</code> 时，进行 <code>RemoveSyncData</code>；在玩家 <code>LeaveTeam</code> 时，<code>UpdateTeamSyncData( &#123;&#125; ) </code>清空数据。</p><h3 id="数据分发">数据分发</h3><p>显然需要在 <code>DS/Clinet</code> 进行数据的分发，将数据变化重新分发回各个业务。</p><p>于是在对应数据的 <code>OnRep</code> 里将数据传给 <code>TeamSubSystemBase</code>，并且分发数据给各个子系统。</p><pre class="mermaid">flowchart TDTeam--Notify-->TeamSyncSystemTeamSyncSystem--SetData-->TeamComponentTeamSyncSystem--SetData-->TeamManagerTeamComponent--OnRep_SyncData : OwnerOnly-->TeamSubSystemBaseTeamManager--OnRep_SyncDatas : Common-->TeamSubSystemBaseTeamSubSystemBase--OnSync : OwnerOnlyData-->TeamMemberSystemTeamSubSystemBase--OnSync : CommonData-->TeamScoreSystemTeamSubSystemBase--OnSync-->OtherSystem...</pre><h4 id="RepData">RepData</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamManager::UpdateTeamSyncData</span><span class="params">(uint64 TeamID, <span class="keyword">const</span> FTeamSyncData_Common&amp; InData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GetSyncDatas_Mutable</span>().<span class="built_in">UpdateData</span>( TeamID, InData );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamManager::RemoveTeamSyncData</span><span class="params">(uint64 TeamID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">GetSyncDatas_Mutable</span>().<span class="built_in">RemoveData</span>(TeamID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamManager::OnRep_SyncDatas</span><span class="params">(<span class="keyword">const</span> FTeamSyncCommonDatas&amp; LastSyncDatas)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; [TeamID, NewData] : SyncDatas.<span class="built_in">GetDatas</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (TeamID == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> LastData = LastSyncDatas.<span class="built_in">GetData</span>(TeamID); LastData != NewData)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> Delegate = UTeamCommonDelegate::<span class="built_in">GetDelegate</span>()-&gt;OnSyncTeamDataCommonChanged; Delegate.<span class="built_in">IsBound</span>())</span><br><span class="line">&#123;</span><br><span class="line">Delegate.<span class="built_in">Execute</span>(TeamID, NewData, LastData);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamManager::OnRep_SyncDatas</span><span class="params">(<span class="keyword">const</span> FTeamSyncCommonDatas&amp; LastSyncDatas)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; [TeamID, NewData] : SyncDatas.<span class="built_in">GetDatas</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (TeamID == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> LastData = LastSyncDatas.<span class="built_in">GetData</span>(TeamID); LastData != NewData)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> Delegate = UTeamCommonDelegate::<span class="built_in">GetDelegate</span>()-&gt;OnSyncTeamDataCommonChanged; Delegate.<span class="built_in">IsBound</span>())</span><br><span class="line">&#123;</span><br><span class="line">Delegate.<span class="built_in">Execute</span>(TeamID, NewData, LastData);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Data-Register-Changed">Data Register&amp;Changed</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UCLASS</span>(Abstract)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UTeamSubSystemBase</span> :</span> <span class="keyword">public</span> UGameSubSystemBase</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line">        </span><br><span class="line"><span class="comment">// ----- 客户端收到数据后的事件分发 ------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> ETeamSyncDataType <span class="title">GetRegisterSyncDataType</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> ETeamSyncDataType::None; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RegisterSyncData</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UnregisterSyncData</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamSubSystemBase::RegisterSyncData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">IsClient</span>(<span class="keyword">this</span>)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> Type = <span class="built_in">GetRegisterSyncDataType</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">EnumHasAllFlags</span>(Type, ETeamSyncDataType::OwnerOnly))</span><br><span class="line">&#123;</span><br><span class="line">UTeamCommonDelegate::<span class="built_in">GetDelegate</span>()-&gt;OnSyncTeamDataOwnerOnlyChanged.<span class="built_in">BindDynamic</span>(<span class="keyword">this</span>, &amp;ThisClass::OnSyncTeamDataOwnerOnlyChanged );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">EnumHasAllFlags</span>(Type, ETeamSyncDataType::Common))</span><br><span class="line">&#123;</span><br><span class="line">UTeamCommonDelegate::<span class="built_in">GetDelegate</span>()-&gt;OnSyncTeamDataCommonChanged.<span class="built_in">BindDynamic</span>(<span class="keyword">this</span>, &amp;ThisClass::OnSyncTeamDataCommonChanged );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamSubSystemBase::UnregisterSyncData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">IsClient</span>(<span class="keyword">this</span>)) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">auto</span> Type = <span class="built_in">GetRegisterSyncDataType</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">EnumHasAllFlags</span>(Type, ETeamSyncDataType::OwnerOnly))</span><br><span class="line">&#123;</span><br><span class="line">UTeamCommonDelegate::<span class="built_in">GetDelegate</span>()-&gt;OnSyncTeamDataOwnerOnlyChanged.<span class="built_in">Unbind</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">EnumHasAllFlags</span>(Type, ETeamSyncDataType::Common))</span><br><span class="line">&#123;</span><br><span class="line">UTeamCommonDelegate::<span class="built_in">GetDelegate</span>()-&gt;OnSyncTeamDataCommonChanged.<span class="built_in">Unbind</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 供 SubSytem 重载</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamSubSystemBase::OnSyncTeamDataOwnerOnlyChanged</span><span class="params">(uint64 TeamID, <span class="keyword">const</span> FTeamSyncData_OwnerOnly&amp; NewData, <span class="keyword">const</span> FTeamSyncData_OwnerOnly&amp; LastData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamSubSystemBase::OnSyncTeamDataCommonChanged</span><span class="params">(uint64 TeamID, <span class="keyword">const</span> FTeamSyncData_Common&amp; NewData, <span class="keyword">const</span> FTeamSyncData_Common&amp; LastData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在每个不同的 <code>SubSystem</code> 里，通过 <code>override GetRegisterSyncDataType </code> 来决定自己需要监听哪种类型的数据（也可以都监听）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TeamMemberSystem</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> ETeamSyncDataType <span class="title">GetRegisterSyncDataType</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> ETeamSyncDataType::OwnerOnly; &#125;</span><br><span class="line"><span class="comment">// TeamScoreSystem:</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> ETeamSyncDataType <span class="title">GetRegisterSyncDataType</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> ETeamSyncDataType::Common; &#125;</span><br><span class="line"><span class="comment">// OtherSystem:</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> ETeamSyncDataType <span class="title">GetRegisterSyncDataType</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> ETeamSyncDataType::OwnerOnly | ETeamSyncDataType::Common; &#125;</span><br></pre></td></tr></table></figure><p>各个 <code>SubSystem</code> 自己重载需要的 <code>OnSyncTeamDataOwnerOnlyChanged</code> 或 <code>OnSyncTeamDataCommonChanged</code>，可以根据 <code>Data</code>、<code>LastData</code> 进行数据的 <code>Diff</code> 并进行事件通知，比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UTeamMemberSystem::OnSyncTeamDataOwnerOnlyChanged</span><span class="params">(uint64 TeamID, <span class="keyword">const</span> FTeamSyncData_OwnerOnly&amp; NewData, <span class="keyword">const</span> FTeamSyncData_OwnerOnly&amp; LastData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">OnSyncTeamDataOwnerOnlyChanged</span>(TeamID, NewData, LastData);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> MemberUID : NewData.MemberUIDs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!LastData.MemberUIDs.<span class="built_in">Contains</span>(MemberUID))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// ADD</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> Component = UTeamUtils::<span class="built_in">GetComponentByUID</span>(<span class="built_in">GetWorld</span>(), MemberUID); <span class="built_in">IsValid</span>(Component)) <span class="comment">// 客户端设置 TeamID, 防止同步延迟问题</span></span><br><span class="line">&#123;</span><br><span class="line">Component-&gt;<span class="built_in">UpdateTeamID</span>(TeamID);</span><br><span class="line">&#125;</span><br><span class="line">UTeamUtils::<span class="built_in">NotifyTeamMemberChanged</span>(TeamID, MemberUID, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> MemberUID : LastData.MemberUIDs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!NewData.MemberUIDs.<span class="built_in">Contains</span>(MemberUID))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//Remove</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> Component = UTeamUtils::<span class="built_in">GetComponentByUID</span>(<span class="built_in">GetWorld</span>(), MemberUID); <span class="built_in">IsValid</span>(Component)) <span class="comment">// 客户端设置 TeamID, 防止同步延迟问题</span></span><br><span class="line">&#123;</span><br><span class="line">Component-&gt;<span class="built_in">UpdateTeamID</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">UTeamUtils::<span class="built_in">NotifyTeamMemberChanged</span>(TeamID, MemberUID, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;TeamSystem框架&lt;/h1&gt;
&lt;p&gt;一个简单的组队系统：支持玩家的 &lt;code&gt;加入&lt;/code&gt;、&lt;code&gt;退出&lt;/code&gt; 队伍，以及维护队伍的各种数据（比如 &lt;code&gt;Members&lt;/code&gt;、&lt;code&gt;Score&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="Gameplay" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/"/>
    
    
    <category term="Gameplay" scheme="https://www.bearchild.top/tags/Gameplay/"/>
    
    <category term="UE" scheme="https://www.bearchild.top/tags/UE/"/>
    
  </entry>
  
  <entry>
    <title>[UE]GameplayBuffSystem框架</title>
    <link href="https://www.bearchild.top/2024/02/23/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/[UE]GameplayBuffSystem%E6%A1%86%E6%9E%B6/"/>
    <id>https://www.bearchild.top/2024/02/23/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/[UE]GameplayBuffSystem%E6%A1%86%E6%9E%B6/</id>
    <published>2024-02-22T16:00:00.000Z</published>
    <updated>2024-04-26T16:20:48.378Z</updated>
    
    <content type="html"><![CDATA[<h1>GameplayBuffSystem框架</h1><h2 id="设计">设计</h2><p>首先我们需要一个 <code>BuffManager</code> ，管理所有的 <code>BuffComponent</code>。<br>（实现的时候，可以让 <code>BuffManager</code> 作为一个 <code>GameStateComponent</code>；<code>BuffComponent</code> 作为一个 <code>PlayerStateComponent</code> ）</p><p>对于每个 <code>Player</code>，需要一个 <code>BuffComponent</code> 管理该 <code>Player</code> 身上持有的 <code>Buff</code>；</p><p>对于 <code>Buff</code>，需要一个 <code>BuffBase</code> 作为 <code>Buff</code> 的基类；</p><pre class="mermaid">classDiagramUGameplayBuffManager..>FGameplayBuffSettingUGameplayBuffManager..>UGameplayBuffComponentUGameplayBuffManager..>FGameplayBuffParams    class UGameplayBuffManager {        BuffSettings : TMap~int|FGameplayBuffSetting~        +CommitBuff(Target, BuffID, Params)        +QueryBuff(Target, BuffID)        +CombineBuffParams(Target, BuffID, Params)        +RemoveBuff(Target, BuffID, bRemoveImmediately)        +RemoveBuff(Target, BuffHandle, bRemoveImmediately)        +ClearBuff(Target)        -Tick()        -CreateBuff(Target, BuffID, Params)    }        UGameplayBuffComponent..>UGameplayBuffBase    class UGameplayBuffComponent {    BuffGroup : TArray~UGameplayBuffBase*~        BuffIDArray : int (For Sync)        AddBuff(InBuff)        RemoveBuff(InBuff, bRemoveImmediately)    }class FGameplayBuffSetting {        BuffName : FString        bNeedToMerge : bool        BuffAsset : TSubclassOf~UGameplayBuffBase~    }    class FGameplayBuffParams {        # ValueMap : TMap~FString, FVariant~ ValueMap        FGameplayBuffParams(std::initializer_list ~TPairInitializer[const FString&, FVariant]~ ValuePairs)        SetValue(const FString& FieldName, FVariant Value)        Contains(const FString& FieldName)        IsEmpty()        Merge(const FGameplayBuffParams& OtherParams)        GetValueMap() const        operator+(const FGameplayBuffParams& OtherParams)    }        class FGameplayCountDownData {    StartTime    TotalTime    LeftTime    IsPause    SpeedFactor    }UGameplayBuffBase..>FGameplayBuffParamsclass UGameplayBuffBase {Owner : TWeakObjectPtr~UGameBuffComponent~BuffID : intBuffName : FStringBuffParams : FGameplayBuffParams+Create(Owner, BuffID, Params)+Remove()+Merge(BuffHandle, Params)+CombineParams(Params)+Tick(DeltaTime)+CheckNeetToStop()+SetNeedToRemove(bEnable)#OnCreate()#OnRemove()#OnMerge()#OnTick()}UGameplayBuffBase<|--UGameplayBuff_TimeDurationUGameplayBuff_TimeDuration..>FGameplayCountDownDataclass UGameplayBuff_TimeDuration {# TimeDuration : float# PassDuration : float# TickInternal : float# LastTickTime : float- SpeedFactor : float- bInPause : false- PauseReasons : TArray~FString~# Tick(DeltaTime)+ Refresh(InPassDuration, InTimeDuration)+ BeginPauseTime(Reason)+ StopPauseTime(Reason)+ UpdateSpeedFactor(InFactor)+ GetTimeDuration()+ GetLeftTime()+ GetCountDownData()# OnBeginPauseTime()# OnStopPauseTime()# OnUpdateSpeedFactor()# OnRefresh()# OnTimeStateChanged()}UGameplayBuffUtils..>UGameplayBuffManager</pre><h2 id="BuffManager">BuffManager</h2><ol><li><p><code>Commit</code>：判断 <code>BuffSettings</code> 里是否有对应 <code>BuffID</code> 的 <code>Buff</code>，若存在则创建该实例；</p><p>判断一下 <code>BuffComponent</code> 里是否原本已经有相同 <code>BuffID</code> 的 <code>Buff</code>，若存在，并且该 <code>Buff</code> 需要 <code>Merge</code> 的话，执行 <code>OldBuff</code> 的  <code>Merge</code> ，并将新创建的 <code>Buff</code> 给 <code>Remove</code> ；</p><p>否则直接执行 <code>BuffComponent</code> 的 <code>AddBuff</code>。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">UGameplayBuffBase* <span class="title">UGameplayBuffManager::CommitBuff</span><span class="params">(UGameplayBuffComponent* Target, <span class="keyword">int</span> BuffID, <span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Target == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::CommitBuff, Target is nullptr! BuffID=%d&quot;</span>), BuffID);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MergedParams 的作用：将代码中传入的参数与额外配置表中的参数 Merge，实现 BuffParams 的配置化</span></span><br><span class="line">FGameplayBuffParams MergedParams = <span class="built_in">GetMergedParams</span>( BuffID, Params );</span><br><span class="line"></span><br><span class="line">UGameplayBuffBase* Buff = <span class="built_in">CreateBuff</span>(Target, BuffID, MergedParams);</span><br><span class="line"><span class="keyword">if</span> (Buff == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::CommitBuff, Buff is nullptr! UID=%llu, BuffID=%d&quot;</span>), Target-&gt;<span class="built_in">GetUID</span>(), BuffID);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> SpecBuffGroup = Target-&gt;<span class="built_in">GetBuffGroupByBuffID</span>(BuffID);</span><br><span class="line"><span class="keyword">if</span> (SpecBuffGroup.<span class="built_in">Num</span>() &amp;&amp; BuffSettings[BuffID].bNeedToMerge == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">UGameplayBuffBase* OldBuff = SpecBuffGroup[<span class="number">0</span>];</span><br><span class="line">OldBuff-&gt;<span class="built_in">Merge</span>(Buff, MergedParams);</span><br><span class="line">Buff-&gt;<span class="built_in">Remove</span>();</span><br><span class="line"><span class="keyword">return</span> OldBuff;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Target-&gt;<span class="built_in">AddBuff</span>(Buff);</span><br><span class="line"><span class="keyword">return</span> Buff;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">UGameplayBuffBase* <span class="title">UGameplayBuffManager::CreateBuff</span><span class="params">(UGameplayBuffComponent* Target, <span class="keyword">int</span> BuffID, <span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BuffSettings.<span class="built_in">Contains</span>(BuffID) || !<span class="built_in">IsValid</span>(BuffSettings[BuffID].BuffAsset))</span><br><span class="line">&#123; </span><br><span class="line"><span class="built_in">LogW</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::CreateBuff,  Miss BuffSetting! UID=%llu, BuffID=%d&quot;</span>), Target-&gt;<span class="built_in">GetUID</span>(), BuffID);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UGameplayBuffBase* BuffInst = NewObject&lt;UGameplayBuffBase&gt;( Target, BuffSettings[BuffID].BuffAsset );</span><br><span class="line"><span class="keyword">if</span> (BuffInst == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LogW</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::CreateBuff,  BuffInst is nullptr! UID=%llu, BuffID=%d&quot;</span>), Target-&gt;<span class="built_in">GetUID</span>(), BuffID);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BuffInst-&gt;<span class="built_in">Create</span>(Target, BuffID, Params);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> BuffInst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>Query</code>：判断<code>BuffComponent</code>上是否有对应ID的<code>Buff</code>，返回对应 <code>Handle</code>：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TArray&lt;UGameplayBuffBase*&gt; <span class="title">UGameplayBuffManager::QueryBuff</span><span class="params">(UGameplayBuffComponent* Target, <span class="keyword">int</span> BuffID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Target == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::QueryBuff, Target is nullptr! BuffID=%d&quot;</span>), BuffID);</span><br><span class="line"><span class="keyword">return</span> TArray&lt;UGameplayBuffBase*&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> SpecBuffGroup = Target-&gt;<span class="built_in">GetBuffGroupByBuffID</span>(BuffID);</span><br><span class="line"><span class="keyword">return</span> SpecBuffGroup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>Remove</code>：通过 <code>BuffID</code> 或者 <code>Handle</code> 把 <code>BuffComponent</code> 上存在的对应 <code>Buff</code> 给 <code>Remove</code>。<br>特别的，为了解决 <code>Buff</code> 之间的依赖问题（比如 <code>Buff(A-&gt;B)</code>，在  <code>A、B</code> 的 <code>Remove</code> 都调用到了另一个 <code>Buff</code> 的 <code>Remove</code>，会导致循环 <code>Remove</code>问题），维护一个 <code>bRemoveImmediately</code> （默认为<code>false</code>），每次调用 <code>Remove</code> 时只是 <code>MarkDirty</code>（把移除标记设为 <code>true</code>），在下一次 <code>Tick</code> 才会实际移除。<br>这样就可以一次 <code>Tick</code> 移除一个 <code>Buff</code>，通过时间来解开了这个循环依赖的链条。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffManager::RemoveBuff</span><span class="params">(UGameplayBuffComponent* Target, <span class="keyword">int</span> BuffID, <span class="keyword">bool</span> bRemoveImmediately)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Target == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::RemoveBuff, Target is nullptr! BuffID=%d&quot;</span>), BuffID);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> SpecBuffGroup = Target-&gt;<span class="built_in">GetBuffGroupByBuffID</span>(BuffID);</span><br><span class="line"><span class="keyword">if</span> (!SpecBuffGroup.<span class="built_in">Num</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::RemoveBuff, Buff is not exist! UID=%llu, BuffID=%d&quot;</span>), Target-&gt;<span class="built_in">GetUID</span>(), BuffID);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> Index = SpecBuffGroup.<span class="built_in">Num</span>() - <span class="number">1</span>; Index &gt;= <span class="number">0</span>; Index--)</span><br><span class="line">&#123;</span><br><span class="line">Target-&gt;<span class="built_in">RemoveBuff</span>(SpecBuffGroup[Index], bRemoveImmediately);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffManager::RemoveBuff</span><span class="params">(UGameplayBuffComponent* Target, UGameplayBuffBase* Buff, <span class="keyword">bool</span> bRemoveImmediately)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Target == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::RemoveBuff, Target is nullptr!&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Target-&gt;<span class="built_in">RemoveBuff</span>(Buff, bRemoveImmediately);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffManager::ClearBuff</span><span class="params">(UGameplayBuffComponent* Target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Target == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::RemoveBuff, Target is nullptr!&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> BuffGroup = Target-&gt;<span class="built_in">GetBuffGroup</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> Index = BuffGroup.<span class="built_in">Num</span>() - <span class="number">1</span>; Index &gt;= <span class="number">0</span>; Index--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Index &gt;= BuffGroup.<span class="built_in">Num</span>()) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">auto</span> Buff = BuffGroup[Index];</span><br><span class="line"><span class="keyword">if</span> (Buff == <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line">Target-&gt;<span class="built_in">RemoveBuff</span>(Buff);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><code>Combine</code>：<code>Buff</code> 显然需要支持传入参数，在 <code>Create</code> 的时候传参，或者通过 <code>CombineParams</code> 将参数传入 <code>Buff</code> 中：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffManager::CombineBuffParams</span><span class="params">(UGameplayBuffComponent* Target, <span class="keyword">int</span> BuffID, <span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Target == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::CombineBuffParams, Target is nullptr! BuffID=%d&quot;</span>), BuffID);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> SpecBuffGroup = Target-&gt;<span class="built_in">GetBuffGroupByBuffID</span>(BuffID);</span><br><span class="line"><span class="keyword">if</span> (!SpecBuffGroup.<span class="built_in">Num</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::CombineBuffParams, Buff is not exist! UID=%llu, BuffID=%d&quot;</span>), Target-&gt;<span class="built_in">GetUID</span>(), BuffID);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> Buff : SpecBuffGroup)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsValid</span>(Buff))</span><br><span class="line">&#123;</span><br><span class="line">Buff-&gt;<span class="built_in">CombineParams</span>(Params);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffManager::CombineBuffParams</span><span class="params">(UGameplayBuffBase* Buff, <span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Buff == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::CombineBuffParams, Buff is nullptr!&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Buff-&gt;<span class="built_in">CombineParams</span>(Params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>Tick</code>：遍历<code>BuffComponent</code>，遍历其中的 <code>BuffGroup</code>；对每一个<code>Buff</code> 执行 <code>Tick</code>，并且检查是否需要 <code>Stop</code> ：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffManager::TickComponent</span><span class="params">(<span class="keyword">float</span> DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsClient</span>(<span class="keyword">this</span>)) <span class="keyword">return</span>;</span><br><span class="line">Super::<span class="built_in">TickComponent</span>(DeltaTime, TickType, ThisTickFunction);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> GS = GetOwner&lt;AGameStateBase&gt;();</span><br><span class="line"><span class="keyword">auto</span> PlayerArray = GS-&gt;<span class="built_in">GetAllPlayerState</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> Player : PlayerArray)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> Target = UFunctionLibrary::GetPlayerStateComponent&lt;UGameplayBuffComponent&gt;(Player);</span><br><span class="line"><span class="keyword">if</span> (Target == <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> BuffGroup = Target-&gt;<span class="built_in">GetBuffGroup</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tick</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> Buff : BuffGroup)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Buff == <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (!Buff-&gt;<span class="built_in">CheckNeedToStop</span>())</span><br><span class="line">&#123;</span><br><span class="line">Buff-&gt;<span class="built_in">Tick</span>(DeltaTime);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove</span></span><br><span class="line"><span class="keyword">int</span> TotalCount = BuffGroup.<span class="built_in">Num</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> Index = TotalCount - <span class="number">1</span>; Index &gt;= <span class="number">0</span>; Index--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span>&amp; Buff = BuffGroup[Index];</span><br><span class="line"><span class="keyword">if</span> (Buff-&gt;<span class="built_in">CheckNeedToStop</span>() || Buff-&gt;<span class="built_in">CheckNeedToRemove</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffManager::TickComponent, Remove Buff (UID=%llu, BuffID=%d)&quot;</span>), Player-&gt;<span class="built_in">GetActorStateUID</span>(), Buff-&gt;<span class="built_in">GetBuffID</span>());</span><br><span class="line">Target-&gt;<span class="built_in">RemoveBuff</span>(Buff, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BuffComponent">BuffComponent</h2><ol><li><code>AddBuff</code>：将 <code>Buff</code> 添加到 <code>BuffGroup</code> / <code>BuffIDArray</code>，通过 <code>BuffIDArray</code> 做客户端的同步（仅同步 <code>BuffID</code> 到客户端）</li><li><code>RemoveBuff</code>：移除 <code>Buff</code>，并执行该 <code>Buff</code> 的 <code>Remove</code> 方法，同步对应信息；</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffComponent::AddBuff</span><span class="params">(UGameplayBuffBase* InBuff)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BuffGroup.<span class="built_in">Add</span>( InBuff );</span><br><span class="line"><span class="built_in">GetBuffIDArray_Mutable</span>().<span class="built_in">Add</span>( InBuff-&gt;<span class="built_in">GetBuffID</span>() );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsStandaloneOrDS</span>(<span class="keyword">this</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">OnRep_BuffIDArray</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffComponent::RemoveBuff</span><span class="params">(UGameplayBuffBase* InBuff, <span class="keyword">bool</span> bRemoveImmediately)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (InBuff == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> TotalCount = BuffGroup.<span class="built_in">Num</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> Index = TotalCount - <span class="number">1</span>; Index &gt;= <span class="number">0</span>; Index--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (BuffGroup[Index] == InBuff)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (bRemoveImmediately == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">BuffGroup.<span class="built_in">RemoveAt</span>( Index );</span><br><span class="line"><span class="built_in">GetBuffIDArray_Mutable</span>().<span class="built_in">RemoveAt</span>( Index );</span><br><span class="line">InBuff-&gt;<span class="built_in">SetNeedToRemove</span>(<span class="literal">true</span>);</span><br><span class="line">InBuff-&gt;<span class="built_in">Remove</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">IsStandaloneOrDS</span>(<span class="keyword">this</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">OnRep_BuffIDArray</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">InBuff-&gt;<span class="built_in">SetNeedToRemove</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffComponent::OnUninit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">OnUninit</span>();</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">IsStandaloneOrDS</span>(<span class="keyword">this</span>)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> Index = BuffGroup.<span class="built_in">Num</span>() - <span class="number">1</span>; Index &gt;= <span class="number">0</span>; Index--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (Index &gt;= BuffGroup.<span class="built_in">Num</span>()) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">auto</span> Buff = BuffGroup[Index];</span><br><span class="line"><span class="keyword">if</span> (Buff == <span class="literal">nullptr</span>) <span class="keyword">continue</span>;</span><br><span class="line">BuffGroup.<span class="built_in">RemoveAt</span>( Index );</span><br><span class="line">Buff-&gt;<span class="built_in">Remove</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffComponent::OnRep_BuffIDArray</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Buff">Buff</h2><h3 id="BuffBase">BuffBase</h3><p>每个 <code>Buff</code> 的实际持有者为 <code>BuffComponent</code> 。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffBase::Create</span><span class="params">(UGameplayBuffComponent* InOwner, <span class="keyword">int</span> InBuffID, <span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (InOwner == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">Owner = InOwner;</span><br><span class="line">BuffID = InBuffID;</span><br><span class="line">BuffName = UGameplayBuffUtils::<span class="built_in">GetBuffName</span>(BuffID);</span><br><span class="line">BuffParams = Params;</span><br><span class="line"><span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffBase::Create,  UID=%llu, BuffID=%d, BuffName=%s, Params=%s&quot;</span>), Owner-&gt;<span class="built_in">GetUID</span>(), BuffID, *BuffName, *BuffParams.<span class="built_in">ToString</span>());</span><br><span class="line"><span class="built_in">OnCreate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffBase::Remove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Owner == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffBase::Remove,  UID=%llu, BuffID=%d, BuffName=%s&quot;</span>), Owner-&gt;<span class="built_in">GetUID</span>(), BuffID, *BuffName);</span><br><span class="line"><span class="built_in">OnRemove</span>();</span><br><span class="line"></span><br><span class="line">Owner = <span class="literal">nullptr</span>;</span><br><span class="line">BuffID = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffBase::Merge</span><span class="params">(UGameplayBuffBase* InBuff, <span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Owner == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuffBase::Merge,  UID=%llu, BuffID=%d, BuffName=%s&quot;</span>), Owner-&gt;<span class="built_in">GetUID</span>(), BuffID, *BuffName);</span><br><span class="line"><span class="built_in">OnMerge</span>(InBuff, Params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffBase::Tick</span><span class="params">(<span class="keyword">float</span> DeltaTime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">OnTick</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuffBase::CombineParams</span><span class="params">(<span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BuffParams = BuffParams + Params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TimeDurationBuff">TimeDurationBuff</h3><p>Time时间流逝的 <code>Buff</code>，需要支持 <code>Refresh</code>、 <code>Pause</code>、<code>UpdateSpeedFactor</code> 等操作；</p><ol><li>基础的 <code>TimeDurationBuff</code> 的实现：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuff_TimeDuration::OnCreate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Super::<span class="built_in">OnCreate</span>();</span><br><span class="line"></span><br><span class="line">TimeDuration = BaseTimeDuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> InDuration = BuffParams.<span class="built_in">GetValue</span>(<span class="string">&quot;Duration&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (InDuration != <span class="number">0</span>) TimeDuration = InDuration;</span><br><span class="line"></span><br><span class="line">PassDuration = <span class="number">0.0f</span>;</span><br><span class="line">LastTickTime = <span class="built_in">GetWorldTimeNow</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuff_TimeDuration::Tick</span><span class="params">(<span class="keyword">float</span> DeltaTime)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">GetWorld</span>() == <span class="literal">nullptr</span> || <span class="built_in">GetWorld</span>()-&gt;<span class="built_in">GetGameState</span>() == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> CurrentTickTime = <span class="built_in">GetWorldTimeNow</span>();</span><br><span class="line">TickInternal = CurrentTickTime - LastTickTime;</span><br><span class="line">LastTickTime = CurrentTickTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">CheckInPause</span>() == <span class="literal">false</span> &amp;&amp; <span class="built_in">CheckNeedToStop</span>() == <span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">PassDuration += TickInternal * SpeedFactor;</span><br><span class="line"><span class="built_in">OnTick</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>Refresh</code>：刷新倒计时时间：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuff_TimeDuration::Refresh</span><span class="params">(<span class="keyword">float</span> InPassDuration, <span class="keyword">float</span> InTimeDuration)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (InPassDuration &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">PassDuration = InPassDuration;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (InTimeDuration &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">TimeDuration = InTimeDuration;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">OnRefresh</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>Pause</code>：根据不同的 <code>Reason</code> 暂停/重启 时间：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuff_TimeDuration::BeginPauseTime</span><span class="params">(FString Reason)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Owner == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuff_TimeDuration::BeginPauseTime,  UID=%llu, BuffID=%d, TimeDuration=%.2f, bInPause=%d, Reason=%s&quot;</span>),</span><br><span class="line">Owner-&gt;<span class="built_in">GetUID</span>(), BuffID, TimeDuration, bInPause, *Reason);</span><br><span class="line"></span><br><span class="line">PauseReasons.<span class="built_in">AddUnique</span>(Reason);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bInPause == <span class="literal">true</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (PauseReasons.<span class="built_in">Num</span>() &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">bInPause = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">OnBeginPauseTime</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuff_TimeDuration::StopPauseTime</span><span class="params">(FString Reason)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Owner == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuff_TimeDuration::StopPauseTime,  UID=%llu, BuffID=%d, TimeDuration=%.2f, bInPause=%d, Reason=%s&quot;</span>),</span><br><span class="line">Owner-&gt;<span class="built_in">GetUID</span>(), BuffID, TimeDuration, bInPause, *Reason);</span><br><span class="line">PauseReasons.<span class="built_in">Remove</span>(Reason);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bInPause == <span class="literal">false</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (PauseReasons.<span class="built_in">Num</span>() &gt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">bInPause = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">OnStopPauseTime</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>UpdateSpeedFactor</code> ： 更新 <code>Buff</code> 的速度</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameplayBuff_TimeDuration::UpdateSpeedFactor</span><span class="params">(<span class="keyword">float</span> InFactor)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (Owner == <span class="literal">nullptr</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (SpeedFactor == InFactor) <span class="keyword">return</span>;</span><br><span class="line">SpeedFactor = InFactor;</span><br><span class="line"><span class="built_in">LogD</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;UGameplayBuff_TimeDuration::UpdateSpeedFactor,  UID=%llu, BuffID=%d, TimeDuration=%.2f, SpeedFactor=%.2f&quot;</span>),</span><br><span class="line">Owner-&gt;<span class="built_in">GetUID</span>(), BuffID, TimeDuration, SpeedFactor);</span><br><span class="line"><span class="built_in">OnUpdateSpeedFactor</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BuffUtils">BuffUtils</h2><p>暴露给外部系统使用的 <code>Utils</code>，期望外部的调用都从这里走，实际上是一些胶水代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetBuffID</span><span class="params">( FString BuffName )</span></span>;</span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="keyword">static</span> FString <span class="title">GetBuffName</span><span class="params">( <span class="keyword">int</span> BuffID )</span></span>;</span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">float</span> <span class="title">GetBuffParam</span><span class="params">(FString BuffName, FString ParamName)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">float</span> <span class="title">GetBuffParam</span><span class="params">(<span class="keyword">int</span> BuffID, FString ParamName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="keyword">static</span> TArray&lt;UGameplayBuffBase*&gt; <span class="title">GetGameplayBuff</span><span class="params">(APlayerStateBase* PS, FString BuffName)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> TArray&lt;UGameplayBuffBase*&gt; <span class="title">GetGameplayBuff</span><span class="params">(APlayerStateBase* PS, <span class="keyword">int</span> ID)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable)</span><br><span class="line"><span class="function"><span class="keyword">static</span> UGameplayBuffBase* <span class="title">AddGameplayBuff</span><span class="params">(APlayerStateBase* PS, FString BuffName)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> UGameplayBuffBase* <span class="title">AddGameplayBuff</span><span class="params">(APlayerStateBase* PS, <span class="keyword">int</span> BuffID)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> UGameplayBuffBase* <span class="title">AddGameplayBuff</span><span class="params">(APlayerStateBase* PS, FString BuffName, <span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> UGameplayBuffBase* <span class="title">AddGameplayBuff</span><span class="params">(APlayerStateBase* PS, <span class="keyword">int</span> BuffID, <span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bRemoveImmediately = true 可能会导致依赖问题，非必要时序依赖，建议使用 false</span></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable)</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RemoveGameplayBuff</span><span class="params">(APlayerStateBase* PS, FString BuffName, <span class="keyword">bool</span> bRemoveImediately = <span class="literal">false</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RemoveGameplayBuff</span><span class="params">(APlayerStateBase* PS, FString BuffName, <span class="keyword">bool</span> bRemoveImediately, <span class="keyword">const</span> FGameplayBuffParams&amp; Params)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RemoveGameplayBuff</span><span class="params">(APlayerStateBase* PS, <span class="keyword">int</span> ID, <span class="keyword">bool</span> bRemoveImediately = <span class="literal">false</span>, <span class="keyword">const</span> FGameplayBuffParams&amp; Params = &#123;&#125;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RemoveGameplayBuff</span><span class="params">(APlayerStateBase* PS, UGameplayBuffBase* Buff, <span class="keyword">bool</span> bRemoveImediately = <span class="literal">false</span>, <span class="keyword">const</span> FGameplayBuffParams&amp; Params = &#123;&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CombineGameplayBuffParams</span><span class="params">(APlayerStateBase* PS, FString BuffName, <span class="keyword">const</span> FGameplayBuffParams&amp; Params = &#123;&#125;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CombineGameplayBuffParams</span><span class="params">(APlayerStateBase* PS, <span class="keyword">int</span> ID, <span class="keyword">const</span> FGameplayBuffParams&amp; Params = &#123;&#125;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CombineGameplayBuffParams</span><span class="params">(UGameplayBuffBase* Buff, <span class="keyword">const</span> FGameplayBuffParams&amp; Params = &#123;&#125;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ClearGameplayBuff</span><span class="params">(APlayerStateBase* PS)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>()</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">CheckGameplayBuffExist</span><span class="params">(APlayerStateBase* PS, FString BuffName)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">CheckGameplayBuffExist</span><span class="params">(APlayerStateBase* PS, <span class="keyword">int</span> BuffID)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">CheckGameplayBuffHandleExist</span><span class="params">(APlayerStateBase* PS, UGameplayBuffBase* Buff)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="其它信息">其它信息</h2><h3 id="FGameplayBuffParams">FGameplayBuffParams</h3><p><code>Buff</code> 的 <code>Params</code> 部分，实现一个 <code>ValueMap</code> 记录各种类型的参数；</p><p>这样使用的时候就可以这样使用 <code>Params</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外部调用创建Buff时：</span></span><br><span class="line">UGameplayBuffUtils::<span class="built_in">AddGameplayBuff</span>(Target, BuffID, &#123; &#123;<span class="string">&quot;ParamA&quot;</span>, (<span class="keyword">float</span>)A&#125;, &#123;<span class="string">&quot;ParamsB&quot;</span>, (<span class="keyword">int</span>)B &#125; &#125;);</span><br><span class="line"><span class="comment">// Buff内部 (BuffParams 已经传入 Buff 中)</span></span><br><span class="line"><span class="keyword">float</span> A = BuffParams.GetValue&lt;<span class="keyword">float</span>&gt;(<span class="string">&quot;ParamA&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> B = BuffParams.GetValue&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;ParamB&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">USTRUCT</span>(BlueprintType)</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FGameplayBuffParams</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">FGameplayBuffParams</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">FGameplayBuffParams</span>(<span class="keyword">const</span> FString&amp; Key, FVariant Value);</span><br><span class="line"><span class="built_in">FGameplayBuffParams</span>(std::initializer_list&lt;TPairInitializer&lt;<span class="keyword">const</span> FString&amp;, FVariant&gt;&gt; ValuePairs);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetValue</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName, FVariant Value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Contains</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ValueType = <span class="keyword">float</span>&gt; ValueType <span class="built_in">GetValue</span>(<span class="keyword">const</span> FString&amp; FieldName, ValueType Default = &#123;&#125;) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!ValueMap.<span class="built_in">Contains</span>(FieldName)) <span class="keyword">return</span> Default;</span><br><span class="line"><span class="keyword">if</span> (TVariantTraits&lt;ValueType&gt;::<span class="built_in">GetType</span>() != ValueMap[FieldName].<span class="built_in">GetType</span>()) <span class="keyword">return</span> Default;</span><br><span class="line"><span class="keyword">return</span> ValueMap[FieldName].GetValue&lt;ValueType&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FString <span class="title">ToString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> TMap&lt;FString, FVariant&gt;&amp; <span class="title">GetValueMap</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NetSerialize</span><span class="params">(FArchive&amp; Ar, class UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span>;</span><br><span class="line">    </span><br><span class="line">FGameplayBuffParams <span class="keyword">operator</span>+(<span class="keyword">const</span> FGameplayBuffParams&amp; OtherParams);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">const</span> FGameplayBuffParams&amp; OtherParams)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">TMap&lt;FString, FVariant&gt; ValueMap;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">FGameplayBuffParams::<span class="built_in">FGameplayBuffParams</span>(<span class="keyword">const</span> FString&amp; Key, FVariant Value)</span><br><span class="line">&#123;</span><br><span class="line">ValueMap.<span class="built_in">Add</span>(Key, Value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FGameplayBuffParams::<span class="built_in">FGameplayBuffParams</span>(std::initializer_list&lt;TPairInitializer&lt;<span class="keyword">const</span> FString&amp;, FVariant&gt;&gt; ValuePairs)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; Pair : ValuePairs)</span><br><span class="line">&#123;</span><br><span class="line">ValueMap.<span class="built_in">Add</span>(Pair.Key, Pair.Value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FGameplayBuffParams::SetValue</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName, FVariant Value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ValueMap.<span class="built_in">Add</span>(FieldName, <span class="built_in">FVariant</span>(Value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FGameplayBuffParams::Contains</span><span class="params">(<span class="keyword">const</span> FString&amp; FieldName)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ValueMap.<span class="built_in">Contains</span>(FieldName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FGameplayBuffParams::IsEmpty</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ValueMap.<span class="built_in">IsEmpty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FString <span class="title">FGameplayBuffParams::ToString</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FString DebugString = FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Params:&quot;</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; [Key, Value] : ValueMap)</span><br><span class="line">&#123;</span><br><span class="line">DebugString += FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;[%s=%s]&quot;</span>), *Key, *UStringUtils::<span class="built_in">ToString</span>(Value));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> DebugString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> TMap&lt;FString, FVariant&gt;&amp; <span class="title">FGameplayBuffParams::GetValueMap</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ValueMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FGameplayBuffParams::NetSerialize</span><span class="params">(FArchive&amp; Ar, class UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bOutSuccess = <span class="literal">true</span>;</span><br><span class="line">Ar &lt;&lt; ValueMap;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FGameplayBuffParams FGameplayBuffParams::<span class="keyword">operator</span>+(<span class="keyword">const</span> FGameplayBuffParams&amp; OtherParams)</span><br><span class="line">&#123;</span><br><span class="line">FGameplayBuffParams CombinedParams = *<span class="keyword">this</span>;</span><br><span class="line">CombinedParams.<span class="built_in">Merge</span>(OtherParams);</span><br><span class="line"><span class="keyword">return</span> CombinedParams;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FGameplayBuffParams::Merge</span><span class="params">(<span class="keyword">const</span> FGameplayBuffParams&amp; OtherParams)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; [Key, Value] : OtherParams.<span class="built_in">GetValueMap</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 覆盖</span></span><br><span class="line"><span class="built_in">SetValue</span>(Key, Value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FGameplayCountDownData">FGameplayCountDownData</h3><p>提供给 <code>UGameplayBuff_TimeDuration</code> 使用，一份记录倒计时的数据</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">USTRUCT</span>()</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FGameplayCountDownData</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">GENERATED_USTRUCT_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">FGameplayCountDownData</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="built_in">FGameplayCountDownData</span>(<span class="keyword">float</span> StartTime, <span class="keyword">float</span> TotalTime = <span class="number">0.0f</span>, <span class="keyword">float</span> LeftTime = <span class="number">0.0f</span>, <span class="keyword">bool</span> IsPause = <span class="literal">false</span>, <span class="keyword">float</span> SpeedFactor = <span class="number">1.0f</span>)</span><br><span class="line">: <span class="built_in">StartTime</span>(StartTime), <span class="built_in">TotalTime</span>(TotalTime), <span class="built_in">LeftTime</span>(LeftTime), <span class="built_in">IsPause</span>(IsPause), <span class="built_in">SpeedFactor</span>(SpeedFactor)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">NetSerialize</span><span class="params">(FArchive&amp; Ar, class UPackageMap* Map, <span class="keyword">bool</span>&amp; bOutSuccess)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Ar &lt;&lt; StartTime;</span><br><span class="line">        Ar &lt;&lt; TotalTime;</span><br><span class="line">        Ar &lt;&lt; LeftTime;</span><br><span class="line">        Ar &lt;&lt; IsPause;</span><br><span class="line">        Ar &lt;&lt; SpeedFactor;</span><br><span class="line"></span><br><span class="line">        bOutSuccess = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> FGameplayCountDownData&amp; Other) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (StartTime != Other.StartTime) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (TotalTime != Other.TotalTime) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (LeftTime != Other.LeftTime) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (IsPause != Other.IsPause) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (SpeedFactor != Other.SpeedFactor) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> !=(<span class="keyword">const</span> FGameplayCountDownData&amp; Other) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> == Other); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FString <span class="title">ToString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line"><span class="keyword">float</span> StartTime = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line"><span class="keyword">float</span> TotalTime = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line"><span class="keyword">float</span> LeftTime = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line"><span class="keyword">bool</span> IsPause = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">UPROPERTY</span>()</span><br><span class="line"><span class="keyword">float</span> SpeedFactor = <span class="number">1.0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;GameplayBuffSystem框架&lt;/h1&gt;
&lt;h2 id=&quot;设计&quot;&gt;设计&lt;/h2&gt;
&lt;p&gt;首先我们需要一个 &lt;code&gt;BuffManager&lt;/code&gt; ，管理所有的 &lt;code&gt;BuffComponent&lt;/code&gt;。&lt;br&gt;
（实现的时候，可以让 &lt;co</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="Gameplay" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/"/>
    
    
    <category term="Gameplay" scheme="https://www.bearchild.top/tags/Gameplay/"/>
    
    <category term="UE" scheme="https://www.bearchild.top/tags/UE/"/>
    
  </entry>
  
  <entry>
    <title>[UE]GameFeature浅析</title>
    <link href="https://www.bearchild.top/2024/02/22/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/[UE]GameFeature%E6%B5%85%E6%9E%90/"/>
    <id>https://www.bearchild.top/2024/02/22/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/[UE]GameFeature%E6%B5%85%E6%9E%90/</id>
    <published>2024-02-21T16:00:00.000Z</published>
    <updated>2024-04-26T19:06:55.780Z</updated>
    
    <content type="html"><![CDATA[<h1>GameFeature浅析</h1><p>一套支持动态增删游戏玩法的框架，往 <code>CoreGame</code> 里 <code>Add/Remove</code> 其它游戏资源/逻辑；</p><p>以 <code>Lyra(UE5.3)</code> 为例，<code>GameFeature</code> 提供了很好的解耦资源/逻辑的方案，可以看出这里的 <code>ShooterCore</code> 被实现为了一个相对比较独立的 <code>Plugin</code>。</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202402220044408.png" alt="image-20240220173041938"></p><h2 id="初始化">初始化</h2><p>首先在游戏内，<code>GameFeaturesSubsystem</code> 管理着所有的 <code>GameFeature</code>，看到对应的初始化 <code>UGameFeaturesSubsystem::Initialize</code>，可以分为几步：</p><blockquote><ol><li><p>加载<code>Policy</code>：根据 <code>GameFeaturesSubsystemSettings-&gt;GameFeaturesManagerClassName</code> 加载对应的 <code>GameSpecificPolicies</code></p></li><li><p>注册资源回调：<code>UAssetManager::CallOrRegister_OnAssetManagerCreated</code></p></li><li><p>注册 <code>ConsoleCommand</code> 方便 <code>Debug</code></p></li></ol></blockquote><p>在资源加载完的回调后，会走到 <code>UGameFeaturesSubsystem::OnAssetManagerCreated</code>，进行 <code>GameSpecificPolicies-&gt;InitGameFeatureManager</code>，根据 <code>Policies</code> 执行初始化逻辑；</p><p>这里的 <code>GameFeaturesProjectPolicies</code> 决定了一些 <code>GameFeaturePlugin</code> 的加载规则，比如需要在什么地方<code>(Server/Client)</code> 加载什么 <code>GameFeature</code>，同时可以在这里的 <code>Init</code> 扩展需要的额外功能，比如注册一些 <code>Observers</code>、<code>Subsystems</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">InitGameFeatureManager</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ShutdownGameFeatureManager</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> TArray&lt;FPrimaryAssetId&gt; <span class="title">GetPreloadAssetListForGameFeature</span><span class="params">(<span class="keyword">const</span> UGameFeatureData* GameFeatureToLoad, <span class="keyword">bool</span> bIncludeLoadedAssets = <span class="literal">false</span>)</span> <span class="keyword">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">IsPluginAllowed</span><span class="params">(<span class="keyword">const</span> FString&amp; PluginURL)</span> <span class="keyword">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> TArray&lt;FName&gt; <span class="title">GetPreloadBundleStateForGameFeature</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">GetGameFeatureLoadingMode</span><span class="params">(<span class="keyword">bool</span>&amp; bLoadClientData, <span class="keyword">bool</span>&amp; bLoadServerData)</span> <span class="keyword">const</span> <span class="keyword">override</span></span>;</span><br></pre></td></tr></table></figure><p>在 <code>UDefaultGameFeaturesProjectPolicies::InitGameFeatureManager</code>  中会执行 <code>UGameFeaturesSubsystem::Get().LoadBuiltInGameFeaturePlugins(AdditionalFilter)</code>，根据 <code>Filter</code> 来加载 <code>GameFeaturePlugin</code>，可以发现，会进行状态机 <code>GameFeaturePluginStateMachine</code> 的初始状态设置并初始化。</p><p>状态机的底层的数据都存在 <code>GameFeatureData</code> 上，可以从这里面开始分析：</p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202402220044305.png" alt="image-20240220173210508" style="zoom: 33%;" /><p>（需要注意的是，<code>GameFeatureData</code> 本身只记录了 <code>Actions</code> 和 <code>PrimaryAssetTypesToScan</code>，这里的 <code>FeatureState</code> 对应的是 <code>GameFeaturePlugin</code> 的对应状态机的信息，由 <code>FGameFeaturesEditorModule::StartModule -&gt; FGameFeatureDataDetailsCustomization::CustomizeDetails</code> 注册进 <code>Details</code> 面板）</p><h2 id="状态机">状态机</h2><p><code>GameFeature</code> 由一个 <code>UGameFeaturesSubsystem : UEngineSubsystem</code> 管理其生命周期：</p><pre class="mermaid">classDiagram    class UGameFeaturesSubsystem {        GameFeaturePluginStateMachines : TMap[GameFeature, StateMachine]         ListGameFeaturePlugins()        LoadGameFeaturePlugin()        DeactivateGameFeaturePlugin()        UnloadGameFeaturePlugin()        ReleaseGameFeaturePlugin()        UninstallGameFeaturePlugin()        TerminateGameFeaturePlugin()    }        UGameFeaturesSubsystem..>UGameFeaturePluginStateMachineclass UGameFeaturePluginStateMachine {        AllStates : TUniquePtr[FGameFeaturePluginState]         CurrentStateInfo : FGameFeaturePluginStateInfo        SetDestination()    }        UGameFeaturePluginStateMachine..>FGameFeaturePluginStateclass FGameFeaturePluginState {        TickHandle : FTSTicker-FDelegateHandle         BeginState()        UpdateState()        TryCancelState()        EndState()    }        UGameFeaturePluginStateMachine..>FGameFeaturePluginStateInfoclass FGameFeaturePluginStateInfo {    State : EGameFeaturePluginState    }</pre><p>最基本的有 <code>Load</code>、<code>Deactivate</code>、<code>Unload</code>、<code>Release</code>、<code>Uninstall</code>、<code>Terminate</code> 几个功能，可以由外部调用。</p><p>核心内容围绕着每个 <code>GameFeaturePlugin</code> 对应的 <code>StateMachine</code> 展开；<code>GameFeatureSubSystem</code> 上记录着 <code>TMap&lt;FString, TObjectPtr&lt;UGameFeaturePluginStateMachine&gt;&gt; GameFeaturePluginStateMachines </code> ，也就是  <code>PluginIdentifier-&gt;StateMachine</code> 的多个映射。</p><p>最后都会走到 <code>UGameFeaturesSubsystem::ChangeGameFeatureDestination</code> 修改状态机的状态：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeGameFeatureDestination</span><span class="params">(UGameFeaturePluginStateMachine* Machine, <span class="keyword">const</span> FGameFeaturePluginStateRange&amp; StateRange, FGameFeaturePluginChangeStateComplete CompleteDelegate)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露给外部的主要目标状态</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">EGameFeatureTargetState</span> :</span> uint8</span><br><span class="line">&#123;</span><br><span class="line">Installed,</span><br><span class="line">Registered,</span><br><span class="line">Loaded,</span><br><span class="line">Active,</span><br><span class="line"><span class="function">Count<span class="title">UMETA</span><span class="params">(Hidden)</span></span></span><br><span class="line"><span class="function">&#125;</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChangeGameFeatureTargetState</span><span class="params">(<span class="keyword">const</span> FString&amp; PluginURL, EGameFeatureTargetState TargetState, <span class="keyword">const</span> FGameFeaturePluginChangeStateComplete&amp; CompleteDelegate)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="GameFeaturePluginStateMachine"><code>GameFeaturePluginStateMachine</code></h3><p>主要维护对应 <code>GameFeaturePlugin</code> 的状态。</p><p>最重要的设置状态入口是 <code>UGameFeaturePluginStateMachine::SetDestination</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// UE5.0: 传入的目标状态为一个 GameFeaturePluginState</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UGameFeaturePluginStateMachine::SetDestinationState</span><span class="params">(EGameFeaturePluginState InDestinationState, FGameFeatureStateTransitionComplete OnFeatureStateTransitionComplete)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">check</span>(<span class="built_in">IsValidDestinationState</span>(InDestinationState));</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> If we aren&#x27;t in a destination state and our new destination is in the opposite direction of </span></span><br><span class="line"><span class="comment">// our current destination, cancel the current state transition (if possible)</span></span><br><span class="line"><span class="comment">// The completion delegate may be stomped in these cases.  Should probably callback with a cancelled error</span></span><br><span class="line"></span><br><span class="line">StateProperties.DestinationState = InDestinationState;</span><br><span class="line">StateProperties.OnFeatureStateTransitionComplete = OnFeatureStateTransitionComplete;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UpdateStateMachine</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// UE5.1-5.3：将传入的状态改为了一个 FGameFeaturePluginStateRange(MinState, MaxState)</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">UGameFeaturePluginStateMachine::SetDestination</span><span class="params">(FGameFeaturePluginStateRange InDestination, FGameFeatureStateTransitionComplete OnFeatureStateTransitionComplete, FDelegateHandle* OutCallbackHandle <span class="comment">/*= nullptr*/</span>)</span></span></span><br></pre></td></tr></table></figure><p>可以发现 <code>StateMachine</code> 维护了一个 <code>FGameFeaturePluginStateMachineProperties&amp; StateProperties</code>，记录了状态机运行中可以切换到的状态的一些属性，其中的 <code>DestinationState</code> 表示在状态变化中期望到达的状态（<code>UE5.3</code> 改为了状态区间，为了适配 <code>Terminal</code> 以及状态转移中不丢失对应的 <code>CompletionHandle</code>）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 当前状态是否不在 Destination 内，不在的话说明需要尝试到一个新的 Destination，标记为 IsRunning */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsRunning</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> !StateProperties.Destination.<span class="built_in">Contains</span>(CurrentStateInfo.State);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 已经在 Destination 内，那么可以尝试到任意的 Destination</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">IsRunning</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (InDestination.<span class="built_in">Contains</span>(CurrentStateInfo.State)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    StateProperties.Destination = InDestination;</span><br><span class="line">    <span class="built_in">UpdateStateMachine</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不在 Destination 内，说明状态还在过渡状态，这时如果收到了新的 Destination，为了保证原有状态可以顺利过渡，与原有的 Destination 求交，继续尝试切换状态</span></span><br><span class="line"><span class="keyword">if</span> (TOptional&lt;FGameFeaturePluginStateRange&gt; NewDestination = StateProperties.Destination.<span class="built_in">Intersect</span>(InDestination))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// The machine is already running so we can only transition to this range if it overlaps with our current range.</span></span><br><span class="line">    <span class="comment">// We can satisfy both ranges in this case.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (CurrentStateInfo.State &lt; StateProperties.Destination)</span><br><span class="line">    &#123;</span><br><span class="line">        StateProperties.Destination = *NewDestination;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (InDestination.<span class="built_in">Contains</span>(CurrentStateInfo.State)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(CurrentStateInfo.State &gt; StateProperties.Destination)</span><br><span class="line">    &#123;</span><br><span class="line">        StateProperties.Destination = *NewDestination;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (InDestination.<span class="built_in">Contains</span>(CurrentStateInfo.State)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FeaturePluginState"><code>FeaturePluginState</code></h4><p>内部维护了很多状态：</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202402220044382.png" alt="image-20240221105036685"></p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202402220044864.png" alt="image-20240220225411173" style="zoom:33%;" /><p>可以被作为<code>DestinationState</code>的状态有：<code>UnknownStatus</code>、<code>Uninstalled</code>、<code>StatusKnown</code>、<code>Installed</code>、<code>Registered</code>、<code>Load</code>、<code>Active</code>、<code>Terminal</code>、其它<code>ErrorStates</code>。</p><p>状态间的关系如图所示：</p><pre class="mermaid">flowchart LRUninitialized-->*UnknownStatus*UnknownStatus-->CheckingStatus*UnknownStatus-->*TerminalCheckingStatus-->*StatusKnown*StatusKnown-->*Installed*StatusKnown-->Downloading*StatusKnown-->Uninstalling*StatusKnown-->*TerminalDownloading-->*InstalledUninstalling-->*Uninstalled*Uninstalled-->*Terminal*Uninstalled-->CheckingStatusReleasing-->*StatusKnown*Installed-->Mounting*Installed-->ReleasingMounting-->WaitingForDependenciesUnmounting-->*InstalledWaitingForDependencies-->RegisteringRegistering-->*Registered*Registered-->Unregistering*Registered-->LoadingUnregistering-->UnmountingLoading-->*Loaded*Loaded-->Activating*Loaded-->UnloadingUnloading-->*RegisteredActivating-->*Active*Active-->DeactivatingDeactivating-->*Loaded</pre><p>状态修改完会通过<code>UGameFeaturesSubsystem::Get().OnGameFeature...</code> 进行通知，<code>GameFeatureSubSystem</code> 会调用到 <code>Actions</code> 的回调，同时提供了一个 <code>CallbackObservers</code> 通知已注册的 <code>Observers</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">EObserverCallback</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    CheckingStatus,</span><br><span class="line">    Terminating,</span><br><span class="line">    Registering,</span><br><span class="line">    Unregistering,</span><br><span class="line">    Loading,</span><br><span class="line">    Activating,</span><br><span class="line">    Deactivating,</span><br><span class="line">    PauseChanged,</span><br><span class="line">    Count</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Actions">Actions</h2><p>对于一个 <code>GameFeature</code> ，在 <code>Register</code>、<code>Unregister</code>、<code>Load</code>、<code>Activate</code>、<code>Deactive</code> 等行为时（也可以自己添加）会调用到 <code>GameFeatureData</code> 上配置的 <code>Actions</code> 的对应回调：</p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202402220044126.png" alt="image-20240221155727741" style="zoom: 40%;" /><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202404270306956.png" alt="image-20240221155957459" style="zoom:50%;" /><p>可以自定义各种各样的 <code>Actions</code>：</p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202402220044309.png" alt="image-20240221155442578" style="zoom: 67%;" /><p><code>GameFeatureAction</code> 中有一个关键 <code>UGameFeatureAction_AddComponents</code> ，其主要是将 <code>Component</code> 注册进对应的 <code>Actor</code>，应用到了另一个模块 <code>ModularGameplay</code>。</p><p><code>AddComponent</code> 通过 <code>ModularGameplay</code> 的 <code>UGameFrameworkComponentManager::AddComponentRequest</code> 实现，简单介绍一下 <code>ModularGameplay</code> ：</p><h3 id="ModularGameplay">ModularGameplay</h3><p>一套往 <code>Actor</code> 上注册 <code>Component/ExtensionHandler</code> 的解决方案。</p><p>这套框架核心由一个 <code>UGameFrameworkComponentManager : USubSystem</code> 在全局管理各个 <code>ActorClass</code> 的 <code>Component/ExtensionHandler</code>，维护 <code>Component</code> 的生命周期，并且提供接口供外部调用（<code>Add/Remove/SendEvent</code> 等）</p><h4 id="ActorReceiver"><code>ActorReceiver</code></h4><h5 id="注册-Receiver">注册 <code>Receiver</code></h5><p>首先将需要使用这套框架维护 <code>Component</code> 的 <code>ActorClass</code> 作为 <code>Receiver</code> ，通过 <code>UGameFrameworkComponentManager::AddGameFrameworkComponentReceiver</code> 注册进 <code>Manager</code>；</p><p>同时，在注册的时候，会判断 <code>ActorClass</code> 是否已经提前注册的 <code>ComponentClass</code> 或者 <code>EventDelegate</code> ，如果有 <code>ComponentClass</code> 则会在此时创建对应实例 <code>CreateComponentOnInstance</code>，有 <code>EventDelagte</code> 则会通知一下 <code>NAME_ReceiverAdded</code>。</p><p>（一般在 <code>AActor::PreInitializeComponents</code> 调用）</p><h5 id="移除-Receiver">移除 <code>Receiver</code></h5><p>通过  <code>UGameFrameworkComponentManager::RemoveGameFrameworkComponentReceiver</code> 移除；</p><p>调用对应 <code>Component</code> 的销毁，通知一下 <code>NAME_ReceiverRemoved</code>。</p><p>（一般在 <code>AActor::EndPlay</code> 调用）</p><h4 id="Component"><code>Component</code></h4><pre class="mermaid">classDiagram    class UGameFrameworkComponentManager     UGameFrameworkComponentManager  : ReceiverClassToComponentClassMap    UGameFrameworkComponentManager : AddComponentRequest()    UGameFrameworkComponentManager : RemoveComponentRequest()</pre><p>维护了一个 <code>ActorClass-&gt;ComponentClass</code>  ，也就是 <code>TMap&lt;FComponentRequestReceiverClassPath, TSet&lt;TObjectPtr&lt;UClass&gt;&gt;&gt; ReceiverClassToComponentClassMap</code>，（其中 <code>FComponentRequestReceiverClassPath</code> 是一个结构体，用字符串数组记录 <code>Class-&gt;Root</code> 这条链路，作为 <code>Class</code> 的标识，不直接用 <code>UClass</code> 是因为以 <code>Component</code> 的视角进行操作，不期望在这里直接依赖 <code>Receiver</code> 对应模块的指针）</p><h5 id="注册-Component">注册 <code>Component</code></h5><p>通过 <code>UGameFrameworkComponentManager::AddComponentRequest</code> 实现；</p><p>这里的 <code>CompoentRequest</code> 也就是一个 <code> FComponentRequestHandle(OwningManager, ReceiverClass, ComponentClass)</code>；</p><p>内部维护了一个 <code>RequestTrackingMap</code> 用于 <code>CompoentRequest</code> 的计数，如果 <code>==1</code> 则说明需要尝试创建实例；</p><p>（有可能不同的模块都依赖对应的 <code>ComponentClass</code> ，所以需要计数一下）</p><p>注册的时候判断对应的 <code>Actor</code> 是否已经 <code>Initialize</code> ，如果是，则 <code>CreateComponentOnInstance</code>。</p><p><code>CreateComponentOnInstance</code>：创建 <code>ComponentInstance</code> ，维护 <code>TMap&lt;UClass*, TSet&lt;FObjectKey&gt;&gt; ComponentClassToComponentInstanceMap</code> 用于记录这个 <code>ComponentClass</code> 有哪些对应的 <code>Instance</code></p><h5 id="移除-Component">移除 <code>Component</code></h5><p>通过 <code>UGameFrameworkComponentManager::RemoveComponentRequest</code> 实现；</p><p>修改计数，<code>==0</code> 则执行销毁。</p><p>销毁的时候通过 <code>ComponentClassToComponentInstanceMap</code> 找到所有的 <code>Component</code>，判断对应的 <code>Actor</code> 是否是期望的，如果是，则销毁；</p><h4 id="ExtensionHandler"><code>ExtensionHandler</code></h4><p>和 <code>Component</code> 类似，也就是注册 <code>Event</code> 的部分；</p><pre class="mermaid">classDiagram    class UGameFrameworkComponentManager UGameFrameworkComponentManager  : ReceiverClassToEventMap    UGameFrameworkComponentManager : AddExtensionHandler()    UGameFrameworkComponentManager : RemoveExtensionHandler()    UGameFrameworkComponentManager : SendExtensionEvent()</pre><h2 id="资源加载">资源加载</h2><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202402220044399.png" alt="image-20240221163647066" style="zoom:40%;" /><p>在 <code>FGameFeaturePluginState_Registering</code> 状态时，会根据配置的 <code>GameFeatureToAdd-&gt;GetPrimaryAssetTypesToScan()</code>，执行对应的 <code>UGameFeaturesSubsystem::AddGameFeatureToAssetManager</code>，进行资源是否存在等判定之后，尝试加载资源到 <code>AssetManager</code>。</p><p>类似的，在 <code>FGameFeaturePluginState_Unregistering</code> 状态时，通过 <code>UGameFeaturesSubsystem::RemoveGameFeatureFromAssetManager</code> 进行资源卸载。</p><h2 id="参考">参考</h2><p><code>Lyra (UE5.0-5.3) GameFeature 部分源码</code></p><p><a href="https://imzlp.com/posts/17658/">UE5：Game Feature 预研</a></p><p><a href="https://zhuanlan.zhihu.com/p/467236675">《InsideUE5》GameFeatures架构</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;GameFeature浅析&lt;/h1&gt;
&lt;p&gt;一套支持动态增删游戏玩法的框架，往 &lt;code&gt;CoreGame&lt;/code&gt; 里 &lt;code&gt;Add/Remove&lt;/code&gt; 其它游戏资源/逻辑；&lt;/p&gt;
&lt;p&gt;以 &lt;code&gt;Lyra(UE5.3)&lt;/code&gt; 为例，</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="Gameplay" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/"/>
    
    
    <category term="Gameplay" scheme="https://www.bearchild.top/tags/Gameplay/"/>
    
    <category term="UE" scheme="https://www.bearchild.top/tags/UE/"/>
    
  </entry>
  
  <entry>
    <title>2023 年度总结</title>
    <link href="https://www.bearchild.top/2023/12/31/%E6%97%A5%E5%BF%97/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://www.bearchild.top/2023/12/31/%E6%97%A5%E5%BF%97/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</id>
    <published>2023-12-31T15:59:59.000Z</published>
    <updated>2024-01-20T13:50:34.794Z</updated>
    
    <content type="html"><![CDATA[<h1>2023 年度总结</h1><h2 id="一月">一月</h2><p>今年的记忆，从跨年和家人一起在海边放烟花开始，绚烂而又短暂的烟花就好像今年的故事一样，美好也夹杂着一些可惜。</p><p>一月底，随着网易和暴雪的合同到期，国内暴雪的时代正式结束了，好像人生一样，总是一次又一次的离别。看到了 link 发的回忆录，上面写着他的游戏策划之路从 War3 的疾风忍法帖地图开始，就好像我当初也玩 OW 玩到入迷。</p><p>虽然游戏不在了，但游戏带来的朋友，对人的影响却不会消失。好的游戏真的可以改变一个人一生的轨迹。</p><p>同时也更加坚定了自己对游戏行业的看法，游戏行业从业者，不单单只是从业者，更是热爱者、逐梦者，是一个 <strong>浪漫</strong> 的职业。</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430755.png" alt="image-20231231042955369"></p><h2 id="二月-三月">二月~三月</h2><p>在工作中沉沦，写了 Gameplay经分框架、接了卡车玩法，优化了 DisplayInfoSystem。各种业务框架、性能优化、代码重构…… 日子一天天过去。为了出包、Showcase 更是一次又一次的爆肝。</p><p>但哪怕如此，最高通缉第一次 CE 测，也还是被喷烂了，玩家表示甚至不知道要进去要干啥，又感觉自己的辛苦毫无意义，这一切会不会是在感动自己呢？</p><blockquote><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430257.png" alt="image-20231231032512777" style="zoom: 50%;" /></blockquote><p>那天晚上，一个人坐在人才公园的岸边发呆了两个小时。左边是体育中心演唱会有人正在高歌，右边是高楼的霓虹与起重机正在工作的轰鸣。身前有虫鸣和偶尔鱼儿跳出浅滩的声音，身后是光污染的写字楼高不见顶。</p><p>这座城市好吵，我好像与这里格格不入。这 <strong>混沌而复杂</strong> 的城市，<strong>迷幻与孤独</strong> 好像淹没了我。</p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430492.png" alt="image-20231231013616851" style="zoom: 50%;" /><p>不过幸好，这段时间煦哥也来深圳实习了，我们经常一起出去恰大排档吃宵夜，讨论着当下的困境与迷茫、矛盾和艰难，也畅谈人生和理想、目标和未来。</p><p>同时，这段时间还认识了一个很活泼的女孩子，给当时的我带来了很多鼓励，她真的好爱说话好有分享的欲望，对生活充满了 <strong>乐观和希望</strong> ，令人不禁感慨，世界上还有这样元气的人。</p><p>可惜的是，不知道为什么，我有点不敢直视这种阳光，光明虽然可以带来 <strong>温暖</strong>，但有时也太过刺眼 。</p><p>我们曾相约看过一次电影，电影过后，深夜十二点，我一个人撑着伞在深圳的街头漫步和思考，或许这才是我的人生？好像失去了爱人的能力，习惯了孤独，接受并且开始享受孤独，又或许这只是面对孤独时只能无奈接受的借口吧。</p><p>电影里那样 <em>“只要有你在的话”</em> 的爱情，可望不可及，令人羡慕的同时，也有点让人心生恐慌。</p><h2 id="四月-五月">四月~五月</h2><p>哪怕小规模 CE 测试的评价不好，但路还是要走的，大家继续接着努力不断优化。经常晚上聊项目、未来、痛点，又或者是一起写代码调配置。哪怕到深夜两三点下班，也还是会发现有同事还在工位。</p><p>大家或许已经不止是同事，更接近一起努力的 <strong>战友</strong> 吧。虽然身体很累，但做游戏还是很快乐的。</p><p>在这样的强度下，也逐渐成长了起来。大版本要做组队的时候，一天就拿下了组队系统的基本框架。又写了气势、暴露，负责了各种各样的机制与系统。</p><p>虽然现在来看，已经有很多功能废弃了，当初的技术框架也很稚嫩，现在远可以做得更好，但是在当时还是很有成就感的。果然，成长悄无声息，只有回过头来才能发现自己原来还是走了很远。</p><p>最高通缉 也为了上线改名为 <strong>热力追踪</strong>，幸运的是，beta1测的数据还不错，这也是在黑暗前行之中一点小小的光芒。</p><p>五一也和游戏研发同好会的兄弟们一起在科韵路大聚会了几天，有志同道合的人一起真是一件幸运的事情。离开的那个晚上，和白狼他们一起坐在广州街头的路边，聊了一两个小时，聊着游戏、感情、还有各自的未来，这种慢悠悠的生活真是太好了，至今也难以忘怀。</p><p>也玩了几款新游戏，看了看漫展，毕业论文也准备就绪了，一切都在向前。</p><h2 id="六月">六月</h2><p>又是一年毕业季，返校准备毕业答辩和相关事宜，最后一段在学校的时光了。</p><p>短短一周的回归。到学校和朋友们一起爽恰了火锅烧烤，哪怕是在毕业答辩的前一天晚上，深夜也一起聊人生到三点多。大家都在享受最后的 <strong>狂欢</strong>。最后一次吃一食堂的黄焖鸡，最后一次去熙街的山水溶洞，最后一次恰校外的新疆烧烤，最后一次在操场上跑步，最后一次走进一教进行答辩……</p><p>在校园的这最后一段时间，也第一次（或许也是最后一次）和认识了两年的一个校园异性朋友出去玩，可惜我们之间的故事还没有开始就结束了，很可惜却也还是很开心，还是很感谢当时在网络上的陪伴和鼓励。</p><p>也许还是虚拟的世界更好，一切都可以用机器码精确阐述，如果爱情像写代码那么简单就好了。不过这样的结束也是好事，给这段校园经历画上一个 <strong>完美的句号</strong>。</p><p>回过头来才发现，因为早早就出去实习，自己的校园生活太过短暂实在有点可惜，感觉毕业来得太过突然。但哪怕如此，却还是有很多值得记忆一辈子的人和事，<strong>刻骨铭心</strong>。</p><p><em>“何当共剪西窗烛，却话巴山夜雨时”。</em></p><p>感慨错过的同时，也还是得继续向前，迎接又或是回归新的生活。重庆是原来这么美啊！</p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430398.png" alt="image-20231231013358987" style="zoom: 67%;" /><p>在一周后的某个深夜，伴着星光点点，我又回到了深圳，回到了熟悉的每天开发游戏的日子。每天加班，偶尔加完班大家一起出去恰烧烤。</p><p>期间迎来了一次新的 Showcase，被疯狂拷打麻了。不过这次法爷看大家情绪负面。站了出来，让大家不要慌张、不要沮丧。</p><blockquote><p>后续调整的方向相对明确，所差的是验证成本，结合从整体客户端团队的开发效率和交付质量上看，开发、策划团队的 <strong>战斗力顶级</strong> ，有足够的能力应对可能的变更，所以能打磨好；</p><p>相信一点，没有谁能一次性的给出完美的解决方案，我们要作为一个团队群力群策，从策划案的源头（需求沟通）到过程中的考量（开发中的思考）集思广益，奔着阶段性战略，我们的天花板是可触达的；</p><p>最高通缉是我们的天花板，QQ飞车是地板，地板的战绩是明确的，天花板能撑到什么样看策划的想象、开发的收敛和一起的打磨；</p><p>和这么多优秀的同事合作，多看齐大家的优点补齐自己的短板，<strong>Happy做事快乐生活</strong>，上线后给赛车品类一点小小的<strong>震撼</strong>。</p></blockquote><p>在这样的鼓励下，或许还是有迷茫和无奈，但大家也重拾信心，继续向前。</p><p>某个晚上久违地通宵看完了《跃动青春》，不知道有多久没有看番到天亮了，简单而又纯粹的快乐。</p><blockquote><p>人生就是一场为了寻找自己喜欢的人和事的旅行。</p></blockquote><p>有勇气 <strong>追逐梦想</strong> 的人真是耀眼。大家都有各自青春的回忆与故事，或悲伤或美好。各怀心绪，<strong>光彩熠熠</strong>。</p><p>最高通缉也是这样一个梦想，我们总是在被质疑、被挑战、被拷打，<strong>但我们始终坚持走在路上</strong>。</p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430024.png" alt="image-20231231015112457" style="zoom: 50%;" /><h2 id="七月-八月">七月~八月</h2><p>继续奋战。加班到深夜早就已经是常事，不过搞各种新需求的同时，偶尔还会和 宇健、超哥、法爷 一起出去恰烧烤火锅。辛苦也带着甜蜜。</p><p>期间还经历了一次封培开始，结果恰巧项目有重大改动，需要添加关键的搜索态，走不开身，法爷直接亲自帮我写封培延期申请，好家伙。在这样辛苦的日子里，即将迎来 beta2测。出版本前一周，每天晚上都和老铁、球哥他们一起调各种配置到两三点，大家经常点宵夜来工位一起爆肝。</p><blockquote><p>深圳很大，看不清云雾里的大厦。海岸城总有人纸醉金迷夜夜笙歌。</p><p>深圳很小，迷失在城中村的小巷。科技园总有人精疲力竭通宵达旦。</p></blockquote><p>正式 beta2测，10w+规模测试，可惜这是一次 <strong>至暗时刻</strong> ！首日、充值、匹配、性能、断线重连、语音、组队、网络 各个模块出现了各种各样的问题，实在令人惋惜。</p><blockquote><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430676.png" alt="image-20231231032405922" style="zoom:33%;" /></blockquote><p>在各种问题的叠加下，这次测试的数据比上一次全线下降了将近 10%，不过令人感慨的是，热力追踪居然没有什么下滑，在所有的玩法中表现最好，甚至超过了竞速赛，努力是有回报的。</p><p>不过项目组是一个整体，除了一部分人的努力以外，整体太让人太失望了。</p><p>再一次陷入了迷茫，也意识到了，有的人是满怀热爱来做游戏的，有的人不过是来上班的而已，这就是 <strong>现实</strong>。</p><blockquote><p>很喜欢马宝的一句话：</p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202401202149649.png" alt="image-20240120214922209" style="zoom:50%;" /></blockquote><h2 id="九月">九月</h2><p>在台风里开启了九月，这场台风就像项目组此时面临的风暴一样。幸运的是，台风总会过去，团队里也不都是混子，优秀的团队总是不乏能人志士。伴随着美术狠狠冲刺，渲染优化支持，整个游戏的美术质量肉眼可见地在提升。</p><p>热力追踪也在不断优化，偶尔也会一边喝酒一边写代码到天亮，大家一起喝酒解压。</p><p>在迷茫的日子里，有一天酒后早醒，恰逢天亮，看到了美丽的风景。</p><p><em>“曦日分昏晓，凌云任风飘”</em>，或许也预示着之后咱们游戏会迎来那道晨曦曙光。</p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430500.png" alt="image-20231231023237399" style="zoom: 25%;" /><p>在国庆节前夕，策划意识到了撤离玩法需要大改，开了个大会议，一看全是我的功能，doctor 在会议室里狠狠打画饼，<em>“此时就像创业最后一搏，现在不冲更待何时”</em>，确实给我打满了鸡血。</p><p>于是国庆节前大家一起狠狠加班了一波。中秋的晚上，在公司干到了晚上十一点，终于把 PeakMomentSystem 写完了。最后一天加班结束前，也和兄弟们一起恰了一波铁板烧，迎接国庆假期。</p><p>或许总是一个人在加班写代码，但不只是一个人在做游戏。</p><h2 id="十月-十一月">十月~十一月</h2><p>在修bug期的空闲时间，补了很多当时没看的好番。</p><blockquote><p>《路人女主的养成办法》</p><p>“时而一起胡闹，时而遇到挫折，时而大声欢笑，时而产生分歧，时而握手言和，时而互相争吵……还发生了其它许许多多的事……这么一个一起实现梦想的故事” 真是令人感慨。</p><p>“不是为了多数玩家，而是为了唯一一个人的，我成为只属于你的第一女主角了吗？”</p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310439122.png" alt="image-20231231043906999" style="zoom: 33%;" /></blockquote><p>回过头看，满是追寻梦想的路上的热忱和希望。各种各样的经历，每一段故事，波澜又或平淡，悲伤或是欢喜，都是成长路上最好的奖励。</p><blockquote><p>《中二病也要谈恋爱！》</p><p>“人们有时会说胡话，幻想世界会在瞬间变化，想象遥远的未来，在脑中描绘一场轰轰烈烈的恋爱，这些都是人在一生中永远重复着，永无止境地重复，悲伤，害羞，却又可爱，名为 ‘自我意识过剩’ 的疾病，名为 ‘自己’ 的不可绕行之路。没错，人一辈子都活在中二病里。 ”</p><p>“爆裂吧，现实！断裂吧，神经！放逐这个世界！“</p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430018.png" alt="image-20231231033936329" style="zoom:33%;" /></blockquote><p>愿你走出半生，归来仍是少年。</p><blockquote><p>《樱花庄的宠物女孩》</p><p>“无论自己多么努力也有无法改变的东西。”</p><p>“只要是认真思考过自己到底想要怎么做之后得出的结论就行了。”</p><p>樱花庄就是因为大家都在才是樱花庄！</p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310433857.png" alt="image-20231231043211405" style="zoom: 33%;" /></blockquote><p>人生就是这样分分合合有喜有悲不断成长，想要获得美好的结局，需要有永远在一起的觉悟。</p><p>……</p><p>每个人物，都在自己的故事里迈出一步又一步，在灿烂宏大而青涩的青春里，释放着自己的光芒。</p><p>二次元也给了我莫大的勇气和鼓励，就像路人女主和16bit的感动里那样，又一次爱上了和大家一起做游戏的日子。</p><blockquote><p>能够找到热爱之事并为之奋斗，<br>本身就是命中注定极大的幸运。<br>波澜或是平淡，欢笑又或泪水，<br>追梦路上总是满怀热忱和希望。<br>迷失了所寻梦想和热爱的人生，<br>或许早就已经可以称之为死去。</p></blockquote><p>不过人生总是有喜有悲，在一个情绪爆发的夜晚，在莫名的思绪下，结合着酒精的作用，有点幼稚地向一个在网上交流了一年多的女孩子表达了心意，其实自己也知道结局早已注定，也算是借此斩断了这段虚空的情缘。虽然在那之后至今没有联系，不过哪怕如此，也还是很感谢那些曾经深夜一起交流游戏分享生活、满怀欣喜聊着未来的时光。</p><blockquote><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430686.png" alt="image-20231231040016305" style="zoom: 67%;" /></blockquote><p>在这样平淡也复杂的日子里，迎来了游戏的 beta3 测。</p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430767.png" alt="image-20231231031125877" style="zoom: 80%;" /><h2 id="十二月">十二月</h2><p>丰收的一个月。</p><p>先令人惊喜的是，这次 beta3测 数据异常的好，远超 beta2测，甚至比已经数据很棒的 beta1测 更好。不过细细想来，这可能也是我们如此付出理应得到的回报，大家也一起久违开心地团建了一次。</p><p>一次偶然看到了公众号上的宣传标语，发现宣传语里重点突出的 “公敌对决、撤离玩法、搜索功能”，基本全是我的身影。回过头来看，原来热力追踪的这么多功能都是我在负责了。在持续的高强度作战中，自己正在逐渐变成更厉害的 Gameplay 开发者。</p><p>项目组里也加入了更多的新人，偶尔也会讨论技术到凌晨一两点。也新接了龙卷风、雷达卡车，更多新的机制和玩法。自己买了一个多功能锅，偶尔也煎一下小烧烤，恰一顿小火锅，生活自得其乐。</p><p>同时，迎来了 A-SOUL 的三周年纪念日。</p><p>时间过得真快啊，转眼就已经过去了三年。回想起当初在学校宿舍里看到 A-SOUL 的那一天，真是梦开始的地方。后面一个人出去实习，一个人来深圳，A-SOUL 陪伴我度过了那么多困难的时光，也发现原来我已经走了这么远了。</p><p>经历了各种各样的事，认识了各种各样的人，有遗憾也有快乐，有错过也有欣喜，A-SOUL 始终都在那陪伴着我，然然的那一句 <em>“大家要好好吃饭，每天都要开开心心的！”</em>，简短的话语，让人感受到无尽的温暖的力量。</p><blockquote><p>初见惊羡，再见沉沦。</p><p>“抵达” 是一种勇敢，但 “我在” 才是温暖。</p><p>“头顶苍穹，总有星辰为我而闪烁，穿过亿万光年，热爱无畏时空。”</p><p>“心怀远方，总有理想为我而呐喊，越过流言汹涌，信仰生生不息。”</p><p>过往皆为篇章，未来海阔天空，希望这个故事还有很长很长……</p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310430457.png" alt="image-20231231034527582" style="zoom: 50%;" /></blockquote><p>在年末的最后一天工作日，和朋友们一起出去恰了一顿鸡煲，结束了这相对圆满的一年。</p><h2 id="总结">总结</h2><p>今年走到了大学毕业的关键节点，也经历了几次项目大规模测试，体验了些许暧昧的感情，人生也在徐徐发展。</p><p>认识了很多人，经历了很多事。可能一次偶然的相遇，一个不经意的回眸，两个素未谋面之人就会迸发数不尽的精彩故事。正如这个世界，千变万化，扩展着 <strong>无限的可能性</strong>。</p><p>追寻梦想，也享受生活，感受痛苦，亦享受孤独。无数次在脑海中想象着遥远的未来，但也不要忘了这 <strong>旅途本身比终点更为重要</strong>。</p><p>一次又一次地站在 <strong>命运的前方，人生的岔路</strong>，或许会有失落迷茫，有所犹豫质疑，或许正身处黑暗，找不到光芒在何方，不知到底可以飞往多高的天空……</p><p>但无论发生了什么，都不要忘记了那份 <strong>热爱与梦想，初心与道路</strong>。</p><p>雨后总会天晴，人生也没有永夜。</p><p>继续坚定向前走去吧！ —— <strong>“只要有心，就能瞬间改变世界！”</strong></p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202312310439668.png" alt="image-20231231043339798"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;2023 年度总结&lt;/h1&gt;
&lt;h2 id=&quot;一月&quot;&gt;一月&lt;/h2&gt;
&lt;p&gt;今年的记忆，从跨年和家人一起在海边放烟花开始，绚烂而又短暂的烟花就好像今年的故事一样，美好也夹杂着一些可惜。&lt;/p&gt;
&lt;p&gt;一月底，随着网易和暴雪的合同到期，国内暴雪的时代正式结束了，好像人生一样</summary>
      
    
    
    
    <category term="日志" scheme="https://www.bearchild.top/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="https://www.bearchild.top/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>2022 年度总结</title>
    <link href="https://www.bearchild.top/2022/12/31/%E6%97%A5%E5%BF%97/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://www.bearchild.top/2022/12/31/%E6%97%A5%E5%BF%97/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</id>
    <published>2022-12-31T15:59:59.000Z</published>
    <updated>2024-01-20T13:44:35.122Z</updated>
    
    <content type="html"><![CDATA[<h1>2022 年度总结</h1><h2 id="一月-二月">一月~二月</h2><p>打工前最后的时光。</p><p>印象深刻的是看了乃琳的 50w 粉纪念回，她说：<strong>“喜欢，就是一件细水长流且滔滔不绝的事情呀~”</strong>。</p><p>一年结束回望过去，感情是这样，工作是这样，人生也是这样。</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310134293.png" alt="image-20221231013237913"></p><p>月初，投了下朝夕光年的江南工作室，结果被刷了；还被天美 L1 给捞了，结果也没有面过。</p><p>当初还很愤慨，觉得自己这么猛，肯定是面试官没有眼光。现在看来，当初的自己也十分青涩，自以为才高八斗，实际上连半桶水的水平也没有，连UI都不会拼，没有面试通过也很正常。</p><p>不过现在感觉也没什么，或许年少就该轻狂点，自负总比自卑更接近自信。</p><p>今年行业不景气，寒气传给了每一个人。和几个朋友都聊了聊，聊了下计划，聊了下未来，发现大家也都很焦虑。保研、考研、工作，大学最关键的一年，种种事情纷至沓来，DDL 仿佛近在眼前。</p><p>想了一想，果断接着逃学，在家准备面试和溜去实习。</p><p>寒气从年初开始找实习时就已经可见一斑，各大厂纷纷开始锁hc，连实习岗位都寥寥无几。幸运的是，或许是因为投简历投得早的原因，在锁 hc 的前一天，终于拿下了天美的实习 offer，十分感激 <strong>天美 F1 工作室</strong> 给了我实习的机会。</p><p>或许运气占了很大一部分因素，但是这也坚定了我的人生信条之一：<strong>胆子要大，做事果断</strong>。</p><h2 id="三月-四月">三月~四月</h2><p>人生总是起起落落，有幸运自然也有不幸。</p><p>三月初，因为疫情的缘故，学校全员核酸，逃学终是被发现了；深圳疫情也加重了，封公交封地铁，禁止堂食。</p><p>不过凡事都有解决的办法。逃学可以和辅导员补个假条，疫情加重也可以居家办公。也明白了，很多事情没必要去逃避，用自己想当然的方法去解决，比如当初或许压根没必要逃学。<strong>有时候好好沟通沟通，或许会有更好的处理办法。</strong></p><p>疫情好转后，再次一个人来到了深圳。</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310134737.png" alt="image-20221231000143786"></p><p>因为各种调整，来到了 <strong>天美 J1 工作室</strong> 支援快上线的项目（一开始看到是赛车品类的游戏十分失望，但现在看来也是运气极好的一点，因为后面秋招阶段 F1 基本就没有 hc。这不就像人生一样吗，<strong>“祸兮福所倚，福兮祸所伏”</strong>。）</p><p>第一次进一个真正的游戏项目组，加入了 <strong>AI组</strong> 。面对庞大的代码无从下手，最后果断直接去要活，帮着改 bug。发现自己原来连 UI 都不会拼，备受折磨，这才是我的真实水平，太弱小了！没有力量！</p><p>一个人走在回出租屋的路上，一个人深夜恰着啤酒和烧烤。</p><p>不过幸好，认识了浩博，在最艰难的时候给了我许多帮助。至今难以忘记有一次团建后，他还帮我调一个生命周期的问题到了十二点，让我对项目组，乃至游戏这条道路都有了更多的期待。（可惜四月中旬他就离开了项目组去了王者战斗组，说来也巧，当初一月份的时候我还面了王者荣耀的战斗组并且没通过，王者你坏事做尽！）</p><p>后面逐渐融入了 AI 组，认识了更多的人，获得了很多很多的帮助。</p><p>现在看来这实在太过幸运，一入行就加入的特性小组，组里全是级别很高的猛人。看到了天豪天游他们优美的代码、精妙的框架，愈发令我折服。感受到了自己的渺小，也学到了很多。</p><p><strong>只要动手，一切都会好起来的</strong>。</p><h2 id="五月">五月</h2><p>月初去了广州玩耍，快乐的五一假期。回来后发现珈乐要毕业，退出了 A-SOUL，当初还难受了一段时间。晚上喝了几瓶哭了好久，一个人住的好处就是哭了也没人知道。</p><p>不过现在也早已释怀。<strong>人生有梦，各自精彩</strong>。各个选择也不好说是好是坏，自己选择的路跪着也要走完。</p><p>或许是之前成功搞定了技能数据蓝图，这次天游拉上我一起在版本末极限开工了“技能漏斗系统”，虽然只是辅助开发，但终于也算是又接了一个稍微狠一点的活。成功拿下，最后效果也还算不错。</p><p>原来我也是可以接狠活的人了，不知道什么时候才能独立负责一个完整的系统呢？</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310134950.png" alt="image-20221230210122043"></p><h2 id="六月">六月</h2><p>最如梦似幻的一个月，在不正确的时间遇上了一起来腾讯实习的妹妹。</p><p>人生第一次和女生单独出去玩。我们一起看电影，一起喝酒，一起吹海风，一起聊人生。在欢乐港湾坐在海岸边，看着远方的灯火，青涩幼稚的我以为最恰当的时机、最好的氛围表白了，结果寄了 XD。</p><p>镜花水月的美好让我误以为这就是爱情，可其实我们之间的差距大到难以想象。无论是性格还是三观， 无论是过去、现实还是未来；其实我们也不是很了解对方，或许是这个月太过充实，让我以为时间过了太久。</p><p>灿烂热烈的日子和平时老鼠窝的生活对比太过强烈，也许我也只是渴望改变下自己？就像鼠鼠也总是喜欢探出下水道寻找光明。</p><p>故事的结局并不总是那么美好，也许这就是最好的结局。梦总是会醒的，这也只是生命中的一段小插曲。现在想来，当初有很多幼稚的想法，第一次处理这些事情，矛盾又可笑，可细细一品，却也有点青春的浪漫与纯真。</p><p><strong>人生路漫漫，遗憾也是一种浪漫</strong>。尽量做到 <strong>不求无憾，但求无悔</strong> 吧。（呜呜呜又母胎solo了一年）</p><p>六月太不真实，如此草草就结束了，秋招也要开始了。</p><h2 id="七月-八月">七月~八月</h2><p>每年的七月和八月总是充斥着应届生们焦虑的气息。</p><p>一边是秋招的压力，一边是工作的无奈。又接了各种经分和UI的杂活，愈发迷茫，这真的是我想做的东西吗？</p><p>每天的日记里就写着 “写了一天经分 / 写了一天 UI / 想润了”。写 UI 的过程中，美术策划还一直爱指指点点。果然，<strong>UI程序，无间炼狱</strong>！</p><p>最后终于想明白了，这些东西总要有人干的，为什么不是你呢？<strong>游戏客户端就是什么都要做的</strong>。</p><p>事实上，当时的情况下来看，组里挑一个最不构成生产力的人来干，那个人也只能是我。</p><blockquote><p>很喜欢肛少说的一句话：</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310134576.png" alt="image-20221231002945979"></p></blockquote><p>现在还回过头看，这段经历也收获了很多，这些体力活也打下了较为扎实的业务基础，厚积才能薄发。</p><blockquote><p>做游戏这事，你会拼 UI，不是啥什么本事。但不会拼 UI，却无从谈本事了。</p></blockquote><p>回到秋招，或许今年的秋招堪称 <strong>地狱难度</strong>，其中艰辛相信经历过的人自然懂。各大厂释放的 hc 寥寥无几，无论是互联网行业还是游戏行业，寒气席卷到了每一个角落。</p><p>真正的千军万马过独木桥。游戏行业版号持续缩进，仿佛看不到尽头一样，到处都是劝退的言论。</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310141099.png" alt="image-20221231014110154"></p><p>我彻底意识到了，<strong>“做游戏，本就九死一生”</strong>。</p><blockquote><p>很喜欢子明当时和别人的一次对话：</p><p>”天人感应：某天某夜一个男子望着大楼发呆，此时已经街道无人，只有灯还亮着“</p><p>“东面有什么？” ，“东面是正在修的地铁站不知道什么时候完工。”</p><p>“南面有什么？”，“南面是一片技术园区，有的灯还亮着，再往南是一望无际的深蓝。”</p><p>“西面有什么？”，“西面是无人无车的公交站以及帝国的另一块版图。”</p><p>“北面有什么？”，“北面的居民楼，妇人正在安抚醒来的孩童，今夜无眠。”</p><p>“上面有什么？”，“辽阔深邃的星空，高悬的明月，以及攀爬用的楼梯。”</p><p>“下面有什么？”，“红色的鲜血，星星落地的骨灰。”</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310134945.png" alt="image-20221231013013538"></p></blockquote><p>恰好当时从 J5/J6 又转来 J1 很多人，hc 愈发堪忧。</p><p>有不幸的事，也有幸运的事。因为早早开始实习，早早进入项目组干活，至少转正答辩的时候有东西可以写，转正的 PPT 上，需求单就贴了三页满。</p><p>写转正自评和 PPT 的时候，感谢球哥和文龙也指点我应该怎么写（虽然最后还是就简单写了几十个字，但至少他们的指点让我没那么开摆），同时也感谢 TO/PO/PM 当时力保我（现在看来当时我的确实还很稚嫩）。</p><p>八月底最后的转正 GM 面试走了个流程，成功拿下了转正 Offer，收到了意向书。</p><h2 id="九月">九月</h2><p>月初，又一个版本要结束了，我们的这个玩法 <strong>生死存亡</strong>，体验的结果实在太差，没有人看好，领导玩了不到十分钟就已经放下手机开始开会了。组里所有人都很焦虑，看着球哥他们越来越着急，愈发容易上火，甚至 PM 都已经急哭了几次。</p><p>哎…… 真惨，组里的氛围越来越不好。策划开会讨论的时候，都听到 doctor 好像在开玩笑一样地说：“大家都可以准备投简历了”，令人感慨，又有多少真话是以开玩笑的方式说出来的呢？</p><p>想着这样的组到底有没有留下去的价值，自己也感觉这个玩法前途一片灰暗。</p><p>生死存亡之际，最终策划们一波讨论，决定拉上了几个人 <strong>敏捷开发</strong> 快速验证新玩法。</p><p>因为平常 UI 拼的多，杂七杂八的东西负责的也多，混上了敏捷开发四人组中的一个，负责了所有的玩法/AI交互事件还有 UI。后面回头来看，这正是一个转折点，不但是这个玩法的转折点，也是我的转折点，厚积薄发的开始。</p><p>狠狠加了一周大班，每天一起床就是全力开发，经常肝到十一点多、十二点，一觉睡醒接着开卷。<strong>充实却又冷漠</strong>。想着看看最后结果如何，还抱着一丝幻想。</p><p>月末 Demo 终于开始出包跑起来了，值得庆幸的是，这个 Demo 看起来比之前成功了太多。事实证明，新玩法比之前的有趣了太多。当最初的 demo 跑起来的那一晚，策划直接玩上头。说明这个模式还是很有前途的，至少比之前的好了太多。</p><p>虽然加班没什么工资，但还是有种 <strong>值得</strong> 的感觉，看到策划（玩家）的笑脸，如释重负，也切实体会到了 <strong>做游戏的快乐</strong>。</p><p>啊，这段黑暗却又光明的日子。<strong>黑暗终将过去，黎明的曙光也终将到来</strong>。</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310134174.png" alt="image-20221231002558895"></p><p>敏捷开发后，各种机缘巧合，或许是组织调整，或许我每天在工位讲做游戏就该做 gameplay，被 leader 听到了 XD。</p><p>总之，正式从 <strong>AI组</strong> 转到了 <strong>玩法组</strong>，项目也开启了 <strong>里程碑快速开发</strong> 阶段。</p><p>当初还很焦虑，毕竟要走出舒适圈了，但现在看来，这才是我该来的地方。</p><blockquote><p>很喜欢 MDD 说的一句话：</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310134155.png" alt="image-20221231002233010"></p></blockquote><h2 id="十月-十二月">十月~十二月</h2><p>敏捷线开发后，新玩法正式立足，进入了里程碑快速开发，我也正式转入玩法组进行工作。</p><p>里程碑的快速开发，带来的也是快速的成长。</p><p>和在 AI组 的 ”基本都在 UI，偶尔一点大活“ 不同，到玩法组后各种狠活，各种各样的功能，各种各样的系统：<code>LifeTimeSystem</code> / <code>DisplayInfoSystem</code> / <code>GameplayBuffSystem</code> / <code>GameplayFeatureSystem</code>……</p><p>回过头来，已经独立拿下了好多功能，各种 gameplay，狠狠堆业务。</p><blockquote><p>很喜欢马宝说的一句话：</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310134135.png" alt="image-20221230210148303"></p></blockquote><p>或许是拿下的狠活多了，或许是手速快、Bug 少。也逐渐愈发核心，各种功能开会也都拉上我了，手里的活越来越核心，不再是过去的 UI 打杂仔了。</p><p>恰好这时也谈薪发了正式 Offer，寒气袭人，一开始拿到的还只有 SP（现在想想在 AI 组的表现也确实就值这个价），感觉不太满意，和领导反馈了一下，结果 leader 直接去找 HR 表示 “这个人对项目组很重要，要尽全力挽留”（感动），最后也是成功拿下了个不错的 Offer，ヾ(✿ﾟ▽ﾟ)ノ</p><p>兜兜转转，最后还是决定在这个项目组好好干。</p><p>日子就这样一天天过去，里程碑阶段疯狂加班，几乎每天都十一点多走，在这种高压下，项目在成长，我也在飞速成长……</p><p>年终看完了世界杯，不得不说这是近几年最精彩的一场球赛，两个球队的坚持令人动容，这种意志值得学习，庆祝潘帕斯雄鹰也再次起飞！</p><p>终于，里程碑的快速开发终于走到了尾声。最后一个里程碑，基本也只有策划配置的活，恰好疫情也放开了，阳性在家，好好休息了一下。</p><p>最后一段居家办公的生活，作为了一年的总结，确实有种今年总算结束了的感觉，令人感慨。</p><p>希望明年项目顺利上线吧，希望我们玩法也可以大受好评。</p><h2 id="总结">总结</h2><p>今年认识了各种各样、各行各业的人，无论是程序、策划、测试，还是美术、运营。每个人都有自己与众不同的经历与故事，都有自己的想法和目标，<strong>平等自然看待所有人</strong> 才是相处的好办法。</p><p>无论人生有怎样的困难，总是要积极面对，<strong>凡事都会有解决的办法</strong>，相信自己，坚定信念。</p><p>固然运气也是成功的一部分，但 <strong>执行力要强，胆子要大</strong> 也十分重要。如果都不曾动手过，也无从谈运气好之说了。</p><p><strong>福祸相依</strong>，人生总不是一帆风顺的，起起落落跌宕起伏的故事才更加扣人心弦。</p><blockquote><p>或许寒气袭人，或许游戏行业日薄西山，或许九死一生。</p><p>但哪怕如此，依然得拼 UI、写 gameplay，因为这就是 “游戏热爱者”。</p></blockquote><p><strong>『No Game No Life』</strong> 的故事中，里克和休比面对黑暗，也始终心向光明，依然可以说出那句 <em><strong>【ゲームを始めよう】</strong></em>。</p><p>人生何尝不是一场盛大的游戏？</p><p>一部设计得精妙绝伦的游戏，一段注定与众不同、注定精彩的人生。</p><p>那么 —— <strong>来玩游戏吧！</strong></p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202212310134074.png" alt="image-20221231001141448"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;2022 年度总结&lt;/h1&gt;
&lt;h2 id=&quot;一月-二月&quot;&gt;一月~二月&lt;/h2&gt;
&lt;p&gt;打工前最后的时光。&lt;/p&gt;
&lt;p&gt;印象深刻的是看了乃琳的 50w 粉纪念回，她说：&lt;strong&gt;“喜欢，就是一件细水长流且滔滔不绝的事情呀~”&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一年</summary>
      
    
    
    
    <category term="日志" scheme="https://www.bearchild.top/categories/%E6%97%A5%E5%BF%97/"/>
    
    
    <category term="日志" scheme="https://www.bearchild.top/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>[UE]CharacterMovement源码浅析</title>
    <link href="https://www.bearchild.top/2022/06/10/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/3C/[UE]CharacterMovement%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/"/>
    <id>https://www.bearchild.top/2022/06/10/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/3C/[UE]CharacterMovement%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/</id>
    <published>2022-06-09T16:00:00.000Z</published>
    <updated>2024-06-13T12:04:32.123Z</updated>
    
    <content type="html"><![CDATA[<h1>CharacterMovement源码浅析</h1><h2 id="Base">Base</h2><pre class="mermaid">classDiagramdirection LRclass UMovementComponent {UpdatedComponent : TObjectPtr~USceneComponent~ (处理空间位置)UpdatedPrimitive : TObjectPtr~UPrimitiveComponent~ (处理渲染物理)}%% -------------UMovementComponent<|--UProjectileMovementComponentclass UProjectileMovementComponent {支持发射体（子弹等）}%% -------------UMovementComponent<|--UNavMovementComponentclass UNavMovementComponent {支持 Agent 寻路NavAgentProps : FNavAgentProperties}UNavMovementComponent<|--UPawnMovementComponentclass UPawnMovementComponent {支持输入控制AddInputVector()}UPawnMovementComponent<|--UCharacterMovementComponent</pre><pre class="mermaid">flowchart LRUCharacterMovementComponentTickComponent-->ConsumeInputVectorTickComponent-->ControlledCharacterMoveTickComponent-->Other...</pre><ol><li><code>ComsumeInputVector</code>：</li></ol><p>从 <code>PawnOwner</code> 取出累积的 <code>ControlInputVector</code>，该值监听输入并调用 <code>Pawn::AddMovementInput</code> 得来；</p><ol start="2"><li><code>ControlledCharacterMove</code>：</li></ol><p>进行 <code>Character</code> 移动的输入处理、物理模拟、同步；</p><ol start="3"><li><code>Other...</code></li></ol><h2 id="ControlledCharacterMove">ControlledCharacterMove</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UCharacterMovementComponent::ControlledCharacterMove</span><span class="params">(<span class="keyword">const</span> FVector&amp; InputVector, <span class="keyword">float</span> DeltaSeconds)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">SCOPE_CYCLE_COUNTER</span>(STAT_CharUpdateAcceleration);</span><br><span class="line"></span><br><span class="line"><span class="comment">// We need to check the jump state before adjusting input acceleration, to minimize latency</span></span><br><span class="line"><span class="comment">// and to make sure acceleration respects our potentially new falling state.</span></span><br><span class="line">CharacterOwner-&gt;<span class="built_in">CheckJumpInput</span>(DeltaSeconds);</span><br><span class="line"></span><br><span class="line"><span class="comment">// apply input to acceleration</span></span><br><span class="line">Acceleration = <span class="built_in">ScaleInputAcceleration</span>(<span class="built_in">ConstrainInputAcceleration</span>(InputVector));</span><br><span class="line">AnalogInputModifier = <span class="built_in">ComputeAnalogInputModifier</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (CharacterOwner-&gt;<span class="built_in">GetLocalRole</span>() == ROLE_Authority)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">PerformMovement</span>(DeltaSeconds);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (CharacterOwner-&gt;<span class="built_in">GetLocalRole</span>() == ROLE_AutonomousProxy &amp;&amp; <span class="built_in">IsNetMode</span>(NM_Client))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ReplicateMoveToServer</span>(DeltaSeconds, Acceleration);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre class="mermaid">flowchart LRControlledCharacterMove-->CheckJumpInput-.->ScaleInputAcceleration-.->ComputeAnalogInputModifierControlledCharacterMove-->|ROLE_Authority|PerformMovement-->Start(StartNewPhysics)ControlledCharacterMove-->|ROLE_AutonomousProxy & IsClient|ReplicateMoveToServerStart-->MOVE_NoneStart-->MOVE_WalkingStart-->MOVE_FallingStart-->MOVE_FlyingStart-->MOVE_SwimmingStart-->MOVE_Custom</pre><h3 id="Input">Input</h3><p>解析输入相关的数据；</p><ol><li><code>CheckJumpInput</code>：根据 <code>bPressedJump</code>，计算 <code>JumpCurrentCount</code>、<code>JumpForceTimeRemaining</code>；</li><li><code>ScaleInputAcceleration</code>：根据玩家的输入 <code>InputVector</code>，计算出当前的初始加速度值；</li><li><code>ComputeAnalogInputModifier</code>：模拟输入修正值，将 <code>Acceleration /= MaxAcceleration</code>，限制在 <code>0-1</code> 内；</li></ol><h3 id="PerfomeMovement">PerfomeMovement</h3><p>进行物理模拟，设置位移。</p><h4 id="Physics-Walking">Physics : Walking</h4><pre class="mermaid">flowchart LRUCharacterMovementComponent%%-------------------------------------PerformMovement-->StartNewPhysics-->PhysWalking%%-------------------------------------PhysWalking-->GetSimulationTimeStepPhysWalking-->CalcVelocityPhysWalking-->MoveAlongFloorPhysWalking-->FindFloorPhysWalking-->CheckLedgesPhysWalking-->MaintainHorizontalGroundVelocity%%-------------------------------------MoveAlongFloor-->ComputeGroundMovementDeltaMoveAlongFloor-->SafeMoveUpdatedComponent%%-------------------------------------CheckLedges-->|true|GetLedgeMoveGetLedgeMove-->|true|RevertMove-->TryLedgeMoveGetLedgeMove-->|false|bMustJump-->|true|RevertMove-->FallCheckLedges-->|false|FloorCheck%%-------------------------------------FloorCheck-->IsWalkableFloorIsWalkableFloor-->|true|AdjustFloorHeight-->SetBaseIsWalkableFloor-->|false|GetPenetrationAdjustment-->ResolvePenetration%%-------------------------------------</pre><p><code>GetSimulationTimeStep</code>：将 <code>TickDeltaTime</code> 按照 <code>MaxSimulationTimeStep</code> 分割为若干段（为了保证平滑），处理每一段的信息；</p><p><code>CalcVelocity</code>：根据 <code>Friction</code>、<code>bFluid</code>、<code>BrakingDeceleration</code> 修改 <code>Acceleration</code>，并计算出 <code>Velocity</code> 水平速度；</p><p><code>MoveAlongFloor</code>：根据 <code>MoveVelocity</code> 信息，先调用 <code>ComputeGroundMovementDelta</code>，根据 <code>Velocity</code> 计算出 <code>RampVector</code> 平行于斜面的移动距离，同时根据 <code>bMaintainHorizontalGroundVelocity</code> 处理沿斜面速度减慢的情况；然后调用 <code>SafeMoveUpdatedComponent</code>，进行 <code>MoveUpdatedComponent</code>，更新位置；在 <code>UPrimitiveComponent::MoveComponentImpl</code> 中，还会进行 <code>World-&gt;ComponentSweepMulti</code> 判断是否遇到障碍物；</p><p><code>FindFloor</code>：更新 <code>CurrentFloor : FFindFloorResult</code> 信息；用 <code>CharacterOwner-&gt;GetCapsuleComponent()</code> 进行 <code>FloorSweepTest</code>，计算出 <code>ValidPerchRadius</code> 等信息；</p><p><code>CheckLedges</code>：检测是否在 <code>Ledge</code> 附近，如果是，则先尝试寻找新的移动方向（通过 <code>GetLedgeMove</code> 进行 <code>SweepSingleByChannel</code> 计算出边缘法线返回新的反向）；如果找不到新的方向，则尝试跳跃，检测 <code>bMustJump</code>，如果不能跳跃则取消移动；</p><p><code>FloorCheck</code>：校验 <code>Floor</code> 相关数据，如果 <code>Character</code> 处于<code>IsWalkableFloor</code> 的 <code>Floor</code>，<code>AdjustFloorHeight</code> 来调整 <code>Character</code> 的高度，如果在 <code>Floor</code> 中则 <code>GetPenetrationAdjustment</code> 计算需要弹出 <code>Character</code> 的距离并 <code>ResolvePenetration</code>，防止 <code>Floor</code> 和 <code>Character</code> 有冲突卡住；</p><p><code>MaintainHorizontalGroundVelocity</code>：调用之前判断是否依然 <code>IsMovingOnGround</code>，如果是则根据 <code>bMaintainHorizontalGroundVelocity</code>，计算 <code>GravityRelativeVelocity</code> 进而更新 <code>Velocity</code>；</p><h4 id="Physics-Falling">Physics : Falling</h4><pre class="mermaid">flowchart LRPerformMovement-->StartNewPhysics-->PhysFallingPhysFalling-->GetFallingLateralAccelerationPhysFalling-->ShouldLimitAirControlPhysFalling-->RestorePreAdditiveRootMotionVelocityPhysFalling-->CalcVelocityPhysFalling-->ApplyRootMotionToVelocityPhysFalling-->NotifyJumpApexPhysFalling-->SafeMoveUpdatedComponentPhysFalling-->|IsSwimming|StartSwimmingPhysFalling-->BlockingHit%%---------------------BlockingHit-->|IsValidLandingPoint|ProcessLandedBlockingHit-->HandleImpact%%---------------------ProcessLanded-->|IsFalling|SetPostLandedPhysicsProcessLanded-->StartNewPhysics_2%%---------------------HandleImpact-.-> CalcVelocity_2-.-> BlockingHit_2</pre><p><code>GetFallingLateralAcceleration</code>：计算 <code>Character</code> 在水平方向上的加速度；重点是将 <code>WorldAcceleration</code> 通过<code>RotateWorldToGravity</code> 转为 <code>Gravity</code> 相关坐标系，然后将 <code>Z</code> 的方向设为 <code>0</code>，再转回 <code>World</code> 坐标系，这样以移除垂直方向上的加速度（因为垂直方向的加速度需要由 <code>Gravity</code> 决定，而不是 <code>InputVector</code>）；</p><p><code>RestorePreAdditiveRootMotionVelocity</code>：<code>Apply AdditiveRootMotion</code> 的情况下将 <code>Velocity</code> 设置为 <code>LastPreAdditiveVelocity</code>（ <code>AdditiveRootMotion</code> 表示 <code>RootMotioinVelocity</code> 将与 <code>Character</code> 的原始速度 <code>LastPreAdditiveVelocity</code>，即计算 <code>RootMotionVelocity</code> 前的速度叠加），防止 <code>RootMotion Velocity</code> 被累加；</p><p><code>CalcVelocity</code>：根据 <code>FallAcceleration</code>、<code>Gravity</code>、<code>JumpForce</code> 等数据，计算出 <code>NewFallVelocity</code>；</p><p><code>ApplyRootMotionToVelocity</code>：应用 <code>RootMotion Velocity</code>，根据 <code>HasOverrideVelocity / HasAdditiveVelocity</code> 两种应用速度方式，计算 <code>Velocity</code>；</p><p><code>NotifyJumpApex</code>：当 <code>RotateWorldToGravity(Velocity).Z &lt; 0</code> 时，说明到达了 <code>JumpApex</code> 跳跃顶点，进行通知；</p><p><code>SafeMoveUpdatedComponent</code>：进行位移设置；</p><p><code>BlokingHit</code>：在碰到障碍物时的处理；</p><p><code>ProcessLanded</code>：判断是否 <code>IsValidLandingPoint</code>，如果是，进行着陆；进行通知 <code>Landed</code> 与设置相关物理状态 <code>SetPostLandedPhysics</code>，然后开始新的物理模拟 <code>StartNewPhysics</code>；</p><p><code>HandleImpact</code>：无法着陆时，<code>AddImpactPhysicsForces</code> ，用于后续计算碰撞后的 <code>Velocity</code>与位移；</p><p><code>BlockingHit_2</code>：碰撞移动后再次计算是否再次 <code>BlockingHit</code>，如果无 <code>Hit</code>，则尝试 <code>FindFloor</code>，找到 <code>Floor</code>则尝试着陆；如果是，说明 <code>Character</code> 被卡在了两个障碍物中间；检测是否 <code>IsValidLandingPoint</code> 是着陆点，是则 <code>ProcessLand</code>；如果不是着陆点，特殊处理被卡住 <code>bDitch</code> 的情况（检查 <code>OldHitImpactNormal</code>、<code>Hit.ImpactNormal</code> 是否都具有 <code>Z</code> 即斜坡朝上，且夹角 <code>&gt;90°</code> 即斜坡朝向不同，同时 <code>Character</code> 的 <code>Delta.Z</code> 接近 <code>0</code> 即在垂直方向无移动），如果是，尝试增加 <code>Velocity</code> 与位移，摆脱被卡住的情况；</p><h4 id="Physics-Other">Physics : Other</h4><p>TODO…</p><h3 id="ReplicateMoveToServer">ReplicateMoveToServer</h3><p>对于 <code>AutonomousProxy Character</code> 将移动同步到服务器，同时进行 <code>Client</code> 本地的预表现；</p><p>首先需要了解：<code>FNetworkPredictionData</code>；</p><h4 id="FNetworkPredictionData">FNetworkPredictionData</h4><p><code>PredictionData_Client_Character</code> 维护 <code>Client</code> 的 <code>Move</code> 相关数据，同时用于合并、丢弃、比较、标记更新等操作；</p><pre class="mermaid">classDiagramclass FNetworkPredictionData_Client_Character {SavedMoves : TArray~FSavedMovePtr~FreeMoves : TArray~FSavedMovePtr~PendingMove : FSavedMovePtrLastAckedMove : FSavedMovePtrClientUpdateRealTime : floatbUpdatePosition : uint32...}FNetworkPredictionData_Client_Character-->FSavedMove_Characterclass FSavedMove_Character {        TimeStamp : float        DeltaTime : floatAcceleration : FVectorMaxSpeed : floatStart / End / Saved : Location / ReletiveLocation / Rotation / Velocity / Floor / CapsuleRadius / CapsuleHalfHeight / Base / ActorOverlapCounter ......}</pre><p>其中：</p><p><code>FSavedMovePtr</code> 是 <code>TSharedPtr&lt;FSavedMove_Character&gt;</code>；</p><p><code>SavedMoves</code> 保存 <code>Client</code> 执行的 <code>Move</code>，在 <code>CleintAck</code> 后， <code>LastAckedMove</code> 将会被 <code>Free</code> 并从 <code>SavedMoves</code> 中移除；</p><p><code>PendingMove</code> 记录 <code>Client</code> 最新执行的，还未 <code>CallServer</code> 的 <code>Move</code>，每次 <code>Push</code> 到 <code>SavedMoves</code> 中，同时可能会作为 <code>OldMove</code> 被  <code>Combine</code>；</p><p><code>FreeMoves</code> 记录已经被标记 <code>Free</code> 的 <code>Move</code>，后续释放；</p><pre class="mermaid">classDiagram    class FNetworkPredictionData_Server_Character {    PendingAdjustment : FClientAdjustment}FNetworkPredictionData_Server_Character-->FClientAdjustmentclass FClientAdjustment {TimeStamp : floatDeltaTime : floatbAckGoodMove : boolNew Loc / Vel / Rot / Base ......}</pre><p><code>PredictionData_Server_Character</code> 记录在 <code>Server</code> 上的 <code>Move</code> 数据，用于校验、修正等；</p><p>其中：</p><p><code>PendingAdjustment</code> 维护了一系列 <code>ClientAdjust</code> 所需的数据；</p><h4 id="ReplicateMoveToServer-Logic">ReplicateMoveToServer - Logic</h4><pre class="mermaid">flowchart LRReplicateMoveToServer-->GetPredictionData_Client_CharacterReplicateMoveToServer-->ClientData_UpdateTimeStampAndDeltaTimeReplicateMoveToServer-->FindImportantMoveReplicateMoveToServer-->ClientData_CreateSavedMove-.->Move_SetMoveFor-.->Move_CombineReplicateMoveToServer-->PerformMovement-.->Move_PostUpdate-.->ClientData_SaveMoveReplicateMoveToServer-->CallServerMove-.->ClearPending</pre><p><code>GetPredictionData_Client_Character</code>：获取 <code>Client</code> 的预测数据 <code>ClientData : FNetworkPredictionData_Client_Character*</code>；</p><p><code>ClientData</code> 会在各个地方被更新，比如</p><blockquote><ol><li><code>ReplicateMoveToServer</code> 中：<br>更新物理模拟的 <code>TimeStamp</code>与 <code>DeltaTime</code>：<code>ClientData-&gt;UpdateTimeStampAndDeltaTime</code>；<br>创建新的 <code>SavedMove</code> ：<code>ClientData-&gt;CreateSavedMove()</code>；<br><code>PerformMovement</code> 之后更新 <code>Location</code>、<code>Rotation</code>、<code>Velocity</code> 等数据：<code>NewMove-&gt;PostUpdate(CharacterOwner, FSavedMove_Character::PostUpdate_Record)</code>;</li><li><code>CallServerMove / CallServerMovePacked</code> 前更新时间：<code>ClientData-&gt;ClientUpdateRealTime = MyWorld-&gt;GetRealTimeSeconds();</code></li><li><code>ClientAckGoodMove</code>：<code>Client</code> 收到 <code>Server</code> 的移动确认时，更新最后的移动 <code>ClientData-&gt;LastAckedMove</code>：</li></ol></blockquote><p><code>FindImportantMove</code>：找到最早的未 <code>Ack</code> 的 <code>ImportantMove</code> 数据，<code>IsImportantMove</code> 指与上一个 <code>Ack</code> 的移动有差异的移动；判定是否 <code>Important</code> 时，会检查 <code>CompressedFlags</code> （压缩了 <code>FLAG_JumpPressed</code>、<code>FLAG_WantsToCrouch</code> 等信息）、<code>Start/End PackedMovementMode</code>、<code>Acceleration</code> 的大小、方向差异是否超过阈值；找到 <code>Unack ImportMove</code> 后，存储在 <code>OldMove</code> 中，后续将其与新的 <code>Move</code> 一起 <code>CallServerMove</code>，确保 <code>Server</code> 可以正确处理。</p><p><code>CreateSavedMove</code>：创建新的 <code>FSavedMove</code> 数据，也就是定义一个新的 <code>Move</code>；</p><p><code>Move_SetMoveFor</code>：根据 <code>CharacterOwner</code>、<code>DeltaTime</code>、<code>NewAcceleration</code> 等数据设置 <code>Move</code> 基本信息；</p><p><code>Move_Combine</code>：尝试将这个新的 <code>Move</code> 与 待处理的移动 <code>PendingMove</code> 合并，如果 <code>CanCombine</code>，更新 <code>Rotation</code>、<code>Position</code> 等信息；<code>CanCombine</code> 会校验 <code>TimeStamp</code>、<code>RootMotion</code>、<code>Acceleration</code>、<code>StartVelocity</code>、<code>MaxSpeed</code>、<code>Jump</code>、<code>CompressedFlags</code>、<code>MovementMode</code>、<code>StartCapsule Radius/HalfHeight</code>、<code>AttachParent</code>、<code>TimeDilation</code>、<code>ActorOverlapCounter</code> 这些数据；<code>Combine</code> 时更新 <code>Location</code>、<code>Rotation</code>、<code>Velocity</code>、<code>Floor</code>、<code>Jump</code> 等数据；</p><p><code>PerformMovement</code>：在本地执行移动；</p><p><code>Move_PostUpdate</code>：在 <code>PerformMovement</code> 更新了移动相关数据之后，设置这些状态数据到 <code>Move</code> 中；</p><p><code>ClientData_SaveMove</code>：将 <code>NewMove</code> 保存到移动列表 <code>ClientData-&gt;SavedMoves</code> 中；</p><p><code>CallServerMove</code>：根据角色是否正在复制移动 <code>bSendServerMove</code> 将新的移动发动到 <code>Server</code>，根据 <code>ShouldUsePackedMovementRPCs</code> 决定发送的方式 <code>CallServerMovePacked / CallServerMove</code>；</p><p><code>ClearPendingMove</code>：清空 <code>PendingMove</code>，表示没有待处理的移动；</p><h2 id="AutonomousProxy">AutonomousProxy</h2><p>从 <code>ReplicateMoveToServer -&gt; CallServerMovePacked</code> 继续出发：</p><pre class="mermaid">flowchart LRCallServerMovePacked-->ServerMovePacked_ClientSend-->|DS|ServerMovePacked_Implementation-->ServerMovePacked_ServerReceiveServerMovePacked_ServerReceive-->SetCurrentNetworkMoveDataServerMovePacked_ServerReceive-->ServerMove_PerformMovementServerMove_PerformMovement-->MoveAutonomousServerMove_PerformMovement-->ServerMoveHandleClientError-->ServerCheckClientErrorMoveAutonomous-->PerformMovement</pre><p>通过 <code>CallServerMovedPacked (UnreliableRPC)</code> 将打包的 <code>SaveMoves</code> 数据发送到 <code>DS</code>，<code>DS</code> 根据 <code>Client</code> 发送到的数据进行 <code>MoveAutonomouss</code> 与 校验数据合法性 <code>CheckClientError</code>，如果数据差异过大，则 <code>ServerData-&gt;PendingAdjustment.bAckGoodMove = false</code>；</p><pre class="mermaid">flowchart LRUNetDriver::TickFlush-->UNetDriver::ServerReplicateActors-->SendClientAdjustmentSendClientAdjustment-->bAckGoodMovebAckGoodMove-->|true|ServerLastClientGoodMoveAckTime-->ShouldUsePackedMovementRPCs_GoodbAckGoodMove-->|false|ServerLastClientAdjustmentTime-->ShouldUsePackedMovementRPCs_NoGoodShouldUsePackedMovementRPCs_Good-->|false|ClientAckGoodMoveShouldUsePackedMovementRPCs_NoGood-->|false|ClientAdjustPositionShouldUsePackedMovementRPCs_Good-->|true|ServerSendMoveResponseShouldUsePackedMovementRPCs_NoGood-->|true|ServerSendMoveResponseServerSendMoveResponse-->MoveResponsePacked_ServerSend-->ClientMoveResponsePacked-->|Client|MoveResponsePacked_ClientReceive</pre><p>同步时候向 <code>Client</code> 进行 <code>SendClientAdjust</code>，通知 <code>Client</code> 每次 <code>NewMove</code> 的结果；</p><p>根据 <code>ShouldUsePackedMovemtnRPCs</code> 决定是否需要 <code>ServerSendMoveResponse</code>；</p><pre class="mermaid">flowchart LRMoveResponsePacked_ClientReceive-->ClientHandleMoveResponse-->IsGoodMoveIsGoodMove-->|true|ClientAckGoodMove_ImplementationIsGoodMove-->|false|ClientAdjustPosition_Implementation-->SetbUpdatePosition_trueTickComponent-->ClientUpdatePositionAfterServerUpdate</pre><p><code>Client</code> 收到 <code>DS</code> 的 <code>SendClientAdjust</code> 后，判定 <code>MoveResponse</code> 是否 <code>IsGoodMove</code>，如果是，<code>Client</code> 进行 <code>Ack</code>，被确认的 <code>Move</code> 将会立刻从 <code>SavedMoves</code> 中移除；否则 <code>Client</code> 需要更新 <code>bUpdatePosition</code> 为 <code>true</code>，后续在 <code>ClientUpdatePositionAfterServerUpdate</code> 中进行修正；</p><p><code>ClientUpdatePositionAfterServerUpdate</code>：判定 <code>bUpdatePosition</code> 是否是 <code>true</code>，如果是则回放 <code>DS</code> 未 <code>Ack</code> 的 <code>ClientData-&gt;SavedMoves.Num()</code>，进行 <code>SetCurrentReplayedSavedMove</code> 并 <code>MoveFor</code>；</p><h2 id="SimulateProxy">SimulateProxy</h2><pre class="mermaid">flowchart LRACharacter::OnRep_ReplicatedMovement-->AActor::PostNetReceiveVelocityACharacter::OnRep_ReplicatedMovement-->ACharacter::PostNetReceiveLocationAndRotationAActor::PostNetReceiveVelocity-->UPrimitiveComponent::SetPhysicsLinearVelocityACharacter::PostNetReceiveLocationAndRotation-->SmoothCorrectionACharacter::PostNetReceiveLocationAndRotation-->SetbNetworkUpdateReceived_true</pre><pre class="mermaid">flowchart LRTickComponent-->SimulatedTick-->SimulateMovementSimulatedTick-->|!bNetworkSmoothingComplete|SmoothClientPosition%% -----------SimulateMovement-->ScopedUpdatesScopedUpdates-->bIsSimulatedProxybIsSimulatedProxy-->bNetworkUpdateReceived_truebNetworkUpdateReceived_true-->|bNetworkGravityDirectionChanged|SetGravityDirectionbNetworkUpdateReceived_true-->|bNetworkMovementModeChanged| ApplyNetworkMovementModebNetworkUpdateReceived_true-->|bJustTeleported OR bForceNextFloorCheck|UpdateFloorFromAdjustmentbNetworkUpdateReceived_false-->|bForceNextFloorCheck|UpdateFloorFromAdjustment%% -----------ScopedUpdates-->UpdateCharacterStateBeforeMovementScopedUpdates-->MaybeUpdateBasedMovementScopedUpdates-->UpdateProxyAccelerationScopedUpdates-->|!bHandledNetUpdate OR !bNetworkSkipProxyPredictionOnNetUpdate|MoveSmooth-->IsMovingOnGroundIsMovingOnGround-->|true|MoveAlongFloorIsMovingOnGround-->|false|SafeMoveUpdatedComponent-->|!bSteppedUp|SlideAlongSurfaceScopedUpdates-->UpdateCharacterStateAfterMovementScopedUpdates-->OnMovementUpdatedSimulateMovement-->CallMovementUpdateDelegateSimulateMovement-->UpdateComponentVelocity%% -----------SmoothClientPosition-->SmoothClientPosition_InterpolateSmoothClientPosition-->SmoothClientPosition_UpdateVisuals</pre><p><code>Smooth</code>：</p><p><code>SmoothingServerTimeStamp</code> 表示 <code>Character</code> 在  <code>DS</code> 当前移动时间戳，由 <code>ACharacter::PreReplication</code> 时，同步的 <code>ReplicatedServerLastTransformUpdateTimeStamp</code> 得来；</p><p><code>SmoothingClientTimeStamp</code> 表示 <code>Character</code> 在这个  <code>Client</code> 当前平滑到的移动时间戳；</p><p>每次进行 <code>SmoothClientPosition_Interpolate</code> 时；</p><p>在 <code>SmoothingMode = ENetworkSmoothingMode::Linear</code> 的情况下：</p><ol><li>计算 <code>TargetDelta = LastCorrectionDelta</code>，这里的 <code>LastCorrectionDelta = 上一次( SmoothingServerTimeStamp - SmoothingClientTimeStamp)</code> ，表示实际上相比于 <code>DS</code> 上的数据，<code>Client</code> 在这一次平滑开始前，还剩余多少时间还未执行平滑操作；</li><li>更新 <code>SmoothingClientTimeStamp = Min(SmoothingClientTimeStamp + DeltaSeconds, SmoothingServerTimeStamp + MaxTimeAhead);</code><br>这里的 <code>DeltaSeconds</code> 表示当帧过去的实际时间；<br><code>MaxTimeAhead = TargetDelta * 0.15f</code>，表示允许多往前外插的时间，<code>0.15f</code> 是允许多预测的时间比例；<br>现在这个新的 <code>SmoothingClientTimeStamp</code>，就表示这一帧 <code>Client</code> 需要平滑到的时间戳；</li><li>计算 <code>RemainingTime = SmoothingServerTimeStamp - SmoothingClientTimeStamp</code>， 表示在这一帧平滑过后，还剩下多少时间没有平滑；然后 <code>CurrentSmoothTime = TargetDelta - RemainingTime</code>，得到这一帧需要平滑多少时间；</li><li>计算 <code>LerpPercent = FMath::Clamp(CurrentSmoothTime / TargetDelta, 0.0f, LerpLimit)</code>，按照 <code>本次平滑多少时间 / 剩余的总共需要平滑的时间</code>，得到这个 <code>LerpPercent</code>；<br>其中 <code>LerpLimit = 1.15f</code>，也是允许多平滑的比例；</li><li>得到 <code>LerpPercent</code> 后，更新 <code>MeshTranslationOffset</code>、<code>MeshRotationOffset</code>；</li></ol><h2 id="参考">参考</h2><p><em><strong>UE 5.4 源码</strong></em></p><p><em><strong>大体框架：</strong></em><a href="https://zhuanlan.zhihu.com/p/114341957">UE4 移动的网络同步</a></p><p><em><strong>核心代码：</strong></em><a href="https://zhuanlan.zhihu.com/p/34257208">《Exploring in UE4》移动组件详解[原理分析]</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;CharacterMovement源码浅析&lt;/h1&gt;
&lt;h2 id=&quot;Base&quot;&gt;Base&lt;/h2&gt;
&lt;pre class=&quot;mermaid&quot;&gt;classDiagram

	direction LR
	
	class UMovementComponent {
		Upda</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="3C" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/3C/"/>
    
    
    <category term="UE" scheme="https://www.bearchild.top/tags/UE/"/>
    
    <category term="3C" scheme="https://www.bearchild.top/tags/3C/"/>
    
  </entry>
  
  <entry>
    <title>[UE]PushModel属性同步</title>
    <link href="https://www.bearchild.top/2022/04/10/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/[UE]PushModel%E5%B1%9E%E6%80%A7%E5%90%8C%E6%AD%A5/"/>
    <id>https://www.bearchild.top/2022/04/10/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/[UE]PushModel%E5%B1%9E%E6%80%A7%E5%90%8C%E6%AD%A5/</id>
    <published>2022-04-09T16:00:00.000Z</published>
    <updated>2022-11-26T11:15:48.749Z</updated>
    
    <content type="html"><![CDATA[<h1>PushModel属性同步</h1><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202204101622619.png" alt="image-20220410162250125"></p><h2 id="优势">优势</h2><p><code>PushModel</code> 是对 <code>Replicate</code> 的一个优化。</p><p>对于属性的同步，原有的 <code>Replicated</code> 属性，在 <code>Replicate</code>  之前需要通过<code>反射</code>对一个 <code>Actor</code> 的所有属性进行 <code>diff</code>，对比所有的属性是否发生变化，变化的属性才进行同步。</p><p>而用上了 <code>PushModel</code>，我们可以主动 <code>MARK_DIRTY</code>，在 <code>Set</code> 时主动将其设置为脏，相当于给该属性上了一个<code>Flag</code>，底层会自动通过这个<code>Flag</code> 来判断是否需要同步，省去了 <code>diff</code> 这个高消耗的操作。</p><p>需要注意的是，对于一个 <code>Actor</code>，如果采用了 <code>PushModel</code>，则需要将所有需要同步的属性都挂上这个 <code>PushModel</code>，否则如果存在非<code>PushModel</code>的需要<code>Repilicated </code>的属性，可能会该功能不生效，退化到原来的情况。</p><p>UE5 中还对 <code>PushModel</code> 做了更进一步的优化，添加了一些新的宏以及对更多基础组件的支持。</p><h2 id="实践">实践</h2><h3 id="设置依赖">设置依赖</h3><p>首先，我们需要在 <code>Build.cs</code> 中添加 <code>NetCore</code> 模块的依赖。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PublicDependcyModuleNames.<span class="built_in">AddRange</span>(<span class="keyword">new</span> string[] &#123;<span class="string">&quot;NetCore&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="设置属性">设置属性</h3><p>我们对于一个需要同步的属性，得先加上 <code>Replicated</code> 标签；有必要的话，需要加上<code>RepilicatedUsing </code> 来设置属性为脏时执行的回调函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ATest</span> :</span> <span class="keyword">public</span> AActor</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UPROPERTY</span>(Replicated, EditAnywhere, ReplicatedUsing = OnRep_Param)</span><br><span class="line"><span class="keyword">float</span> Param;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UFUNCITON</span>()</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnRep_Param</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ATest::OnRep_Param</span><span class="params">()</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><h3 id="声明同步">声明同步</h3><p>首先我们要先将这个 <code>Actor</code> 标记为需要同步，在构造函数中标记 <code>bReplicates = true</code>。</p><p>接着我们需要实现 <code>GetLifetimeReplicatedProps</code>，在这个接口中添加宏标记同步的 Property。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ATest::GetLifetimeReplicatedProps</span><span class="params">(TArray&lt; FLifetimeProperty &gt;&amp; OutLifetimeProps)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Super::<span class="built_in">GetLifetimeReplicatedProps</span>(OutLifetimeProps);</span><br><span class="line">    </span><br><span class="line">FDoRepLifetimeParams SharedParams;</span><br><span class="line">SharedParams.bIsPushBased = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">DOREPLIFETIME_WITH_PARAMS_FAST</span>(ATest, Param, SharedParams);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FDoRepLifetimeParams</code> 中设置了同步的条件，其中<code>bIsPushBased</code> 表明是否使用 <code>PushModel</code>。</p><p>其中 <code>DOREPLIFETIME_WITH_PARAMS_FAST</code> 的宏实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">define <span class="title">DOREPLIFETIME_WITH_PARAMS_FAST</span><span class="params">(c,v,params)</span> \</span></span><br><span class="line"><span class="function"></span>&#123; \</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">bool</span> bIsValid_##c_#<span class="meta">#v = ValidateReplicatedClassInheritance(StaticClass(), c::StaticClass(), TEXT(#v)); \</span></span><br><span class="line"><span class="meta">const TCHAR* DoRepPropertyName_##c_##v(TEXT(#v)); \</span></span><br><span class="line"><span class="meta">const NetworkingPrivate::FRepPropertyDescriptor PropertyDescriptor_##c_##v(DoRepPropertyName_##c_##v, (int32)c::ENetFields_Private::v, 1); \</span></span><br><span class="line"><span class="meta">RegisterReplicatedLifetimeProperty(PropertyDescriptor_##c_##v, OutLifetimeProps, params); \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="修改属性">修改属性</h3><p>最后，我们在修改属性的时候，可以使用 <code>MARK_PROPERTY_DIRTY_FROM_NAME</code> 来将属性设脏。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ATest::SetParam</span><span class="params">(<span class="keyword">const</span> <span class="keyword">float</span> NewParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">MARK_PROPERTY_DIRTY_FROM_NAME</span>(ATest, Param, <span class="keyword">this</span>);</span><br><span class="line">    Param = NewParam;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，<code>Server</code> 只需要检测属性是否被 <code>MARK_DIRTY</code> 就可以知道是否需要同步。</p><p>当然，除了 <code>MARK_PROPERTY_DIRTY_FROM_NAME</code> 以外，UE 还实现了一些作用类似的其它的宏：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MARK_PROPERTY_DIRTY(Object, Property) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MARK_PROPERTY_DIRTY_STATIC_ARRAY_INDEX(Object, RepIndex, ArrayIndex) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MARK_PROPERTY_DIRTY_STATIC_ARRAY(Object, RepIndex, ArrayIndex) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MARK_PROPERTY_DIRTY_FROM_NAME(ClassName, PropertyName, Object) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MARK_PROPERTY_DIRTY_FROM_NAME_STATIC_ARRAY_INDEX(ClassName, PropertyName, ArrayIndex, Object) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MARK_PROPERTY_DIRTY_FROM_NAME_STATIC_ARRAY(ClassName, PropertyName, ArrayIndex, Object)</span></span><br></pre></td></tr></table></figure><h3 id="改进">改进</h3><p>当然，我们也可以不这么复杂，我们可以自己设置一个新的标签。</p><p>对于打上这个标签的属性，让其在 <code>CodeGenerator</code> 中自动生成 <code>Setter</code> 与 <code>Getter</code>，然后通过 <code>Setter</code> 与 <code>Getter</code> 来进行修改与访问。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _T&gt; \</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetParam</span><span class="params">(_T&amp;&amp; NewParam)</span> \</span></span><br><span class="line"><span class="function"></span>&#123; \</span><br><span class="line">    <span class="built_in">MARK_PROPERTY_DIRTYFROM_NAME</span>(ATest, Param, <span class="keyword">this</span>); \</span><br><span class="line">    Param = Forward&lt;_T&gt;(NewParam); \</span><br><span class="line">&#125; \</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">float</span>&amp; <span class="title">GetParam</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> Param;&#125; \</span><br><span class="line"><span class="function"><span class="keyword">float</span>&amp; <span class="title">GetParam_Mutable</span><span class="params">()</span> \</span></span><br><span class="line"><span class="function"></span>&#123; \</span><br><span class="line">   <span class="built_in">MARK_PROPERTY_DIRTYFROM_NAME</span>(ATest, Param, <span class="keyword">this</span>); \</span><br><span class="line">   <span class="keyword">return</span> Param;</span><br><span class="line">&#125; \</span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><p>Unreal Engine 4. New network model: PushModel：<a href="https://tech-en.netlify.app/articles/en539604/index.html">https://tech-en.netlify.app/articles/en539604/index.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;PushModel属性同步&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/202204101622619.png&quot; alt=&quot;</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="网络" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="UE" scheme="https://www.bearchild.top/tags/UE/"/>
    
    <category term="网络" scheme="https://www.bearchild.top/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>[GENERIC]知识总结</title>
    <link href="https://www.bearchild.top/2022/01/01/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/[GENERIC]%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>https://www.bearchild.top/2022/01/01/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/[GENERIC]%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-31T16:00:00.000Z</published>
    <updated>2024-04-14T10:03:03.221Z</updated>
    
    <content type="html"><![CDATA[<h1>知识总结</h1><h2 id="1-AI">1. AI</h2><h3 id="寻路">寻路</h3><p><a href="https://zhuanlan.zhihu.com/p/54510444">路径规划之 A* 算法</a></p><p><a href="https://blog.csdn.net/tkokof1/article/details/111297299">[译]寻路优化</a></p><p><a href="https://www.cnblogs.com/KillerAery/p/12242445.html">JPS/JPS+ 寻路算法</a></p><p><a href="http://www.aisharing.com/archives/80">在AI寻路决策中运用势力图（Influence Map）</a></p><p><a href="https://zhuanlan.zhihu.com/p/362500376">LPA* 与 D* Lite</a></p><p><a href="https://wo1fsea.github.io/2016/08/21/A_Quick_Introduction_to_NavMesh/">NavMesh 生成算法</a></p><blockquote><p>A* 的估价：设起点为 S、终点为 T，可以选择 D0 * ManhattanDist(S, T) + D1 * abs( Cross(Se, Te) )</p><p>其中 D0 = 2，D1 = 0.001</p></blockquote><h2 id="2-动画">2. 动画</h2><h3 id="骨骼动画">骨骼动画</h3><p><a href="https://www.bearchild.top/2021/11/27/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%8A%A8%E7%94%BB/%E9%AA%A8%E9%AA%BC%E5%8A%A8%E7%94%BB%E5%8E%9F%E7%90%86/">骨骼动画原理</a></p><h2 id="3-Gameplay">3. Gameplay</h2><h3 id="基础">基础</h3><p><a href="https://harttle.land/effective-cpp.html">Effective C++</a></p><h3 id="架构">架构</h3><p><a href="https://blog.codingnow.com/2017/06/overwatch_ecs.html">浅谈《守望先锋》中的 ECS 构架</a></p><p><a href="https://zhuanlan.zhihu.com/p/270927422">漫谈Entity Component System (ECS)</a></p><h2 id="4-工具流">4. 工具流</h2><h3 id="引入第三方库">引入第三方库</h3><p><a href="https://wofead.top/2019/10/31/c++%E5%A4%B4%E6%96%87%E4%BB%B6%E5%BA%93%E6%96%87%E4%BB%B6%E5%92%8C%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E6%96%87%E4%BB%B6%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB%E5%92%8C%E4%BD%9C%E7%94%A8/">c++库文件的理解</a></p><h2 id="5-UI">5. UI</h2><h2 id="6-网络">6. 网络</h2><p><a href="https://zhuanlan.zhihu.com/p/445398809">预测、和解、插值</a></p><p><a href="https://www.lfzxb.top/nkgmoba-skillandnetwork/">技能系统与网络同步</a></p><p><a href="https://github.com/skywind3000/kcp">KCP</a></p><h2 id="7-物理">7. 物理</h2><h3 id="碰撞">碰撞</h3><p><a href="https://zhuanlan.zhihu.com/p/86981378?utm_source=qq&amp;utm_medium=social&amp;utm_oi=792136550879227904">多边形碰撞检测</a></p><p><a href="https://dyn4j.org/2010/01/sat/">SAT</a>：每个方向的投影都有重叠部分则图形碰撞。实际上不需要检测所有方向，二维使用 <strong>每条边</strong> 的法向量检测；三维使用 <strong>每个面</strong> 的法向量、<strong>两个图形的边两两组成的面</strong> 的法向量进行检测即可。</p><p><a href="https://dyn4j.org/2010/04/gjk-gilbert-johnson-keerthi/">GJK</a>、<a href="https://www.qiujiawei.com/collision-detection-2/">GJK</a></p><p>两个图形的闵可夫斯基差包含原点则图形碰撞。实际上不需要求出具体的闵可夫斯基图形，只要维护一个逼近原点的单纯形即可，该单纯形至多有三个顶点。三维时需要维护一个四面体。</p><p><a href="https://dyn4j.org/2010/05/epa-expanding-polytope-algorithm/">EPA</a></p><p>基于 GJK 算法进行扩展，确定物体的碰撞点和碰撞深度。需要注意的是，维护的单纯形可能顶点数会多于三个。</p><h2 id="8-渲染">8. 渲染</h2><h3 id="图形学">图形学</h3><p><a href="https://zhuanlan.zhihu.com/p/27471300">四元数——基本概念</a></p><p><a href="https://www.zhihu.com/question/23005815/answer/33971127">如何形象地理解四元数？</a></p><p><a href="https://zhuanlan.zhihu.com/p/97186723">四元数(Quaternions)</a></p><p><a href="https://zhiruili.github.io/posts/transformations/">图形学入门</a></p><p><a href="https://zhuanlan.zhihu.com/p/370059588">图形渲染基础：光栅化算法</a></p><p><a href="https://www.bearchild.top/2021/09/22/%E5%9B%BE%E5%BD%A2%E5%AD%A6/%5B%E5%9B%BE%E5%BD%A2%E5%AD%A6%5D%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/">[图形学] 基础知识 - 渲染管线</a></p><p><a href="https://zhuanlan.zhihu.com/p/261667233">法线变换、切线空间、法线贴图</a></p><p><a href="https://zhuanlan.zhihu.com/p/102134614">延迟渲染</a></p><p><a href="https://zhuanlan.zhihu.com/p/434874992">上万字手把手教学，从零开始写软渲染器（光栅化版本）</a></p><h3 id="PBR">PBR</h3><p><a href="https://zhuanlan.zhihu.com/p/416112744">重新认识PBR</a></p><h3 id="卡通渲染">卡通渲染</h3><p><a href="https://zhuanlan.zhihu.com/p/163791090">卡通渲染学习总结</a></p><h3 id="大世界">大世界</h3><p><a href="https://zhuanlan.zhihu.com/p/258985044">大世界技术浅析——超远视距处理</a></p><h2 id="9-性能优化">9. 性能优化</h2><p><a href="https://zhuanlan.zhihu.com/p/259760974">IMR, TBR, TBDR 还有GPU架构方面的一些理解</a></p><p><a href="https://www.cnblogs.com/timlly/p/11471507.html">深入GPU硬件架构及运行机制</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;知识总结&lt;/h1&gt;
&lt;h2 id=&quot;1-AI&quot;&gt;1. AI&lt;/h2&gt;
&lt;h3 id=&quot;寻路&quot;&gt;寻路&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/54510444&quot;&gt;路径规划之 A* 算法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="知识总结" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="知识总结" scheme="https://www.bearchild.top/tags/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>[UNITY]知识总结</title>
    <link href="https://www.bearchild.top/2022/01/01/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/[UNITY]%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>https://www.bearchild.top/2022/01/01/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/[UNITY]%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-31T16:00:00.000Z</published>
    <updated>2024-04-14T10:03:18.416Z</updated>
    
    <content type="html"><![CDATA[<h1>知识总结</h1><h2 id="1-AI">1. AI</h2><h2 id="2-动画">2. 动画</h2><h3 id="动画基础">动画基础</h3><p><a href="https://zhuanlan.zhihu.com/p/105029905">学习笔记 — Unity动画系统</a></p><h3 id="Procedural-Animation">Procedural Animation</h3><p><a href="https://zhuanlan.zhihu.com/p/135877690">Unity里的Procedural Animation</a></p><h3 id="解决方案">解决方案</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzU5MjQ1NTEwOA==&amp;mid=2247493316&amp;idx=1&amp;sn=7e4fef834a8066faca3d2f1f1a090bb4&amp;chksm=fe1dd26fc96a5b79856840f556cf65026facb83520ac1891605e42d5e777d30a0d5219060e21&amp;mpshare=1&amp;scene=1&amp;srcid=0606YJLYnfprk9UjpPQCnre1#rd">Playable API：定制你的动画系统</a></p><p><a href="https://kybernetik.com.au/animancer/">Animancer</a></p><h2 id="3-Gameplay">3. Gameplay</h2><h3 id="架构">架构</h3><p><a href="https://www.drflower.top/posts/4981aa9/">GameFramework 解析</a></p><p><a href="https://zhuanlan.zhihu.com/p/186970833">Unity DOTS：目录</a></p><h3 id="协程">协程</h3><p><a href="https://www.bearchild.top/2021/09/24/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/Gameplay/%5BUnity%5DUnity%E4%B8%AD%E7%9A%84%E5%8D%8F%E7%A8%8B/">Unity 中的协程</a></p><h3 id="地形">地形</h3><p><a href="https://zhuanlan.zhihu.com/p/388844386">大世界GPU Driven地形入门</a></p><h2 id="4-工具流">4. 工具流</h2><h3 id="反编译">反编译</h3><p><a href="https://github.com/dnSpy/">dnSpy</a></p><h3 id="编辑器">编辑器</h3><p><a href="https://www.lfzxb.top/odin-usualuse/">Odin常用功能整理</a></p><h3 id="技能编辑器">技能编辑器</h3><p><a href="https://zhuanlan.zhihu.com/p/158430393">技能编辑器的设计实现</a></p><h2 id="5-UI">5. UI</h2><h2 id="6-网络">6. 网络</h2><p><a href="https://zhuanlan.zhihu.com/p/83010584?utm_source=qq&amp;utm_medium=social&amp;utm_oi=792136550879227904">多人网络游戏同步探究</a></p><h2 id="7-物理">7. 物理</h2><h2 id="8-渲染">8. 渲染</h2><h3 id="渲染基础">渲染基础</h3><p><a href="https://www.zhihu.com/pub/book/119585555">Unity Shader 入门精要</a></p><h3 id="卡通渲染">卡通渲染</h3><p><a href="https://zhuanlan.zhihu.com/p/109101851">从零开始的卡通渲染</a></p><h2 id="9-性能优化">9. 性能优化</h2><h3 id="内存">内存</h3><p><a href="https://zhuanlan.zhihu.com/p/381859536">【笔记】Unity内存分配和回收的底层原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/370467923">Unity游戏内存分布概览</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;知识总结&lt;/h1&gt;
&lt;h2 id=&quot;1-AI&quot;&gt;1. AI&lt;/h2&gt;
&lt;h2 id=&quot;2-动画&quot;&gt;2. 动画&lt;/h2&gt;
&lt;h3 id=&quot;动画基础&quot;&gt;动画基础&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/105029905&quot;&gt;</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="知识总结" scheme="https://www.bearchild.top/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="知识总结" scheme="https://www.bearchild.top/tags/%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    
    <category term="Unity" scheme="https://www.bearchild.top/tags/Unity/"/>
    
  </entry>
  
</feed>
