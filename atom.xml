<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BearChild&#39;s Blog</title>
  
  
  <link href="https://www.bearchild.top/atom.xml" rel="self"/>
  
  <link href="https://www.bearchild.top/"/>
  <updated>2021-06-12T19:27:41.078Z</updated>
  <id>https://www.bearchild.top/</id>
  
  <author>
    <name>BearChild</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跳表的介绍与实现</title>
    <link href="https://www.bearchild.top/2021/06/13/%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/%E8%B7%B3%E8%A1%A8%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>https://www.bearchild.top/2021/06/13/%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/%E8%B7%B3%E8%A1%A8%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-06-12T16:00:00.000Z</published>
    <updated>2021-06-12T19:27:41.078Z</updated>
    
    <content type="html"><![CDATA[<h1>跳表的介绍与实现</h1><h2 id="背景">背景</h2><p>我们现在要实现一种数据结构，可以实现较为快速的 插入、删除、查询 操作。</p><p>显然每次暴力 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 操作并不可取，我们第一眼就想到了比如 红黑树、Splay、Treap 这样的 <strong>平衡树</strong> 结构来实现。</p><p>最近我发现一种数据结构 —— <strong>跳表</strong>，它基于链表建立多层索引来实现快速操作。</p><p>原本我以为这玩意儿形同鸡肋，但是了解到其在 <strong>Redis、LevelDB、ES</strong> 中都有应用，了解过后，发现其确实有可取之处。</p><h2 id="介绍">介绍</h2><p>首先对于一段序列，我们可以用链表的形式储存，如果不进行任何其它设计，那么我们进行 插入、删除、查询  的操作，复杂度显然是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 的，因为我们基本需要遍历每一个节点。</p><p>现在我们引用多个 <strong>索引链表</strong> 来优化这个链表。</p><p>对于一个链表，我们这样构建它：</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210613003928.png" alt="image-20210613003910137"></p><p>原本的链表是：<strong>1→2→3→4→5</strong>，我们现在将其中的 <em><strong>某几个（后面会介绍如何确定）</strong></em> 节点，放到上一层链表中（即上一层索引中），构建出了一个新链表： <strong>1→3→5</strong>，对于 <strong>1→3→5</strong> ，我们再将其中某几个节点继续放到上一层中，构建出 <strong>3→5</strong>。</p><p>对于这样一个结构，我们就可以快速地实现一些操作。</p><p>比如我们现在要查询 <strong>4</strong> 是否存在：</p><ol><li>在最高层索引中（即第二层索引）中，找到 该层中最后一个比 <strong>4</strong> 小的值，这里也就是 <strong>3</strong> ；</li><li>进入 <strong>3</strong> 的低一层索引（即第一层索引）的位置，发现这一层 <strong>3</strong> 后面的值还是 <strong>5</strong>，那么 <strong>3</strong> 依然是 该层最后一个比 <strong>4</strong> 小的元素；</li><li>我们依然从 <strong>3</strong> 进入低一层索引（即原链表），发现 <strong>3</strong> 后面的值是 <strong>4</strong>，那么 <strong>4</strong> 就存在；假设这里后面依然是 <strong>5</strong>，那比 <strong>4</strong> 大，并且我们当前已经在最底层的链表了，也就是说不存在 <strong>4</strong>。</li></ol><h2 id="时间复杂度">时间复杂度</h2><p>我们考虑一下需要遍历的节点，显然是上一层的某些节点，加上下一层往后的节点（红色为走的节点）：</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210613031112.png" alt="image-20210613021317589"></p><p>我们现在有 <strong>一种直观的策略：</strong> 假设，一层的个数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">n</span></span></span></span>，每距离 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span> 个节点将其放到上一层中，对于每一层如此操作，显然这样对于每一次操作可以做到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\sqrt{n})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 的复杂度。</p><p>事实上，我们可以用一种更优秀的策略确定 <em><strong>某几个</strong></em> 放到上一层，到底是哪些节点该往上放。</p><p><strong>新的策略</strong> ： 对于一层的节点，我们以一个 <strong>随机的概率 P</strong> 来决定是否将它往上一层放，当前 <strong>Redis</strong> 中将 <strong>P</strong> 设置为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.25</mn></mrow><annotation encoding="application/x-tex">0.25</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0.25</span></span></span></span>。可以证明这样进行一次操作的复杂度是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(log_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 左右的，确实比较优秀。</p><p>为了防止某些情况以及方便实现，我们在一开始就确定这个跳表的最高层数 <strong>MAXLEVEL</strong>，当前 <strong>Redis</strong> 中的最高层数为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>64</mn></mrow><annotation encoding="application/x-tex">64</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">64</span></span></span></span>。</p><h2 id="实现">实现</h2><p>对于这个 <strong>跳表</strong> 我们要怎么实现呢，我们可以稍微改一下上面的图，来更加直观的理解：</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210613031115.png" alt="image-20210613012035980"></p><p>对于每一个节点，我们分别记录：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span>  、 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>o</mi><mi>r</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">forward[]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mclose">]</span></span></span></span> ，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 表示这个节点的值， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>o</mi><mi>r</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">forward[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span> 表示这个节点在第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 层（记原链表为第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span> 层）的后序节点。</p><p>当然，对于一开始我们需要一个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mi>e</mi><mi>a</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">head</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span></span></span></span> 节点，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mi>e</mi><mi>a</mi><mi>d</mi><mo>→</mo><mi>f</mi><mi>o</mi><mi>r</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">head→forward[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span> 用于表示第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 层的开始节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> key;</span><br><span class="line">vector &lt;Node *&gt; forward;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个所在最高层为 level 的节点</span></span><br><span class="line"><span class="built_in">Node</span>(<span class="keyword">int</span> key, <span class="keyword">int</span> level)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;key = key;</span><br><span class="line"><span class="keyword">this</span>-&gt;forward = vector&lt;Node *&gt;(level + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有了这些信息，我们就可以进行最基础的操作了。</p><h3 id="查找">查找</h3><p>我们考虑查找一个值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 的节点。</p><p>从最高层级开始走，每次找到当前层最后一个值比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 小的节点，然后从这个节点的位置进入下一层。</p><p>如此走完一遍后，找到的节点一定是比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 小且最接近的。</p><p>如果这个点所在层不是原链表，我们从该节点往下跳到原链表的 这个节点所在的位置。那么当前位置的 后一个节点 的值才有可能是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span>。当然，也有可能比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 大，或者不存在后面的节点，这时候链表中就不存在值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 的节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Search</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *cur = head;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从最高层级开始走，找到当前层最后一个比 key 值小的节点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = level; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (cur-&gt;forward[i] != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;forward[i]-&gt;key &lt; key)</span><br><span class="line">cur = cur-&gt;forward[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转到原链表，然后往后一个位置</span></span><br><span class="line">cur = cur-&gt;forward[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> cur != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;key == key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入">插入</h3><p>我们考虑插入一个值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 的节点。</p><p>显然，我们首先需要判断一下是否已经存在值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 的节点。</p><p>于是我们从最上层开始走，每次找到当前层最后一个值比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 小的节点，然后从这个节点的位置进入下一层。在这个过程中，我们对于第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 层记录下这个节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">record[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">recor</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>，方便后面的更新。</p><p>然后我们和 <strong>查找</strong> 操作一样，判断是否 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 已存在。如果存在则直接返回（或者进行你想要的操作，比如记录下出现 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 了几次，自己修改即可），如果不存在我们进行之后的插入。</p><p>我们按照之前的策略，为这个节点按生成一个随机的最高层数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>L</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">rLevel</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">L</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>。</p><p>对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mi>r</mi><mi>L</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">i\in[0,rLevel]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">L</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">]</span></span></span></span> 层的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">record[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">recor</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>，显然我们现在要将它的后一个节点，设置成我们现在的节点。然后将现在节点的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>o</mi><mi>r</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">forward[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span> 设为原本 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">record[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">recor</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span> 的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>o</mi><mi>r</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">forward[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>。</p><p>需要特别注意的是，如果 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>跳表当前的</mtext><mi>l</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi><mo>&lt;</mo><mi>r</mi><mi>L</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">跳表当前的level &lt; rLevel</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord cjk_fallback">跳表当前的</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">L</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span> ，我们需要将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>∈</mo><mo stretchy="false">(</mo><mi>l</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi><mo separator="true">,</mo><mi>r</mi><mi>L</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">i\in(level,rLevel]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">L</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mclose">]</span></span></span></span> 的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mi>e</mi><mi>a</mi><mi>d</mi><mo>→</mo><mi>f</mi><mi>o</mi><mi>r</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">head→forward[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span> 设为该节点，最后更新一下 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">level</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> record = vector&lt;Node *&gt;(MAXLEVEL + <span class="number">1</span>);</span><br><span class="line">Node *cur = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = level; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (cur-&gt;forward[i] != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;forward[i]-&gt;key &lt; key)</span><br><span class="line">cur = cur-&gt;forward[i];</span><br><span class="line">record[i] = cur;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur-&gt;forward[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 节点已存在则直接返回</span></span><br><span class="line"><span class="keyword">if</span> (cur != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;key == key) <span class="keyword">return</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的节点 n 进行更新</span></span><br><span class="line"><span class="keyword">int</span> rLevel = <span class="built_in">RandomLevel</span>();</span><br><span class="line">Node *n = <span class="keyword">new</span> <span class="built_in">Node</span>(key, rLevel);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= rLevel; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt;= level)</span><br><span class="line">&#123;</span><br><span class="line">n-&gt;forward[i] = record[i]-&gt;forward[i];</span><br><span class="line">record[i]-&gt;forward[i] = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> head-&gt;forward[i] = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">level = <span class="built_in">max</span>(level, rLevel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除">删除</h3><p>我们考虑删除一个值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 的节点。</p><p>我们从最上层开始走，每次找到当前层最后一个值比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 小的节点，然后从这个节点的位置进入下一层。在这个过程中，我们对于第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span> 层记录下这个节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">record[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">recor</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>，方便后面的更新。</p><p>然后我们跳转到原链表，判断一下是否存在值为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>y</mi></mrow><annotation encoding="application/x-tex">key</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">ey</span></span></span></span> 的节点，若存在我们假设它为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">cur</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>。</p><p>我们从原链表开始一层一层往上走，进行删除。显然我们对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>→</mo><mi>f</mi><mi>o</mi><mi>r</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">record[i]→forward[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">recor</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">cur</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 的节点，我们直接将 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>→</mo><mi>f</mi><mi>o</mi><mi>r</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">record[i]→forward[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">recor</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span> 设置为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi><mo>→</mo><mi>f</mi><mi>o</mi><mi>r</mi><mi>w</mi><mi>a</mi><mi>r</mi><mi>d</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">cur→forward[i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">d</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>；如果不是，则说明 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">cur</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 并没有被上放到该层，可以停止操作。</p><p>然后释放 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>u</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">cur</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 的资源。可能我们的删除会导致跳表 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">level</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span> 的改变，更新一下 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>e</mi><mi>v</mi><mi>e</mi><mi>l</mi></mrow><annotation encoding="application/x-tex">level</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> record = vector&lt;Node *&gt;(MAXLEVEL + <span class="number">1</span>);</span><br><span class="line">Node *cur = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = level; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (cur-&gt;forward[i] != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;forward[i]-&gt;key &lt; key)</span><br><span class="line">cur = cur-&gt;forward[i];</span><br><span class="line">record[i] = cur;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur-&gt;forward[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 节点不存在 或 值不为 key 则直接返回</span></span><br><span class="line"><span class="keyword">if</span> (cur == <span class="literal">nullptr</span> || cur-&gt;key != key) <span class="keyword">return</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= level; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (record[i]-&gt;forward[i]-&gt;key != key) <span class="keyword">break</span>;</span><br><span class="line">record[i]-&gt;forward[i] = cur-&gt;forward[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in"><span class="keyword">delete</span></span>(cur);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新 level</span></span><br><span class="line"><span class="keyword">while</span> (head-&gt;forward[level] == <span class="literal">nullptr</span> &amp;&amp; level &gt; <span class="number">0</span>)</span><br><span class="line">level--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码">完整代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> key;</span><br><span class="line">vector &lt;Node *&gt; forward;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个所在最高层为 level 的节点</span></span><br><span class="line"><span class="built_in">Node</span>(<span class="keyword">int</span> key, <span class="keyword">int</span> level)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;key = key;</span><br><span class="line"><span class="keyword">this</span>-&gt;forward = vector&lt;Node *&gt;(level + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkipList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Node *head;</span><br><span class="line"><span class="keyword">int</span> MAXLEVEL = <span class="number">64</span>;</span><br><span class="line"><span class="keyword">float</span> P = <span class="number">0.25</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳表当前的层数</span></span><br><span class="line"><span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">SkipList</span>(<span class="keyword">int</span> MAXLEVEL, <span class="keyword">float</span> P)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;MAXLEVEL = MAXLEVEL;</span><br><span class="line"><span class="keyword">this</span>-&gt;P = P;</span><br><span class="line">head = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">-1</span>, MAXLEVEL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机生成一个节点最高的层数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RandomLevel</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> rLevel = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((<span class="keyword">float</span>)<span class="built_in">rand</span>() / RAND_MAX &lt; P &amp;&amp; rLevel &lt; MAXLEVEL)</span><br><span class="line">rLevel++;</span><br><span class="line"><span class="keyword">return</span> rLevel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Search</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node *cur = head;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从最高层级开始走，找到当前层最后一个比 key 值小的节点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = level; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (cur-&gt;forward[i] != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;forward[i]-&gt;key &lt; key)</span><br><span class="line">cur = cur-&gt;forward[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转到原链表，然后往后一个位置</span></span><br><span class="line">cur = cur-&gt;forward[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">return</span> cur != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;key == key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> record = vector&lt;Node *&gt;(MAXLEVEL + <span class="number">1</span>);</span><br><span class="line">Node *cur = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = level; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (cur-&gt;forward[i] != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;forward[i]-&gt;key &lt; key)</span><br><span class="line">cur = cur-&gt;forward[i];</span><br><span class="line">record[i] = cur;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur-&gt;forward[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 节点已存在则直接返回</span></span><br><span class="line"><span class="keyword">if</span> (cur != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;key == key) <span class="keyword">return</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的节点 n 进行更新</span></span><br><span class="line"><span class="keyword">int</span> rLevel = <span class="built_in">RandomLevel</span>();</span><br><span class="line">Node *n = <span class="keyword">new</span> <span class="built_in">Node</span>(key, rLevel);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= rLevel; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt;= level)</span><br><span class="line">&#123;</span><br><span class="line">n-&gt;forward[i] = record[i]-&gt;forward[i];</span><br><span class="line">record[i]-&gt;forward[i] = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> head-&gt;forward[i] = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">level = <span class="built_in">max</span>(level, rLevel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> record = vector&lt;Node *&gt;(MAXLEVEL + <span class="number">1</span>);</span><br><span class="line">Node *cur = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = level; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (cur-&gt;forward[i] != <span class="literal">nullptr</span> &amp;&amp; cur-&gt;forward[i]-&gt;key &lt; key)</span><br><span class="line">cur = cur-&gt;forward[i];</span><br><span class="line">record[i] = cur;</span><br><span class="line">&#125;</span><br><span class="line">cur = cur-&gt;forward[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 节点不存在 或 值不为 key 则直接返回</span></span><br><span class="line"><span class="keyword">if</span> (cur == <span class="literal">nullptr</span> || cur-&gt;key != key) <span class="keyword">return</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= level; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (record[i]-&gt;forward[i]-&gt;key != key) <span class="keyword">break</span>;</span><br><span class="line">record[i]-&gt;forward[i] = cur-&gt;forward[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in"><span class="keyword">delete</span></span>(cur);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新 level</span></span><br><span class="line"><span class="keyword">while</span> (head-&gt;forward[level] == <span class="literal">nullptr</span> &amp;&amp; level &gt; <span class="number">0</span>)</span><br><span class="line">level--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- SkipList:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = level; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">Node *cur = head-&gt;forward[i];</span><br><span class="line"><span class="keyword">while</span> (cur != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, cur-&gt;key);</span><br><span class="line">cur = cur-&gt;forward[i];</span><br><span class="line"><span class="built_in">printf</span>(cur != <span class="literal">nullptr</span> ? <span class="string">&quot; → &quot;</span> : <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- End\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">SkipList *skipList = <span class="keyword">new</span> <span class="built_in">SkipList</span>(<span class="number">10</span>, <span class="number">0.5</span>);</span><br><span class="line"></span><br><span class="line">skipList-&gt;<span class="built_in">Insert</span>(<span class="number">1</span>);</span><br><span class="line">skipList-&gt;<span class="built_in">Insert</span>(<span class="number">2</span>);</span><br><span class="line">skipList-&gt;<span class="built_in">Insert</span>(<span class="number">3</span>);</span><br><span class="line">skipList-&gt;<span class="built_in">Insert</span>(<span class="number">4</span>);</span><br><span class="line">skipList-&gt;<span class="built_in">Insert</span>(<span class="number">5</span>);</span><br><span class="line">skipList-&gt;<span class="built_in">Insert</span>(<span class="number">6</span>);</span><br><span class="line">skipList-&gt;<span class="built_in">Insert</span>(<span class="number">7</span>);</span><br><span class="line">skipList-&gt;<span class="built_in">Insert</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">skipList-&gt;<span class="built_in">Show</span>();</span><br><span class="line"></span><br><span class="line">skipList-&gt;<span class="built_in">Delete</span>(<span class="number">2</span>);</span><br><span class="line">skipList-&gt;<span class="built_in">Delete</span>(<span class="number">4</span>);</span><br><span class="line">skipList-&gt;<span class="built_in">Delete</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">skipList-&gt;<span class="built_in">Show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;跳表的介绍与实现&lt;/h1&gt;
&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;
&lt;p&gt;我们现在要实现一种数据结构，可以实现较为快速的 插入、删除、查询 操作。&lt;/p&gt;
&lt;p&gt;显然每次暴力 &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="算法详解" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    
    
    <category term="算法详解" scheme="https://www.bearchild.top/tags/%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    
    <category term="跳表" scheme="https://www.bearchild.top/tags/%E8%B7%B3%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Github+Hexo建站记录</title>
    <link href="https://www.bearchild.top/2021/05/28/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/Github+Hexo%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/"/>
    <id>https://www.bearchild.top/2021/05/28/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/Github+Hexo%E5%BB%BA%E7%AB%99%E8%AE%B0%E5%BD%95/</id>
    <published>2021-05-27T16:00:00.000Z</published>
    <updated>2021-06-13T02:39:15.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo-建站">Hexo 建站</h2><p><a href="https://blog.csdn.net/qq_42579187/article/details/104760516">https://blog.csdn.net/qq_42579187/article/details/104760516</a></p><p><a href="https://www.jianshu.com/p/189fd945f38f">https://www.jianshu.com/p/189fd945f38f</a></p><h2 id="换电脑重新部署">换电脑重新部署</h2><p><a href="https://www.jianshu.com/p/906294181814">https://www.jianshu.com/p/906294181814</a></p><h2 id="主题">主题</h2><p><a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a></p><p>文档：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><p><a href="https://www.cnblogs.com/ldu-xingjiahui/p/12594024.html">https://www.cnblogs.com/ldu-xingjiahui/p/12594024.html</a></p><h2 id="使用-Butterfly-主题无法显示">使用 Butterfly 主题无法显示</h2><p>错误显示：</p><blockquote><p>extends includes/layout.pug block content #recent-posts.recent-posts include includes/recent-posts.pug include includes/pagination.pug</p></blockquote><p>需要在hexo目录下输入命令：</p><blockquote><p>npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</p></blockquote><h1>DEBUG注意事项</h1><p>记得清理缓存，F12 → Network → Disable cache</p><h2 id="修改文字">修改文字</h2><p>在 default.yml 中修改标签文字等</p><h2 id="页面美化">页面美化</h2><p><a href="https://www.antmoe.com/posts/a811d614/">https://www.antmoe.com/posts/a811d614/</a></p><p><a href="https://blog.csdn.net/u012208219/article/details/106883001/">https://blog.csdn.net/u012208219/article/details/106883001/</a></p><h2 id="侧边栏添加访客地图">侧边栏添加访客地图</h2><p><a href="https://blog.csdn.net/cungudafa/article/details/105925710">https://blog.csdn.net/cungudafa/article/details/105925710</a></p><p>使用时候修改主题的  _config.yml</p><blockquote><p>番剧: /bangumis/ || fab fa-youtube</p></blockquote><h2 id="B站追番列表">B站追番列表</h2><p><a href="https://imszz.com/p/8422e92e/">https://imszz.com/p/8422e92e/</a></p><h2 id="评论系统">评论系统</h2><p><a href="https://blog.zhheo.com/p/2e6bbbd0.html">https://blog.zhheo.com/p/2e6bbbd0.html</a></p><h2 id="百度-谷歌-SEO">百度/谷歌 SEO</h2><p><a href="https://blog.csdn.net/qq_32623363/article/details/100532463">https://blog.csdn.net/qq_32623363/article/details/100532463</a></p><h2 id="标签云">标签云</h2><p><a href="https://blog.csdn.net/SmalOSnail/article/details/105258820">https://blog.csdn.net/SmalOSnail/article/details/105258820</a></p><h2 id="Markdown-笔记">Markdown 笔记</h2><p>使用 PicGo+腾讯云COS：<a href="https://www.pianshen.com/article/19421261808/">https://www.pianshen.com/article/19421261808/</a></p><p>Typora上传失败：<a href="https://blog.csdn.net/qq754772661/article/details/111385955">https://blog.csdn.net/qq754772661/article/details/111385955</a></p><p>从网络上上传图片，应该先保存到本地。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Hexo-建站&quot;&gt;Hexo 建站&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_42579187/article/details/104760516&quot;&gt;https://blog.csdn.net/qq_42579187/art</summary>
      
    
    
    
    <category term="网站开发" scheme="https://www.bearchild.top/categories/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="网站开发" scheme="https://www.bearchild.top/tags/%E7%BD%91%E7%AB%99%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>[Astar搜索]牛跑步</title>
    <link href="https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[Astar%E6%90%9C%E7%B4%A2]%E7%89%9B%E8%B7%91%E6%AD%A5/"/>
    <id>https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[Astar%E6%90%9C%E7%B4%A2]%E7%89%9B%E8%B7%91%E6%AD%A5/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-05-27T16:43:48.786Z</updated>
    
    <content type="html"><![CDATA[<h1>牛跑步</h1><p>Time Limit: 10 Sec Memory Limit: 162 MB</p><h2 id="Description">Description</h2><p>BESSIE准备用从牛棚跑到池塘的方法来锻炼.<br>　　但是因为她懒,她只准备沿着下坡的路跑到池塘, 然后走回牛棚.<br>　　BESSIE也不想跑得太远,所以她想走最短的路经.<br>　　农场上一共有M 条路, 每条路连接两个用1…N标号的地点.<br>　　更方便的是,如果X&gt;Y,则地点X的高度大于地点Y的高度.<br>　　地点N是BESSIE的牛棚;地点1是池塘.<br>　　很快, BESSIE厌倦了一直走同一条路.所以她想走不同的路,更明确地讲,她想找出K条不同的路经.为了避免过度劳累,她想使这K条路经为最短的K条路经.<br>　　请帮助BESSIE找出这K条最短路经的长度.<br>　　你的程序需要读入农场的地图,一些从X_i到Y_i 的路经和它们的长度(X_i, Y_i, D_i).</p><h2 id="Input">Input</h2><p>第1行: 3个数: N, M, 和K<br>　　第 2…M+1行: 第 i+1 行包含3个数 X_i, Y_i, 和 D_i, 表示一条下坡的路.</p><h2 id="Output">Output</h2><p>第1…K行: 第i行包含第i最短路经的长度,或-1如果这样的路经不存在.如果多条路经有同样的长度,请注意将这些长度逐一列出.</p><h2 id="Sample-Input">Sample Input</h2><p>5 8 7<br>　5 4 1<br>　5 3 1<br>　5 2 1<br>　5 1 1<br>　4 3 4<br>　3 1 1<br>　3 2 1<br>　2 1 1</p><h2 id="Sample-Output">Sample Output</h2><p>1<br>　2<br>　2<br>　3<br>　6<br>　7<br>　-1</p><h2 id="HINT">HINT</h2><p>1 &lt;= M &lt;= 10,000, 1 &lt;= N &lt;= 1000, 1 &lt;= K &lt;= 100</p><h2 id="Main-idea">Main idea</h2><p>给定一张图，输出1~k短路的距离。</p><h2 id="Solution">Solution</h2><p>既然是求k短路，那我们使用A<em>搜索，先反向建图，记录<strong>终点到每一个点的最短路</strong>，然后把这个dist当做<strong>估价</strong>来跑A</em>即可。可以证明：<strong>第k次搜到的路即是k短路</strong>。</p><h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="keyword">int</span> dist[ONE],vis[ONE],Output[ONE],tou,wei;</span><br><span class="line"><span class="keyword">int</span> next[ONE],first[ONE],go[ONE],w[ONE],tot;</span><br><span class="line"><span class="keyword">int</span> Ans[ONE],num;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,real,eva;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> power &amp;a) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.real + a.eva &lt; real + eva;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;  w[tot]=z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q[<span class="number">10000001</span>];</span><br><span class="line">    <span class="built_in">memset</span>(dist,<span class="number">63</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(dist));</span><br><span class="line">    tou = <span class="number">0</span>; wei = <span class="number">1</span>;</span><br><span class="line">    vis[x] = <span class="number">1</span>; dist[x] = <span class="number">0</span>; q[<span class="number">1</span>] = x;</span><br><span class="line">    <span class="keyword">while</span>(tou &lt; wei)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q[++tou];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = go[e];</span><br><span class="line">            <span class="keyword">if</span>(dist[v] &gt; dist[u] + w[e])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v] = dist[u] + w[e];</span><br><span class="line">                <span class="keyword">if</span>(!vis[v]) vis[v] = <span class="number">1</span>, q[++wei] = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Astar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue &lt;power&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>( (power)&#123;S, <span class="number">0</span>, dist[S]&#125; );</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        power u = q.<span class="built_in">top</span>();  q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(u.x == T) Ans[++num] = u.real;</span><br><span class="line">        <span class="keyword">if</span>(++Output[u.x] &gt; k) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(Output[T] == k) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u.x]; e; e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            q.<span class="built_in">push</span>( (power)&#123;v, u.real+w[e], dist[v]&#125; );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();    k=<span class="built_in">get</span>();</span><br><span class="line">    S=n,    T=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i].x=<span class="built_in">get</span>();   a[i].y=<span class="built_in">get</span>();   a[i].z=<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Add</span>(a[i].y, a[i].x, a[i].z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">SPFA</span>(T);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(first,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(first));  tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">Add</span>(a[i].x,a[i].y,a[i].z);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Astar</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Ans[i]!=<span class="number">0</span>?Ans[i]:<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;牛跑步&lt;/h1&gt;
&lt;p&gt;Time Limit: 10 Sec Memory Limit: 162 MB&lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;BESSIE准备用从牛棚跑到池塘的方法来锻炼.&lt;br&gt;
　　但是因为她懒,她只</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="其它" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/%E5%85%B6%E5%AE%83/"/>
    
    
    <category term="Astar搜索" scheme="https://www.bearchild.top/tags/Astar%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>[Astar搜索]骑士精神</title>
    <link href="https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[Astar%E6%90%9C%E7%B4%A2]%E9%AA%91%E5%A3%AB%E7%B2%BE%E7%A5%9E/"/>
    <id>https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[Astar%E6%90%9C%E7%B4%A2]%E9%AA%91%E5%A3%AB%E7%B2%BE%E7%A5%9E/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-05-27T16:43:27.748Z</updated>
    
    <content type="html"><![CDATA[<h1>骑士精神</h1><p>Time Limit: 10 Sec Memory Limit: 162 MB</p><h2 id="Description">Description</h2><p>在一个5×5的棋盘上有12个白色的骑士和12个黑色的骑士， 且有一个空位。<br>　　在任何时候一个骑士都能按照骑士的走法（它可以走到和它横坐标相差为1，纵坐标相差为2或者横坐标相差为2，纵坐标相差为1的格子）移动到空位上。<br>　　给定一个初始的棋盘，怎样才能经过移动变成如下目标棋盘： 为了体现出骑士精神，他们必须以最少的步数完成任务。</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528003946.png" alt="img"></p><h2 id="Input">Input</h2><p>第一行有一个正整数T(T&lt;=10)，表示一共有N组数据。接下来有T个5×5的矩阵，0表示白色骑士，1表示黑色骑士，*表示空位。两组数据之间没有空行。</p><h2 id="Output">Output</h2><p>对于每组数据都输出一行。如果能在15步以内（包括15步）到达目标状态，则输出步数，否则输出－1。</p><h2 id="Sample-Input">Sample Input</h2><p>2<br>　10110<br>　01*11<br>　10111<br>　01001<br>　00000</p><p>01011<br>　110*1<br>　01110<br>　01010<br>　00100</p><h2 id="Sample-Output">Sample Output</h2><p>7<br>　-1</p><h2 id="HINT">HINT</h2><p>Ans&lt;=15</p><h2 id="Solution">Solution</h2><p>看到这题，我们没有什么思路，只能运用搜索，然后把<strong>错位的个数</strong>当做估价，跑一遍A*就可以了。</p><h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">8</span>][<span class="number">8</span>],Step,Vx,Vy;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">bool</span> PD;</span><br><span class="line"><span class="keyword">int</span> dx[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[]=&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> Goal[<span class="number">6</span>][<span class="number">6</span>]=</span><br><span class="line">&#123;</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>; </span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>) </span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Evaluation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(a[i][j] != Goal[i][j])</span><br><span class="line">                res++;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> T,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(PD) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(T == Step)</span><br><span class="line">    &#123;</span><br><span class="line">        PD = !<span class="built_in">Evaluation</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> Nx = x+dx[i], Ny = y+dy[i];</span><br><span class="line">        <span class="keyword">if</span>(!(<span class="number">1</span>&lt;=Nx &amp;&amp; Nx&lt;=<span class="number">5</span> &amp;&amp; <span class="number">1</span>&lt;=Ny &amp;&amp; Ny&lt;=<span class="number">5</span>)) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">swap</span>(a[x][y], a[Nx][Ny]);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Evaluation</span>() + T &lt;= Step) <span class="built_in">Dfs</span>(T+<span class="number">1</span>, Nx,Ny);</span><br><span class="line">        <span class="built_in">swap</span>(a[x][y], a[Nx][Ny]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ch[j] == <span class="string">&#x27;*&#x27;</span>) &#123;a[i][j] = <span class="number">2</span>, Vx=i,Vy=j;&#125;</span><br><span class="line">            <span class="keyword">else</span> a[i][j] = ch[j]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PD=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(Step=<span class="number">1</span>;Step&lt;=<span class="number">15</span>;Step++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Dfs</span>(<span class="number">0</span>,Vx,Vy);</span><br><span class="line">        <span class="keyword">if</span>(PD) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,PD==<span class="number">1</span> ? Step:<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">        <span class="built_in">Solve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;骑士精神&lt;/h1&gt;
&lt;p&gt;Time Limit: 10 Sec Memory Limit: 162 MB&lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;在一个5×5的棋盘上有12个白色的骑士和12个黑色的骑士， 且有一个空位。&lt;</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="其它" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/%E5%85%B6%E5%AE%83/"/>
    
    
    <category term="Astar搜索" scheme="https://www.bearchild.top/tags/Astar%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>[Astar搜索]魔法猪学院</title>
    <link href="https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[Astar%E6%90%9C%E7%B4%A2]%E9%AD%94%E6%B3%95%E7%8C%AA%E5%AD%A6%E9%99%A2/"/>
    <id>https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[Astar%E6%90%9C%E7%B4%A2]%E9%AD%94%E6%B3%95%E7%8C%AA%E5%AD%A6%E9%99%A2/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-05-27T16:43:59.814Z</updated>
    
    <content type="html"><![CDATA[<h1>魔法猪学院</h1><p>Time Limit: 10 Sec Memory Limit: 64 MB</p><h2 id="Description">Description</h2><p>iPig在假期来到了传说中的魔法猪学院，开始为期两个月的魔法猪训练。<br>　　经过了一周理论知识和一周基本魔法的学习之后，iPig对猪世界的世界本原有了很多的了解：众所周知，世界是由元素构成的；元素与元素之间可以互相转换；能量守恒……。<br>　　iPig 今天就在进行一个麻烦的测验。<br>　　iPig 在之前的学习中已经知道了很多种元素，并学会了可以转化这些元素的魔法，每种魔法需要消耗 iPig 一定的能量。<br>　　作为 PKU 的顶尖学猪，让 iPig 用最少的能量完成从一种元素转换到另一种元素……等等，iPig 的魔法导猪可没这么笨！<br>　　这一次，他给 iPig 带来了很多 1 号元素的样本，要求 iPig 使用学习过的魔法将它们一个个转化为 N 号元素，为了增加难度，要求每份样本的转换过程都不相同。<br>　　这个看似困难的任务实际上对 iPig 并没有挑战性，因为，他有坚实的后盾……现在的你呀！<br>　　注意，两个元素之间的转化可能有多种魔法，转化是单向的。<br>　　转化的过程中，可以转化到一个元素（包括开始元素）多次，但是一但转化到目标元素，则一份样本的转化过程结束。<br>　　iPig 的总能量是有限的，所以最多能够转换的样本数一定是一个有限数。具体请参看样例。</p><h2 id="Input">Input</h2><p>第一行三个数 N、M、E 表示iPig知道的元素个数（元素从 1 到 N 编号）、iPig已经学会的魔法个数和iPig的总能量。</p><p>后跟 M 行每行三个数 si、ti、ei 表示 iPig 知道一种魔法，消耗 ei 的能量将元素 si 变换到元素 ti 。</p><h2 id="Output">Output</h2><p>一行一个数，表示最多可以完成的方式数。输入数据保证至少可以完成一种方式。</p><h2 id="Sample-Input">Sample Input</h2><p>4 6 14.9<br>　1 2 1.5<br>　2 1 1.5<br>　1 3 3<br>　2 3 1.5<br>　3 4 1.5<br>　1 4 1.5</p><h2 id="Sample-Output">Sample Output</h2><p>3</p><h2 id="HINT">HINT</h2><p>占总分不小于 10% 的数据满足 N &lt;= 6，M&lt;=15。<br>　占总分不小于 20% 的数据满足 N &lt;= 100，M&lt;=300，E&lt;=100且E和所有的ei均为整数（可以直接作为整型数字读入）。<br>　所有数据满足 2 &lt;= N &lt;= 5000，1 &lt;= M &lt;= 200000，1&lt;=E&lt;=107，1&lt;=ei&lt;=E，E和所有的ei为实数。</p><h2 id="Main-idea">Main idea</h2><p>询问第一个满足1~k短路的和&gt;E的k。</p><h2 id="Solution">Solution</h2><p>求k短路，直接运用A*搜索即可，把T-&gt;每个点的最短路当做<strong>估价</strong>即可。</p><h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">205000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> POI = <span class="number">5500</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> INF = <span class="number">1e18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="keyword">double</span> dist[POI],w[ONE],E;</span><br><span class="line"><span class="keyword">bool</span> vis[POI];</span><br><span class="line"><span class="keyword">int</span> next[ONE],first[POI],go[ONE],tot;</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y; <span class="keyword">double</span> z;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x; <span class="keyword">double</span> real;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> power &amp;a) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.real + dist[a.x] &lt; real + dist[x];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">double</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;  w[tot]=z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SPFA</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    queue &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=S;i&lt;=T;i++) dist[i] = INF;</span><br><span class="line">    vis[x] = <span class="number">1</span>; dist[x] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = go[e];</span><br><span class="line">            <span class="keyword">if</span>(dist[v] &gt; dist[u] + w[e])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v] = dist[u] + w[e];</span><br><span class="line">                <span class="keyword">if</span>(!vis[v]) vis[v] = <span class="number">1</span>, q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Astar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue &lt;power&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>( (power)&#123;S, <span class="number">0</span>&#125; );</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        power u = q.<span class="built_in">top</span>();  q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(u.x == T) &#123;E -= u.real; <span class="keyword">if</span>(E &lt; <span class="number">0</span>) <span class="keyword">return</span>; Ans++;&#125;</span><br><span class="line">        <span class="keyword">if</span>(u.real + dist[u.x] &gt; E) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u.x]; e; e=next[e])</span><br><span class="line">            q.<span class="built_in">push</span>( (power)&#123;go[e], u.real+w[e]&#125; );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;E);</span><br><span class="line">        S=<span class="number">1</span>,    T=n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i].x=<span class="built_in">get</span>();   a[i].y=<span class="built_in">get</span>();   <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;a[i].z);</span><br><span class="line">            <span class="built_in">Add</span>(a[i].y, a[i].x, a[i].z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">SPFA</span>(T);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(first,<span class="number">0</span>,<span class="built_in"><span class="keyword">sizeof</span></span>(first));  tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="built_in">Add</span>(a[i].x,a[i].y,a[i].z);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Astar</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;魔法猪学院&lt;/h1&gt;
&lt;p&gt;Time Limit: 10 Sec Memory Limit: 64 MB&lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;iPig在假期来到了传说中的魔法猪学院，开始为期两个月的魔法猪训练。&lt;br&gt;</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="其它" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/%E5%85%B6%E5%AE%83/"/>
    
    
    <category term="Astar搜索" scheme="https://www.bearchild.top/tags/Astar%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>[CDQ分治]连通图</title>
    <link href="https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[CDQ%E5%88%86%E6%B2%BB]%E8%BF%9E%E9%80%9A%E5%9B%BE/"/>
    <id>https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[CDQ%E5%88%86%E6%B2%BB]%E8%BF%9E%E9%80%9A%E5%9B%BE/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-05-27T11:02:35.475Z</updated>
    
    <content type="html"><![CDATA[<h1>连通图</h1><p>Time Limit: 20 Sec Memory Limit: 512 MB</p><h2 id="Description">Description</h2><p>给定一个连通的无向图和若干个小集合,每个小集合包含一些边。对于每个集合，你需要确定将集合中的边从原来的无向图中删除后该图是否保持连通。<br>一个图是连通的当且仅当任意两个不同的点之间存在一条路径连接他们。</p><h2 id="Input">Input</h2><p>输入的第一行包含两个整数n和m(l≤n≤10000,1≤m≤100000)，表示无向图的点数和边数，每个点从1到n标号。</p><p>接下来的m行表示图的每条边，每行包含两个整数a和b——一条边连接的两个端点的标号。保证每对顶点最多被一条边连接。</p><p>没有一条边连接两个相同的顶点。</p><p>每条边按照输入的顺序标号为1到m。<br>接下来的一行包含一个整数k(1≤k≤100000)，表示需要测试的小集合的个数。</p><p>接下来的k行每行描述一个小集合。</p><p>每行的第一个数c(1≤c≤4)表示集合中边的个数,接下来有c个整数表示集合中边的标号,保证集合中的整数互不相同。</p><h2 id="Output">Output</h2><p>输出k行,每行对应一个小集合的测试结果。</p><p>第i行包含“Connected”（没有引号)，如果给定的图去掉对应的集合中的边仍然连通，否则应该包含一个“Disconnected”。</p><h2 id="Sample-Input">Sample Input</h2><p>4 5<br>　1 2<br>　2 3<br>　3 4<br>　4 1<br>　2 4<br>　3<br>　1 5<br>　2 2 3<br>　2 1 2</p><h2 id="Sample-Output">Sample Output</h2><p>Connected<br>　Disconnected<br>　Connected</p><h2 id="HINT">HINT</h2><p>N&lt;=100000 M&lt;=200000 K&lt;=100000</p><h2 id="Main-idea">Main idea</h2><p>给定一张无向联通图，询问删除掉若干条边后图是否联通，多次询问。</p><h2 id="Solution">Solution</h2><p>首先我们看到<strong>删边判联通</strong>，第一反应想到了LCT，由于图不是一棵树，无法用LCT实现，那么我们否决掉了动态维护的方法。<br>　　根据<strong>可以离线询问</strong>这一特征来思考如何操作，发现k(询问数)&lt;=100000，显然是log级别的做法，结合可离线的特征，这时候只剩下了对于所有询问一起进行操作的方法 ，现在我们得出了算法：CDQ分治。<br>　　发现直接删边操作较为困难，我们逆向思维，考虑<strong>如何在一个空的图上加边</strong>。<br>　　先考虑只有两个询问的情况，假定我们的询问删边集合为A,B，那么显然想到了<strong>先把不在A中并且不在B中边加入</strong>（这时称其为状态一），然后分开处理，<strong>先加入不在A中但是在B中的边</strong>，判下是否联通就<strong>得到了A中的答案</strong>，然后回到状态一，<strong>加入不在B中在A中的边</strong>，判断一下<strong>得到了B的答案</strong>。<br>　　然后基于这样的整个思路，我们考虑<strong>如何将两个集合拓展到多个集合</strong>。<br>　　立马想到了分治，对于所有集合分治使其类同于<strong>A,B两种“大集合”</strong>，然后继续分治，最后必然可以归于仅有两个小集合的情况，然后向上回溯即可。加边用并查集加入即可。<br>　　我们来整理一下CDQ分治的思路：<br>　　　　1、加入不在左区间但在右区间的边；<br>　　　　2、对于左区间继续分治；<br>　　　　3、回到上一层的状态（在分治的时候记录并查集中改变了的父子关系，暴力修改回去即可）<br>　　　　4、加入不在右区间但在左区间的边；<br>　　　　5、对于右区间继续分治；<br>　　　　……<br>　　最后判断是否联通的时候又发现一开始的整张图是处于连通状态的，所以我们只要<strong>判断删掉的边的端点是否连通</strong>即可。</p><h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">200005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,Bian;</span><br><span class="line"><span class="keyword">int</span> fat[ONE],cnt;</span><br><span class="line"><span class="keyword">int</span> PD[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;a[ONE*<span class="number">2</span>],q[ONE*<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="keyword">int</span> b[<span class="number">5</span>];</span><br><span class="line">&#125;quey[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x!=fat[x])</span><br><span class="line">    &#123;</span><br><span class="line">        q[++cnt].x=x;   q[cnt].y=fat[x];</span><br><span class="line">        fat[x]=<span class="built_in">Find</span>(fat[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fat[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Un</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f1=<span class="built_in">Find</span>(x);</span><br><span class="line">    <span class="keyword">int</span> f2=<span class="built_in">Find</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(f1!=f2)</span><br><span class="line">    &#123;</span><br><span class="line">        q[++cnt].x=f2;  q[cnt].y=fat[f2];</span><br><span class="line">        fat[f2]=f1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_pd</span><span class="params">(<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pd=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=quey[l].c;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> j=quey[l].b[i];</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Find</span>(a[j].x) != <span class="built_in">Find</span>(a[j].y))</span><br><span class="line">        &#123;</span><br><span class="line">            pd=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mark</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=quey[i].c;j++)</span><br><span class="line">            PD[quey[i].b[j]]=t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=quey[i].c;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> num=quey[i].b[j];</span><br><span class="line">            <span class="keyword">if</span>(PD[num]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">Un</span>(a[num].x,a[num].y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Back</span><span class="params">(<span class="keyword">int</span> Now_cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;cnt&gt;Now_cnt;cnt--)</span><br><span class="line">        fat[q[cnt].x]=q[cnt].y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CDQ</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        Ans[l]=<span class="built_in">Get_pd</span>(l);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> Now_cnt=cnt;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">Mark</span>(l,mid,<span class="number">1</span>); <span class="built_in">Add</span>(mid+<span class="number">1</span>,r); <span class="built_in">Mark</span>(l,mid,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">CDQ</span>(l,mid);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Back</span>(Now_cnt);</span><br><span class="line">    <span class="built_in">Mark</span>(mid+<span class="number">1</span>,r,<span class="number">1</span>); <span class="built_in">Add</span>(l,mid); <span class="built_in">Mark</span>(mid+<span class="number">1</span>,r,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">CDQ</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    Bian=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) fat[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Bian;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i].x=<span class="built_in">get</span>();   a[i].y=<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        quey[i].c=<span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=quey[i].c;j++)</span><br><span class="line">            quey[i].b[j]=<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Mark</span>(<span class="number">1</span>,m,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Bian;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(PD[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">Un</span>(a[i].x,a[i].y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Mark</span>(<span class="number">1</span>,m,<span class="number">0</span>); cnt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CDQ</span>(<span class="number">1</span>,m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Ans[i]) <span class="built_in">printf</span>(<span class="string">&quot;Connected&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Disconnected&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;连通图&lt;/h1&gt;
&lt;p&gt;Time Limit: 20 Sec Memory Limit: 512 MB&lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;给定一个连通的无向图和若干个小集合,每个小集合包含一些边。对于每个集合，你需要</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="分治" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB/"/>
    
    
    <category term="CDQ分治" scheme="https://www.bearchild.top/tags/CDQ%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>[CDQ分治]纸箱堆叠</title>
    <link href="https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[CDQ%E5%88%86%E6%B2%BB]%E7%BA%B8%E7%AE%B1%E5%A0%86%E5%8F%A0/"/>
    <id>https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[CDQ%E5%88%86%E6%B2%BB]%E7%BA%B8%E7%AE%B1%E5%A0%86%E5%8F%A0/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-05-27T10:38:17.801Z</updated>
    
    <content type="html"><![CDATA[<h1>纸箱堆叠</h1><p>Time Limit: 30 Sec Memory Limit: 256 MB</p><h2 id="Description">Description</h2><p>P 工厂是一个生产纸箱的工厂。<br>　　纸箱生产线在人工输入三个参数 n p a , 之后即可自动化生产三边边长为</p><p>(a mod P,a^2 mod p,a^3 mod P)<br>　　(a^4 mod p,a^5 mod p,a^6 mod P)<br>　　…<br>　　(a^(3n-2) mod p,a^(3n-1) mod p,a^(3n) mod p)</p><p>的n个纸箱。<br>　　在运输这些纸箱时，为了节约空间，必须将它们嵌套堆叠起来。<br>　　一个纸箱可以嵌套堆叠进另一个纸箱当且仅当它的最短边、次短边和最长边长度分别严格小于另一个纸箱的最短边、次短边和最长边长度。<br>　　你的任务是找出这n个纸箱中数量最多的一个子集，使得它们两两之间都可嵌套堆叠起来。</p><h2 id="Input">Input</h2><p>输入文件的第一行三个整数，分别代表 a,p,n</p><h2 id="Output">Output</h2><p>输出文件仅包含一个整数，代表数量最多的可嵌套堆叠起来的纸箱的个数。</p><h2 id="Sample-Input">Sample Input</h2><p>10 17 4</p><h2 id="Sample-Output">Sample Output</h2><p>2<br>【样例说明】<br>　生产出的纸箱的三边长为(10, 15, 14), (4, 6, 9) , (5, 16, 7), (2, 3, 13)。</p><p>其中只有(4, 6, 9)可堆叠进(5, 16, 7)，故答案为 2。</p><h2 id="HINT">HINT</h2><p>2&lt;=P&lt;=2000000000,  1&lt;=a&lt;=p-1, a^k mod p&lt;&gt;0, ap&lt;=2000000000, 1&lt;=N&lt;=50000</p><h2 id="Main-idea">Main idea</h2><p>每一个元素有三个属性a,b,c，求出最大可连续堆叠个数（可堆叠条件是a1&lt;a2,b1&lt;b2,c1&lt;c2）</p><h2 id="Solution">Solution</h2><p>题目显然是<strong>三维偏序</strong>问题，运用CDQ分治求解。</p><p>用排序处理a保证a有序，分治的时候满足左区间的b都小于右区间的b，再处理c，这样问题就转化为了求一个点在一个平面上横纵坐标都小于它的点有几个，用树状数组处理即可。</p><p>发现这样处理之后答案只能满足&lt;=该点，考虑如何令答案<strong>严格小于</strong>。</p><p>首先b，c的严格小于处理显然，因为a是sort保证的那么如何要使得a的统计严格小于呢？只需要在b的sort前将分割的指针向左移动到第一个不等于的即可，结合分治考虑一下<strong>while(q[mid].a==q[mid-1].a) mid–</strong>，发现这样处理最后会影响到排序，所以做右区间的时候重新按照a排序一下即可。</p><p>考虑如何统计答案，发现显然有： <strong>q[j].ans=max(q[j].ans,Query(q[j].c-1)+1)</strong>。</p><h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">1000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,MOD,a,m;</span><br><span class="line"><span class="keyword">int</span> PD[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"><span class="keyword">int</span> C[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans,cnt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b,c;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">&#125;q[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos,value;</span><br><span class="line">&#125;Lisa[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.a!=b.a) <span class="keyword">return</span> a.a&lt;b.a;</span><br><span class="line">    <span class="keyword">if</span>(a.b!=b.b) <span class="keyword">return</span> a.b&lt;b.b;</span><br><span class="line">    <span class="keyword">return</span> a.c&lt;b.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cdp</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.b!=b.b) <span class="keyword">return</span> a.b&lt;b.b;</span><br><span class="line">    <span class="keyword">return</span> a.c&lt;b.c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rule</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.a==b.a &amp;&amp; a.b==b.b &amp;&amp; a.c==b.c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> R,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=R;i&lt;=cnt;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">        C[i]=<span class="built_in">max</span>(C[i],x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=R;i&gt;=<span class="number">1</span>;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line">        res=<span class="built_in">max</span>(res,C[i]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Clear</span><span class="params">(<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=R;i&lt;=cnt;i+=<span class="built_in">lowbit</span>(i))</span><br><span class="line">        C[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clis</span><span class="params">(<span class="keyword">const</span> point &amp;a,<span class="keyword">const</span> point &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.value&lt;b.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetLisan</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(q+<span class="number">1</span>,q+n+<span class="number">1</span>,cmp);</span><br><span class="line">    n=<span class="built_in">unique</span>(q+<span class="number">1</span>,q+n+<span class="number">1</span>,rule)<span class="number">-1</span>-q;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Lisa[i].pos=i;</span><br><span class="line">        Lisa[i].value=q[i].c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(Lisa+<span class="number">1</span>,Lisa+n+<span class="number">1</span>,clis);</span><br><span class="line"></span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    Lisa[<span class="number">0</span>].value=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Lisa[i].value!=Lisa[i<span class="number">-1</span>].value) cnt++;</span><br><span class="line">        q[Lisa[i].pos].c=cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(q[mid].a==q[mid<span class="number">-1</span>].a) mid--;</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;l) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">Deal</span>(l,mid);</span><br><span class="line">    <span class="built_in">sort</span>(q+l,q+mid+<span class="number">1</span>,cdp);  <span class="built_in">sort</span>(q+mid+<span class="number">1</span>,q+r+<span class="number">1</span>,cdp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i=l,j=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid &amp;&amp; q[i].b&lt;q[j].b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Add</span>(q[i].c,q[i].ans);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        q[j].ans=<span class="built_in">max</span>(q[j].ans,<span class="built_in">Query</span>(q[j].c<span class="number">-1</span>)+<span class="number">1</span>);</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> T=l;T&lt;=mid;T++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Clear</span>(q[T].c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q+mid+<span class="number">1</span>,q+r+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="built_in">Deal</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    a=<span class="built_in">get</span>();    MOD=<span class="built_in">get</span>();  n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">int</span> j=<span class="number">0</span>;    res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            res=(<span class="keyword">long</span> <span class="keyword">long</span>)res*a%MOD;</span><br><span class="line">            PD[j]=res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(PD+<span class="number">1</span>,PD+<span class="number">3</span>+<span class="number">1</span>);</span><br><span class="line">        q[i].a=PD[<span class="number">1</span>]; q[i].b=PD[<span class="number">2</span>]; q[i].c=PD[<span class="number">3</span>];</span><br><span class="line">        q[i].ans=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GetLisan</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Deal</span>(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        Ans=<span class="built_in">max</span>(Ans,q[i].ans);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;纸箱堆叠&lt;/h1&gt;
&lt;p&gt;Time Limit: 30 Sec Memory Limit: 256 MB&lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;P 工厂是一个生产纸箱的工厂。&lt;br&gt;
　　纸箱生产线在人工输入三个参数 n</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="分治" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB/"/>
    
    
    <category term="CDQ分治" scheme="https://www.bearchild.top/tags/CDQ%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>[DP]Famil Door and Brackets</title>
    <link href="https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP]Famil%20Door%20and%20Brackets/"/>
    <id>https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP]Famil%20Door%20and%20Brackets/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-05-27T17:24:22.976Z</updated>
    
    <content type="html"><![CDATA[<h1>Famil Door and Brackets</h1><p>Time Limit: 20 Sec Memory Limit: 512 MB</p><h2 id="Description">Description</h2><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012351.png" alt="img"></p><h2 id="Input">Input</h2><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012355.png" alt="img"></p><h2 id="Output">Output</h2><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012357.png" alt="img"></p><h2 id="Sample-Input">Sample Input</h2><p>4 1<br>　　(</p><h2 id="Sample-Output">Sample Output</h2><p>4</p><h2 id="HINT">HINT</h2><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012400.png" alt="img"></p><h2 id="Solution">Solution</h2><p>显然，我们考虑运用DP。先求出 <strong>f[i][j]</strong> 表示 <strong>长度为 i 的括号序列，“)” 比 “(” 多 j 个的方案</strong>（<strong>时刻保证 j &gt;= 0</strong>）。</p><p>然后我们考虑怎样获得<strong>答案</strong>。先预处理出<strong>L，R</strong>表示<strong>将读入的括号序列消去若干对</strong>之后剩下的**“)” “(”<strong>个数（消去吼显然</strong>形如“))(((”**）。</p><p>那么我们<strong>左边要加入的</strong>就要<strong>至少多R个“(”</strong>，右边类似。</p><p>但是显然，我也可以左边<strong>再多填</strong>几个“(”，右边<strong>再多填</strong>几个“)”。</p><p>那么我们就可以 <strong>枚举左边填 i 个括号</strong>（则右边填 need - i 个），<strong>左边多填 num 个“(”</strong>（则右边多填 num 个“)”）。</p><p>然后统计答案即可。</p><h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">800005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Base = <span class="number">2005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, need;</span><br><span class="line"><span class="keyword">char</span> s[ONE];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"><span class="keyword">int</span> stk[ONE], top;</span><br><span class="line"><span class="keyword">int</span> L = <span class="number">0</span>, R = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> );</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= need; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= need; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j] = (f[i][j] + f[i - <span class="number">1</span>][j + <span class="number">1</span>]) % MOD;</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= <span class="number">1</span>) f[i][j] = (f[i][j] + f[i - <span class="number">1</span>][j - <span class="number">1</span>]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_LR</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; stk[top] == <span class="string">&#x27;(&#x27;</span>) top--;</span><br><span class="line">        <span class="keyword">else</span> stk[++top] = s[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; i++)</span><br><span class="line">        <span class="keyword">if</span>(stk[i] == <span class="string">&#x27;(&#x27;</span>) L++;</span><br><span class="line">    <span class="keyword">else</span> R++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();    m = <span class="built_in">get</span>();    need = n - m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Deal_f</span>(), <span class="built_in">Deal_LR</span>();</span><br><span class="line"></span><br><span class="line">    Ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= need; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num = <span class="number">0</span>; num &lt;= need; num++)<span class="comment">//left&#x27;s L</span></span><br><span class="line">            <span class="keyword">if</span>(R + num &lt; <span class="number">2005</span> &amp;&amp; L + num &lt; <span class="number">2005</span>)</span><br><span class="line">                Ans = (Ans + (s64)f[i][R + num] * f[need - i][L + num] % MOD) % MOD;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Famil Door and Brackets&lt;/h1&gt;
&lt;p&gt;Time Limit: 20 Sec Memory Limit: 512 MB&lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://b</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="DP" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/DP/"/>
    
    
    <category term="DP" scheme="https://www.bearchild.top/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>[DP]BST again</title>
    <link href="https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP]BST%20again/"/>
    <id>https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP]BST%20again/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-05-27T17:32:41.820Z</updated>
    
    <content type="html"><![CDATA[<h1>BST again</h1><p>Time Limit: 10 Sec Memory Limit: 256 MB</p><h2 id="Description">Description</h2><p>求有多少棵大小为n的深度为h的二叉树。（树根深度为0；左右子树有别；答案对1000000007取模）</p><h2 id="Input">Input</h2><p>第一行一个整数T，表示数据组数。</p><p>以下T行，每行2个整数n和h。</p><h2 id="Output">Output</h2><p>共T行，每行一个整数表示答案（对1000000007取模）</p><h2 id="Sample-Input">Sample Input</h2><p>2<br>　2 1<br>　3 2</p><h2 id="Sample-Output">Sample Output</h2><p>2<br>　4</p><h2 id="HINT">HINT</h2><p>1&lt;=n&lt;=600,0&lt;=h&lt;=600,1&lt;=T&lt;=10</p><h2 id="Solution">Solution</h2><p>我们运用DP来求解。</p><p>记<strong>f[i][j]<strong>表示</strong>点数为i，深度==j</strong>的方案数；<br>　　记<strong>g[i][j]<strong>表示</strong>点数为i，深度&lt;=j</strong>的方案数。</p><p>转移的时候所以<strong>枚举一个点k作为根</strong>，那么<strong>左边</strong>显然就<strong>有k-1个点</strong>，<strong>右边</strong>就<strong>有i-k个点</strong>。</p><p>此时<strong>深度恰好为j-1</strong>的方案数为：<br>　　<strong>g[k-1][j-1] * g[i-k][j-1] - g[k-1][j-2] * g[i-k][j-2]</strong>。</p><p>所以我们就可以得到答案了。</p><h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n, h;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">int</span> f[ONE][ONE], g[ONE][ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pwoer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modit</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &lt; <span class="number">0</span>) a += MOD;</span><br><span class="line">    <span class="keyword">if</span>(a &gt;= MOD) a -= MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; i++)</span><br><span class="line">        a[i].x = <span class="built_in">get</span>(), a[i].y = <span class="built_in">get</span>() + <span class="number">1</span>,</span><br><span class="line">    n = <span class="built_in">max</span>(n, a[i].x), h = <span class="built_in">max</span>(h, a[i].y);</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= h; i++) g[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= h; i++) g[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= i; j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= i; k++)</span><br><span class="line">                <span class="built_in">Modit</span>(f[i][j] += (s64)g[k - <span class="number">1</span>][j - <span class="number">1</span>] * g[i - k][j - <span class="number">1</span>] % MOD - (s64)g[k - <span class="number">1</span>][j - <span class="number">2</span>] * g[i - k][j - <span class="number">2</span>] % MOD);</span><br><span class="line"></span><br><span class="line">        g[i][<span class="number">0</span>] = f[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= h; j++)</span><br><span class="line">            <span class="built_in">Modit</span>(g[i][j] = g[i][j - <span class="number">1</span>] + f[i][j]);</span><br><span class="line">    &#125;    <span class="function">m</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        <span class="title">for</span><span class="params">(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; i++)</span></span></span><br><span class="line"><span class="function">            <span class="title">printf</span><span class="params">(<span class="string">&quot;%d\n&quot;</span>, f[a[i].x][a[i].y])</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;BST again&lt;/h1&gt;
&lt;p&gt;Time Limit: 10 Sec Memory Limit: 256 MB&lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;求有多少棵大小为n的深度为h的二叉树。（树根深度为0；左右子树有别</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="DP" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/DP/"/>
    
    
    <category term="DP" scheme="https://www.bearchild.top/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>[DP]JOIOJI</title>
    <link href="https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP]JOIOJI/"/>
    <id>https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP]JOIOJI/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-05-27T17:00:23.050Z</updated>
    
    <content type="html"><![CDATA[<h1>JOIOJI</h1><p>Time Limit: 10 Sec Memory Limit: 256 MB</p><h2 id="Description">Description</h2><p>JOIOJI桑是JOI君的叔叔。“JOIOJI”这个名字是由“J、O、I”三个字母各两个构成的。</p><p>最近，JOIOJI桑有了一个孩子。JOIOJI桑想让自己孩子的名字和自己一样由“J、O、I”三个字母构成，并且想让“J、O、I”三个字母的出现次数恰好相同。</p><p>JOIOJI桑家有一份祖传的卷轴，上面写着一首长诗，长度为N，由“J、O、I”三个字母组成。JOIOJIさん想用诗中最长的满足要求的连续子串作为孩子的名字。</p><p>现在JOIOJI桑将这首长诗交给了你，请你求出诗中最长的、包含同样数目的“J、O、I”三个字母的连续子串。</p><h2 id="Input">Input</h2><p>第一行一个正整数N，代表这首长诗的长度</p><p>接下来一行一个长度为N的字符串S，表示这首长诗，保证每个字符都是“J、O、I”三个字母中的一个</p><h2 id="Output">Output</h2><p>输出一行一个正整数，代表最长的包含等数量“J、O、I”三个字母的最长连续子串的长度。如果不存在这样的子串，输出0</p><h2 id="Sample-Input">Sample Input</h2><p>10</p><p>JOIIJOJOOI</p><h2 id="Sample-Output">Sample Output</h2><p>6</p><h2 id="HINT">HINT</h2><p>选择“IIJOJO”这个子串，长度为6，包含“J、O、I”三个字母各2个，这是最长的满足要求的子串。</p><p>1&lt;=N&lt;=2*10^5</p><h2 id="Solution">Solution</h2><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528010003.png" alt="img"></p><h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">map &lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt; Map;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> S[ONE];</span><br><span class="line"><span class="keyword">int</span> f[ONE][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">char</span> S)</span> </span>&#123;<span class="keyword">return</span> S==<span class="string">&#x27;J&#x27;</span> ? <span class="number">1</span>:(S==<span class="string">&#x27;O&#x27;</span> ? <span class="number">2</span> : <span class="number">3</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, S+<span class="number">1</span>);</span><br><span class="line">    Map[<span class="built_in">make_pair</span>(<span class="number">0</span>,<span class="number">0</span>)] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(f[i], f[i<span class="number">-1</span>], <span class="built_in"><span class="keyword">sizeof</span></span>(f[i<span class="number">-1</span>]));</span><br><span class="line">        f[i][<span class="built_in">id</span>(S[i])]++;</span><br><span class="line"></span><br><span class="line">        pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; t = <span class="built_in">make_pair</span>(f[i][<span class="number">1</span>] - f[i][<span class="number">2</span>], f[i][<span class="number">2</span>] - f[i][<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">if</span>(Map.<span class="built_in">find</span>(t) == Map.<span class="built_in">end</span>()) Map[t] = i;</span><br><span class="line">        <span class="keyword">else</span> Ans = <span class="built_in">max</span>(Ans, i - Map[t]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;JOIOJI&lt;/h1&gt;
&lt;p&gt;Time Limit: 10 Sec Memory Limit: 256 MB&lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;JOIOJI桑是JOI君的叔叔。“JOIOJI”这个名字是由“J、O、I</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="DP" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/DP/"/>
    
    
    <category term="DP" scheme="https://www.bearchild.top/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>[DP]Valera and Number</title>
    <link href="https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP]Valera%20and%20Number/"/>
    <id>https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP]Valera%20and%20Number/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-05-27T17:25:18.024Z</updated>
    
    <content type="html"><![CDATA[<h1>Valera and Number</h1><p>Time Limit: 20 Sec Memory Limit: 512 MB</p><h2 id="Description">Description</h2><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012457.png" alt="img"></p><h2 id="Input">Input</h2><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012459.png" alt="img"></p><h2 id="Output">Output</h2><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012501.png" alt="img"></p><h2 id="Sample-Input">Sample Input</h2><p>5 3 25</p><h2 id="Sample-Output">Sample Output</h2><p>1.9218750000</p><h2 id="HINT">HINT</h2><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012503.png" alt="img"></p><h2 id="Solution">Solution</h2><p>考虑运用DP。</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528012505.png" alt="img"></p><h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">800005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> all = <span class="number">255</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x, n;</span><br><span class="line"><span class="keyword">double</span> p;</span><br><span class="line"><span class="keyword">double</span> f[<span class="number">205</span>][<span class="number">260</span>][<span class="number">255</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">double</span> Ans;</span><br><span class="line"><span class="keyword">int</span> val, num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> );</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_first</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> record[<span class="number">250</span>], num = <span class="number">0</span>, x = n;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">        record[++num] = x &amp; <span class="number">1</span>,</span><br><span class="line">    x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>, pos = <span class="number">9</span>, val = record[pos];</span><br><span class="line">    <span class="keyword">for</span>(pos = <span class="number">9</span>; pos + j - <span class="number">1</span> &lt;= num; j++)</span><br><span class="line">        <span class="keyword">if</span>(record[pos + j] != val) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>][n &amp; all][j][val] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x % <span class="number">2</span> == <span class="number">0</span>) res++, x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="built_in">get</span>(), n = <span class="built_in">get</span>(), p = (<span class="keyword">double</span>)<span class="built_in">get</span>() / <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">Deal_first</span>(x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">0</span>; s &lt;= all; s++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">250</span>; j++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">1</span>; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    val = s &gt;&gt; <span class="number">8</span> - <span class="number">1</span> &amp; <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(val != k) num = <span class="number">1</span>; <span class="keyword">else</span> num = j + <span class="number">1</span>;</span><br><span class="line">                    f[i + <span class="number">1</span>][s &lt;&lt; <span class="number">1</span> &amp; all][num][val] += f[i][s][j][k] * p;</span><br><span class="line"></span><br><span class="line">                    val = s == all ? (k ^ <span class="number">1</span>) : k;</span><br><span class="line">                    <span class="keyword">if</span>(val != k &amp;&amp; k == <span class="number">0</span>) num = <span class="number">1</span>; <span class="keyword">else</span> num = j;</span><br><span class="line">                    f[i + <span class="number">1</span>][s + <span class="number">1</span> &amp; all][num][val] += f[i][s][j][k] * (<span class="number">1</span> - p);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">0</span>; s &lt;= all; s++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">250</span>; j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">1</span>; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s == <span class="number">0</span> &amp;&amp; k == <span class="number">0</span>) val = j + <span class="number">8</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(s == <span class="number">0</span> &amp;&amp; k == <span class="number">1</span>) val = <span class="number">8</span>;</span><br><span class="line">                <span class="keyword">else</span> val = <span class="built_in">Get</span>(s);</span><br><span class="line">                Ans += f[n][s][j][k] * val;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.8lf&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Valera and Number&lt;/h1&gt;
&lt;p&gt;Time Limit: 20 Sec Memory Limit: 512 MB&lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://bearchi</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="DP" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/DP/"/>
    
    
    <category term="DP" scheme="https://www.bearchild.top/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>[DP][Tarjan]最大半连通子图</title>
    <link href="https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP][Tarjan]%E6%9C%80%E5%A4%A7%E5%8D%8A%E8%BF%9E%E9%80%9A%E5%AD%90%E5%9B%BE/"/>
    <id>https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP][Tarjan]%E6%9C%80%E5%A4%A7%E5%8D%8A%E8%BF%9E%E9%80%9A%E5%AD%90%E5%9B%BE/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-05-27T10:33:10.791Z</updated>
    
    <content type="html"><![CDATA[<h1>最大半连通子图</h1><p>Time Limit: 30 Sec Memory Limit: 162 MB</p><h2 id="Description">Description</h2><p>一个有向图G=(V,E)称为半连通的(Semi-Connected)：</p><p>如果满足：∀u,v∈V，满足u→v或v→u，即对于图中任意两点u，v,存在一条u到v的有向路径或者从v到u的有向路径。</p><p>若G’=(V’,E’)满足V’∈V，E’是E中所有跟V’有关的边，则称G’是G的一个导出子图。</p><p>若G’是G的导出子图，且G’半连通，则称G’为G的半连通子图。</p><p>若G’是G所有半连通子图中包含节点数最多的，则称G’是G的最大半连通子图。</p><p>给定一个有向图G，请求出G的最大半连通子图拥有的节点数K ，以及不同的最大半连通子图的数目C。</p><p>由于C可能比较大，仅要求输出C对X的余数。</p><h2 id="Input">Input</h2><p>第一行包含两个整数N，M，X。N，M分别表示图G的点数与边数，X的意义如上文所述。</p><p>接下来M行，每行两个正整数a, b，表示一条有向边(a, b)。图中的每个点将编号为1,2,3…N，保证输入中同一个(a,b)不会出现两次。</p><h2 id="Output">Output</h2><p>应包含两行，第一行包含一个整数K。第二行包含整数C Mod X.</p><h2 id="Sample-Input">Sample Input</h2><p>6 6 20070603<br>　1 2<br>　2 1<br>　1 3<br>　2 4<br>　5 6<br>　6 4</p><h2 id="Sample-Output">Sample Output</h2><p>3<br>　　3</p><h2 id="HINT">HINT</h2><p>N ≤100000, M ≤1000000；对于100%的数据， X ≤10^8</p><h2 id="Main-idea">Main idea</h2><p>求最大半联通子图大小与个数。（最大半联通子图定义：在这个图内对于任意节点u,v，存在一条u-&gt;v的路径）</p><h2 id="Solution">Solution</h2><p>先跑一遍Tarjan，得到了两两连通的图，然后考虑如何加入单向连通的点集，显然两个强连通分量之间要是有连边的话，就可以满足这两个强连通分量的点单向连通，符合题意。</p><p>那么答案显然就是在缩点后的DAG（有向无环图）上的<strong>最长路径</strong>。</p><p>用拓扑+DP（本质是在拓扑序上的DP）可以求出即为Ans，然后在跑的时候用一个数组f[i]统计一下相同的个数，注意更新dist的时候也要更新f，最后如果dist[i]=Ans，那么累加f[i]，即为答案。</p><h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">2000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,MOD;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">int</span> Next[ONE],First[ONE],Go[ONE],tot;</span><br><span class="line"><span class="keyword">int</span> next[ONE],first[ONE],go[ONE],Input[ONE];</span><br><span class="line"><span class="keyword">int</span> dist[ONE];</span><br><span class="line"><span class="keyword">int</span> T,t;</span><br><span class="line"><span class="keyword">int</span> tou,wei,jishu;</span><br><span class="line"><span class="keyword">int</span> q[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans,num,f[ONE];</span><br><span class="line"><span class="keyword">int</span> Dfn[ONE],Low[ONE],vis[ONE],F[ONE],Num[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">power</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.u==b.u) <span class="keyword">return</span> a.v&lt;b.v;</span><br><span class="line">    <span class="keyword">return</span> a.u&lt;b.u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rule</span><span class="params">(<span class="keyword">const</span> power &amp;a,<span class="keyword">const</span> power &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (a.u==b.u &amp;&amp; a.v==b.v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res,Q=<span class="number">1</span>;    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Next[++tot]=First[u];   First[u]=tot;   Go[tot]=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next[++tot]=first[u];   first[u]=tot;   go[tot]=v;  Input[v]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Dfn[u]=Low[u]=++T;</span><br><span class="line">    vis[u]=<span class="number">1</span>;</span><br><span class="line">    q[++t]=u;</span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> e=First[u];e;e=Next[e])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=Go[e];</span><br><span class="line">        <span class="keyword">if</span>(!Dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Tarjan</span>(v);</span><br><span class="line">            Low[u]=<span class="built_in">min</span>(Low[u],Low[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>    <span class="keyword">if</span>(vis[v])</span><br><span class="line">            Low[u]=<span class="built_in">min</span>(Low[u],Dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(Low[u]==Dfn[u])</span><br><span class="line">    &#123;</span><br><span class="line">        jishu++;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            v=q[t--];</span><br><span class="line">            F[v]=jishu;</span><br><span class="line">            vis[v]=<span class="number">0</span>;</span><br><span class="line">            Num[jishu]=Num[jishu]+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">while</span>(v!=u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Rebuild</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=First[u];e;e=Next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=Go[e];</span><br><span class="line">            <span class="keyword">if</span>(F[u]!=F[v])</span><br><span class="line">            &#123;</span><br><span class="line">                a[++num].u=F[u];</span><br><span class="line">                a[num].v=F[v];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(a+<span class="number">1</span>,a+num+<span class="number">1</span>,cmp);</span><br><span class="line">    num=<span class="built_in">unique</span>(a+<span class="number">1</span>,a+num+<span class="number">1</span>,rule)<span class="number">-1</span>-a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Add_edge</span>(a[i].u,a[i].v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Topufirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=jishu;v++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!Input[v]) q[++wei]=v;</span><br><span class="line">        dist[v]=Num[v];</span><br><span class="line">        f[v]=<span class="number">1</span>;</span><br><span class="line">        Ans=<span class="built_in">max</span>(Ans,dist[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TopuA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(tou&lt;wei)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=q[++tou];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> e=first[u];e;e=next[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=go[e];</span><br><span class="line">            <span class="keyword">if</span>(dist[v]&lt;dist[u]+Num[v])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[v]=dist[u]+Num[v];</span><br><span class="line">                f[v]=f[u];</span><br><span class="line">                Ans=<span class="built_in">max</span>(Ans,dist[v]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span>(dist[v]==dist[u]+Num[v]) f[v]=(f[v]+f[u])%MOD;</span><br><span class="line">            <span class="keyword">if</span>(!(--Input[v])) q[++wei]=v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();    m=<span class="built_in">get</span>();    MOD=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="built_in">get</span>();    y=<span class="built_in">get</span>();</span><br><span class="line">        <span class="built_in">Add</span>(x,y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!Dfn[i]) <span class="built_in">Tarjan</span>(i);</span><br><span class="line"></span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">Rebuild</span>();</span><br><span class="line"></span><br><span class="line">    tou=<span class="number">0</span>;  wei=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">Topufirst</span>(); <span class="built_in">TopuA</span>();</span><br><span class="line"></span><br><span class="line">    tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=jishu;i++)</span><br><span class="line">        <span class="keyword">if</span>(dist[i]==Ans) tot=(tot+f[i])%MOD;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n%d&quot;</span>,Ans,tot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;最大半连通子图&lt;/h1&gt;
&lt;p&gt;Time Limit: 30 Sec Memory Limit: 162 MB&lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;一个有向图G=(V,E)称为半连通的(Semi-Connected)：</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="图论" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/%E5%9B%BE%E8%AE%BA/"/>
    
    
    <category term="DP" scheme="https://www.bearchild.top/tags/DP/"/>
    
    <category term="Tarjan" scheme="https://www.bearchild.top/tags/Tarjan/"/>
    
  </entry>
  
  <entry>
    <title>[DP][prufer编码]树</title>
    <link href="https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP][prufer%E7%BC%96%E7%A0%81]%E6%A0%91/"/>
    <id>https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP][prufer%E7%BC%96%E7%A0%81]%E6%A0%91/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-05-27T11:34:19.037Z</updated>
    
    <content type="html"><![CDATA[<h1>树</h1><p>Time Limit: 10 Sec Memory Limit: 256 MB</p><h2 id="Description">Description</h2><p>有n个点，它们从1到n进行标号，第i个点的限制为度数不能超过Ai<br>现在对于每个s(1≤s≤n)，问从这n个点中选出一些点组成大小为s 的有标号无根树的方案数。</p><h2 id="Input">Input</h2><p>第一行一个整数n，</p><p>第二行n个整数表示Ai</p><h2 id="Output">Output</h2><p>输出一行n个整数，第i个整数表示s=i时的答案</p><h2 id="Sample-Input">Sample Input</h2><p>3<br>　　2 2 1</p><h2 id="Sample-Output">Sample Output</h2><p>3 3 2</p><h2 id="HINT">HINT</h2><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527193335.png" alt="img"></p><h2 id="Solution">Solution</h2><p>由于是带标号的无根树的计数，于是我们运用<strong>prufer编码</strong>的性质来解题。</p><p>prufer编码的几个性质：<br>　　　　1.对于大小为s的树，prufer编码是一个长度为 s-2 的序列；<br>　　　　2.i在序列中出现的次数&lt;deg[i]；<br>　　　　3.一个prufer编码表示一棵树。</p><p>所以这题可以转化为求prufer编码的计数。</p><p>我们令f[i][j][k]表示前i个点，选择了j个，prufer编码长度为k的方案数。那么显然有</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210527193338.png" alt="img"></p><p>其中 f[i-1][j][k] 表示不选择该点的方案数，后面的式子表示选择了该点的方案数，选择该点可以在编码中出现0-deg[i]-1次，然后<strong>在编码中的出现顺序可以任意</strong>所以要乘上C。</p><p>最后如果i=1显然输出n，否则由于<strong>prufer编码是长度i-2的序列</strong>，所以输出f[n][i][i-2]。</p><h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE=<span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD=<span class="number">1004535809</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> deg[ONE];</span><br><span class="line"><span class="keyword">int</span> C[ONE][ONE];</span><br><span class="line"><span class="keyword">int</span> f[ONE][ONE][ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mod</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;MOD) a-=MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n=<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) deg[i]=<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        C[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            C[i][j] = (C[i<span class="number">-1</span>][j] + C[i<span class="number">-1</span>][j<span class="number">-1</span>]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;=n;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                f[i][j][k] += f[i<span class="number">-1</span>][j][k]; <span class="built_in">Mod</span>(f[i][j][k]);</span><br><span class="line">                <span class="keyword">if</span>(!j) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>; l &lt; deg[i] &amp;&amp; l &lt;= k ;l++)</span><br><span class="line">                &#123;</span><br><span class="line">                    f[i][j][k] += (s64)f[i<span class="number">-1</span>][j<span class="number">-1</span>][k-l] * C[k][l] % MOD;</span><br><span class="line">                    <span class="built_in">Mod</span>(f[i][j][k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,n);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,f[n][i][i<span class="number">-2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;树&lt;/h1&gt;
&lt;p&gt;Time Limit: 10 Sec Memory Limit: 256 MB&lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;有n个点，它们从1到n进行标号，第i个点的限制为度数不能超过Ai&lt;br&gt;
现在对于</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="DP" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/DP/"/>
    
    
    <category term="DP" scheme="https://www.bearchild.top/tags/DP/"/>
    
    <category term="prufer编码" scheme="https://www.bearchild.top/tags/prufer%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>[DP][分治]消失之物</title>
    <link href="https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP][%E5%88%86%E6%B2%BB]%E6%B6%88%E5%A4%B1%E4%B9%8B%E7%89%A9/"/>
    <id>https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP][%E5%88%86%E6%B2%BB]%E6%B6%88%E5%A4%B1%E4%B9%8B%E7%89%A9/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-05-27T17:31:28.486Z</updated>
    
    <content type="html"><![CDATA[<h1>消失之物</h1><p>Time Limit: 10 Sec Memory Limit: 128 MB</p><h2 id="Description">Description</h2><p>ftiasch 有 <em>N</em> 个物品, 体积分别是 <em>W1</em>, <em>W2</em>, …, <em>WN</em>。</p><p>由于她的疏忽, 第 <em>i</em> 个物品丢失了.</p><p>“要使用剩下的 <em>N</em> - 1 物品装满容积为 <em>x</em> 的背包，有几种方法呢？” – 这是经典的问题了。</p><p>她把答案记为 <em>Count(i, x)</em> ，想要得到所有1 &lt;= i &lt;= N, 1 &lt;= x &lt;= M的 <em>Count(i, x)</em> 表格。</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528013114.png" alt="img"></p><h2 id="Input">Input</h2><p>第1行：两个整数 <em>N</em> 和 <em>M</em> ，物品的数量和最大的容积。</p><p>第2行： <em>N</em> 个整数 <em>W1</em>, <em>W2</em>, …, <em>WN</em>, 物品的体积。</p><h2 id="Output">Output</h2><p>一个 <em>N</em> × <em>M</em> 的矩阵， *Count(i, x)*的末位数字。</p><h2 id="Sample-Input">Sample Input</h2><p>3 2<br>　1 1 2</p><h2 id="Sample-Output">Sample Output</h2><p>11<br>　11<br>　21</p><h2 id="HINT">HINT</h2><p>1 ≤ <em>N</em> ≤ 2 × 1e3, 1 ≤ <em>M</em> ≤ 2 × 1e3</p><h2 id="Solution">Solution</h2><p>首先，我们发现，对于L，R：<br>　　去掉L，就是要用**[1, L - 1]∪[L + 1, n]<strong>的物品来求解；<br>　　去掉R，就是要用</strong>[1, R - 1]∪[R + 1, n]<strong>的物品来求解。<br>　　若是我们更新完了</strong>([1, L - 1]∪[L + 1, n])<strong>∩</strong>([1, R - 1]∪[R + 1, n])<strong>的部分，<br>　　再加上</strong>L<strong>的，即是去掉</strong>R<strong>的答案；再加上</strong>R<strong>的，即是去掉</strong>L**的答案。</p><p>那么我们就可以考虑分治：<br>　　设计状态<strong>Solve(L, R)</strong>，表示<strong>已经做完了[1, L - 1]∪[R + 1, n]时</strong>的答案。<br>　　然后二分一个<strong>mid = L + R &gt;&gt; 1;</strong><br>　　要处理**[L, mid]<strong>则将</strong>[mid + 1, R]<strong>的更新一下，反之同理。<br>　　那么这样我们最后做到</strong>L == R**时候，显然就是去掉L的答案了。</p><p>DP部分显然就是一个简单的背包。</p><h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2147483640</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[ONE];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">20</span>][ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> Dep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L == R)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, f[Dep][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = L + R &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= <span class="number">0</span>; j--) f[Dep + <span class="number">1</span>][j] = f[Dep][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt;= R; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">            (f[Dep + <span class="number">1</span>][j] += f[Dep + <span class="number">1</span>][j - a[i]]) %= <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">Solve</span>(L, mid, Dep + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= <span class="number">0</span>; j--) f[Dep + <span class="number">1</span>][j] = f[Dep][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = L; i &lt;= mid; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">            (f[Dep + <span class="number">1</span>][j] += f[Dep + <span class="number">1</span>][j - a[i]]) %= <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">Solve</span>(mid + <span class="number">1</span>, R, Dep + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();    m = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = <span class="built_in">get</span>();</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">Solve</span>(<span class="number">1</span>, n, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;消失之物&lt;/h1&gt;
&lt;p&gt;Time Limit: 10 Sec Memory Limit: 128 MB&lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;ftiasch 有 &lt;em&gt;N&lt;/em&gt; 个物品, 体积分别是 &lt;em&gt;W1</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="分治" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/%E5%88%86%E6%B2%BB/"/>
    
    
    <category term="DP" scheme="https://www.bearchild.top/tags/DP/"/>
    
    <category term="分治" scheme="https://www.bearchild.top/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>[DP][数论]Count</title>
    <link href="https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP][%E6%95%B0%E8%AE%BA]Count/"/>
    <id>https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP][%E6%95%B0%E8%AE%BA]Count/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-05-27T17:14:42.783Z</updated>
    
    <content type="html"><![CDATA[<h1>Count</h1><p>Time Limit: 10 Sec Memory Limit: 256 MB</p><h2 id="Description">Description</h2><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528011311.png" alt="img"></p><h2 id="Input">Input</h2><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528011314.png" alt="img"></p><h2 id="Output">Output</h2><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528011324.png" alt="img"></p><h2 id="Sample-Input">Sample Input</h2><p>6 3</p><h2 id="Sample-Output">Sample Output</h2><p>2248</p><h2 id="HINT">HINT</h2><p><img src="F:%5CData%5Cimg%5C1109445-20170916102503688-1674223828.png" alt="img"></p><h2 id="Solution">Solution</h2><p>这必然是一道数学题。首先，显然的有：如果 <strong>π xi &lt;= n ^ 2m</strong> 时，显然是<strong>没有限制的</strong>。并且 n ^ m = sqrt(n ^ 2m)。</p><p>我们记录：<strong>s1</strong> 表示 <strong>&lt; n ^ m</strong> 的个数，<strong>s2</strong> 表示 <strong>= n ^ m</strong> 的个数，<strong>s3</strong> 表示 <strong>&gt; n ^ m</strong> 的个数。</p><p>那么显然有 <strong>s1 = s3</strong>。并且<strong>无限制方案数 = (n的约数个数)^2m</strong>，这时候，我们只要求出 s2 即可。</p><p>问题转化为：在 <strong>2m 个位置中</strong> 填入若干个<strong>数</strong>，记 <strong>n的某一质因子为 x</strong>，那我们要满足 <strong>填入数中 x 的指数之和</strong> = <strong>m * （n 中这个 x 的指数）</strong>。</p><p>那么显然对于<strong>n的每一个质因子</strong> DP 一下，<strong>f[i][j]<strong>表示</strong>填到了第 i 个数， 和为 j 的方案数</strong>。（由于 <strong>填数只能是 n 的约数</strong>，还要保证 <strong>每个数的 x 的指数 &lt; n 中这个 x 的指数</strong>）。显然 <strong>统计的时候乘上 f[2 * m][指数 * m]</strong>。</p><p>最后算一下<strong>s1 + s2</strong>即可。</p><h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[ONE], T;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">2</span>][<span class="number">35</span> * <span class="number">100</span>], Ans = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quickpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = (s64)res * a % MOD;</span><br><span class="line">        a = (s64)a * a % MOD;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal</span><span class="params">(<span class="keyword">int</span> Num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f)); f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> A = <span class="number">1</span>, B = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> id = <span class="number">1</span>; id &lt;= <span class="number">2</span> * m; id++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">swap</span>(A, B); <span class="built_in">memset</span>(f[B], <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(f[B]));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= Num * m; j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= Num &amp;&amp; k &lt;= j; k++)</span><br><span class="line">                f[B][j] = (f[B][j] + f[A][j - k]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Ans = (s64)Ans * f[B][Num * m] % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Factor</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= x; i++)</span><br><span class="line">        <span class="keyword">if</span>(x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> Num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x % i == <span class="number">0</span>) x /= i, Num++;</span><br><span class="line">            <span class="built_in">Deal</span>(Num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">1</span>) <span class="built_in">Deal</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();    m = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span>(n % i == <span class="number">0</span>) &#123;T++; <span class="keyword">if</span>(n / i != i) T++;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Factor</span>(n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ((s64)(<span class="built_in">Quickpow</span>(T, <span class="number">2</span>*m) - Ans + MOD) % MOD * <span class="built_in">Quickpow</span>(<span class="number">2</span>, MOD - <span class="number">2</span>) % MOD + Ans) % MOD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Count&lt;/h1&gt;
&lt;p&gt;Time Limit: 10 Sec Memory Limit: 256 MB&lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://bearchildbucket-130</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数学" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="DP" scheme="https://www.bearchild.top/tags/DP/"/>
    
    <category term="数论" scheme="https://www.bearchild.top/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>[DP][数论]登山</title>
    <link href="https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP][%E6%95%B0%E8%AE%BA]%E7%99%BB%E5%B1%B1/"/>
    <id>https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP][%E6%95%B0%E8%AE%BA]%E7%99%BB%E5%B1%B1/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-05-27T17:33:44.563Z</updated>
    
    <content type="html"><![CDATA[<h1>登山</h1><p>Time Limit: 10 Sec Memory Limit: 256 MB</p><h2 id="Description">Description</h2><p>恶梦是一个登山爱好者，今天他来到了黄山<br>　　俗话说的好，不走回头路。所以在黄山，你只能往前走，或者往上走。<br>　　并且很显然的是，当你走到山脊的时候，你不能够往上走，你只能往前走一步再往上走。<br>　　抽象一点而言就是，你可以把黄山视为一个N * N格点图，恶梦从(0,0)开始出发，要走到 (N,N)。<br>　　当他走到位置(x,y)的时候，它可以往(x + 1,y),或(x,y+1)走。<br>　　并且当他走到(x,x)的时候，由于他已经处在了山脊上，所以他不能够往(x,x+1)方向上走。<br>　　当恶梦兴致勃勃准备开始爬山的时候，他的同伴告诉他，黄山由于年久失修，有一些位置出现了大坑，不能走。<br>　　恶梦觉得更刺激了，但他想先知道他能有多少种方式走到黄山顶。<br>　　由于这个数字很大，所以你只需要将答案对10^9 + 7取模输出即可。</p><h2 id="Input">Input</h2><p>第一行包括两个整数N,C,分别表示你可以把黄山视作一个N * N的格点图，并且黄山上面有C个位置出现了大坑。<br>　　接下来的C行，每行包括两个整数X,Y,表示X,Y这个位置不能走。<br>　　保证X&gt;=Y,也就是说(X,Y)必然在山上。<br>　　保证这C个点互不相同。</p><h2 id="Output">Output</h2><p>输出只有一个整数Ans,表示恶梦爬上山顶的路径数对10^9+7取模的值。</p><h2 id="Sample-Input">Sample Input</h2><p>5 2<br>　　5 0<br>　　1 1</p><h2 id="Sample-Output">Sample Output</h2><p>27</p><h2 id="HINT">HINT</h2><p>对于100%的数据，保证N&lt;=100000,C&lt;=1000。<br>　　保证对于(0,0),(N,N)不存在障碍点。</p><h2 id="Solution">Solution</h2><p>这显然是一道数学题，结合DP，我们令 <strong>f[i] 表示不经过其它障碍点，首先经过障碍点 i</strong> 的方案数。</p><p>那么显然有：<strong>f[i] = Ways(0,0 -&gt; i) - f[j] * Ways(i -&gt; j)</strong>。</p><p>问题就转化为了，怎样求出<strong>满足不超过直线y=x+1</strong>，<strong>从一点走向另外一点</strong>的方案数。</p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528013324.png" alt="img"></p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528013327.png" alt="img"></p><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528013329.png" alt="img"></p><p>所以<strong>Ways = ((x1, y1) -&gt; (x2, y2)) - ((x1, y1) -&gt; (y2-1, x2+1))</strong>。</p><p>统计答案只要加入一个**(n, n)<strong>在</strong>f**里面计算即可。</p><h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">5000005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">int</span> fac[ONE], inv[ONE];</span><br><span class="line"><span class="keyword">int</span> f[ONE];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;a[ONE];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> point &amp;a, <span class="keyword">const</span> point &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.x != b.x) <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">    <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;  <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span>)</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q) res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span>)</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quickpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = (s64)res * a % MOD;</span><br><span class="line">        a = (s64)a * a % MOD;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Deal_first</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++)</span><br><span class="line">        fac[i] = (s64)fac[i - <span class="number">1</span>] * i % MOD;</span><br><span class="line">    inv[<span class="number">2</span> * n] = <span class="built_in">Quickpow</span>(fac[<span class="number">2</span> * n], MOD - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span> * n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        inv[i] = (s64)inv[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">0</span> || m &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (s64)fac[n] * inv[m] % MOD * inv[n - m] % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modit</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &lt; <span class="number">0</span>) a += MOD;</span><br><span class="line">    <span class="keyword">if</span>(a &gt;= MOD) a -= MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Ways</span><span class="params">(point a, point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">0</span> || m &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">C</span>(b.y - a.y + b.x - a.x, b.y - a.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Getit</span><span class="params">(point a, point b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Ways</span>(a, b) - <span class="built_in">Ways</span>(a, (point)&#123;b.y - <span class="number">1</span>, b.x + <span class="number">1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();    m = <span class="built_in">get</span>();</span><br><span class="line">    <span class="built_in">Deal_first</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        a[i].x = <span class="built_in">get</span>(), a[i].y = <span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    a[++m] = (point)&#123;n, n&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + m + <span class="number">1</span>, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Modit</span>(f[i] = <span class="built_in">Getit</span>((point)&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, a[i]));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">            <span class="built_in">Modit</span>(f[i] -= (s64)f[j] * <span class="built_in">Getit</span>(a[j], a[i]) % MOD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, f[m]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;登山&lt;/h1&gt;
&lt;p&gt;Time Limit: 10 Sec Memory Limit: 256 MB&lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;恶梦是一个登山爱好者，今天他来到了黄山&lt;br&gt;
　　俗话说的好，不走回头路。所以</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="数学" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/"/>
    
    
    <category term="DP" scheme="https://www.bearchild.top/tags/DP/"/>
    
    <category term="数论" scheme="https://www.bearchild.top/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>[DP][树状数组]Perm</title>
    <link href="https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP][%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84]Perm/"/>
    <id>https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP][%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84]Perm/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-05-27T17:10:47.250Z</updated>
    
    <content type="html"><![CDATA[<h1>Perm</h1><p>Time Limit: 10 Sec Memory Limit: 256 MB</p><h2 id="Description">Description</h2><p>很久以前，有一个 1~n的排列。<br>　　这个排列太杂乱无章了，方老师想要让它变得单调一些。<br>　　方老师打算把排列中的数划分成两个非空子序列，一个单调上升，一个单调下降。<br>　　需要注意的是，排列中的每个数必须恰在一个子序列中并保持原来在排列中的相对顺序不变。<br>　　由于方案可能会比较多，你只需要输出方案数 mod 666623333。</p><h2 id="Input">Input</h2><p>第一行一个整数 n。<br>　　第二行 n 个 1~n 的整数，为一个 1~n 的排列。</p><h2 id="Output">Output</h2><p>一个整数，满足题意的方案数 mod 666623333。</p><h2 id="Sample-Input">Sample Input</h2><p>3<br>　　1 3 2</p><h2 id="Sample-Output">Sample Output</h2><p>3</p><h2 id="HINT">HINT</h2><p>1 &lt;= n &lt;= 10^6</p><h2 id="Solution">Solution</h2><p>显然，我们运用DP。</p><p>我们记 <strong>f[i][j]</strong> 为<strong>做到了第 i 个数</strong>，<strong>i 为递增子序列结尾</strong>，<strong>j 为递减子序列结尾</strong>的<strong>方案数</strong>，<strong>g[i][j]</strong> 为<strong>做到了第 i 个数</strong>，<strong>i 为递减子序列结尾</strong>，<strong>j 为递增子序列结尾</strong>的<strong>方案数</strong>。</p><p>我们考虑 <strong>第 i 个数</strong> 和 <strong>第 i-1 个数</strong> 是否<strong>同属一个子序列</strong>：<br>　　　　如果<strong>同属一个子序列</strong>，那么 <strong>f[i][j] += f[i-1][j]（a[i-1] &lt; a[i]）</strong>，<strong>g[i][j] += g[i-1][j]（a[i-1] &gt; a[i]）</strong>；（这里的 += 等价于 =）<br>　　　　如果<strong>不同属一个子序列</strong>，那么 <strong>f[i][i-1] += g[i-1][j]（a[j] &lt; a[i]）</strong>，<strong>g[i][i-1] += f[i-1][j]（a[j] &gt; a[i]）</strong>。</p><p>我们考虑是否优化这个暴力。运用树状数组。</p><p><strong>省掉第一维</strong>。如果 a[i-1] &lt; a[i]，我们<strong>清空g</strong>，否则我们<strong>清空f</strong>。这个过程相当于<strong>完成了同属一个子序列的转移</strong>。</p><p>在<strong>转移之前记录</strong>接下来我们记<strong>S1</strong>为<strong>a[j] &lt; a[i]<strong>的</strong>g[j]的和</strong>，记<strong>S2</strong>为<strong>a[j] &gt; a[i]的f[j]的和</strong>。那么<strong>不同属一个的转移</strong>相当于<strong>f[i-1] += S1</strong>, <strong>g[i-1]+=S2</strong>。</p><p>初值显然就是<strong>f[n + 1] = 1, g[0] = 1</strong>（为了方便起见，BearChild把它设成<strong>f[n] = 1, g[1] = 1</strong>，在<strong>求和的时候求&lt;=的和</strong>）</p><p>最后求一下<strong>f、g的和</strong>即可。注意考虑<strong>全为上升</strong>的或者<strong>全为下降</strong>的，若是如此，则<strong>答案-1</strong>。</p><h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> C[ONE], mark[ONE], Time_cnt;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">BIT</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        Time_cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(C, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(C));</span><br><span class="line">        <span class="built_in">memset</span>(mark, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(mark));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Clear</span><span class="params">()</span> </span>&#123;Time_cnt++;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x &amp; -x;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Check</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mark[x] != Time_cnt)</span><br><span class="line">            C[x] = <span class="number">0</span>, mark[x] = Time_cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> R, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = R; i &lt;= n; i += <span class="built_in">lowbit</span>(i))</span><br><span class="line">            <span class="built_in">Check</span>(i), C[i] += x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Query</span><span class="params">(<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(R == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = R; i &gt;= <span class="number">1</span>; i -= <span class="built_in">lowbit</span>(i))</span><br><span class="line">            <span class="built_in">Check</span>(i), res += C[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;F, G;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = <span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> PD;</span><br><span class="line">    PD = <span class="number">-1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="keyword">if</span>(a[i - <span class="number">1</span>] &gt; a[i]) &#123;PD = <span class="number">0</span>; <span class="keyword">break</span>;&#125; Ans += PD;</span><br><span class="line">    PD = <span class="number">-1</span>; <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="keyword">if</span>(a[i - <span class="number">1</span>] &lt; a[i]) &#123;PD = <span class="number">0</span>; <span class="keyword">break</span>;&#125; Ans += PD;</span><br><span class="line"></span><br><span class="line">    F.<span class="built_in">Add</span>(n, <span class="number">1</span>);    G.<span class="built_in">Add</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> S1 = G.<span class="built_in">Query</span>(a[i]);</span><br><span class="line">        <span class="keyword">int</span> S2 = F.<span class="built_in">Query</span>(n) - F.<span class="built_in">Query</span>(a[i] - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[i - <span class="number">1</span>] &lt; a[i]) G.<span class="built_in">Clear</span>();</span><br><span class="line">        <span class="keyword">if</span>(a[i - <span class="number">1</span>] &gt; a[i]) F.<span class="built_in">Clear</span>();</span><br><span class="line">        F.<span class="built_in">Add</span>(a[i - <span class="number">1</span>], S1), G.<span class="built_in">Add</span>(a[i - <span class="number">1</span>], S2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Ans += F.<span class="built_in">Query</span>(n) + G.<span class="built_in">Query</span>(n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Perm&lt;/h1&gt;
&lt;p&gt;Time Limit: 10 Sec Memory Limit: 256 MB&lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;很久以前，有一个 1~n的排列。&lt;br&gt;
　　这个排列太杂乱无章了，方老师想</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="DP" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/DP/"/>
    
    
    <category term="DP" scheme="https://www.bearchild.top/tags/DP/"/>
    
    <category term="树状数组" scheme="https://www.bearchild.top/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>[DP]卡牌游戏</title>
    <link href="https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP]%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F/"/>
    <id>https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP]%E5%8D%A1%E7%89%8C%E6%B8%B8%E6%88%8F/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-05-27T17:04:14.662Z</updated>
    
    <content type="html"><![CDATA[<h1>卡牌游戏</h1><p>Time Limit: 10 Sec Memory Limit: 128 MB</p><h2 id="Description">Description</h2><p>N个人坐成一圈玩游戏。一开始我们把所有玩家按顺时针从1到N编号。首先第一回合是玩家1作为庄家。每个回合庄家都会随机（即按相等的概率）从卡牌堆里选择一张卡片，假设卡片上的数字为X，则庄家首先把卡片上的数字向所有玩家展示，然后按顺时针从庄家位置数第X个人将被处决即退出游戏。然后卡片将会被放回卡牌堆里并重新洗牌。被处决的人按顺时针的下一个人将会作为下一轮的庄家。那么经过N-1轮后最后只会剩下一个人，即为本次游戏的胜者。现在你预先知道了总共有M张卡片，也知道每张卡片上的数字。现在你需要确定每个玩家胜出的概率。</p><p>这里有一个简单的例子：</p><p>例如一共有4个玩家，有四张卡片分别写着3,4,5,6.</p><p>第一回合，庄家是玩家1，假设他选择了一张写着数字5的卡片。那么按顺时针数1,2,3,4,1，最后玩家1被踢出游戏。</p><p>第二回合，庄家就是玩家1的下一个人，即玩家2.假设玩家2这次选择了一张数字6，那么2,3,4,2,3,4，玩家4被踢出游戏。</p><p>第三回合，玩家2再一次成为庄家。如果这一次玩家2再次选了6，则玩家3被踢出游戏，最后的胜者就是玩家2.</p><h2 id="Input">Input</h2><p>第一行包括两个整数N,M分别表示玩家个数和卡牌总数。</p><p>接下来一行是包含M个整数，分别给出每张卡片上写的数字。</p><h2 id="Output">Output</h2><p>输出一行包含N个百分比形式给出的实数，四舍五入到两位小数。分别给出从玩家1到玩家N的胜出概率，每个概率之间用空格隔开，最后不要有空格。</p><h2 id="Sample-Input">Sample Input</h2><p>5 5<br>　2 3 5 7 11</p><h2 id="Sample-Output">Sample Output</h2><p>22.72% 17.12% 15.36% 25.44% 19.36%</p><h2 id="HINT">HINT</h2><p>对于100%的数据，有1&lt;=N&lt;=50 1&lt;=M&lt;=50 1&lt;=每张卡片上的数字&lt;=50</p><h2 id="Solution">Solution</h2><p>首先，我们每次删除之后，钦定<strong>被删除的下一个位置的新标号为1</strong>，那么<strong>最后剩下的就是1</strong>，所以我们可以运用DP，令 <strong>f[i][j] 表示剩下i个人，j存活的概率</strong>。</p><p>那么显然可以<strong>从剩下一个人往多了推</strong>，考虑在i个人中删除掉标号为j，对新标号的影响：记<strong>被删除的标号为del</strong>，显然影响就是<strong>所有标号顺时针往后顺延 i-del 位</strong>，那么新标号就是 <strong>(j+i-del) % i</strong>。</p><p>这样就可以转移啦qwq。</p><h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">10007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> a[ONE];</span><br><span class="line"><span class="keyword">double</span> f[ONE][ONE];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();  m = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++)</span><br><span class="line">        a[i] = <span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=m; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> del = (a[k] - <span class="number">1</span>) % i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(del == j) <span class="keyword">continue</span>;</span><br><span class="line">                f[i][j] += f[i<span class="number">-1</span>][(j + i - del)%i] / m;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j != <span class="number">1</span>) <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>,f[n][j] * <span class="number">100</span>), <span class="built_in">putchar</span>(<span class="string">&#x27;%&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;卡牌游戏&lt;/h1&gt;
&lt;p&gt;Time Limit: 10 Sec Memory Limit: 128 MB&lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;N个人坐成一圈玩游戏。一开始我们把所有玩家按顺时针从1到N编号。首先第一回合</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="DP" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/DP/"/>
    
    
    <category term="DP" scheme="https://www.bearchild.top/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>[DP]吉夫特</title>
    <link href="https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP]%E5%90%89%E5%A4%AB%E7%89%B9/"/>
    <id>https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP]%E5%90%89%E5%A4%AB%E7%89%B9/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-05-27T16:55:07.423Z</updated>
    
    <content type="html"><![CDATA[<h1>吉夫特</h1><p>Time Limit: 15 Sec Memory Limit: 512 MB</p><h2 id="Description">Description</h2><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528005449.png" alt="img"></p><h2 id="Input">Input</h2><p>第一行一个整数n。<br>　　接下来n行，每行一个整数，这n行中的第i行，表示ai。</p><h2 id="Output">Output</h2><p>一行一个整数表示答案。</p><h2 id="Sample-Input">Sample Input</h2><p>4<br>　　15<br>　　7<br>　　3<br>　　1</p><h2 id="Sample-Output">Sample Output</h2><p>11</p><h2 id="HINT">HINT</h2><p><img src="https://bearchildbucket-1300061763.cos.ap-guangzhou.myqcloud.com/img/articles/20210528005443.png" alt="img"></p><h2 id="Main-idea">Main idea</h2><p>给定一个序列，问有多少个子序列满足相邻的数构成的组合数都为奇数。</p><h2 id="Solution">Solution</h2><p>首先我们用Lucas定理推一推可以知道：<strong>C(n,m)为奇数当且仅当n&amp;m=m</strong>。</p><p>有了这个定理就好办了，我们可以显然地想到DP：通过<strong>枚举数在二进制下的子集</strong>转移，这样保证了可以转移过去。</p><p>由于序列每个数都不同，且最大值为233333，所以效率是**O(3^18)**的。</p><h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">300005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,x;</span><br><span class="line"><span class="keyword">int</span> f[ONE];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    n = <span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="built_in">get</span>();</span><br><span class="line">        <span class="keyword">int</span> record = (f[x] + <span class="number">1</span>) % MOD;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> sub=x; sub; sub=(sub<span class="number">-1</span>) &amp; x)</span><br><span class="line">            f[sub] = (f[sub] + record) % MOD;</span><br><span class="line">        Ans = (Ans + record) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Ans-n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;吉夫特&lt;/h1&gt;
&lt;p&gt;Time Limit: 15 Sec Memory Limit: 512 MB&lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://bearchildbucket-13000</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="DP" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/DP/"/>
    
    
    <category term="DP" scheme="https://www.bearchild.top/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>[DP]字串变化</title>
    <link href="https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP]%E5%AD%97%E4%B8%B2%E5%8F%98%E5%8C%96/"/>
    <id>https://www.bearchild.top/2021/05/27/%E7%AE%97%E6%B3%95%E9%A2%98/[DP]%E5%AD%97%E4%B8%B2%E5%8F%98%E5%8C%96/</id>
    <published>2021-05-26T16:00:00.000Z</published>
    <updated>2021-05-27T17:02:29.304Z</updated>
    
    <content type="html"><![CDATA[<h1>字串变化</h1><p>Time Limit: 10 Sec Memory Limit: 128 MB</p><h2 id="Description">Description</h2><p>定义一个（大写字母）字符串集合{S},初始时值包含一个给定的字符串S1，每次从中任意取出一个字符串，将它变换后再放入集合中。要求新的字符串在集合中没有出现过。<br>　　变换的规则：在变化前、后，字符串均有大写字母组成，每次只改动一个位置，使它的ASCLL加1。例如：‘A’ –&gt; ‘B’。如果位置为‘Z’，则无法改动。<br>若干次操作后，该集合的元素个数一定会达到最大。<br>　　对最后的集合（已按字典序排列）中的Si（i &gt;1），定义Sj=P[Si]（Si由Sj变化而来）。<br>　　求最大元素个数及{P}的方案数。（详情见样例。）</p><h2 id="Input">Input</h2><p>第1行有1个由大写字母组成的字符串。</p><h2 id="Output">Output</h2><p>输出2行，每行包含一个数，第一行表示最大元素个数，第二行表示方案数，答案都模10007。</p><h2 id="Sample-Input">Sample Input</h2><p>XYZ</p><h2 id="Sample-Output">Sample Output</h2><p>6<br>　　4</p><p>explain：<br>　　最终集合为{XYZ,XZZ,YYZ,YZZ,ZYZ,ZZZ}<br>　　{P}方案有{0,1,1,2,3,4},{0,1,1,3,3,4},{0,1,1,2,3,5},{0,1,1,3,3,5}</p><h2 id="HINT">HINT</h2><p>初始字符串长度&lt;=1000.</p><h2 id="Solution">Solution</h2><p>第一问<strong>乘一下</strong>就好了，这里讨论一下第二问。<br>　　用**‘Z’-ai<strong>得到一个数字串，那么操作就变成了：<strong>每次将一个数字-1，最后全部减成0</strong>。比如</strong>’XYZ’<strong>，我们将其变成</strong>’012’<strong>。<br>　　然后考虑</strong>状态<strong>是怎么变来的：<br>　　显然，有</strong>几位是不满<strong>的，就</strong>有几种转移来的方法**（其中任意一位数字+1，即可得到一种父状态）。<br>　　记一个状态可以<strong>由k个状态转移过来</strong>，然后答案显然就是：<strong>πk</strong>。<br>　　我们考虑，<br>　　我们得到一个<strong>长度为n</strong>的<strong>01串vis</strong>，如果这一位是<strong>1表示这一位不满</strong>。<br>　　那么这个<strong>01串对答案的贡献</strong>就是：<strong>k ^ (π [vis_i=1]*a_i)</strong>。（<strong>k表示1的个数</strong>）<br>　　为什么呢？<strong>对于一个位置</strong>，当<strong>这一位是[0,ai-1]都是不满的</strong>，<strong>个数</strong>就是<strong>ai</strong>。<br>　　然后这样<strong>枚举</strong>每一位是否满，可以做到<strong>O(2^n)</strong>。<br>　　我们考虑<strong>优化</strong>：<br>　　<strong>把k相同的放在一起计算</strong>，记贡献为<strong>k^num[k]</strong>。<strong>num[k]<strong>即是</strong>各种1的个数为k情况的指数之和</strong>。<br>　　<strong>num</strong>怎么得到呢？<br>　　用<strong>f[i][j]<strong>表示</strong>到了第i位，有j个数不满的方案数</strong>，显然可以得到这样的递推式子：<br>　　<strong>f[i][j] = f[i-1][j] + f[i-1][j-1] * (‘Z’-a[i])</strong><br>　　然后<strong>Ans = π k^f[n][k]</strong>，就解决了这题qwq。</p><h2 id="Code">Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> s64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ONE = <span class="number">4005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">10007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[ONE];</span><br><span class="line"><span class="keyword">char</span> ch[ONE];</span><br><span class="line"><span class="keyword">int</span> f[ONE][ONE];</span><br><span class="line"><span class="keyword">int</span> Ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">1</span>,Q=<span class="number">1</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span> || c&gt;<span class="number">57</span> )</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;-&#x27;</span>)Q=<span class="number">-1</span>;</span><br><span class="line">    res=c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>( (c=<span class="built_in">getchar</span>())&gt;=<span class="number">48</span> &amp;&amp; c&lt;=<span class="number">57</span> )</span><br><span class="line">        res=res*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">return</span> res*Q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Quickpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = (s64)res * a % MOD;</span><br><span class="line">        a = (s64)a * a % MOD;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ch + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(ch + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        a[i] = <span class="string">&#x27;Z&#x27;</span> - ch[i];</span><br><span class="line"></span><br><span class="line">    Ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        Ans = (s64)Ans * (a[i]+<span class="number">1</span>) % MOD;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Ans);    Ans = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=i; j++)</span><br><span class="line">            f[i][j] = (f[i<span class="number">-1</span>][j] + f[i<span class="number">-1</span>][j<span class="number">-1</span>] * a[i] % (MOD - <span class="number">1</span>)) % (MOD - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;=n; k++)</span><br><span class="line">        Ans = (s64)Ans * <span class="built_in">Quickpow</span>(k, f[n][k]) % MOD;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, Ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;字串变化&lt;/h1&gt;
&lt;p&gt;Time Limit: 10 Sec Memory Limit: 128 MB&lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;Description&lt;/h2&gt;
&lt;p&gt;定义一个（大写字母）字符串集合{S},初始时值包含一个给定的字符串S1，每次</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="DP" scheme="https://www.bearchild.top/categories/%E7%AE%97%E6%B3%95/DP/"/>
    
    
    <category term="DP" scheme="https://www.bearchild.top/tags/DP/"/>
    
  </entry>
  
</feed>
